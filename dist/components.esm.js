import e from"vue";import n from"http";import t from"https";import i from"url";import a from"stream";import r from"assert";import o from"tty";import s from"util";import c from"os";import l from"zlib";import p from"path";import u from"fs";import{Popover as d,Field as m,Popup as f,Search as h,Picker as v,Icon as x,RadioGroup as g,CellGroup as b,Cell as y,Radio as _,Pagination as w,DatetimePicker as A,Tabs as C,Tab as S,Area as k,PullRefresh as j,List as T,Button as E,Loading as P,NavBar as L,ActionSheet as B}from"vant";
/**
  * vee-validate v3.4.15
  * (c) 2023 Abdelrahman Awad
  * @license MIT
  */var D={validate:function(e,n){var t=(void 0===n?{}:n).multiple,i=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return t&&!Array.isArray(e)&&(e=String(e).split(",").map((function(e){return e.trim()}))),Array.isArray(e)?e.every((function(e){return i.test(String(e))})):i.test(String(e))},params:[{name:"multiple",default:!1}]};function $(e){return null==e}var F=function(e,n){var t=n.length;return $(e)?t>=0:Array.isArray(e)?e.every((function(e){return F(e,{length:t})})):String(e).length<=t},I={validate:F,params:[{name:"length",cast:function(e){return Number(e)}}]},O=function(e,n){var t=n.max;return!$(e)&&""!==e&&(Array.isArray(e)?e.length>0&&e.every((function(e){return O(e,{max:t})})):Number(e)<=t)},R={validate:O,params:[{name:"max",cast:function(e){return Number(e)}}]},N=function(e,n){var t=n.length;return!$(e)&&(Array.isArray(e)?e.every((function(e){return N(e,{length:t})})):String(e).length>=t)},z={validate:N,params:[{name:"length",cast:function(e){return Number(e)}}]},q={validate:function(e,n){var t,i=(void 0===n?{allowFalse:!0}:n).allowFalse,a={valid:!1,required:!0};return $(e)||(t=e,Array.isArray(t)&&0===t.length)?a:!1!==e||i?(a.valid=!!String(e).trim().length,a):a},params:[{name:"allowFalse",default:!0}],computesRequired:!0};const M=function(e){if(e){var n=new Array;if(n=e.split(""),e.length<2||null=={11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",21:"辽宁",22:"吉林",23:"黑龙江",31:"上海",32:"江苏",33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",42:"湖北",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆",51:"四川",52:"贵州",53:"云南",54:"西藏",61:"陕西",62:"甘肃",63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外"}[parseInt(e.substr(0,2))])return"身份证地区非法!";switch(e.length){case 15:return!!((parseInt(e.substr(6,2))+1900)%400==0||(parseInt(e.substr(6,2))+1900)%100!=0&&(parseInt(e.substr(6,2))+1900)%4==0?/^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$/:/^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$/).test(e)||"身份证号码出生日期超出范围或含有非法字符!";case 18:if((parseInt(e.substr(6,4))%400==0||parseInt(e.substr(6,4))%100!=0&&parseInt(e.substr(6,4))%4==0?/^[1-9][0-9]{5}[0-9]{4}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$/:/^[1-9][0-9]{5}[0-9]{4}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$/).test(e)){var t=7*(parseInt(n[0])+parseInt(n[10]))+9*(parseInt(n[1])+parseInt(n[11]))+10*(parseInt(n[2])+parseInt(n[12]))+5*(parseInt(n[3])+parseInt(n[13]))+8*(parseInt(n[4])+parseInt(n[14]))+4*(parseInt(n[5])+parseInt(n[15]))+2*(parseInt(n[6])+parseInt(n[16]))+1*parseInt(n[7])+6*parseInt(n[8])+3*parseInt(n[9]);return"10X98765432".substr(t%11,1)==n[17]||"身份证号码校验错误!"}return"身份证号码出生日期超出范围或含有非法字符!";default:return"身份证号码位数不对!"}}},V=function(e){return!(e&&(11!=e.length||!/^[1]+[3,5,7,8]+\d{9}/.test(e)))||"请正确填写手机号"},U=function(e,n){return!!/(^[1-9]([0-9]+)?(\.[0-9]{1,2})?$)|(^(0){1}$)|(^[0-9]\.[0-9]([0-9])?$)/.test(e)||n+"必须输入金额"};var W="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function Y(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var H,K={exports:{}},G={exports:{}},J=function(e,n){return function(){for(var t=new Array(arguments.length),i=0;i<t.length;i++)t[i]=arguments[i];return e.apply(n,t)}},Z=J,X=Object.prototype.toString,Q=(H=Object.create(null),function(e){var n=X.call(e);return H[n]||(H[n]=n.slice(8,-1).toLowerCase())});function ee(e){return e=e.toLowerCase(),function(n){return Q(n)===e}}function ne(e){return Array.isArray(e)}function te(e){return void 0===e}var ie=ee("ArrayBuffer");function ae(e){return null!==e&&"object"==typeof e}function re(e){if("object"!==Q(e))return!1;var n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}var oe=ee("Date"),se=ee("File"),ce=ee("Blob"),le=ee("FileList");function pe(e){return"[object Function]"===X.call(e)}var ue=ee("URLSearchParams");function de(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),ne(e))for(var t=0,i=e.length;t<i;t++)n.call(null,e[t],t,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&n.call(null,e[a],a,e)}var me,fe=(me="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return me&&e instanceof me}),he={isArray:ne,isArrayBuffer:ie,isBuffer:function(e){return null!==e&&!te(e)&&null!==e.constructor&&!te(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var n="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||X.call(e)===n||pe(e.toString)&&e.toString()===n)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&ie(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:ae,isPlainObject:re,isUndefined:te,isDate:oe,isFile:se,isBlob:ce,isFunction:pe,isStream:function(e){return ae(e)&&pe(e.pipe)},isURLSearchParams:ue,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:de,merge:function e(){var n={};function t(t,i){re(n[i])&&re(t)?n[i]=e(n[i],t):re(t)?n[i]=e({},t):ne(t)?n[i]=t.slice():n[i]=t}for(var i=0,a=arguments.length;i<a;i++)de(arguments[i],t);return n},extend:function(e,n,t){return de(n,(function(n,i){e[i]=t&&"function"==typeof n?Z(n,t):n})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,n,t,i){e.prototype=Object.create(n.prototype,i),e.prototype.constructor=e,t&&Object.assign(e.prototype,t)},toFlatObject:function(e,n,t){var i,a,r,o={};n=n||{};do{for(a=(i=Object.getOwnPropertyNames(e)).length;a-- >0;)o[r=i[a]]||(n[r]=e[r],o[r]=!0);e=Object.getPrototypeOf(e)}while(e&&(!t||t(e,n))&&e!==Object.prototype);return n},kindOf:Q,kindOfTest:ee,endsWith:function(e,n,t){e=String(e),(void 0===t||t>e.length)&&(t=e.length),t-=n.length;var i=e.indexOf(n,t);return-1!==i&&i===t},toArray:function(e){if(!e)return null;var n=e.length;if(te(n))return null;for(var t=new Array(n);n-- >0;)t[n]=e[n];return t},isTypedArray:fe,isFileList:le},ve=he;function xe(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var ge=function(e,n,t){if(!n)return e;var i;if(t)i=t(n);else if(ve.isURLSearchParams(n))i=n.toString();else{var a=[];ve.forEach(n,(function(e,n){null!=e&&(ve.isArray(e)?n+="[]":e=[e],ve.forEach(e,(function(e){ve.isDate(e)?e=e.toISOString():ve.isObject(e)&&(e=JSON.stringify(e)),a.push(xe(n)+"="+xe(e))})))})),i=a.join("&")}if(i){var r=e.indexOf("#");-1!==r&&(e=e.slice(0,r)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e},be=he;function ye(){this.handlers=[]}ye.prototype.use=function(e,n,t){return this.handlers.push({fulfilled:e,rejected:n,synchronous:!!t&&t.synchronous,runWhen:t?t.runWhen:null}),this.handlers.length-1},ye.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},ye.prototype.forEach=function(e){be.forEach(this.handlers,(function(n){null!==n&&e(n)}))};var _e,we,Ae=ye,Ce=he;function Se(){if(we)return _e;we=1;var e=he;function n(e,n,t,i,a){Error.call(this),this.message=e,this.name="AxiosError",n&&(this.code=n),t&&(this.config=t),i&&(this.request=i),a&&(this.response=a)}e.inherits(n,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var t=n.prototype,i={};return["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){i[e]={value:e}})),Object.defineProperties(n,i),Object.defineProperty(t,"isAxiosError",{value:!0}),n.from=function(i,a,r,o,s,c){var l=Object.create(t);return e.toFlatObject(i,l,(function(e){return e!==Error.prototype})),n.call(l,i.message,a,r,o,s),l.name=i.name,c&&Object.assign(l,c),l},_e=n}var ke,je,Te,Ee,Pe,Le,Be={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1};function De(){if(je)return ke;je=1;var e=he;return ke=function(n,t){t=t||new FormData;var i=[];function a(n){return null===n?"":e.isDate(n)?n.toISOString():e.isArrayBuffer(n)||e.isTypedArray(n)?"function"==typeof Blob?new Blob([n]):Buffer.from(n):n}return function n(r,o){if(e.isPlainObject(r)||e.isArray(r)){if(-1!==i.indexOf(r))throw Error("Circular reference detected in "+o);i.push(r),e.forEach(r,(function(i,r){if(!e.isUndefined(i)){var s,c=o?o+"."+r:r;if(i&&!o&&"object"==typeof i)if(e.endsWith(r,"{}"))i=JSON.stringify(i);else if(e.endsWith(r,"[]")&&(s=e.toArray(i)))return void s.forEach((function(n){!e.isUndefined(n)&&t.append(c,a(n))}));n(i,c)}})),i.pop()}else t.append(o,a(r))}(n),t},ke}function $e(){if(Ee)return Te;Ee=1;var e=Se();return Te=function(n,t,i){var a=i.config.validateStatus;i.status&&a&&!a(i.status)?t(new e("Request failed with status code "+i.status,[e.ERR_BAD_REQUEST,e.ERR_BAD_RESPONSE][Math.floor(i.status/100)-4],i.config,i.request,i)):n(i)}}function Fe(){if(Le)return Pe;Le=1;var e=he;return Pe=e.isStandardBrowserEnv()?{write:function(n,t,i,a,r,o){var s=[];s.push(n+"="+encodeURIComponent(t)),e.isNumber(i)&&s.push("expires="+new Date(i).toGMTString()),e.isString(a)&&s.push("path="+a),e.isString(r)&&s.push("domain="+r),!0===o&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}}var Ie,Oe,Re,Ne,ze,qe,Me,Ve,Ue,We,Ye=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)},He=function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e},Ke=function(e,n){return e&&!Ye(n)?He(e,n):n};function Ge(){if(Oe)return Ie;Oe=1;var e=he,n=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];return Ie=function(t){var i,a,r,o={};return t?(e.forEach(t.split("\n"),(function(t){if(r=t.indexOf(":"),i=e.trim(t.substr(0,r)).toLowerCase(),a=e.trim(t.substr(r+1)),i){if(o[i]&&n.indexOf(i)>=0)return;o[i]="set-cookie"===i?(o[i]?o[i]:[]).concat([a]):o[i]?o[i]+", "+a:a}})),o):o}}function Je(){if(Ne)return Re;Ne=1;var e=he;return Re=e.isStandardBrowserEnv()?function(){var n,t=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a");function a(e){var n=e;return t&&(i.setAttribute("href",n),n=i.href),i.setAttribute("href",n),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:"/"===i.pathname.charAt(0)?i.pathname:"/"+i.pathname}}return n=a(window.location.href),function(t){var i=e.isString(t)?a(t):t;return i.protocol===n.protocol&&i.host===n.host}}():function(){return!0}}function Ze(){if(qe)return ze;qe=1;var e=Se();function n(n){e.call(this,null==n?"canceled":n,e.ERR_CANCELED),this.name="CanceledError"}return he.inherits(n,e,{__CANCEL__:!0}),ze=n}function Xe(){return Ve?Me:(Ve=1,Me=function(e){var n=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return n&&n[1]||""})}var Qe,en,nn,tn,an,rn={exports:{}},on={exports:{}},sn={exports:{}};function cn(){if(en)return Qe;en=1;var e=1e3,n=60*e,t=60*n,i=24*t,a=7*i,r=365.25*i;function o(e,n,t,i){var a=n>=1.5*t;return Math.round(e/t)+" "+i+(a?"s":"")}return Qe=function(s,c){c=c||{};var l=typeof s;if("string"===l&&s.length>0)return function(o){if((o=String(o)).length>100)return;var s=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(o);if(!s)return;var c=parseFloat(s[1]);switch((s[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return c*r;case"weeks":case"week":case"w":return c*a;case"days":case"day":case"d":return c*i;case"hours":case"hour":case"hrs":case"hr":case"h":return c*t;case"minutes":case"minute":case"mins":case"min":case"m":return c*n;case"seconds":case"second":case"secs":case"sec":case"s":return c*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return c;default:return}}(s);if("number"===l&&isFinite(s))return c.long?function(a){var r=Math.abs(a);if(r>=i)return o(a,r,i,"day");if(r>=t)return o(a,r,t,"hour");if(r>=n)return o(a,r,n,"minute");if(r>=e)return o(a,r,e,"second");return a+" ms"}(s):function(a){var r=Math.abs(a);if(r>=i)return Math.round(a/i)+"d";if(r>=t)return Math.round(a/t)+"h";if(r>=n)return Math.round(a/n)+"m";if(r>=e)return Math.round(a/e)+"s";return a+"ms"}(s);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(s))}}function ln(){if(tn)return nn;return tn=1,nn=function(e){function n(e){let i,a,r,o=null;function s(...e){if(!s.enabled)return;const t=s,a=Number(new Date),r=a-(i||a);t.diff=r,t.prev=i,t.curr=a,i=a,e[0]=n.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((i,a)=>{if("%%"===i)return"%";o++;const r=n.formatters[a];if("function"==typeof r){const n=e[o];i=r.call(t,n),e.splice(o,1),o--}return i})),n.formatArgs.call(t,e);(t.log||n.log).apply(t,e)}return s.namespace=e,s.useColors=n.useColors(),s.color=n.selectColor(e),s.extend=t,s.destroy=n.destroy,Object.defineProperty(s,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(a!==n.namespaces&&(a=n.namespaces,r=n.enabled(e)),r),set:e=>{o=e}}),"function"==typeof n.init&&n.init(s),s}function t(e,t){const i=n(this.namespace+(void 0===t?":":t)+e);return i.log=this.log,i}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},n.disable=function(){const e=[...n.names.map(i),...n.skips.map(i).map((e=>"-"+e))].join(",");return n.enable(""),e},n.enable=function(e){let t;n.save(e),n.namespaces=e,n.names=[],n.skips=[];const i=("string"==typeof e?e:"").split(/[\s,]+/),a=i.length;for(t=0;t<a;t++)i[t]&&("-"===(e=i[t].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.slice(1)+"$")):n.names.push(new RegExp("^"+e+"$")))},n.enabled=function(e){if("*"===e[e.length-1])return!0;let t,i;for(t=0,i=n.skips.length;t<i;t++)if(n.skips[t].test(e))return!1;for(t=0,i=n.names.length;t<i;t++)if(n.names[t].test(e))return!0;return!1},n.humanize=cn(),n.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((t=>{n[t]=e[t]})),n.names=[],n.skips=[],n.formatters={},n.selectColor=function(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return n.colors[Math.abs(t)%n.colors.length]},n.enable(n.load()),n},nn}var pn,un,dn,mn,fn,hn,vn,xn,gn,bn,yn,_n,wn,An={exports:{}};function Cn(){return un?pn:(un=1,pn=(e,n)=>{n=n||process.argv;const t=e.startsWith("-")?"":1===e.length?"-":"--",i=n.indexOf(t+e),a=n.indexOf("--");return-1!==i&&(-1===a||i<a)})}function Sn(){if(mn)return dn;mn=1;const e=c,n=Cn(),t=process.env;let i;function a(a){const r=function(a){if(!1===i)return 0;if(n("color=16m")||n("color=full")||n("color=truecolor"))return 3;if(n("color=256"))return 2;if(a&&!a.isTTY&&!0!==i)return 0;const r=i?1:0;if("win32"===process.platform){const n=e.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(n[0])>=10&&Number(n[2])>=10586?Number(n[2])>=14931?3:2:1}if("CI"in t)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some((e=>e in t))||"codeship"===t.CI_NAME?1:r;if("TEAMCITY_VERSION"in t)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(t.TEAMCITY_VERSION)?1:0;if("truecolor"===t.COLORTERM)return 3;if("TERM_PROGRAM"in t){const e=parseInt((t.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(t.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(t.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(t.TERM)||"COLORTERM"in t?1:(t.TERM,r)}(a);return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(r)}return n("no-color")||n("no-colors")||n("color=false")?i=!1:(n("color")||n("colors")||n("color=true")||n("color=always"))&&(i=!0),"FORCE_COLOR"in t&&(i=0===t.FORCE_COLOR.length||0!==parseInt(t.FORCE_COLOR,10)),dn={supportsColor:a,stdout:a(process.stdout),stderr:a(process.stderr)}}function kn(){return fn||(fn=1,function(e,n){const t=o,i=s;n.init=function(e){e.inspectOpts={};const t=Object.keys(n.inspectOpts);for(let i=0;i<t.length;i++)e.inspectOpts[t[i]]=n.inspectOpts[t[i]]},n.log=function(...e){return process.stderr.write(i.format(...e)+"\n")},n.formatArgs=function(t){const{namespace:i,useColors:a}=this;if(a){const n=this.color,a="[3"+(n<8?n:"8;5;"+n),r=`  ${a};1m${i} [0m`;t[0]=r+t[0].split("\n").join("\n"+r),t.push(a+"m+"+e.exports.humanize(this.diff)+"[0m")}else t[0]=function(){if(n.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+i+" "+t[0]},n.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},n.load=function(){return process.env.DEBUG},n.useColors=function(){return"colors"in n.inspectOpts?Boolean(n.inspectOpts.colors):t.isatty(process.stderr.fd)},n.destroy=i.deprecate((()=>{}),"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),n.colors=[6,2,3,4,5,1];try{const e=Sn();e&&(e.stderr||e).level>=2&&(n.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}n.inspectOpts=Object.keys(process.env).filter((e=>/^debug_/i.test(e))).reduce(((e,n)=>{const t=n.substring(6).toLowerCase().replace(/_([a-z])/g,((e,n)=>n.toUpperCase()));let i=process.env[n];return i=!!/^(yes|on|true|enabled)$/i.test(i)||!/^(no|off|false|disabled)$/i.test(i)&&("null"===i?null:Number(i)),e[t]=i,e}),{}),e.exports=ln()(n);const{formatters:a}=e.exports;a.o=function(e){return this.inspectOpts.colors=this.useColors,i.inspect(e,this.inspectOpts).split("\n").map((e=>e.trim())).join(" ")},a.O=function(e){return this.inspectOpts.colors=this.useColors,i.inspect(e,this.inspectOpts)}}(An,An.exports)),An.exports}function jn(){return hn||(hn=1,e=on,"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=(an||(an=1,function(e,n){n.formatArgs=function(n){if(n[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+n[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const t="color: "+this.color;n.splice(1,0,t,"color: inherit");let i=0,a=0;n[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(i++,"%c"===e&&(a=i))})),n.splice(a,0,t)},n.save=function(e){try{e?n.storage.setItem("debug",e):n.storage.removeItem("debug")}catch(e){}},n.load=function(){let e;try{e=n.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},n.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},n.storage=function(){try{return localStorage}catch(e){}}(),n.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),n.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],n.log=console.debug||console.log||(()=>{}),e.exports=ln()(n);const{formatters:t}=e.exports;t.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}(sn,sn.exports)),sn.exports):e.exports=kn()),on.exports;var e}function Tn(){if(gn)return rn.exports;gn=1;var e=i,o=e.URL,s=n,c=t,l=a.Writable,p=r,u=function(){return xn||(xn=1,vn=function(){if(!e){try{e=jn()("follow-redirects")}catch(e){}"function"!=typeof e&&(e=function(){})}e.apply(null,arguments)}),vn;var e}(),d=["abort","aborted","connect","error","socket","timeout"],m=Object.create(null);d.forEach((function(e){m[e]=function(n,t,i){this._redirectable.emit(e,n,t,i)}}));var f=S("ERR_INVALID_URL","Invalid URL",TypeError),h=S("ERR_FR_REDIRECTION_FAILURE","Redirected request failed"),v=S("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded"),x=S("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),g=S("ERR_STREAM_WRITE_AFTER_END","write after end"),b=l.prototype.destroy||w;function y(e,n){l.call(this),this._sanitizeOptions(e),this._options=e,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],n&&this.on("response",n);var t=this;this._onNativeResponse=function(e){t._processResponse(e)},this._performRequest()}function _(n){var t={maxRedirects:21,maxBodyLength:10485760},i={};return Object.keys(n).forEach((function(a){var r=a+":",s=i[r]=n[a],c=t[a]=Object.create(s);Object.defineProperties(c,{request:{value:function(n,a,s){if(j(n)){var c;try{c=A(new o(n))}catch(t){c=e.parse(n)}if(!j(c.protocol))throw new f({input:n});n=c}else o&&n instanceof o?n=A(n):(s=a,a=n,n={protocol:r});return T(a)&&(s=a,a=null),(a=Object.assign({maxRedirects:t.maxRedirects,maxBodyLength:t.maxBodyLength},n,a)).nativeProtocols=i,j(a.host)||j(a.hostname)||(a.hostname="::1"),p.equal(a.protocol,r,"protocol mismatch"),u("options",a),new y(a,s)},configurable:!0,enumerable:!0,writable:!0},get:{value:function(e,n,t){var i=c.request(e,n,t);return i.end(),i},configurable:!0,enumerable:!0,writable:!0}})})),t}function w(){}function A(e){var n={protocol:e.protocol,hostname:e.hostname.startsWith("[")?e.hostname.slice(1,-1):e.hostname,hash:e.hash,search:e.search,pathname:e.pathname,path:e.pathname+e.search,href:e.href};return""!==e.port&&(n.port=Number(e.port)),n}function C(e,n){var t;for(var i in n)e.test(i)&&(t=n[i],delete n[i]);return null==t?void 0:String(t).trim()}function S(e,n,t){function i(t){Error.captureStackTrace(this,this.constructor),Object.assign(this,t||{}),this.code=e,this.message=this.cause?n+": "+this.cause.message:n}return i.prototype=new(t||Error),i.prototype.constructor=i,i.prototype.name="Error ["+e+"]",i}function k(e,n){for(var t of d)e.removeListener(t,m[t]);e.on("error",w),e.destroy(n)}function j(e){return"string"==typeof e||e instanceof String}function T(e){return"function"==typeof e}return y.prototype=Object.create(l.prototype),y.prototype.abort=function(){k(this._currentRequest),this._currentRequest.abort(),this.emit("abort")},y.prototype.destroy=function(e){return k(this._currentRequest,e),b.call(this,e),this},y.prototype.write=function(e,n,t){if(this._ending)throw new g;if(!j(e)&&("object"!=typeof(i=e)||!("length"in i)))throw new TypeError("data should be a string, Buffer or Uint8Array");var i;T(n)&&(t=n,n=null),0!==e.length?this._requestBodyLength+e.length<=this._options.maxBodyLength?(this._requestBodyLength+=e.length,this._requestBodyBuffers.push({data:e,encoding:n}),this._currentRequest.write(e,n,t)):(this.emit("error",new x),this.abort()):t&&t()},y.prototype.end=function(e,n,t){if(T(e)?(t=e,e=n=null):T(n)&&(t=n,n=null),e){var i=this,a=this._currentRequest;this.write(e,n,(function(){i._ended=!0,a.end(null,null,t)})),this._ending=!0}else this._ended=this._ending=!0,this._currentRequest.end(null,null,t)},y.prototype.setHeader=function(e,n){this._options.headers[e]=n,this._currentRequest.setHeader(e,n)},y.prototype.removeHeader=function(e){delete this._options.headers[e],this._currentRequest.removeHeader(e)},y.prototype.setTimeout=function(e,n){var t=this;function i(n){n.setTimeout(e),n.removeListener("timeout",n.destroy),n.addListener("timeout",n.destroy)}function a(n){t._timeout&&clearTimeout(t._timeout),t._timeout=setTimeout((function(){t.emit("timeout"),r()}),e),i(n)}function r(){t._timeout&&(clearTimeout(t._timeout),t._timeout=null),t.removeListener("abort",r),t.removeListener("error",r),t.removeListener("response",r),t.removeListener("close",r),n&&t.removeListener("timeout",n),t.socket||t._currentRequest.removeListener("socket",a)}return n&&this.on("timeout",n),this.socket?a(this.socket):this._currentRequest.once("socket",a),this.on("socket",i),this.on("abort",r),this.on("error",r),this.on("response",r),this.on("close",r),this},["flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach((function(e){y.prototype[e]=function(n,t){return this._currentRequest[e](n,t)}})),["aborted","connection","socket"].forEach((function(e){Object.defineProperty(y.prototype,e,{get:function(){return this._currentRequest[e]}})})),y.prototype._sanitizeOptions=function(e){if(e.headers||(e.headers={}),e.host&&(e.hostname||(e.hostname=e.host),delete e.host),!e.pathname&&e.path){var n=e.path.indexOf("?");n<0?e.pathname=e.path:(e.pathname=e.path.substring(0,n),e.search=e.path.substring(n))}},y.prototype._performRequest=function(){var n=this._options.protocol,t=this._options.nativeProtocols[n];if(t){if(this._options.agents){var i=n.slice(0,-1);this._options.agent=this._options.agents[i]}var a=this._currentRequest=t.request(this._options,this._onNativeResponse);for(var r of(a._redirectable=this,d))a.on(r,m[r]);if(this._currentUrl=/^\//.test(this._options.path)?e.format(this._options):this._options.path,this._isRedirect){var o=0,s=this,c=this._requestBodyBuffers;!function e(n){if(a===s._currentRequest)if(n)s.emit("error",n);else if(o<c.length){var t=c[o++];a.finished||a.write(t.data,t.encoding,e)}else s._ended&&a.end()}()}}else this.emit("error",new TypeError("Unsupported protocol "+n))},y.prototype._processResponse=function(n){var t=n.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:n.headers,statusCode:t});var i=n.headers.location;if(!i||!1===this._options.followRedirects||t<300||t>=400)return n.responseUrl=this._currentUrl,n.redirects=this._redirects,this.emit("response",n),void(this._requestBodyBuffers=[]);if(k(this._currentRequest),n.destroy(),++this._redirectCount>this._options.maxRedirects)this.emit("error",new v);else{var a,r=this._options.beforeRedirect;r&&(a=Object.assign({Host:n.req.getHeader("host")},this._options.headers));var o=this._options.method;((301===t||302===t)&&"POST"===this._options.method||303===t&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],C(/^content-/i,this._options.headers));var s,c=C(/^host$/i,this._options.headers),l=e.parse(this._currentUrl),d=c||l.host,m=/^\w+:/.test(i)?this._currentUrl:e.format(Object.assign(l,{host:d}));try{s=e.resolve(m,i)}catch(e){return void this.emit("error",new h({cause:e}))}u("redirecting to",s),this._isRedirect=!0;var f=e.parse(s);if(Object.assign(this._options,f),(f.protocol!==l.protocol&&"https:"!==f.protocol||f.host!==d&&!function(e,n){p(j(e)&&j(n));var t=e.length-n.length-1;return t>0&&"."===e[t]&&e.endsWith(n)}(f.host,d))&&C(/^(?:authorization|cookie)$/i,this._options.headers),T(r)){var x={headers:n.headers,statusCode:t},g={url:m,method:o,headers:a};try{r(this._options,x,g)}catch(e){return void this.emit("error",e)}this._sanitizeOptions(this._options)}try{this._performRequest()}catch(e){this.emit("error",new h({cause:e}))}}},rn.exports=_({http:s,https:c}),rn.exports.wrap=_,rn.exports}function En(){return yn?bn:(yn=1,bn={version:"0.27.2"})}function Pn(){if(wn)return _n;wn=1;var e=he,a=$e(),r=Ke,o=ge,s=n,c=t,p=Tn().http,u=Tn().https,d=i,m=l,f=En().version,h=Be,v=Se(),x=Ze(),g=/https:?/,b=["http:","https:","file:"];function y(e,n,t){if(e.hostname=n.host,e.host=n.host,e.port=n.port,e.path=t,n.auth){var i=Buffer.from(n.auth.username+":"+n.auth.password,"utf8").toString("base64");e.headers["Proxy-Authorization"]="Basic "+i}e.beforeRedirect=function(e){e.headers.host=e.host,y(e,n,e.href)}}return _n=function(n){return new Promise((function(t,i){var l;function _(){n.cancelToken&&n.cancelToken.unsubscribe(l),n.signal&&n.signal.removeEventListener("abort",l)}var w=function(e){_(),t(e)},A=!1,C=function(e){_(),A=!0,i(e)},S=n.data,k=n.headers,j={};if(Object.keys(k).forEach((function(e){j[e.toLowerCase()]=e})),"user-agent"in j?k[j["user-agent"]]||delete k[j["user-agent"]]:k["User-Agent"]="axios/"+f,e.isFormData(S)&&e.isFunction(S.getHeaders))Object.assign(k,S.getHeaders());else if(S&&!e.isStream(S)){if(Buffer.isBuffer(S));else if(e.isArrayBuffer(S))S=Buffer.from(new Uint8Array(S));else{if(!e.isString(S))return C(new v("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",v.ERR_BAD_REQUEST,n));S=Buffer.from(S,"utf-8")}if(n.maxBodyLength>-1&&S.length>n.maxBodyLength)return C(new v("Request body larger than maxBodyLength limit",v.ERR_BAD_REQUEST,n));j["content-length"]||(k["Content-Length"]=S.length)}var T=void 0;n.auth&&(T=(n.auth.username||"")+":"+(n.auth.password||""));var E=r(n.baseURL,n.url),P=d.parse(E),L=P.protocol||b[0];if(-1===b.indexOf(L))return C(new v("Unsupported protocol "+L,v.ERR_BAD_REQUEST,n));if(!T&&P.auth){var B=P.auth.split(":");T=(B[0]||"")+":"+(B[1]||"")}T&&j.authorization&&delete k[j.authorization];var D=g.test(L),$=D?n.httpsAgent:n.httpAgent;try{o(P.path,n.params,n.paramsSerializer).replace(/^\?/,"")}catch(e){var F=new Error(e.message);F.config=n,F.url=n.url,F.exists=!0,C(F)}var I={path:o(P.path,n.params,n.paramsSerializer).replace(/^\?/,""),method:n.method.toUpperCase(),headers:k,agent:$,agents:{http:n.httpAgent,https:n.httpsAgent},auth:T};n.socketPath?I.socketPath=n.socketPath:(I.hostname=P.hostname,I.port=P.port);var O,R=n.proxy;if(!R&&!1!==R){var N=L.slice(0,-1)+"_proxy",z=process.env[N]||process.env[N.toUpperCase()];if(z){var q=d.parse(z),M=process.env.no_proxy||process.env.NO_PROXY,V=!0;if(M)V=!M.split(",").map((function(e){return e.trim()})).some((function(e){return!!e&&("*"===e||("."===e[0]&&P.hostname.substr(P.hostname.length-e.length)===e||P.hostname===e))}));if(V&&(R={host:q.hostname,port:q.port,protocol:q.protocol},q.auth)){var U=q.auth.split(":");R.auth={username:U[0],password:U[1]}}}}R&&(I.headers.host=P.hostname+(P.port?":"+P.port:""),y(I,R,L+"//"+P.hostname+(P.port?":"+P.port:"")+I.path));var W=D&&(!R||g.test(R.protocol));n.transport?O=n.transport:0===n.maxRedirects?O=W?c:s:(n.maxRedirects&&(I.maxRedirects=n.maxRedirects),n.beforeRedirect&&(I.beforeRedirect=n.beforeRedirect),O=W?u:p),n.maxBodyLength>-1&&(I.maxBodyLength=n.maxBodyLength),n.insecureHTTPParser&&(I.insecureHTTPParser=n.insecureHTTPParser);var Y=O.request(I,(function(t){if(!Y.aborted){var i=t,r=t.req||Y;if(204!==t.statusCode&&"HEAD"!==r.method&&!1!==n.decompress)switch(t.headers["content-encoding"]){case"gzip":case"compress":case"deflate":i=i.pipe(m.createUnzip()),delete t.headers["content-encoding"]}var o={status:t.statusCode,statusText:t.statusMessage,headers:t.headers,config:n,request:r};if("stream"===n.responseType)o.data=i,a(w,C,o);else{var s=[],c=0;i.on("data",(function(e){s.push(e),c+=e.length,n.maxContentLength>-1&&c>n.maxContentLength&&(A=!0,i.destroy(),C(new v("maxContentLength size of "+n.maxContentLength+" exceeded",v.ERR_BAD_RESPONSE,n,r)))})),i.on("aborted",(function(){A||(i.destroy(),C(new v("maxContentLength size of "+n.maxContentLength+" exceeded",v.ERR_BAD_RESPONSE,n,r)))})),i.on("error",(function(e){Y.aborted||C(v.from(e,null,n,r))})),i.on("end",(function(){try{var t=1===s.length?s[0]:Buffer.concat(s);"arraybuffer"!==n.responseType&&(t=t.toString(n.responseEncoding),n.responseEncoding&&"utf8"!==n.responseEncoding||(t=e.stripBOM(t))),o.data=t}catch(e){C(v.from(e,null,n,o.request,o))}a(w,C,o)}))}}}));if(Y.on("error",(function(e){C(v.from(e,null,n,Y))})),Y.on("socket",(function(e){e.setKeepAlive(!0,6e4)})),n.timeout){var H=parseInt(n.timeout,10);if(isNaN(H))return void C(new v("error trying to parse `config.timeout` to int",v.ERR_BAD_OPTION_VALUE,n,Y));Y.setTimeout(H,(function(){Y.abort();var e=n.transitional||h;C(new v("timeout of "+H+"ms exceeded",e.clarifyTimeoutError?v.ETIMEDOUT:v.ECONNABORTED,n,Y))}))}(n.cancelToken||n.signal)&&(l=function(e){Y.aborted||(Y.abort(),C(!e||e&&e.type?new x:e))},n.cancelToken&&n.cancelToken.subscribe(l),n.signal&&(n.signal.aborted?l():n.signal.addEventListener("abort",l))),e.isStream(S)?S.on("error",(function(e){C(v.from(e,n,null,Y))})).pipe(Y):Y.end(S)}))},_n}var Ln,Bn,Dn,$n,Fn={exports:{}};function In(){if($n)return Dn;$n=1;var e=s,n=a.Stream,t=function(){if(Bn)return Ln;Bn=1;var e=a.Stream;function n(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}return Ln=n,s.inherits(n,e),n.create=function(e,n){var t=new this;for(var i in n=n||{})t[i]=n[i];t.source=e;var a=e.emit;return e.emit=function(){return t._handleEmit(arguments),a.apply(e,arguments)},e.on("error",(function(){})),t.pauseStream&&e.pause(),t},Object.defineProperty(n.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),n.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},n.prototype.resume=function(){this._released||this.release(),this.source.resume()},n.prototype.pause=function(){this.source.pause()},n.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},n.prototype.pipe=function(){var n=e.prototype.pipe.apply(this,arguments);return this.resume(),n},n.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):("data"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},n.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}},Ln}();function i(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null,this._insideLoop=!1,this._pendingNext=!1}return Dn=i,e.inherits(i,n),i.create=function(e){var n=new this;for(var t in e=e||{})n[t]=e[t];return n},i.isStreamLike=function(e){return"function"!=typeof e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e&&!Buffer.isBuffer(e)},i.prototype.append=function(e){if(i.isStreamLike(e)){if(!(e instanceof t)){var n=t.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=n}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},i.prototype.pipe=function(e,t){return n.prototype.pipe.call(this,e,t),this.resume(),e},i.prototype._getNext=function(){if(this._currentStream=null,this._insideLoop)this._pendingNext=!0;else{this._insideLoop=!0;try{do{this._pendingNext=!1,this._realGetNext()}while(this._pendingNext)}finally{this._insideLoop=!1}}},i.prototype._realGetNext=function(){var e=this._streams.shift();void 0!==e?"function"==typeof e?e(function(e){i.isStreamLike(e)&&(e.on("data",this._checkDataSize.bind(this)),this._handleErrors(e)),this._pipeNext(e)}.bind(this)):this._pipeNext(e):this.end()},i.prototype._pipeNext=function(e){if(this._currentStream=e,i.isStreamLike(e))return e.on("end",this._getNext.bind(this)),void e.pipe(this,{end:!1});var n=e;this.write(n),this._getNext()},i.prototype._handleErrors=function(e){var n=this;e.on("error",(function(e){n._emitError(e)}))},i.prototype.write=function(e){this.emit("data",e)},i.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit("pause"))},i.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit("resume")},i.prototype.end=function(){this._reset(),this.emit("end")},i.prototype.destroy=function(){this._reset(),this.emit("close")},i.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},i.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}},i.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach((function(n){n.dataSize&&(e.dataSize+=n.dataSize)})),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},i.prototype._emitError=function(e){this._reset(),this.emit("error",e)},Dn}var On,Rn,Nn,zn,qn,Mn,Vn,Un,Wn,Yn,Hn,Kn,Gn,Jn,Zn,Xn,Qn={},et={exports:{}},nt={"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/3gpp-ims+xml":{source:"iana",compressible:!0},"application/3gpphal+json":{source:"iana",compressible:!0},"application/3gpphalforms+json":{source:"iana",compressible:!0},"application/a2l":{source:"iana"},"application/ace+cbor":{source:"iana"},"application/activemessage":{source:"iana"},"application/activity+json":{source:"iana",compressible:!0},"application/alto-costmap+json":{source:"iana",compressible:!0},"application/alto-costmapfilter+json":{source:"iana",compressible:!0},"application/alto-directory+json":{source:"iana",compressible:!0},"application/alto-endpointcost+json":{source:"iana",compressible:!0},"application/alto-endpointcostparams+json":{source:"iana",compressible:!0},"application/alto-endpointprop+json":{source:"iana",compressible:!0},"application/alto-endpointpropparams+json":{source:"iana",compressible:!0},"application/alto-error+json":{source:"iana",compressible:!0},"application/alto-networkmap+json":{source:"iana",compressible:!0},"application/alto-networkmapfilter+json":{source:"iana",compressible:!0},"application/alto-updatestreamcontrol+json":{source:"iana",compressible:!0},"application/alto-updatestreamparams+json":{source:"iana",compressible:!0},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/at+jwt":{source:"iana"},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:!0,extensions:["atom"]},"application/atomcat+xml":{source:"iana",compressible:!0,extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana",compressible:!0,extensions:["atomdeleted"]},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",compressible:!0,extensions:["atomsvc"]},"application/atsc-dwd+xml":{source:"iana",compressible:!0,extensions:["dwd"]},"application/atsc-dynamic-event-message":{source:"iana"},"application/atsc-held+xml":{source:"iana",compressible:!0,extensions:["held"]},"application/atsc-rdt+json":{source:"iana",compressible:!0},"application/atsc-rsat+xml":{source:"iana",compressible:!0,extensions:["rsat"]},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana",compressible:!0},"application/bacnet-xdd+zip":{source:"iana",compressible:!1},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:!1,extensions:["bdoc"]},"application/beep+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/calendar+json":{source:"iana",compressible:!0},"application/calendar+xml":{source:"iana",compressible:!0,extensions:["xcs"]},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/captive+json":{source:"iana",compressible:!0},"application/cbor":{source:"iana"},"application/cbor-seq":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana",compressible:!0},"application/ccxml+xml":{source:"iana",compressible:!0,extensions:["ccxml"]},"application/cdfx+xml":{source:"iana",compressible:!0,extensions:["cdfx"]},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana",compressible:!0},"application/cellml+xml":{source:"iana",compressible:!0},"application/cfw":{source:"iana"},"application/city+json":{source:"iana",compressible:!0},"application/clr":{source:"iana"},"application/clue+xml":{source:"iana",compressible:!0},"application/clue_info+xml":{source:"iana",compressible:!0},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana",compressible:!0},"application/coap-group+json":{source:"iana",compressible:!0},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana",compressible:!0},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana",compressible:!0,extensions:["cpl"]},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana",compressible:!0},"application/cstadata+xml":{source:"iana",compressible:!0},"application/csvm+json":{source:"iana",compressible:!0},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cwt":{source:"iana"},"application/cybercash":{source:"iana"},"application/dart":{compressible:!0},"application/dash+xml":{source:"iana",compressible:!0,extensions:["mpd"]},"application/dash-patch+xml":{source:"iana",compressible:!0,extensions:["mpp"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",compressible:!0,extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana",compressible:!0},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:!0},"application/dicom+xml":{source:"iana",compressible:!0},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/dns+json":{source:"iana",compressible:!0},"application/dns-message":{source:"iana"},"application/docbook+xml":{source:"apache",compressible:!0,extensions:["dbk"]},"application/dots+cbor":{source:"iana"},"application/dskpp+xml":{source:"iana",compressible:!0},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",compressible:!0,extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:!0,extensions:["es","ecma"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:!1},"application/edifact":{source:"iana",compressible:!1},"application/efi":{source:"iana"},"application/elm+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/elm+xml":{source:"iana",compressible:!0},"application/emergencycalldata.cap+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/emergencycalldata.comment+xml":{source:"iana",compressible:!0},"application/emergencycalldata.control+xml":{source:"iana",compressible:!0},"application/emergencycalldata.deviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.serviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.subscriberinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.veds+xml":{source:"iana",compressible:!0},"application/emma+xml":{source:"iana",compressible:!0,extensions:["emma"]},"application/emotionml+xml":{source:"iana",compressible:!0,extensions:["emotionml"]},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana",compressible:!0},"application/epub+zip":{source:"iana",compressible:!1,extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/expect-ct-report+json":{source:"iana",compressible:!0},"application/express":{source:"iana",extensions:["exp"]},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana",compressible:!0,extensions:["fdt"]},"application/fhir+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/fhir+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/fido.trusted-apps+json":{compressible:!0},"application/fits":{source:"iana"},"application/flexfec":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:!1},"application/framework-attributes+xml":{source:"iana",compressible:!0},"application/geo+json":{source:"iana",compressible:!0,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geopackage+sqlite3":{source:"iana"},"application/geoxacml+xml":{source:"iana",compressible:!0},"application/gltf-buffer":{source:"iana"},"application/gml+xml":{source:"iana",compressible:!0,extensions:["gml"]},"application/gpx+xml":{source:"apache",compressible:!0,extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:!1,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana",compressible:!0},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana",compressible:!0},"application/ibe-pkg-reply+xml":{source:"iana",compressible:!0},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",compressible:!0,extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana",compressible:!0,extensions:["its"]},"application/java-archive":{source:"apache",compressible:!1,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:!1,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:!1,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:!0},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:!0},"application/jrd+json":{source:"iana",compressible:!0},"application/jscalendar+json":{source:"iana",compressible:!0},"application/json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:!0},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:!0,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:!0},"application/jwk-set+json":{source:"iana",compressible:!0},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana",compressible:!0},"application/kpml-response+xml":{source:"iana",compressible:!0},"application/ld+json":{source:"iana",compressible:!0,extensions:["jsonld"]},"application/lgr+xml":{source:"iana",compressible:!0,extensions:["lgr"]},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana",compressible:!0},"application/lost+xml":{source:"iana",compressible:!0,extensions:["lostxml"]},"application/lostsync+xml":{source:"iana",compressible:!0},"application/lpf+zip":{source:"iana",compressible:!1},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",compressible:!0,extensions:["mads"]},"application/manifest+json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",compressible:!0,extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",compressible:!0,extensions:["mathml"]},"application/mathml-content+xml":{source:"iana",compressible:!0},"application/mathml-presentation+xml":{source:"iana",compressible:!0},"application/mbms-associated-procedure-description+xml":{source:"iana",compressible:!0},"application/mbms-deregister+xml":{source:"iana",compressible:!0},"application/mbms-envelope+xml":{source:"iana",compressible:!0},"application/mbms-msk+xml":{source:"iana",compressible:!0},"application/mbms-msk-response+xml":{source:"iana",compressible:!0},"application/mbms-protection-description+xml":{source:"iana",compressible:!0},"application/mbms-reception-report+xml":{source:"iana",compressible:!0},"application/mbms-register+xml":{source:"iana",compressible:!0},"application/mbms-register-response+xml":{source:"iana",compressible:!0},"application/mbms-schedule+xml":{source:"iana",compressible:!0},"application/mbms-user-service-description+xml":{source:"iana",compressible:!0},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana",compressible:!0,extensions:["mpf"]},"application/media_control+xml":{source:"iana",compressible:!0},"application/mediaservercontrol+xml":{source:"iana",compressible:!0,extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:!0},"application/metalink+xml":{source:"apache",compressible:!0,extensions:["metalink"]},"application/metalink4+xml":{source:"iana",compressible:!0,extensions:["meta4"]},"application/mets+xml":{source:"iana",compressible:!0,extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mipc":{source:"iana"},"application/missing-blocks+cbor-seq":{source:"iana"},"application/mmt-aei+xml":{source:"iana",compressible:!0,extensions:["maei"]},"application/mmt-usd+xml":{source:"iana",compressible:!0,extensions:["musd"]},"application/mods+xml":{source:"iana",compressible:!0,extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana",compressible:!0},"application/mrb-publish+xml":{source:"iana",compressible:!0},"application/msc-ivr+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msc-mixer+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msword":{source:"iana",compressible:!1,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:!0},"application/multipart-core":{source:"iana"},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana",extensions:["nq"]},"application/n-triples":{source:"iana",extensions:["nt"]},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana",charset:"US-ASCII"},"application/news-groupinfo":{source:"iana",charset:"US-ASCII"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana",compressible:!0},"application/node":{source:"iana",extensions:["cjs"]},"application/nss":{source:"iana"},"application/oauth-authz-req+jwt":{source:"iana"},"application/oblivious-dns-message":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:!1,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odm+xml":{source:"iana",compressible:!0},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",compressible:!0,extensions:["opf"]},"application/ogg":{source:"iana",compressible:!1,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",compressible:!0,extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{source:"iana",compressible:!0},"application/oscore":{source:"iana"},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p21":{source:"iana"},"application/p21+zip":{source:"iana",compressible:!1},"application/p2p-overlay+xml":{source:"iana",compressible:!0,extensions:["relo"]},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",compressible:!0,extensions:["xer"]},"application/pdf":{source:"iana",compressible:!1,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pem-certificate-chain":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:!1,extensions:["pgp"]},"application/pgp-keys":{source:"iana",extensions:["asc"]},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pidf-diff+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",compressible:!0,extensions:["pls"]},"application/poc-settings+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/postscript":{source:"iana",compressible:!0,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:!0},"application/problem+json":{source:"iana",compressible:!0},"application/problem+xml":{source:"iana",compressible:!0},"application/provenance+xml":{source:"iana",compressible:!0,extensions:["provx"]},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.cyn":{source:"iana",charset:"7-BIT"},"application/prs.hpub+zip":{source:"iana",compressible:!1},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana",compressible:!0},"application/pskc+xml":{source:"iana",compressible:!0,extensions:["pskcxml"]},"application/pvd+json":{source:"iana",compressible:!0},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:!0,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:!0},"application/rdf+xml":{source:"iana",compressible:!0,extensions:["rdf","owl"]},"application/reginfo+xml":{source:"iana",compressible:!0,extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:!0},"application/resource-lists+xml":{source:"iana",compressible:!0,extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",compressible:!0,extensions:["rld"]},"application/rfc+xml":{source:"iana",compressible:!0},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana",compressible:!0},"application/rls-services+xml":{source:"iana",compressible:!0,extensions:["rs"]},"application/route-apd+xml":{source:"iana",compressible:!0,extensions:["rapd"]},"application/route-s-tsid+xml":{source:"iana",compressible:!0,extensions:["sls"]},"application/route-usd+xml":{source:"iana",compressible:!0,extensions:["rusd"]},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",compressible:!0,extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:!0,extensions:["rss"]},"application/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana",compressible:!0},"application/samlmetadata+xml":{source:"iana",compressible:!0},"application/sarif+json":{source:"iana",compressible:!0},"application/sarif-external-properties+json":{source:"iana",compressible:!0},"application/sbe":{source:"iana"},"application/sbml+xml":{source:"iana",compressible:!0,extensions:["sbml"]},"application/scaip+xml":{source:"iana",compressible:!0},"application/scim+json":{source:"iana",compressible:!0},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/secevent+jwt":{source:"iana"},"application/senml+cbor":{source:"iana"},"application/senml+json":{source:"iana",compressible:!0},"application/senml+xml":{source:"iana",compressible:!0,extensions:["senmlx"]},"application/senml-etch+cbor":{source:"iana"},"application/senml-etch+json":{source:"iana",compressible:!0},"application/senml-exi":{source:"iana"},"application/sensml+cbor":{source:"iana"},"application/sensml+json":{source:"iana",compressible:!0},"application/sensml+xml":{source:"iana",compressible:!0,extensions:["sensmlx"]},"application/sensml-exi":{source:"iana"},"application/sep+xml":{source:"iana",compressible:!0},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",compressible:!0,extensions:["shf"]},"application/sieve":{source:"iana",extensions:["siv","sieve"]},"application/simple-filter+xml":{source:"iana",compressible:!0},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/sipc":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",compressible:!0,extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:!0},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",compressible:!0,extensions:["srx"]},"application/spdx+json":{source:"iana",compressible:!0},"application/spirits-event+xml":{source:"iana",compressible:!0},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",compressible:!0,extensions:["grxml"]},"application/sru+xml":{source:"iana",compressible:!0,extensions:["sru"]},"application/ssdl+xml":{source:"apache",compressible:!0,extensions:["ssdl"]},"application/ssml+xml":{source:"iana",compressible:!0,extensions:["ssml"]},"application/stix+json":{source:"iana",compressible:!0},"application/swid+xml":{source:"iana",compressible:!0,extensions:["swidtag"]},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:!0},"application/taxii+json":{source:"iana",compressible:!0},"application/td+json":{source:"iana",compressible:!0},"application/tei+xml":{source:"iana",compressible:!0,extensions:["tei","teicorpus"]},"application/tetra_isi":{source:"iana"},"application/thraud+xml":{source:"iana",compressible:!0,extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tlsrpt+gzip":{source:"iana"},"application/tlsrpt+json":{source:"iana",compressible:!0},"application/tnauthlist":{source:"iana"},"application/token-introspection+jwt":{source:"iana"},"application/toml":{compressible:!0,extensions:["toml"]},"application/trickle-ice-sdpfrag":{source:"iana"},"application/trig":{source:"iana",extensions:["trig"]},"application/ttml+xml":{source:"iana",compressible:!0,extensions:["ttml"]},"application/tve-trigger":{source:"iana"},"application/tzif":{source:"iana"},"application/tzif-leap":{source:"iana"},"application/ubjson":{compressible:!1,extensions:["ubj"]},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana",compressible:!0},"application/urc-ressheet+xml":{source:"iana",compressible:!0,extensions:["rsheet"]},"application/urc-targetdesc+xml":{source:"iana",compressible:!0,extensions:["td"]},"application/urc-uisocketdesc+xml":{source:"iana",compressible:!0},"application/vcard+json":{source:"iana",compressible:!0},"application/vcard+xml":{source:"iana",compressible:!0},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana",compressible:!0,extensions:["1km"]},"application/vnd.3gpp-prose+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.5gnas":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.bsf+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gmop+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gtpc":{source:"iana"},"application/vnd.3gpp.interworking-data":{source:"iana"},"application/vnd.3gpp.lpp":{source:"iana"},"application/vnd.3gpp.mc-signalling-ear":{source:"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-payload":{source:"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-signalling":{source:"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-init-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-transmission-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mid-call+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ngap":{source:"iana"},"application/vnd.3gpp.pfcp":{source:"iana"},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.s1ap":{source:"iana"},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ussd+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",compressible:!1,extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",compressible:!0,extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.afpc.afplinedata":{source:"iana"},"application/vnd.afpc.afplinedata-pagedef":{source:"iana"},"application/vnd.afpc.cmoca-cmresource":{source:"iana"},"application/vnd.afpc.foca-charset":{source:"iana"},"application/vnd.afpc.foca-codedfont":{source:"iana"},"application/vnd.afpc.foca-codepage":{source:"iana"},"application/vnd.afpc.modca":{source:"iana"},"application/vnd.afpc.modca-cmtable":{source:"iana"},"application/vnd.afpc.modca-formdef":{source:"iana"},"application/vnd.afpc.modca-mediummap":{source:"iana"},"application/vnd.afpc.modca-objectcontainer":{source:"iana"},"application/vnd.afpc.modca-overlay":{source:"iana"},"application/vnd.afpc.modca-pagesegment":{source:"iana"},"application/vnd.age":{source:"iana",extensions:["age"]},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:!0},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana",compressible:!0},"application/vnd.android.ota":{source:"iana"},"application/vnd.android.package-archive":{source:"apache",compressible:!1,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.arrow.file":{source:"iana"},"application/vnd.apache.arrow.stream":{source:"iana"},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:!0},"application/vnd.aplextor.warrp+json":{source:"iana",compressible:!0},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:!0},"application/vnd.apple.installer+xml":{source:"iana",compressible:!0,extensions:["mpkg"]},"application/vnd.apple.keynote":{source:"iana",extensions:["key"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.numbers":{source:"iana",extensions:["numbers"]},"application/vnd.apple.pages":{source:"iana",extensions:["pages"]},"application/vnd.apple.pkpass":{compressible:!1,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artisan+json":{source:"iana",compressible:!0},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:!0},"application/vnd.avistar+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmml+xml":{source:"iana",compressible:!0,extensions:["bmml"]},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.banana-accounting":{source:"iana"},"application/vnd.bbf.usp.error":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:!0},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:!0},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana",compressible:!0},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.bpf":{source:"iana"},"application/vnd.bpf3":{source:"iana"},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.byu.uapi+json":{source:"iana",compressible:!0},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:!0},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",compressible:!0,extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.ciedi":{source:"iana"},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana",compressible:!0,extensions:["csl"]},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:!0},"application/vnd.collection.doc+json":{source:"iana",compressible:!0},"application/vnd.collection.next+json":{source:"iana",compressible:!0},"application/vnd.comicbook+zip":{source:"iana",compressible:!1},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:!0},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",compressible:!0,extensions:["wbs"]},"application/vnd.cryptii.pipe+json":{source:"iana",compressible:!0},"application/vnd.crypto-shade-file":{source:"iana"},"application/vnd.cryptomator.encrypted":{source:"iana"},"application/vnd.cryptomator.vault":{source:"iana"},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana",compressible:!0},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana",compressible:!0},"application/vnd.cybank":{source:"iana"},"application/vnd.cyclonedx+json":{source:"iana",compressible:!0},"application/vnd.cyclonedx+xml":{source:"iana",compressible:!0},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana",compressible:!1},"application/vnd.d3m-dataset":{source:"iana"},"application/vnd.d3m-problem":{source:"iana"},"application/vnd.dart":{source:"iana",compressible:!0,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:!0},"application/vnd.dataresource+json":{source:"iana",compressible:!0},"application/vnd.dbf":{source:"iana",extensions:["dbf"]},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",compressible:!0,extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume.movie":{source:"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana",compressible:!0},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:!0},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:!0},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbisl+xml":{source:"iana",compressible:!0},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-container+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-generic+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-init+xml":{source:"iana",compressible:!0},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.eclipse.ditto+json":{source:"iana",compressible:!0},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana",compressible:!0},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana",compressible:!0},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana",compressible:!1},"application/vnd.eszigno3+xml":{source:"iana",compressible:!0,extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.asic-e+zip":{source:"iana",compressible:!1},"application/vnd.etsi.asic-s+zip":{source:"iana",compressible:!1},"application/vnd.etsi.cug+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvcommand+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvservice+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsync+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvueprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mcid+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana",compressible:!0},"application/vnd.etsi.pstn+xml":{source:"iana",compressible:!0},"application/vnd.etsi.sci+xml":{source:"iana",compressible:!0},"application/vnd.etsi.simservs+xml":{source:"iana",compressible:!0},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana",compressible:!0},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eu.kasparian.car+json":{source:"iana",compressible:!0},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.exstream-empower+zip":{source:"iana",compressible:!1},"application/vnd.exstream-package":{source:"iana"},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.familysearch.gedcom+zip":{source:"iana",compressible:!1},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.ficlab.flb+zip":{source:"iana",compressible:!1},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujifilm.fb.docuworks":{source:"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{source:"iana"},"application/vnd.fujifilm.fb.docuworks.container":{source:"iana"},"application/vnd.fujifilm.fb.jfi+xml":{source:"iana",compressible:!0},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.futoin+cbor":{source:"iana"},"application/vnd.futoin+json":{source:"iana",compressible:!0},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.gentics.grd+json":{source:"iana",compressible:!0},"application/vnd.geo+json":{source:"iana",compressible:!0},"application/vnd.geocube+xml":{source:"iana",compressible:!0},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.slides":{source:"iana"},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:!1,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:!1,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:!1,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:!0,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:!1,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana",compressible:!0},"application/vnd.gov.sk.e-form+zip":{source:"iana",compressible:!1},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana",compressible:!0},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:!0},"application/vnd.hal+xml":{source:"iana",compressible:!0,extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",compressible:!0,extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:!0},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:!0},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hl7cda+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.hl7v2+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper+json":{source:"iana",compressible:!0},"application/vnd.hyper-item+json":{source:"iana",compressible:!0},"application/vnd.hyperdrive+json":{source:"iana",compressible:!0},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana",compressible:!1},"application/vnd.imagemeter.image+zip":{source:"iana",compressible:!1},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:!0},"application/vnd.informedcontrol.rms+xml":{source:"iana",compressible:!0},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana",compressible:!0},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.packageitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.planningitem+xml":{source:"iana",compressible:!0},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",compressible:!0,extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.iso11783-10+zip":{source:"iana",compressible:!1},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las":{source:"iana"},"application/vnd.las.las+json":{source:"iana",compressible:!0},"application/vnd.las.las+xml":{source:"iana",compressible:!0,extensions:["lasxml"]},"application/vnd.laszip":{source:"iana"},"application/vnd.leap+json":{source:"iana",compressible:!0},"application/vnd.liberty-request+xml":{source:"iana",compressible:!0},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",compressible:!0,extensions:["lbe"]},"application/vnd.logipipe.circuit+zip":{source:"iana",compressible:!1},"application/vnd.loom":{source:"iana"},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana",extensions:["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.conftoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.license+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:!0},"application/vnd.maxar.archive.3tz+zip":{source:"iana",compressible:!1},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:!0},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:!0},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:!0,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:!1,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:!0,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana",compressible:!0},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:!0},"application/vnd.ms-outlook":{compressible:!1,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana",compressible:!0},"application/vnd.ms-powerpoint":{source:"iana",compressible:!1,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana",compressible:!0},"application/vnd.ms-printing.printticket+xml":{source:"apache",compressible:!0},"application/vnd.ms-printschematicket+xml":{source:"iana",compressible:!0},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:!1,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.nacamar.ybrid+json":{source:"iana",compressible:!0},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:!0},"application/vnd.nebumind.line":{source:"iana"},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nimn":{source:"iana"},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana",compressible:!0},"application/vnd.nokia.iptv.config+xml":{source:"iana",compressible:!0},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana",compressible:!0},"application/vnd.nokia.landmarkcollection+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.ac+xml":{source:"iana",compressible:!0,extensions:["ac"]},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana",compressible:!0},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:!1,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:!1,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:!1,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:!1,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oci.image.manifest.v1+json":{source:"iana",compressible:!0},"application/vnd.oftn.l10n+json":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana",compressible:!0},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana",compressible:!0},"application/vnd.oipf.dae.xhtml+xml":{source:"iana",compressible:!0},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana",compressible:!0},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.oipf.spdlist+xml":{source:"iana",compressible:!0},"application/vnd.oipf.ueprofile+xml":{source:"iana",compressible:!0},"application/vnd.oipf.userprofile+xml":{source:"iana",compressible:!0},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.imd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sprov+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-feature-handler+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-pcc+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-subs-invite+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-user-prefs+xml":{source:"iana",compressible:!0},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",compressible:!0,extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana",compressible:!0},"application/vnd.oma.group-usage-list+xml":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+cbor":{source:"iana"},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.final-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.groups+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana",compressible:!0},"application/vnd.oma.xcap-directory+xml":{source:"iana",compressible:!0},"application/vnd.omads-email+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-file+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-folder+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana",compressible:!0,extensions:["obgx"]},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana",compressible:!0,extensions:["osm"]},"application/vnd.opentimestamps.ots":{source:"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:!1,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:!1,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:!1,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana",compressible:!0},"application/vnd.oracle.resource+json":{source:"iana",compressible:!0},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana",compressible:!0},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:!0},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos.xml":{source:"iana"},"application/vnd.patentdive":{source:"iana"},"application/vnd.patientecommsdoc":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana",compressible:!0},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.psfs":{source:"iana"},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana",compressible:!0},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana",compressible:!0},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana",extensions:["rar"]},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",compressible:!0,extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.resilient.logic":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:!0},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",compressible:!0,extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sar":{source:"iana"},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.seis+json":{source:"iana",compressible:!0},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shade-save-file":{source:"iana"},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.shootproof+json":{source:"iana",compressible:!0},"application/vnd.shopkick+json":{source:"iana",compressible:!0},"application/vnd.shp":{source:"iana"},"application/vnd.shx":{source:"iana"},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:!0},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.snesdev-page-table":{source:"iana"},"application/vnd.software602.filler.form+xml":{source:"iana",compressible:!0,extensions:["fo"]},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",compressible:!0,extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:!0,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.sycle+xml":{source:"iana",compressible:!0},"application/vnd.syft+json":{source:"iana",compressible:!0},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",charset:"UTF-8",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:!0},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{source:"iana",compressible:!0},"application/vnd.tmd.mediaflex.api+xml":{source:"iana",compressible:!0},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",compressible:!0,extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:!0},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.veritone.aion+json":{source:"iana",compressible:!0},"application/vnd.veryant.thin":{source:"iana"},"application/vnd.ves.encrypted":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",charset:"UTF-8",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.dpp":{source:"iana"},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana",compressible:!0},"application/vnd.wv.ssp+xml":{source:"iana",compressible:!0},"application/vnd.xacml+json":{source:"iana",compressible:!0},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana",compressible:!0},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",compressible:!0,extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",compressible:!0,extensions:["zaz"]},"application/voicexml+xml":{source:"iana",compressible:!0,extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:!0},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{source:"iana",compressible:!0,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana",compressible:!0,extensions:["wif"]},"application/webpush-options+json":{source:"iana",compressible:!0},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",compressible:!0,extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",compressible:!0,extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:!1,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:!1,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:!1,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:!1,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:!1,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:!1},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",compressible:!0,extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",compressible:!0,extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",compressible:!0,extensions:["res"]},"application/x-dvi":{source:"apache",compressible:!1,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:!0,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-iwork-keynote-sffkey":{extensions:["key"]},"application/x-iwork-numbers-sffnumbers":{extensions:["numbers"]},"application/x-iwork-pages-sffpages":{extensions:["pages"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:!1,extensions:["jnlp"]},"application/x-javascript":{compressible:!0},"application/x-keepass2":{extensions:["kdbx"]},"application/x-latex":{source:"apache",compressible:!1,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:!1},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:!0,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:!1,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-pki-message":{source:"iana"},"application/x-rar-compressed":{source:"apache",compressible:!1,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:!0,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:!1,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:!1,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:!0,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:!0,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:!0,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:!0,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:!0,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:!1,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:!0,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:!0,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:!0,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:!0,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:!0},"application/x-x509-ca-cert":{source:"iana",extensions:["der","crt","pem"]},"application/x-x509-ca-ra-cert":{source:"iana"},"application/x-x509-next-ca-cert":{source:"iana"},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",compressible:!0,extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:!1,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana",compressible:!0},"application/xaml+xml":{source:"apache",compressible:!0,extensions:["xaml"]},"application/xcap-att+xml":{source:"iana",compressible:!0,extensions:["xav"]},"application/xcap-caps+xml":{source:"iana",compressible:!0,extensions:["xca"]},"application/xcap-diff+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/xcap-el+xml":{source:"iana",compressible:!0,extensions:["xel"]},"application/xcap-error+xml":{source:"iana",compressible:!0},"application/xcap-ns+xml":{source:"iana",compressible:!0,extensions:["xns"]},"application/xcon-conference-info+xml":{source:"iana",compressible:!0},"application/xcon-conference-info-diff+xml":{source:"iana",compressible:!0},"application/xenc+xml":{source:"iana",compressible:!0,extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:!0,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache",compressible:!0},"application/xliff+xml":{source:"iana",compressible:!0,extensions:["xlf"]},"application/xml":{source:"iana",compressible:!0,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:!0,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana",compressible:!0},"application/xmpp+xml":{source:"iana",compressible:!0},"application/xop+xml":{source:"iana",compressible:!0,extensions:["xop"]},"application/xproc+xml":{source:"apache",compressible:!0,extensions:["xpl"]},"application/xslt+xml":{source:"iana",compressible:!0,extensions:["xsl","xslt"]},"application/xspf+xml":{source:"apache",compressible:!0,extensions:["xspf"]},"application/xv+xml":{source:"iana",compressible:!0,extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:!0},"application/yang-data+xml":{source:"iana",compressible:!0},"application/yang-patch+json":{source:"iana",compressible:!0},"application/yang-patch+xml":{source:"iana",compressible:!0},"application/yin+xml":{source:"iana",compressible:!0,extensions:["yin"]},"application/zip":{source:"iana",compressible:!1,extensions:["zip"]},"application/zlib":{source:"iana"},"application/zstd":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:!1,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/aac":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana",extensions:["amr"]},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:!1,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/flexfec":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:!1},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/mhas":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana",extensions:["mxmf"]},"audio/mp3":{compressible:!1,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:!1,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:!1,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:!1,extensions:["oga","ogg","spx","opus"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/scip":{source:"iana"},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sofa":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tetra_acelp":{source:"iana"},"audio/tetra_acelp_bb":{source:"iana"},"audio/tone":{source:"iana"},"audio/tsvcis":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/usac":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dts.uhd":{source:"iana"},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:!1},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:!1},"audio/vorbis":{source:"iana",compressible:!1},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:!1,extensions:["wav"]},"audio/wave":{compressible:!1,extensions:["wav"]},"audio/webm":{source:"apache",compressible:!1,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:!1,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:!1,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:!0,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",compressible:!0,extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana",extensions:["exr"]},"image/apng":{compressible:!1,extensions:["apng"]},"image/avci":{source:"iana",extensions:["avci"]},"image/avcs":{source:"iana",extensions:["avcs"]},"image/avif":{source:"iana",compressible:!1,extensions:["avif"]},"image/bmp":{source:"iana",compressible:!0,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana",extensions:["drle"]},"image/emf":{source:"iana",extensions:["emf"]},"image/fits":{source:"iana",extensions:["fits"]},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:!1,extensions:["gif"]},"image/heic":{source:"iana",extensions:["heic"]},"image/heic-sequence":{source:"iana",extensions:["heics"]},"image/heif":{source:"iana",extensions:["heif"]},"image/heif-sequence":{source:"iana",extensions:["heifs"]},"image/hej2k":{source:"iana",extensions:["hej2"]},"image/hsj2":{source:"iana",extensions:["hsj2"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana",extensions:["jls"]},"image/jp2":{source:"iana",compressible:!1,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:!1,extensions:["jpeg","jpg","jpe"]},"image/jph":{source:"iana",extensions:["jph"]},"image/jphc":{source:"iana",extensions:["jhc"]},"image/jpm":{source:"iana",compressible:!1,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:!1,extensions:["jpx","jpf"]},"image/jxr":{source:"iana",extensions:["jxr"]},"image/jxra":{source:"iana",extensions:["jxra"]},"image/jxrs":{source:"iana",extensions:["jxrs"]},"image/jxs":{source:"iana",extensions:["jxs"]},"image/jxsc":{source:"iana",extensions:["jxsc"]},"image/jxsi":{source:"iana",extensions:["jxsi"]},"image/jxss":{source:"iana",extensions:["jxss"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/ktx2":{source:"iana",extensions:["ktx2"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:!1},"image/png":{source:"iana",compressible:!1,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana",extensions:["pti"]},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:!0,extensions:["svg","svgz"]},"image/t38":{source:"iana",extensions:["t38"]},"image/tiff":{source:"iana",compressible:!1,extensions:["tif","tiff"]},"image/tiff-fx":{source:"iana",extensions:["tfx"]},"image/vnd.adobe.photoshop":{source:"iana",compressible:!0,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana",extensions:["azv"]},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana",compressible:!0,extensions:["ico"]},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-dds":{compressible:!0,extensions:["dds"]},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.pco.b16":{source:"iana",extensions:["b16"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana",extensions:["tap"]},"image/vnd.valve.source.texture":{source:"iana",extensions:["vtf"]},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana",extensions:["pcx"]},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana",extensions:["wmf"]},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:!0,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:!0,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:!1},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:!1},"message/imdn+xml":{source:"iana",compressible:!0},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:!1},"message/rfc822":{source:"iana",compressible:!0,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana",extensions:["3mf"]},"model/e57":{source:"iana"},"model/gltf+json":{source:"iana",compressible:!0,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:!0,extensions:["glb"]},"model/iges":{source:"iana",compressible:!1,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:!1,extensions:["msh","mesh","silo"]},"model/mtl":{source:"iana",extensions:["mtl"]},"model/obj":{source:"iana",extensions:["obj"]},"model/step":{source:"iana"},"model/step+xml":{source:"iana",compressible:!0,extensions:["stpx"]},"model/step+zip":{source:"iana",compressible:!1,extensions:["stpz"]},"model/step-xml+zip":{source:"iana",compressible:!1,extensions:["stpxz"]},"model/stl":{source:"iana",extensions:["stl"]},"model/vnd.collada+xml":{source:"iana",compressible:!0,extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana",compressible:!0},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana",extensions:["ogex"]},"model/vnd.parasolid.transmit.binary":{source:"iana",extensions:["x_b"]},"model/vnd.parasolid.transmit.text":{source:"iana",extensions:["x_t"]},"model/vnd.pytha.pyox":{source:"iana"},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.sap.vds":{source:"iana",extensions:["vds"]},"model/vnd.usdz+zip":{source:"iana",compressible:!1,extensions:["usdz"]},"model/vnd.valve.source.compiled-map":{source:"iana",extensions:["bsp"]},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:!1,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:!1,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana",extensions:["x3db"]},"model/x3d+vrml":{source:"apache",compressible:!1,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:!0,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana",extensions:["x3dv"]},"multipart/alternative":{source:"iana",compressible:!1},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:!1},"multipart/form-data":{source:"iana",compressible:!1},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana"},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:!1},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:!1},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:!0,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:!0},"text/cmd":{compressible:!0},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/cql":{source:"iana"},"text/cql-expression":{source:"iana"},"text/cql-identifier":{source:"iana"},"text/css":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["css"]},"text/csv":{source:"iana",compressible:!0,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/fhirpath":{source:"iana"},"text/flexfec":{source:"iana"},"text/fwdred":{source:"iana"},"text/gff3":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:!0,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:!0},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:!0,extensions:["jsx"]},"text/less":{compressible:!0,extensions:["less"]},"text/markdown":{source:"iana",compressible:!0,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mdx":{compressible:!0,extensions:["mdx"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["n3"]},"text/parameters":{source:"iana",charset:"UTF-8"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:!0,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana",charset:"UTF-8"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:!0,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shaclc":{source:"iana"},"text/shex":{source:"iana",extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/spdx":{source:"iana",extensions:["spdx"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:!0,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",charset:"UTF-8",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:!0,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:!0,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana",charset:"UTF-8"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana",charset:"UTF-8"},"text/vnd.familysearch.gedcom":{source:"iana",extensions:["ged"]},"text/vnd.ficlab.flt":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.gml":{source:"iana"},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.hans":{source:"iana"},"text/vnd.hgl":{source:"iana"},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.senx.warpscript":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sosi":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",charset:"UTF-8",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana",charset:"UTF-8"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:!0},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:!0},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:!0,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:!0,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:!0,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:!0,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:!0,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{compressible:!0,extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/av1":{source:"iana"},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/ffv1":{source:"iana"},"video/flexfec":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana",extensions:["m4s"]},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/jxsv":{source:"iana"},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:!1,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:!1,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:!1,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:!1,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/scip":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vc2":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vnd.youtube.yt":{source:"iana"},"video/vp8":{source:"iana"},"video/vp9":{source:"iana"},"video/webm":{source:"apache",compressible:!1,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:!1,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:!1,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:!1,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:!0},"x-shader/x-vertex":{compressible:!0}};function tt(){return Rn||(Rn=1,function(e){var n,t,i,a=(On||(On=1,et.exports=nt),et.exports),r=p.extname,o=/^\s*([^;\s]*)(?:;|\s|$)/,s=/^text\//i;function c(e){if(!e||"string"!=typeof e)return!1;var n=o.exec(e),t=n&&a[n[1].toLowerCase()];return t&&t.charset?t.charset:!(!n||!s.test(n[1]))&&"UTF-8"}e.charset=c,e.charsets={lookup:c},e.contentType=function(n){if(!n||"string"!=typeof n)return!1;var t=-1===n.indexOf("/")?e.lookup(n):n;if(!t)return!1;if(-1===t.indexOf("charset")){var i=e.charset(t);i&&(t+="; charset="+i.toLowerCase())}return t},e.extension=function(n){if(!n||"string"!=typeof n)return!1;var t=o.exec(n),i=t&&e.extensions[t[1].toLowerCase()];if(!i||!i.length)return!1;return i[0]},e.extensions=Object.create(null),e.lookup=function(n){if(!n||"string"!=typeof n)return!1;var t=r("x."+n).toLowerCase().substr(1);if(!t)return!1;return e.types[t]||!1},e.types=Object.create(null),n=e.extensions,t=e.types,i=["nginx","apache",void 0,"iana"],Object.keys(a).forEach((function(e){var r=a[e],o=r.extensions;if(o&&o.length){n[e]=o;for(var s=0;s<o.length;s++){var c=o[s];if(t[c]){var l=i.indexOf(a[t[c]].source),p=i.indexOf(r.source);if("application/octet-stream"!==t[c]&&(l>p||l===p&&"application/"===t[c].substr(0,12)))continue}t[c]=e}}}))}(Qn)),Qn}function it(){if(Mn)return qn;Mn=1;var e=zn?Nn:(zn=1,Nn=function(e){var n="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;n?n(e):setTimeout(e,0)});return qn=function(n){var t=!1;return e((function(){t=!0})),function(i,a){t?n(i,a):e((function(){n(i,a)}))}}}function at(){if(Un)return Vn;function e(e){"function"==typeof this.jobs[e]&&this.jobs[e]()}return Un=1,Vn=function(n){Object.keys(n.jobs).forEach(e.bind(n)),n.jobs={}}}function rt(){if(Yn)return Wn;Yn=1;var e=it(),n=at();return Wn=function(t,i,a,r){var o=a.keyedList?a.keyedList[a.index]:a.index;a.jobs[o]=function(n,t,i,a){var r;r=2==n.length?n(i,e(a)):n(i,t,e(a));return r}(i,o,t[o],(function(e,t){o in a.jobs&&(delete a.jobs[o],e?n(a):a.results[o]=t,r(e,a.results))}))}}function ot(){if(Kn)return Hn;return Kn=1,Hn=function(e,n){var t=!Array.isArray(e),i={index:0,keyedList:t||n?Object.keys(e):null,jobs:{},results:t?{}:[],size:t?Object.keys(e).length:e.length};n&&i.keyedList.sort(t?n:function(t,i){return n(e[t],e[i])});return i}}function st(){if(Jn)return Gn;Jn=1;var e=at(),n=it();return Gn=function(t){if(!Object.keys(this.jobs).length)return;this.index=this.size,e(this),n(t)(null,this.results)}}function ct(){if(Xn)return Zn;Xn=1;var e=rt(),n=ot(),t=st();return Zn=function(i,a,r){var o=n(i);for(;o.index<(o.keyedList||i).length;)e(i,a,o,(function(e,n){e?r(e,n):0!==Object.keys(o.jobs).length||r(null,o.results)})),o.index++;return t.bind(o,r)}}var lt,pt,ut,dt,mt,ft,ht,vt,xt,gt,bt={exports:{}};function yt(){if(lt)return bt.exports;lt=1;var e=rt(),n=ot(),t=st();function i(e,n){return e<n?-1:e>n?1:0}return bt.exports=function(i,a,r,o){var s=n(i,r);return e(i,a,s,(function n(t,r){t?o(t,r):(s.index++,s.index<(s.keyedList||i).length?e(i,a,s,n):o(null,s.results))})),t.bind(s,o)},bt.exports.ascending=i,bt.exports.descending=function(e,n){return-1*i(e,n)},bt.exports}function _t(){if(ut)return pt;ut=1;var e=yt();return pt=function(n,t,i){return e(n,t,null,i)}}function wt(){return mt?dt:(mt=1,dt={parallel:ct(),serial:_t(),serialOrdered:yt()})}function At(){return ht||(ht=1,ft=function(e,n){return Object.keys(n).forEach((function(t){e[t]=e[t]||n[t]})),e}),ft}var Ct=he,St=function(e,n){Ce.forEach(e,(function(t,i){i!==n&&i.toUpperCase()===n.toUpperCase()&&(e[n]=t,delete e[i])}))},kt=Se(),jt=Be,Tt=De(),Et={"Content-Type":"application/x-www-form-urlencoded"};function Pt(e,n){!Ct.isUndefined(e)&&Ct.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var Lt,Bt={transitional:jt,adapter:("undefined"!=typeof XMLHttpRequest?Lt=function(){if(We)return Ue;We=1;var e=he,n=$e(),t=Fe(),i=ge,a=Ke,r=Ge(),o=Je(),s=Be,c=Se(),l=Ze(),p=Xe();return Ue=function(u){return new Promise((function(d,m){var f,h=u.data,v=u.headers,x=u.responseType;function g(){u.cancelToken&&u.cancelToken.unsubscribe(f),u.signal&&u.signal.removeEventListener("abort",f)}e.isFormData(h)&&e.isStandardBrowserEnv()&&delete v["Content-Type"];var b=new XMLHttpRequest;if(u.auth){var y=u.auth.username||"",_=u.auth.password?unescape(encodeURIComponent(u.auth.password)):"";v.Authorization="Basic "+btoa(y+":"+_)}var w=a(u.baseURL,u.url);function A(){if(b){var e="getAllResponseHeaders"in b?r(b.getAllResponseHeaders()):null,t={data:x&&"text"!==x&&"json"!==x?b.response:b.responseText,status:b.status,statusText:b.statusText,headers:e,config:u,request:b};n((function(e){d(e),g()}),(function(e){m(e),g()}),t),b=null}}if(b.open(u.method.toUpperCase(),i(w,u.params,u.paramsSerializer),!0),b.timeout=u.timeout,"onloadend"in b?b.onloadend=A:b.onreadystatechange=function(){b&&4===b.readyState&&(0!==b.status||b.responseURL&&0===b.responseURL.indexOf("file:"))&&setTimeout(A)},b.onabort=function(){b&&(m(new c("Request aborted",c.ECONNABORTED,u,b)),b=null)},b.onerror=function(){m(new c("Network Error",c.ERR_NETWORK,u,b,b)),b=null},b.ontimeout=function(){var e=u.timeout?"timeout of "+u.timeout+"ms exceeded":"timeout exceeded",n=u.transitional||s;u.timeoutErrorMessage&&(e=u.timeoutErrorMessage),m(new c(e,n.clarifyTimeoutError?c.ETIMEDOUT:c.ECONNABORTED,u,b)),b=null},e.isStandardBrowserEnv()){var C=(u.withCredentials||o(w))&&u.xsrfCookieName?t.read(u.xsrfCookieName):void 0;C&&(v[u.xsrfHeaderName]=C)}"setRequestHeader"in b&&e.forEach(v,(function(e,n){void 0===h&&"content-type"===n.toLowerCase()?delete v[n]:b.setRequestHeader(n,e)})),e.isUndefined(u.withCredentials)||(b.withCredentials=!!u.withCredentials),x&&"json"!==x&&(b.responseType=u.responseType),"function"==typeof u.onDownloadProgress&&b.addEventListener("progress",u.onDownloadProgress),"function"==typeof u.onUploadProgress&&b.upload&&b.upload.addEventListener("progress",u.onUploadProgress),(u.cancelToken||u.signal)&&(f=function(e){b&&(m(!e||e&&e.type?new l:e),b.abort(),b=null)},u.cancelToken&&u.cancelToken.subscribe(f),u.signal&&(u.signal.aborted?f():u.signal.addEventListener("abort",f))),h||(h=null);var S=p(w);S&&-1===["http","https","file"].indexOf(S)?m(new c("Unsupported protocol "+S+":",c.ERR_BAD_REQUEST,u)):b.send(h)}))},Ue}():"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process)&&(Lt=Pn()),Lt),transformRequest:[function(e,n){if(St(n,"Accept"),St(n,"Content-Type"),Ct.isFormData(e)||Ct.isArrayBuffer(e)||Ct.isBuffer(e)||Ct.isStream(e)||Ct.isFile(e)||Ct.isBlob(e))return e;if(Ct.isArrayBufferView(e))return e.buffer;if(Ct.isURLSearchParams(e))return Pt(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var t,i=Ct.isObject(e),a=n&&n["Content-Type"];if((t=Ct.isFileList(e))||i&&"multipart/form-data"===a){var r=this.env&&this.env.FormData;return Tt(t?{"files[]":e}:e,r&&new r)}return i||"application/json"===a?(Pt(n,"application/json"),function(e,n,t){if(Ct.isString(e))try{return(n||JSON.parse)(e),Ct.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(t||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var n=this.transitional||Bt.transitional,t=n&&n.silentJSONParsing,i=n&&n.forcedJSONParsing,a=!t&&"json"===this.responseType;if(a||i&&Ct.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(a){if("SyntaxError"===e.name)throw kt.from(e,kt.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:(gt||(gt=1,Fn.exports=function(){if(xt)return vt;xt=1;var e=In(),r=s,o=p,c=n,l=t,d=i.parse,m=u,f=a.Stream,h=tt(),v=wt(),x=At();function g(n){if(!(this instanceof g))return new g(n);for(var t in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],e.call(this),n=n||{})this[t]=n[t]}return vt=g,r.inherits(g,e),g.LINE_BREAK="\r\n",g.DEFAULT_CONTENT_TYPE="application/octet-stream",g.prototype.append=function(n,t,i){"string"==typeof(i=i||{})&&(i={filename:i});var a=e.prototype.append.bind(this);if("number"==typeof t&&(t=""+t),r.isArray(t))this._error(new Error("Arrays are not supported."));else{var o=this._multiPartHeader(n,t,i),s=this._multiPartFooter();a(o),a(t),a(s),this._trackLength(o,t,i)}},g.prototype._trackLength=function(e,n,t){var i=0;null!=t.knownLength?i+=+t.knownLength:Buffer.isBuffer(n)?i=n.length:"string"==typeof n&&(i=Buffer.byteLength(n)),this._valueLength+=i,this._overheadLength+=Buffer.byteLength(e)+g.LINE_BREAK.length,n&&(n.path||n.readable&&n.hasOwnProperty("httpVersion")||n instanceof f)&&(t.knownLength||this._valuesToMeasure.push(n))},g.prototype._lengthRetriever=function(e,n){e.hasOwnProperty("fd")?null!=e.end&&e.end!=1/0&&null!=e.start?n(null,e.end+1-(e.start?e.start:0)):m.stat(e.path,(function(t,i){var a;t?n(t):(a=i.size-(e.start?e.start:0),n(null,a))})):e.hasOwnProperty("httpVersion")?n(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",(function(t){e.pause(),n(null,+t.headers["content-length"])})),e.resume()):n("Unknown stream")},g.prototype._multiPartHeader=function(e,n,t){if("string"==typeof t.header)return t.header;var i,a=this._getContentDisposition(n,t),r=this._getContentType(n,t),o="",s={"Content-Disposition":["form-data",'name="'+e+'"'].concat(a||[]),"Content-Type":[].concat(r||[])};for(var c in"object"==typeof t.header&&x(s,t.header),s)s.hasOwnProperty(c)&&null!=(i=s[c])&&(Array.isArray(i)||(i=[i]),i.length&&(o+=c+": "+i.join("; ")+g.LINE_BREAK));return"--"+this.getBoundary()+g.LINE_BREAK+o+g.LINE_BREAK},g.prototype._getContentDisposition=function(e,n){var t,i;return"string"==typeof n.filepath?t=o.normalize(n.filepath).replace(/\\/g,"/"):n.filename||e.name||e.path?t=o.basename(n.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(t=o.basename(e.client._httpMessage.path||"")),t&&(i='filename="'+t+'"'),i},g.prototype._getContentType=function(e,n){var t=n.contentType;return!t&&e.name&&(t=h.lookup(e.name)),!t&&e.path&&(t=h.lookup(e.path)),!t&&e.readable&&e.hasOwnProperty("httpVersion")&&(t=e.headers["content-type"]),t||!n.filepath&&!n.filename||(t=h.lookup(n.filepath||n.filename)),t||"object"!=typeof e||(t=g.DEFAULT_CONTENT_TYPE),t},g.prototype._multiPartFooter=function(){return function(e){var n=g.LINE_BREAK;0===this._streams.length&&(n+=this._lastBoundary()),e(n)}.bind(this)},g.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+g.LINE_BREAK},g.prototype.getHeaders=function(e){var n,t={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(n in e)e.hasOwnProperty(n)&&(t[n.toLowerCase()]=e[n]);return t},g.prototype.setBoundary=function(e){this._boundary=e},g.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},g.prototype.getBuffer=function(){for(var e=new Buffer.alloc(0),n=this.getBoundary(),t=0,i=this._streams.length;t<i;t++)"function"!=typeof this._streams[t]&&(e=Buffer.isBuffer(this._streams[t])?Buffer.concat([e,this._streams[t]]):Buffer.concat([e,Buffer.from(this._streams[t])]),"string"==typeof this._streams[t]&&this._streams[t].substring(2,n.length+2)===n||(e=Buffer.concat([e,Buffer.from(g.LINE_BREAK)])));return Buffer.concat([e,Buffer.from(this._lastBoundary())])},g.prototype._generateBoundary=function(){for(var e="--------------------------",n=0;n<24;n++)e+=Math.floor(10*Math.random()).toString(16);this._boundary=e},g.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e},g.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},g.prototype.getLength=function(e){var n=this._overheadLength+this._valueLength;this._streams.length&&(n+=this._lastBoundary().length),this._valuesToMeasure.length?v.parallel(this._valuesToMeasure,this._lengthRetriever,(function(t,i){t?e(t):(i.forEach((function(e){n+=e})),e(null,n))})):process.nextTick(e.bind(this,null,n))},g.prototype.submit=function(e,n){var t,i,a={method:"post"};return"string"==typeof e?(e=d(e),i=x({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},a)):(i=x(e,a)).port||(i.port="https:"==i.protocol?443:80),i.headers=this.getHeaders(e.headers),t="https:"==i.protocol?l.request(i):c.request(i),this.getLength(function(e,i){if(e&&"Unknown stream"!==e)this._error(e);else if(i&&t.setHeader("Content-Length",i),this.pipe(t),n){var a,r=function(e,i){return t.removeListener("error",r),t.removeListener("response",a),n.call(this,e,i)};a=r.bind(this,null),t.on("error",r),t.on("response",a)}}.bind(this)),t},g.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))},g.prototype.toString=function(){return"[object FormData]"},vt}()),Fn.exports)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};Ct.forEach(["delete","get","head"],(function(e){Bt.headers[e]={}})),Ct.forEach(["post","put","patch"],(function(e){Bt.headers[e]=Ct.merge(Et)}));var Dt,$t,Ft=Bt,It=he,Ot=Ft;function Rt(){return $t?Dt:($t=1,Dt=function(e){return!(!e||!e.__CANCEL__)})}var Nt=he,zt=function(e,n,t){var i=this||Ot;return It.forEach(t,(function(t){e=t.call(i,e,n)})),e},qt=Rt(),Mt=Ft,Vt=Ze();function Ut(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Vt}var Wt=he,Yt=function(e,n){n=n||{};var t={};function i(e,n){return Wt.isPlainObject(e)&&Wt.isPlainObject(n)?Wt.merge(e,n):Wt.isPlainObject(n)?Wt.merge({},n):Wt.isArray(n)?n.slice():n}function a(t){return Wt.isUndefined(n[t])?Wt.isUndefined(e[t])?void 0:i(void 0,e[t]):i(e[t],n[t])}function r(e){if(!Wt.isUndefined(n[e]))return i(void 0,n[e])}function o(t){return Wt.isUndefined(n[t])?Wt.isUndefined(e[t])?void 0:i(void 0,e[t]):i(void 0,n[t])}function s(t){return t in n?i(e[t],n[t]):t in e?i(void 0,e[t]):void 0}var c={url:r,method:r,data:r,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,beforeRedirect:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:s};return Wt.forEach(Object.keys(e).concat(Object.keys(n)),(function(e){var n=c[e]||a,i=n(e);Wt.isUndefined(i)&&n!==s||(t[e]=i)})),t},Ht=En().version,Kt=Se(),Gt={};["object","boolean","number","function","string","symbol"].forEach((function(e,n){Gt[e]=function(t){return typeof t===e||"a"+(n<1?"n ":" ")+e}}));var Jt={};Gt.transitional=function(e,n,t){function i(e,n){return"[Axios v"+Ht+"] Transitional option '"+e+"'"+n+(t?". "+t:"")}return function(t,a,r){if(!1===e)throw new Kt(i(a," has been removed"+(n?" in "+n:"")),Kt.ERR_DEPRECATED);return n&&!Jt[a]&&(Jt[a]=!0,console.warn(i(a," has been deprecated since v"+n+" and will be removed in the near future"))),!e||e(t,a,r)}};var Zt,Xt,Qt,ei,ni,ti,ii={assertOptions:function(e,n,t){if("object"!=typeof e)throw new Kt("options must be an object",Kt.ERR_BAD_OPTION_VALUE);for(var i=Object.keys(e),a=i.length;a-- >0;){var r=i[a],o=n[r];if(o){var s=e[r],c=void 0===s||o(s,r,e);if(!0!==c)throw new Kt("option "+r+" must be "+c,Kt.ERR_BAD_OPTION_VALUE)}else if(!0!==t)throw new Kt("Unknown option "+r,Kt.ERR_BAD_OPTION)}},validators:Gt},ai=he,ri=ge,oi=Ae,si=function(e){return Ut(e),e.headers=e.headers||{},e.data=zt.call(e,e.data,e.headers,e.transformRequest),e.headers=Nt.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),Nt.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete e.headers[n]})),(e.adapter||Mt.adapter)(e).then((function(n){return Ut(e),n.data=zt.call(e,n.data,n.headers,e.transformResponse),n}),(function(n){return qt(n)||(Ut(e),n&&n.response&&(n.response.data=zt.call(e,n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)}))},ci=Yt,li=Ke,pi=ii,ui=pi.validators;function di(e){this.defaults=e,this.interceptors={request:new oi,response:new oi}}di.prototype.request=function(e,n){"string"==typeof e?(n=n||{}).url=e:n=e||{},(n=ci(this.defaults,n)).method?n.method=n.method.toLowerCase():this.defaults.method?n.method=this.defaults.method.toLowerCase():n.method="get";var t=n.transitional;void 0!==t&&pi.assertOptions(t,{silentJSONParsing:ui.transitional(ui.boolean),forcedJSONParsing:ui.transitional(ui.boolean),clarifyTimeoutError:ui.transitional(ui.boolean)},!1);var i=[],a=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(n)||(a=a&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));var r,o=[];if(this.interceptors.response.forEach((function(e){o.push(e.fulfilled,e.rejected)})),!a){var s=[si,void 0];for(Array.prototype.unshift.apply(s,i),s=s.concat(o),r=Promise.resolve(n);s.length;)r=r.then(s.shift(),s.shift());return r}for(var c=n;i.length;){var l=i.shift(),p=i.shift();try{c=l(c)}catch(e){p(e);break}}try{r=si(c)}catch(e){return Promise.reject(e)}for(;o.length;)r=r.then(o.shift(),o.shift());return r},di.prototype.getUri=function(e){e=ci(this.defaults,e);var n=li(e.baseURL,e.url);return ri(n,e.params,e.paramsSerializer)},ai.forEach(["delete","get","head","options"],(function(e){di.prototype[e]=function(n,t){return this.request(ci(t||{},{method:e,url:n,data:(t||{}).data}))}})),ai.forEach(["post","put","patch"],(function(e){function n(n){return function(t,i,a){return this.request(ci(a||{},{method:e,headers:n?{"Content-Type":"multipart/form-data"}:{},url:t,data:i}))}}di.prototype[e]=n(),di.prototype[e+"Form"]=n(!0)}));var mi=he,fi=J,hi=di,vi=Yt;var xi=function e(n){var t=new hi(n),i=fi(hi.prototype.request,t);return mi.extend(i,hi.prototype,t),mi.extend(i,t),i.create=function(t){return e(vi(n,t))},i}(Ft);xi.Axios=hi,xi.CanceledError=Ze(),xi.CancelToken=function(){if(Xt)return Zt;Xt=1;var e=Ze();function n(n){if("function"!=typeof n)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var i=this;this.promise.then((function(e){if(i._listeners){var n,t=i._listeners.length;for(n=0;n<t;n++)i._listeners[n](e);i._listeners=null}})),this.promise.then=function(e){var n,t=new Promise((function(e){i.subscribe(e),n=e})).then(e);return t.cancel=function(){i.unsubscribe(n)},t},n((function(n){i.reason||(i.reason=new e(n),t(i.reason))}))}return n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},n.prototype.unsubscribe=function(e){if(this._listeners){var n=this._listeners.indexOf(e);-1!==n&&this._listeners.splice(n,1)}},n.source=function(){var e;return{token:new n((function(n){e=n})),cancel:e}},Zt=n}(),xi.isCancel=Rt(),xi.VERSION=En().version,xi.toFormData=De(),xi.AxiosError=Se(),xi.Cancel=xi.CanceledError,xi.all=function(e){return Promise.all(e)},xi.spread=ei?Qt:(ei=1,Qt=function(e){return function(n){return e.apply(null,n)}}),xi.isAxiosError=function(){if(ti)return ni;ti=1;var e=he;return ni=function(n){return e.isObject(n)&&!0===n.isAxiosError}}(),G.exports=xi,G.exports.default=xi;const gi=Y(K.exports=G.exports).create({timeout:12e4,headers:{"Content-Type":"application/json;charset=utf-8"}});var bi={exports:{}},yi=bi.exports=function(){var e=1e3,n=6e4,t=36e5,i="millisecond",a="second",r="minute",o="hour",s="day",c="week",l="month",p="quarter",u="year",d="date",m="Invalid Date",f=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,h=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,v={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(e){var n=["th","st","nd","rd"],t=e%100;return"["+e+(n[(t-20)%10]||n[t]||n[0])+"]"}},x=function(e,n,t){var i=String(e);return!i||i.length>=n?e:""+Array(n+1-i.length).join(t)+e},g={s:x,z:function(e){var n=-e.utcOffset(),t=Math.abs(n),i=Math.floor(t/60),a=t%60;return(n<=0?"+":"-")+x(i,2,"0")+":"+x(a,2,"0")},m:function e(n,t){if(n.date()<t.date())return-e(t,n);var i=12*(t.year()-n.year())+(t.month()-n.month()),a=n.clone().add(i,l),r=t-a<0,o=n.clone().add(i+(r?-1:1),l);return+(-(i+(t-a)/(r?a-o:o-a))||0)},a:function(e){return e<0?Math.ceil(e)||0:Math.floor(e)},p:function(e){return{M:l,y:u,w:c,d:s,D:d,h:o,m:r,s:a,ms:i,Q:p}[e]||String(e||"").toLowerCase().replace(/s$/,"")},u:function(e){return void 0===e}},b="en",y={};y[b]=v;var _="$isDayjsObject",w=function(e){return e instanceof k||!(!e||!e[_])},A=function e(n,t,i){var a;if(!n)return b;if("string"==typeof n){var r=n.toLowerCase();y[r]&&(a=r),t&&(y[r]=t,a=r);var o=n.split("-");if(!a&&o.length>1)return e(o[0])}else{var s=n.name;y[s]=n,a=s}return!i&&a&&(b=a),a||!i&&b},C=function(e,n){if(w(e))return e.clone();var t="object"==typeof n?n:{};return t.date=e,t.args=arguments,new k(t)},S=g;S.l=A,S.i=w,S.w=function(e,n){return C(e,{locale:n.$L,utc:n.$u,x:n.$x,$offset:n.$offset})};var k=function(){function v(e){this.$L=A(e.locale,null,!0),this.parse(e),this.$x=this.$x||e.x||{},this[_]=!0}var x=v.prototype;return x.parse=function(e){this.$d=function(e){var n=e.date,t=e.utc;if(null===n)return new Date(NaN);if(S.u(n))return new Date;if(n instanceof Date)return new Date(n);if("string"==typeof n&&!/Z$/i.test(n)){var i=n.match(f);if(i){var a=i[2]-1||0,r=(i[7]||"0").substring(0,3);return t?new Date(Date.UTC(i[1],a,i[3]||1,i[4]||0,i[5]||0,i[6]||0,r)):new Date(i[1],a,i[3]||1,i[4]||0,i[5]||0,i[6]||0,r)}}return new Date(n)}(e),this.init()},x.init=function(){var e=this.$d;this.$y=e.getFullYear(),this.$M=e.getMonth(),this.$D=e.getDate(),this.$W=e.getDay(),this.$H=e.getHours(),this.$m=e.getMinutes(),this.$s=e.getSeconds(),this.$ms=e.getMilliseconds()},x.$utils=function(){return S},x.isValid=function(){return!(this.$d.toString()===m)},x.isSame=function(e,n){var t=C(e);return this.startOf(n)<=t&&t<=this.endOf(n)},x.isAfter=function(e,n){return C(e)<this.startOf(n)},x.isBefore=function(e,n){return this.endOf(n)<C(e)},x.$g=function(e,n,t){return S.u(e)?this[n]:this.set(t,e)},x.unix=function(){return Math.floor(this.valueOf()/1e3)},x.valueOf=function(){return this.$d.getTime()},x.startOf=function(e,n){var t=this,i=!!S.u(n)||n,p=S.p(e),m=function(e,n){var a=S.w(t.$u?Date.UTC(t.$y,n,e):new Date(t.$y,n,e),t);return i?a:a.endOf(s)},f=function(e,n){return S.w(t.toDate()[e].apply(t.toDate("s"),(i?[0,0,0,0]:[23,59,59,999]).slice(n)),t)},h=this.$W,v=this.$M,x=this.$D,g="set"+(this.$u?"UTC":"");switch(p){case u:return i?m(1,0):m(31,11);case l:return i?m(1,v):m(0,v+1);case c:var b=this.$locale().weekStart||0,y=(h<b?h+7:h)-b;return m(i?x-y:x+(6-y),v);case s:case d:return f(g+"Hours",0);case o:return f(g+"Minutes",1);case r:return f(g+"Seconds",2);case a:return f(g+"Milliseconds",3);default:return this.clone()}},x.endOf=function(e){return this.startOf(e,!1)},x.$set=function(e,n){var t,c=S.p(e),p="set"+(this.$u?"UTC":""),m=(t={},t[s]=p+"Date",t[d]=p+"Date",t[l]=p+"Month",t[u]=p+"FullYear",t[o]=p+"Hours",t[r]=p+"Minutes",t[a]=p+"Seconds",t[i]=p+"Milliseconds",t)[c],f=c===s?this.$D+(n-this.$W):n;if(c===l||c===u){var h=this.clone().set(d,1);h.$d[m](f),h.init(),this.$d=h.set(d,Math.min(this.$D,h.daysInMonth())).$d}else m&&this.$d[m](f);return this.init(),this},x.set=function(e,n){return this.clone().$set(e,n)},x.get=function(e){return this[S.p(e)]()},x.add=function(i,p){var d,m=this;i=Number(i);var f=S.p(p),h=function(e){var n=C(m);return S.w(n.date(n.date()+Math.round(e*i)),m)};if(f===l)return this.set(l,this.$M+i);if(f===u)return this.set(u,this.$y+i);if(f===s)return h(1);if(f===c)return h(7);var v=(d={},d[r]=n,d[o]=t,d[a]=e,d)[f]||1,x=this.$d.getTime()+i*v;return S.w(x,this)},x.subtract=function(e,n){return this.add(-1*e,n)},x.format=function(e){var n=this,t=this.$locale();if(!this.isValid())return t.invalidDate||m;var i=e||"YYYY-MM-DDTHH:mm:ssZ",a=S.z(this),r=this.$H,o=this.$m,s=this.$M,c=t.weekdays,l=t.months,p=t.meridiem,u=function(e,t,a,r){return e&&(e[t]||e(n,i))||a[t].slice(0,r)},d=function(e){return S.s(r%12||12,e,"0")},f=p||function(e,n,t){var i=e<12?"AM":"PM";return t?i.toLowerCase():i};return i.replace(h,(function(e,i){return i||function(e){switch(e){case"YY":return String(n.$y).slice(-2);case"YYYY":return S.s(n.$y,4,"0");case"M":return s+1;case"MM":return S.s(s+1,2,"0");case"MMM":return u(t.monthsShort,s,l,3);case"MMMM":return u(l,s);case"D":return n.$D;case"DD":return S.s(n.$D,2,"0");case"d":return String(n.$W);case"dd":return u(t.weekdaysMin,n.$W,c,2);case"ddd":return u(t.weekdaysShort,n.$W,c,3);case"dddd":return c[n.$W];case"H":return String(r);case"HH":return S.s(r,2,"0");case"h":return d(1);case"hh":return d(2);case"a":return f(r,o,!0);case"A":return f(r,o,!1);case"m":return String(o);case"mm":return S.s(o,2,"0");case"s":return String(n.$s);case"ss":return S.s(n.$s,2,"0");case"SSS":return S.s(n.$ms,3,"0");case"Z":return a}return null}(e)||a.replace(":","")}))},x.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},x.diff=function(i,d,m){var f,h=this,v=S.p(d),x=C(i),g=(x.utcOffset()-this.utcOffset())*n,b=this-x,y=function(){return S.m(h,x)};switch(v){case u:f=y()/12;break;case l:f=y();break;case p:f=y()/3;break;case c:f=(b-g)/6048e5;break;case s:f=(b-g)/864e5;break;case o:f=b/t;break;case r:f=b/n;break;case a:f=b/e;break;default:f=b}return m?f:S.a(f)},x.daysInMonth=function(){return this.endOf(l).$D},x.$locale=function(){return y[this.$L]},x.locale=function(e,n){if(!e)return this.$L;var t=this.clone(),i=A(e,n,!0);return i&&(t.$L=i),t},x.clone=function(){return S.w(this.$d,this)},x.toDate=function(){return new Date(this.valueOf())},x.toJSON=function(){return this.isValid()?this.toISOString():null},x.toISOString=function(){return this.$d.toISOString()},x.toString=function(){return this.$d.toUTCString()},v}(),j=k.prototype;return C.prototype=j,[["$ms",i],["$s",a],["$m",r],["$H",o],["$W",s],["$M",l],["$y",u],["$D",d]].forEach((function(e){j[e[1]]=function(n){return this.$g(n,e[0],e[1])}})),C.extend=function(e,n){return e.$i||(e(n,k,C),e.$i=!0),C},C.locale=A,C.isDayjs=w,C.unix=function(e){return C(1e3*e)},C.en=y[b],C.Ls=y,C.p={},C}();const _i=function(e){if(0===e)return"0.00";let n="0";return e&&"NaN"!==e.toString()&&(n=(e/1).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")),n},wi=function(e){return e&&"string"==typeof e?e.substring(0,1):""},Ai=function(){for(var e=[],n="0123456789abcdef",t=0;t<36;t++)e[t]=n.substr(Math.floor(16*Math.random()),1);e[14]="4",e[19]=n.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-";var i=e.join("");return i},Ci=function(e){var n=String(e);return n.substr(0,3)+"****"+n.substr(7)},Si=function(e){let n="";return e.forEach(((t,i)=>{n=n+JSON.parse(t).name+(i===e.length-1?"":"/")})),n};var ki,ji,Ti=function(e){e.filter("currency",_i),e.filter("getUUID",Ai),e.filter("phoneEncry",Ci),e.filter("peopleShow",Si),e.filter("indexFirst",wi)},Ei={exports:{}};
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
ki=Ei,ji=Ei.exports,function(){var e,n="Expected a function",t="__lodash_hash_undefined__",i="__lodash_placeholder__",a=16,r=32,o=64,s=128,c=256,l=1/0,p=9007199254740991,u=NaN,d=4294967295,m=[["ary",s],["bind",1],["bindKey",2],["curry",8],["curryRight",a],["flip",512],["partial",r],["partialRight",o],["rearg",c]],f="[object Arguments]",h="[object Array]",v="[object Boolean]",x="[object Date]",g="[object Error]",b="[object Function]",y="[object GeneratorFunction]",_="[object Map]",w="[object Number]",A="[object Object]",C="[object Promise]",S="[object RegExp]",k="[object Set]",j="[object String]",T="[object Symbol]",E="[object WeakMap]",P="[object ArrayBuffer]",L="[object DataView]",B="[object Float32Array]",D="[object Float64Array]",$="[object Int8Array]",F="[object Int16Array]",I="[object Int32Array]",O="[object Uint8Array]",R="[object Uint8ClampedArray]",N="[object Uint16Array]",z="[object Uint32Array]",q=/\b__p \+= '';/g,M=/\b(__p \+=) '' \+/g,V=/(__e\(.*?\)|\b__t\)) \+\n'';/g,U=/&(?:amp|lt|gt|quot|#39);/g,Y=/[&<>"']/g,H=RegExp(U.source),K=RegExp(Y.source),G=/<%-([\s\S]+?)%>/g,J=/<%([\s\S]+?)%>/g,Z=/<%=([\s\S]+?)%>/g,X=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Q=/^\w*$/,ee=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ne=/[\\^$.*+?()[\]{}|]/g,te=RegExp(ne.source),ie=/^\s+/,ae=/\s/,re=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,oe=/\{\n\/\* \[wrapped with (.+)\] \*/,se=/,? & /,ce=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,le=/[()=,{}\[\]\/\s]/,pe=/\\(\\)?/g,ue=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,de=/\w*$/,me=/^[-+]0x[0-9a-f]+$/i,fe=/^0b[01]+$/i,he=/^\[object .+?Constructor\]$/,ve=/^0o[0-7]+$/i,xe=/^(?:0|[1-9]\d*)$/,ge=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,be=/($^)/,ye=/['\n\r\u2028\u2029\\]/g,_e="\\ud800-\\udfff",we="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ae="\\u2700-\\u27bf",Ce="a-z\\xdf-\\xf6\\xf8-\\xff",Se="A-Z\\xc0-\\xd6\\xd8-\\xde",ke="\\ufe0e\\ufe0f",je="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Te="['’]",Ee="["+_e+"]",Pe="["+je+"]",Le="["+we+"]",Be="\\d+",De="["+Ae+"]",$e="["+Ce+"]",Fe="[^"+_e+je+Be+Ae+Ce+Se+"]",Ie="\\ud83c[\\udffb-\\udfff]",Oe="[^"+_e+"]",Re="(?:\\ud83c[\\udde6-\\uddff]){2}",Ne="[\\ud800-\\udbff][\\udc00-\\udfff]",ze="["+Se+"]",qe="\\u200d",Me="(?:"+$e+"|"+Fe+")",Ve="(?:"+ze+"|"+Fe+")",Ue="(?:['’](?:d|ll|m|re|s|t|ve))?",We="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ye="(?:"+Le+"|"+Ie+")?",He="["+ke+"]?",Ke=He+Ye+"(?:"+qe+"(?:"+[Oe,Re,Ne].join("|")+")"+He+Ye+")*",Ge="(?:"+[De,Re,Ne].join("|")+")"+Ke,Je="(?:"+[Oe+Le+"?",Le,Re,Ne,Ee].join("|")+")",Ze=RegExp(Te,"g"),Xe=RegExp(Le,"g"),Qe=RegExp(Ie+"(?="+Ie+")|"+Je+Ke,"g"),en=RegExp([ze+"?"+$e+"+"+Ue+"(?="+[Pe,ze,"$"].join("|")+")",Ve+"+"+We+"(?="+[Pe,ze+Me,"$"].join("|")+")",ze+"?"+Me+"+"+Ue,ze+"+"+We,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Be,Ge].join("|"),"g"),nn=RegExp("["+qe+_e+we+ke+"]"),tn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,an=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],rn=-1,on={};on[B]=on[D]=on[$]=on[F]=on[I]=on[O]=on[R]=on[N]=on[z]=!0,on[f]=on[h]=on[P]=on[v]=on[L]=on[x]=on[g]=on[b]=on[_]=on[w]=on[A]=on[S]=on[k]=on[j]=on[E]=!1;var sn={};sn[f]=sn[h]=sn[P]=sn[L]=sn[v]=sn[x]=sn[B]=sn[D]=sn[$]=sn[F]=sn[I]=sn[_]=sn[w]=sn[A]=sn[S]=sn[k]=sn[j]=sn[T]=sn[O]=sn[R]=sn[N]=sn[z]=!0,sn[g]=sn[b]=sn[E]=!1;var cn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ln=parseFloat,pn=parseInt,un="object"==typeof W&&W&&W.Object===Object&&W,dn="object"==typeof self&&self&&self.Object===Object&&self,mn=un||dn||Function("return this")(),fn=ji&&!ji.nodeType&&ji,hn=fn&&ki&&!ki.nodeType&&ki,vn=hn&&hn.exports===fn,xn=vn&&un.process,gn=function(){try{var e=hn&&hn.require&&hn.require("util").types;return e||xn&&xn.binding&&xn.binding("util")}catch(e){}}(),bn=gn&&gn.isArrayBuffer,yn=gn&&gn.isDate,_n=gn&&gn.isMap,wn=gn&&gn.isRegExp,An=gn&&gn.isSet,Cn=gn&&gn.isTypedArray;function Sn(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}function kn(e,n,t,i){for(var a=-1,r=null==e?0:e.length;++a<r;){var o=e[a];n(i,o,t(o),e)}return i}function jn(e,n){for(var t=-1,i=null==e?0:e.length;++t<i&&!1!==n(e[t],t,e););return e}function Tn(e,n){for(var t=null==e?0:e.length;t--&&!1!==n(e[t],t,e););return e}function En(e,n){for(var t=-1,i=null==e?0:e.length;++t<i;)if(!n(e[t],t,e))return!1;return!0}function Pn(e,n){for(var t=-1,i=null==e?0:e.length,a=0,r=[];++t<i;){var o=e[t];n(o,t,e)&&(r[a++]=o)}return r}function Ln(e,n){return!(null==e||!e.length)&&qn(e,n,0)>-1}function Bn(e,n,t){for(var i=-1,a=null==e?0:e.length;++i<a;)if(t(n,e[i]))return!0;return!1}function Dn(e,n){for(var t=-1,i=null==e?0:e.length,a=Array(i);++t<i;)a[t]=n(e[t],t,e);return a}function $n(e,n){for(var t=-1,i=n.length,a=e.length;++t<i;)e[a+t]=n[t];return e}function Fn(e,n,t,i){var a=-1,r=null==e?0:e.length;for(i&&r&&(t=e[++a]);++a<r;)t=n(t,e[a],a,e);return t}function In(e,n,t,i){var a=null==e?0:e.length;for(i&&a&&(t=e[--a]);a--;)t=n(t,e[a],a,e);return t}function On(e,n){for(var t=-1,i=null==e?0:e.length;++t<i;)if(n(e[t],t,e))return!0;return!1}var Rn=Wn("length");function Nn(e,n,t){var i;return t(e,(function(e,t,a){if(n(e,t,a))return i=t,!1})),i}function zn(e,n,t,i){for(var a=e.length,r=t+(i?1:-1);i?r--:++r<a;)if(n(e[r],r,e))return r;return-1}function qn(e,n,t){return n==n?function(e,n,t){for(var i=t-1,a=e.length;++i<a;)if(e[i]===n)return i;return-1}(e,n,t):zn(e,Vn,t)}function Mn(e,n,t,i){for(var a=t-1,r=e.length;++a<r;)if(i(e[a],n))return a;return-1}function Vn(e){return e!=e}function Un(e,n){var t=null==e?0:e.length;return t?Kn(e,n)/t:u}function Wn(n){return function(t){return null==t?e:t[n]}}function Yn(n){return function(t){return null==n?e:n[t]}}function Hn(e,n,t,i,a){return a(e,(function(e,a,r){t=i?(i=!1,e):n(t,e,a,r)})),t}function Kn(n,t){for(var i,a=-1,r=n.length;++a<r;){var o=t(n[a]);o!==e&&(i=i===e?o:i+o)}return i}function Gn(e,n){for(var t=-1,i=Array(e);++t<e;)i[t]=n(t);return i}function Jn(e){return e?e.slice(0,mt(e)+1).replace(ie,""):e}function Zn(e){return function(n){return e(n)}}function Xn(e,n){return Dn(n,(function(n){return e[n]}))}function Qn(e,n){return e.has(n)}function et(e,n){for(var t=-1,i=e.length;++t<i&&qn(n,e[t],0)>-1;);return t}function nt(e,n){for(var t=e.length;t--&&qn(n,e[t],0)>-1;);return t}var tt=Yn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),it=Yn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function at(e){return"\\"+cn[e]}function rt(e){return nn.test(e)}function ot(e){var n=-1,t=Array(e.size);return e.forEach((function(e,i){t[++n]=[i,e]})),t}function st(e,n){return function(t){return e(n(t))}}function ct(e,n){for(var t=-1,a=e.length,r=0,o=[];++t<a;){var s=e[t];s!==n&&s!==i||(e[t]=i,o[r++]=t)}return o}function lt(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}function pt(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=[e,e]})),t}function ut(e){return rt(e)?function(e){for(var n=Qe.lastIndex=0;Qe.test(e);)++n;return n}(e):Rn(e)}function dt(e){return rt(e)?function(e){return e.match(Qe)||[]}(e):function(e){return e.split("")}(e)}function mt(e){for(var n=e.length;n--&&ae.test(e.charAt(n)););return n}var ft=Yn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),ht=function W(ae){var _e,we=(ae=null==ae?mn:ht.defaults(mn.Object(),ae,ht.pick(mn,an))).Array,Ae=ae.Date,Ce=ae.Error,Se=ae.Function,ke=ae.Math,je=ae.Object,Te=ae.RegExp,Ee=ae.String,Pe=ae.TypeError,Le=we.prototype,Be=Se.prototype,De=je.prototype,$e=ae["__core-js_shared__"],Fe=Be.toString,Ie=De.hasOwnProperty,Oe=0,Re=(_e=/[^.]+$/.exec($e&&$e.keys&&$e.keys.IE_PROTO||""))?"Symbol(src)_1."+_e:"",Ne=De.toString,ze=Fe.call(je),qe=mn._,Me=Te("^"+Fe.call(Ie).replace(ne,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ve=vn?ae.Buffer:e,Ue=ae.Symbol,We=ae.Uint8Array,Ye=Ve?Ve.allocUnsafe:e,He=st(je.getPrototypeOf,je),Ke=je.create,Ge=De.propertyIsEnumerable,Je=Le.splice,Qe=Ue?Ue.isConcatSpreadable:e,nn=Ue?Ue.iterator:e,cn=Ue?Ue.toStringTag:e,un=function(){try{var e=dr(je,"defineProperty");return e({},"",{}),e}catch(e){}}(),dn=ae.clearTimeout!==mn.clearTimeout&&ae.clearTimeout,fn=Ae&&Ae.now!==mn.Date.now&&Ae.now,hn=ae.setTimeout!==mn.setTimeout&&ae.setTimeout,xn=ke.ceil,gn=ke.floor,Rn=je.getOwnPropertySymbols,Yn=Ve?Ve.isBuffer:e,vt=ae.isFinite,xt=Le.join,gt=st(je.keys,je),bt=ke.max,yt=ke.min,_t=Ae.now,wt=ae.parseInt,At=ke.random,Ct=Le.reverse,St=dr(ae,"DataView"),kt=dr(ae,"Map"),jt=dr(ae,"Promise"),Tt=dr(ae,"Set"),Et=dr(ae,"WeakMap"),Pt=dr(je,"create"),Lt=Et&&new Et,Bt={},Dt=Rr(St),$t=Rr(kt),Ft=Rr(jt),It=Rr(Tt),Ot=Rr(Et),Rt=Ue?Ue.prototype:e,Nt=Rt?Rt.valueOf:e,zt=Rt?Rt.toString:e;function qt(e){if(ts(e)&&!Wo(e)&&!(e instanceof Wt)){if(e instanceof Ut)return e;if(Ie.call(e,"__wrapped__"))return Nr(e)}return new Ut(e)}var Mt=function(){function n(){}return function(t){if(!ns(t))return{};if(Ke)return Ke(t);n.prototype=t;var i=new n;return n.prototype=e,i}}();function Vt(){}function Ut(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=e}function Wt(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=d,this.__views__=[]}function Yt(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var i=e[n];this.set(i[0],i[1])}}function Ht(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var i=e[n];this.set(i[0],i[1])}}function Kt(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var i=e[n];this.set(i[0],i[1])}}function Gt(e){var n=-1,t=null==e?0:e.length;for(this.__data__=new Kt;++n<t;)this.add(e[n])}function Jt(e){var n=this.__data__=new Ht(e);this.size=n.size}function Zt(e,n){var t=Wo(e),i=!t&&Uo(e),a=!t&&!i&&Go(e),r=!t&&!i&&!a&&ps(e),o=t||i||a||r,s=o?Gn(e.length,Ee):[],c=s.length;for(var l in e)!n&&!Ie.call(e,l)||o&&("length"==l||a&&("offset"==l||"parent"==l)||r&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||br(l,c))||s.push(l);return s}function Xt(n){var t=n.length;return t?n[Gi(0,t-1)]:e}function Qt(e,n){return Fr(Pa(e),ci(n,0,e.length))}function ei(e){return Fr(Pa(e))}function ni(n,t,i){(i!==e&&!qo(n[t],i)||i===e&&!(t in n))&&oi(n,t,i)}function ti(n,t,i){var a=n[t];Ie.call(n,t)&&qo(a,i)&&(i!==e||t in n)||oi(n,t,i)}function ii(e,n){for(var t=e.length;t--;)if(qo(e[t][0],n))return t;return-1}function ai(e,n,t,i){return mi(e,(function(e,a,r){n(i,e,t(e),r)})),i}function ri(e,n){return e&&La(n,Bs(n),e)}function oi(e,n,t){"__proto__"==n&&un?un(e,n,{configurable:!0,enumerable:!0,value:t,writable:!0}):e[n]=t}function si(n,t){for(var i=-1,a=t.length,r=we(a),o=null==n;++i<a;)r[i]=o?e:js(n,t[i]);return r}function ci(n,t,i){return n==n&&(i!==e&&(n=n<=i?n:i),t!==e&&(n=n>=t?n:t)),n}function li(n,t,i,a,r,o){var s,c=1&t,l=2&t,p=4&t;if(i&&(s=r?i(n,a,r,o):i(n)),s!==e)return s;if(!ns(n))return n;var u=Wo(n);if(u){if(s=function(e){var n=e.length,t=new e.constructor(n);return n&&"string"==typeof e[0]&&Ie.call(e,"index")&&(t.index=e.index,t.input=e.input),t}(n),!c)return Pa(n,s)}else{var d=hr(n),m=d==b||d==y;if(Go(n))return Ca(n,c);if(d==A||d==f||m&&!r){if(s=l||m?{}:xr(n),!c)return l?function(e,n){return La(e,fr(e),n)}(n,function(e,n){return e&&La(n,Ds(n),e)}(s,n)):function(e,n){return La(e,mr(e),n)}(n,ri(s,n))}else{if(!sn[d])return r?n:{};s=function(e,n,t){var i,a=e.constructor;switch(n){case P:return Sa(e);case v:case x:return new a(+e);case L:return function(e,n){var t=n?Sa(e.buffer):e.buffer;return new e.constructor(t,e.byteOffset,e.byteLength)}(e,t);case B:case D:case $:case F:case I:case O:case R:case N:case z:return ka(e,t);case _:return new a;case w:case j:return new a(e);case S:return function(e){var n=new e.constructor(e.source,de.exec(e));return n.lastIndex=e.lastIndex,n}(e);case k:return new a;case T:return i=e,Nt?je(Nt.call(i)):{}}}(n,d,c)}}o||(o=new Jt);var h=o.get(n);if(h)return h;o.set(n,s),ss(n)?n.forEach((function(e){s.add(li(e,t,i,e,n,o))})):is(n)&&n.forEach((function(e,a){s.set(a,li(e,t,i,a,n,o))}));var g=u?e:(p?l?rr:ar:l?Ds:Bs)(n);return jn(g||n,(function(e,a){g&&(e=n[a=e]),ti(s,a,li(e,t,i,a,n,o))})),s}function pi(n,t,i){var a=i.length;if(null==n)return!a;for(n=je(n);a--;){var r=i[a],o=t[r],s=n[r];if(s===e&&!(r in n)||!o(s))return!1}return!0}function ui(t,i,a){if("function"!=typeof t)throw new Pe(n);return Lr((function(){t.apply(e,a)}),i)}function di(e,n,t,i){var a=-1,r=Ln,o=!0,s=e.length,c=[],l=n.length;if(!s)return c;t&&(n=Dn(n,Zn(t))),i?(r=Bn,o=!1):n.length>=200&&(r=Qn,o=!1,n=new Gt(n));e:for(;++a<s;){var p=e[a],u=null==t?p:t(p);if(p=i||0!==p?p:0,o&&u==u){for(var d=l;d--;)if(n[d]===u)continue e;c.push(p)}else r(n,u,i)||c.push(p)}return c}qt.templateSettings={escape:G,evaluate:J,interpolate:Z,variable:"",imports:{_:qt}},qt.prototype=Vt.prototype,qt.prototype.constructor=qt,Ut.prototype=Mt(Vt.prototype),Ut.prototype.constructor=Ut,Wt.prototype=Mt(Vt.prototype),Wt.prototype.constructor=Wt,Yt.prototype.clear=function(){this.__data__=Pt?Pt(null):{},this.size=0},Yt.prototype.delete=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n},Yt.prototype.get=function(n){var i=this.__data__;if(Pt){var a=i[n];return a===t?e:a}return Ie.call(i,n)?i[n]:e},Yt.prototype.has=function(n){var t=this.__data__;return Pt?t[n]!==e:Ie.call(t,n)},Yt.prototype.set=function(n,i){var a=this.__data__;return this.size+=this.has(n)?0:1,a[n]=Pt&&i===e?t:i,this},Ht.prototype.clear=function(){this.__data__=[],this.size=0},Ht.prototype.delete=function(e){var n=this.__data__,t=ii(n,e);return!(t<0||(t==n.length-1?n.pop():Je.call(n,t,1),--this.size,0))},Ht.prototype.get=function(n){var t=this.__data__,i=ii(t,n);return i<0?e:t[i][1]},Ht.prototype.has=function(e){return ii(this.__data__,e)>-1},Ht.prototype.set=function(e,n){var t=this.__data__,i=ii(t,e);return i<0?(++this.size,t.push([e,n])):t[i][1]=n,this},Kt.prototype.clear=function(){this.size=0,this.__data__={hash:new Yt,map:new(kt||Ht),string:new Yt}},Kt.prototype.delete=function(e){var n=pr(this,e).delete(e);return this.size-=n?1:0,n},Kt.prototype.get=function(e){return pr(this,e).get(e)},Kt.prototype.has=function(e){return pr(this,e).has(e)},Kt.prototype.set=function(e,n){var t=pr(this,e),i=t.size;return t.set(e,n),this.size+=t.size==i?0:1,this},Gt.prototype.add=Gt.prototype.push=function(e){return this.__data__.set(e,t),this},Gt.prototype.has=function(e){return this.__data__.has(e)},Jt.prototype.clear=function(){this.__data__=new Ht,this.size=0},Jt.prototype.delete=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t},Jt.prototype.get=function(e){return this.__data__.get(e)},Jt.prototype.has=function(e){return this.__data__.has(e)},Jt.prototype.set=function(e,n){var t=this.__data__;if(t instanceof Ht){var i=t.__data__;if(!kt||i.length<199)return i.push([e,n]),this.size=++t.size,this;t=this.__data__=new Kt(i)}return t.set(e,n),this.size=t.size,this};var mi=$a(_i),fi=$a(wi,!0);function hi(e,n){var t=!0;return mi(e,(function(e,i,a){return t=!!n(e,i,a)})),t}function vi(n,t,i){for(var a=-1,r=n.length;++a<r;){var o=n[a],s=t(o);if(null!=s&&(c===e?s==s&&!ls(s):i(s,c)))var c=s,l=o}return l}function xi(e,n){var t=[];return mi(e,(function(e,i,a){n(e,i,a)&&t.push(e)})),t}function gi(e,n,t,i,a){var r=-1,o=e.length;for(t||(t=gr),a||(a=[]);++r<o;){var s=e[r];n>0&&t(s)?n>1?gi(s,n-1,t,i,a):$n(a,s):i||(a[a.length]=s)}return a}var bi=Fa(),yi=Fa(!0);function _i(e,n){return e&&bi(e,n,Bs)}function wi(e,n){return e&&yi(e,n,Bs)}function Ai(e,n){return Pn(n,(function(n){return Xo(e[n])}))}function Ci(n,t){for(var i=0,a=(t=ya(t,n)).length;null!=n&&i<a;)n=n[Or(t[i++])];return i&&i==a?n:e}function Si(e,n,t){var i=n(e);return Wo(e)?i:$n(i,t(e))}function ki(n){return null==n?n===e?"[object Undefined]":"[object Null]":cn&&cn in je(n)?function(n){var t=Ie.call(n,cn),i=n[cn];try{n[cn]=e;var a=!0}catch(e){}var r=Ne.call(n);return a&&(t?n[cn]=i:delete n[cn]),r}(n):function(e){return Ne.call(e)}(n)}function ji(e,n){return e>n}function Ti(e,n){return null!=e&&Ie.call(e,n)}function Ei(e,n){return null!=e&&n in je(e)}function Pi(n,t,i){for(var a=i?Bn:Ln,r=n[0].length,o=n.length,s=o,c=we(o),l=1/0,p=[];s--;){var u=n[s];s&&t&&(u=Dn(u,Zn(t))),l=yt(u.length,l),c[s]=!i&&(t||r>=120&&u.length>=120)?new Gt(s&&u):e}u=n[0];var d=-1,m=c[0];e:for(;++d<r&&p.length<l;){var f=u[d],h=t?t(f):f;if(f=i||0!==f?f:0,!(m?Qn(m,h):a(p,h,i))){for(s=o;--s;){var v=c[s];if(!(v?Qn(v,h):a(n[s],h,i)))continue e}m&&m.push(h),p.push(f)}}return p}function Li(n,t,i){var a=null==(n=Tr(n,t=ya(t,n)))?n:n[Or(Jr(t))];return null==a?e:Sn(a,n,i)}function Bi(e){return ts(e)&&ki(e)==f}function Di(n,t,i,a,r){return n===t||(null==n||null==t||!ts(n)&&!ts(t)?n!=n&&t!=t:function(n,t,i,a,r,o){var s=Wo(n),c=Wo(t),l=s?h:hr(n),p=c?h:hr(t),u=(l=l==f?A:l)==A,d=(p=p==f?A:p)==A,m=l==p;if(m&&Go(n)){if(!Go(t))return!1;s=!0,u=!1}if(m&&!u)return o||(o=new Jt),s||ps(n)?tr(n,t,i,a,r,o):function(e,n,t,i,a,r,o){switch(t){case L:if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case P:return!(e.byteLength!=n.byteLength||!r(new We(e),new We(n)));case v:case x:case w:return qo(+e,+n);case g:return e.name==n.name&&e.message==n.message;case S:case j:return e==n+"";case _:var s=ot;case k:var c=1&i;if(s||(s=lt),e.size!=n.size&&!c)return!1;var l=o.get(e);if(l)return l==n;i|=2,o.set(e,n);var p=tr(s(e),s(n),i,a,r,o);return o.delete(e),p;case T:if(Nt)return Nt.call(e)==Nt.call(n)}return!1}(n,t,l,i,a,r,o);if(!(1&i)){var b=u&&Ie.call(n,"__wrapped__"),y=d&&Ie.call(t,"__wrapped__");if(b||y){var C=b?n.value():n,E=y?t.value():t;return o||(o=new Jt),r(C,E,i,a,o)}}return!!m&&(o||(o=new Jt),function(n,t,i,a,r,o){var s=1&i,c=ar(n),l=c.length,p=ar(t),u=p.length;if(l!=u&&!s)return!1;for(var d=l;d--;){var m=c[d];if(!(s?m in t:Ie.call(t,m)))return!1}var f=o.get(n),h=o.get(t);if(f&&h)return f==t&&h==n;var v=!0;o.set(n,t),o.set(t,n);for(var x=s;++d<l;){var g=n[m=c[d]],b=t[m];if(a)var y=s?a(b,g,m,t,n,o):a(g,b,m,n,t,o);if(!(y===e?g===b||r(g,b,i,a,o):y)){v=!1;break}x||(x="constructor"==m)}if(v&&!x){var _=n.constructor,w=t.constructor;_==w||!("constructor"in n)||!("constructor"in t)||"function"==typeof _&&_ instanceof _&&"function"==typeof w&&w instanceof w||(v=!1)}return o.delete(n),o.delete(t),v}(n,t,i,a,r,o))}(n,t,i,a,Di,r))}function $i(n,t,i,a){var r=i.length,o=r,s=!a;if(null==n)return!o;for(n=je(n);r--;){var c=i[r];if(s&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++r<o;){var l=(c=i[r])[0],p=n[l],u=c[1];if(s&&c[2]){if(p===e&&!(l in n))return!1}else{var d=new Jt;if(a)var m=a(p,u,l,n,t,d);if(!(m===e?Di(u,p,3,a,d):m))return!1}}return!0}function Fi(e){return!(!ns(e)||(n=e,Re&&Re in n))&&(Xo(e)?Me:he).test(Rr(e));var n}function Ii(e){return"function"==typeof e?e:null==e?ac:"object"==typeof e?Wo(e)?Mi(e[0],e[1]):qi(e):mc(e)}function Oi(e){if(!Cr(e))return gt(e);var n=[];for(var t in je(e))Ie.call(e,t)&&"constructor"!=t&&n.push(t);return n}function Ri(e){if(!ns(e))return function(e){var n=[];if(null!=e)for(var t in je(e))n.push(t);return n}(e);var n=Cr(e),t=[];for(var i in e)("constructor"!=i||!n&&Ie.call(e,i))&&t.push(i);return t}function Ni(e,n){return e<n}function zi(e,n){var t=-1,i=Ho(e)?we(e.length):[];return mi(e,(function(e,a,r){i[++t]=n(e,a,r)})),i}function qi(e){var n=ur(e);return 1==n.length&&n[0][2]?kr(n[0][0],n[0][1]):function(t){return t===e||$i(t,e,n)}}function Mi(n,t){return _r(n)&&Sr(t)?kr(Or(n),t):function(i){var a=js(i,n);return a===e&&a===t?Ts(i,n):Di(t,a,3)}}function Vi(n,t,i,a,r){n!==t&&bi(t,(function(o,s){if(r||(r=new Jt),ns(o))!function(n,t,i,a,r,o,s){var c=Er(n,i),l=Er(t,i),p=s.get(l);if(p)ni(n,i,p);else{var u=o?o(c,l,i+"",n,t,s):e,d=u===e;if(d){var m=Wo(l),f=!m&&Go(l),h=!m&&!f&&ps(l);u=l,m||f||h?Wo(c)?u=c:Ko(c)?u=Pa(c):f?(d=!1,u=Ca(l,!0)):h?(d=!1,u=ka(l,!0)):u=[]:rs(l)||Uo(l)?(u=c,Uo(c)?u=gs(c):ns(c)&&!Xo(c)||(u=xr(l))):d=!1}d&&(s.set(l,u),r(u,l,a,o,s),s.delete(l)),ni(n,i,u)}}(n,t,s,i,Vi,a,r);else{var c=a?a(Er(n,s),o,s+"",n,t,r):e;c===e&&(c=o),ni(n,s,c)}}),Ds)}function Ui(n,t){var i=n.length;if(i)return br(t+=t<0?i:0,i)?n[t]:e}function Wi(e,n,t){n=n.length?Dn(n,(function(e){return Wo(e)?function(n){return Ci(n,1===e.length?e[0]:e)}:e})):[ac];var i=-1;n=Dn(n,Zn(lr()));var a=zi(e,(function(e,t,a){var r=Dn(n,(function(n){return n(e)}));return{criteria:r,index:++i,value:e}}));return function(e,n){var t=e.length;for(e.sort(n);t--;)e[t]=e[t].value;return e}(a,(function(e,n){return function(e,n,t){for(var i=-1,a=e.criteria,r=n.criteria,o=a.length,s=t.length;++i<o;){var c=ja(a[i],r[i]);if(c)return i>=s?c:c*("desc"==t[i]?-1:1)}return e.index-n.index}(e,n,t)}))}function Yi(e,n,t){for(var i=-1,a=n.length,r={};++i<a;){var o=n[i],s=Ci(e,o);t(s,o)&&ea(r,ya(o,e),s)}return r}function Hi(e,n,t,i){var a=i?Mn:qn,r=-1,o=n.length,s=e;for(e===n&&(n=Pa(n)),t&&(s=Dn(e,Zn(t)));++r<o;)for(var c=0,l=n[r],p=t?t(l):l;(c=a(s,p,c,i))>-1;)s!==e&&Je.call(s,c,1),Je.call(e,c,1);return e}function Ki(e,n){for(var t=e?n.length:0,i=t-1;t--;){var a=n[t];if(t==i||a!==r){var r=a;br(a)?Je.call(e,a,1):da(e,a)}}return e}function Gi(e,n){return e+gn(At()*(n-e+1))}function Ji(e,n){var t="";if(!e||n<1||n>p)return t;do{n%2&&(t+=e),(n=gn(n/2))&&(e+=e)}while(n);return t}function Zi(e,n){return Br(jr(e,n,ac),e+"")}function Xi(e){return Xt(qs(e))}function Qi(e,n){var t=qs(e);return Fr(t,ci(n,0,t.length))}function ea(n,t,i,a){if(!ns(n))return n;for(var r=-1,o=(t=ya(t,n)).length,s=o-1,c=n;null!=c&&++r<o;){var l=Or(t[r]),p=i;if("__proto__"===l||"constructor"===l||"prototype"===l)return n;if(r!=s){var u=c[l];(p=a?a(u,l,c):e)===e&&(p=ns(u)?u:br(t[r+1])?[]:{})}ti(c,l,p),c=c[l]}return n}var na=Lt?function(e,n){return Lt.set(e,n),e}:ac,ta=un?function(e,n){return un(e,"toString",{configurable:!0,enumerable:!1,value:nc(n),writable:!0})}:ac;function ia(e){return Fr(qs(e))}function aa(e,n,t){var i=-1,a=e.length;n<0&&(n=-n>a?0:a+n),(t=t>a?a:t)<0&&(t+=a),a=n>t?0:t-n>>>0,n>>>=0;for(var r=we(a);++i<a;)r[i]=e[i+n];return r}function ra(e,n){var t;return mi(e,(function(e,i,a){return!(t=n(e,i,a))})),!!t}function oa(e,n,t){var i=0,a=null==e?i:e.length;if("number"==typeof n&&n==n&&a<=2147483647){for(;i<a;){var r=i+a>>>1,o=e[r];null!==o&&!ls(o)&&(t?o<=n:o<n)?i=r+1:a=r}return a}return sa(e,n,ac,t)}function sa(n,t,i,a){var r=0,o=null==n?0:n.length;if(0===o)return 0;for(var s=(t=i(t))!=t,c=null===t,l=ls(t),p=t===e;r<o;){var u=gn((r+o)/2),d=i(n[u]),m=d!==e,f=null===d,h=d==d,v=ls(d);if(s)var x=a||h;else x=p?h&&(a||m):c?h&&m&&(a||!f):l?h&&m&&!f&&(a||!v):!f&&!v&&(a?d<=t:d<t);x?r=u+1:o=u}return yt(o,4294967294)}function ca(e,n){for(var t=-1,i=e.length,a=0,r=[];++t<i;){var o=e[t],s=n?n(o):o;if(!t||!qo(s,c)){var c=s;r[a++]=0===o?0:o}}return r}function la(e){return"number"==typeof e?e:ls(e)?u:+e}function pa(e){if("string"==typeof e)return e;if(Wo(e))return Dn(e,pa)+"";if(ls(e))return zt?zt.call(e):"";var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}function ua(e,n,t){var i=-1,a=Ln,r=e.length,o=!0,s=[],c=s;if(t)o=!1,a=Bn;else if(r>=200){var l=n?null:Ja(e);if(l)return lt(l);o=!1,a=Qn,c=new Gt}else c=n?[]:s;e:for(;++i<r;){var p=e[i],u=n?n(p):p;if(p=t||0!==p?p:0,o&&u==u){for(var d=c.length;d--;)if(c[d]===u)continue e;n&&c.push(u),s.push(p)}else a(c,u,t)||(c!==s&&c.push(u),s.push(p))}return s}function da(e,n){return null==(e=Tr(e,n=ya(n,e)))||delete e[Or(Jr(n))]}function ma(e,n,t,i){return ea(e,n,t(Ci(e,n)),i)}function fa(e,n,t,i){for(var a=e.length,r=i?a:-1;(i?r--:++r<a)&&n(e[r],r,e););return t?aa(e,i?0:r,i?r+1:a):aa(e,i?r+1:0,i?a:r)}function ha(e,n){var t=e;return t instanceof Wt&&(t=t.value()),Fn(n,(function(e,n){return n.func.apply(n.thisArg,$n([e],n.args))}),t)}function va(e,n,t){var i=e.length;if(i<2)return i?ua(e[0]):[];for(var a=-1,r=we(i);++a<i;)for(var o=e[a],s=-1;++s<i;)s!=a&&(r[a]=di(r[a]||o,e[s],n,t));return ua(gi(r,1),n,t)}function xa(n,t,i){for(var a=-1,r=n.length,o=t.length,s={};++a<r;){var c=a<o?t[a]:e;i(s,n[a],c)}return s}function ga(e){return Ko(e)?e:[]}function ba(e){return"function"==typeof e?e:ac}function ya(e,n){return Wo(e)?e:_r(e,n)?[e]:Ir(bs(e))}var _a=Zi;function wa(n,t,i){var a=n.length;return i=i===e?a:i,!t&&i>=a?n:aa(n,t,i)}var Aa=dn||function(e){return mn.clearTimeout(e)};function Ca(e,n){if(n)return e.slice();var t=e.length,i=Ye?Ye(t):new e.constructor(t);return e.copy(i),i}function Sa(e){var n=new e.constructor(e.byteLength);return new We(n).set(new We(e)),n}function ka(e,n){var t=n?Sa(e.buffer):e.buffer;return new e.constructor(t,e.byteOffset,e.length)}function ja(n,t){if(n!==t){var i=n!==e,a=null===n,r=n==n,o=ls(n),s=t!==e,c=null===t,l=t==t,p=ls(t);if(!c&&!p&&!o&&n>t||o&&s&&l&&!c&&!p||a&&s&&l||!i&&l||!r)return 1;if(!a&&!o&&!p&&n<t||p&&i&&r&&!a&&!o||c&&i&&r||!s&&r||!l)return-1}return 0}function Ta(e,n,t,i){for(var a=-1,r=e.length,o=t.length,s=-1,c=n.length,l=bt(r-o,0),p=we(c+l),u=!i;++s<c;)p[s]=n[s];for(;++a<o;)(u||a<r)&&(p[t[a]]=e[a]);for(;l--;)p[s++]=e[a++];return p}function Ea(e,n,t,i){for(var a=-1,r=e.length,o=-1,s=t.length,c=-1,l=n.length,p=bt(r-s,0),u=we(p+l),d=!i;++a<p;)u[a]=e[a];for(var m=a;++c<l;)u[m+c]=n[c];for(;++o<s;)(d||a<r)&&(u[m+t[o]]=e[a++]);return u}function Pa(e,n){var t=-1,i=e.length;for(n||(n=we(i));++t<i;)n[t]=e[t];return n}function La(n,t,i,a){var r=!i;i||(i={});for(var o=-1,s=t.length;++o<s;){var c=t[o],l=a?a(i[c],n[c],c,i,n):e;l===e&&(l=n[c]),r?oi(i,c,l):ti(i,c,l)}return i}function Ba(e,n){return function(t,i){var a=Wo(t)?kn:ai,r=n?n():{};return a(t,e,lr(i,2),r)}}function Da(n){return Zi((function(t,i){var a=-1,r=i.length,o=r>1?i[r-1]:e,s=r>2?i[2]:e;for(o=n.length>3&&"function"==typeof o?(r--,o):e,s&&yr(i[0],i[1],s)&&(o=r<3?e:o,r=1),t=je(t);++a<r;){var c=i[a];c&&n(t,c,a,o)}return t}))}function $a(e,n){return function(t,i){if(null==t)return t;if(!Ho(t))return e(t,i);for(var a=t.length,r=n?a:-1,o=je(t);(n?r--:++r<a)&&!1!==i(o[r],r,o););return t}}function Fa(e){return function(n,t,i){for(var a=-1,r=je(n),o=i(n),s=o.length;s--;){var c=o[e?s:++a];if(!1===t(r[c],c,r))break}return n}}function Ia(n){return function(t){var i=rt(t=bs(t))?dt(t):e,a=i?i[0]:t.charAt(0),r=i?wa(i,1).join(""):t.slice(1);return a[n]()+r}}function Oa(e){return function(n){return Fn(Xs(Us(n).replace(Ze,"")),e,"")}}function Ra(e){return function(){var n=arguments;switch(n.length){case 0:return new e;case 1:return new e(n[0]);case 2:return new e(n[0],n[1]);case 3:return new e(n[0],n[1],n[2]);case 4:return new e(n[0],n[1],n[2],n[3]);case 5:return new e(n[0],n[1],n[2],n[3],n[4]);case 6:return new e(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new e(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var t=Mt(e.prototype),i=e.apply(t,n);return ns(i)?i:t}}function Na(n){return function(t,i,a){var r=je(t);if(!Ho(t)){var o=lr(i,3);t=Bs(t),i=function(e){return o(r[e],e,r)}}var s=n(t,i,a);return s>-1?r[o?t[s]:s]:e}}function za(t){return ir((function(i){var a=i.length,r=a,o=Ut.prototype.thru;for(t&&i.reverse();r--;){var s=i[r];if("function"!=typeof s)throw new Pe(n);if(o&&!c&&"wrapper"==sr(s))var c=new Ut([],!0)}for(r=c?r:a;++r<a;){var l=sr(s=i[r]),p="wrapper"==l?or(s):e;c=p&&wr(p[0])&&424==p[1]&&!p[4].length&&1==p[9]?c[sr(p[0])].apply(c,p[3]):1==s.length&&wr(s)?c[l]():c.thru(s)}return function(){var e=arguments,n=e[0];if(c&&1==e.length&&Wo(n))return c.plant(n).value();for(var t=0,r=a?i[t].apply(this,e):n;++t<a;)r=i[t].call(this,r);return r}}))}function qa(n,t,i,a,r,o,c,l,p,u){var d=t&s,m=1&t,f=2&t,h=24&t,v=512&t,x=f?e:Ra(n);return function s(){for(var g=arguments.length,b=we(g),y=g;y--;)b[y]=arguments[y];if(h)var _=cr(s),w=function(e,n){for(var t=e.length,i=0;t--;)e[t]===n&&++i;return i}(b,_);if(a&&(b=Ta(b,a,r,h)),o&&(b=Ea(b,o,c,h)),g-=w,h&&g<u){var A=ct(b,_);return Ka(n,t,qa,s.placeholder,i,b,A,l,p,u-g)}var C=m?i:this,S=f?C[n]:n;return g=b.length,l?b=function(n,t){for(var i=n.length,a=yt(t.length,i),r=Pa(n);a--;){var o=t[a];n[a]=br(o,i)?r[o]:e}return n}(b,l):v&&g>1&&b.reverse(),d&&p<g&&(b.length=p),this&&this!==mn&&this instanceof s&&(S=x||Ra(S)),S.apply(C,b)}}function Ma(e,n){return function(t,i){return function(e,n,t,i){return _i(e,(function(e,a,r){n(i,t(e),a,r)})),i}(t,e,n(i),{})}}function Va(n,t){return function(i,a){var r;if(i===e&&a===e)return t;if(i!==e&&(r=i),a!==e){if(r===e)return a;"string"==typeof i||"string"==typeof a?(i=pa(i),a=pa(a)):(i=la(i),a=la(a)),r=n(i,a)}return r}}function Ua(e){return ir((function(n){return n=Dn(n,Zn(lr())),Zi((function(t){var i=this;return e(n,(function(e){return Sn(e,i,t)}))}))}))}function Wa(n,t){var i=(t=t===e?" ":pa(t)).length;if(i<2)return i?Ji(t,n):t;var a=Ji(t,xn(n/ut(t)));return rt(t)?wa(dt(a),0,n).join(""):a.slice(0,n)}function Ya(n){return function(t,i,a){return a&&"number"!=typeof a&&yr(t,i,a)&&(i=a=e),t=fs(t),i===e?(i=t,t=0):i=fs(i),function(e,n,t,i){for(var a=-1,r=bt(xn((n-e)/(t||1)),0),o=we(r);r--;)o[i?r:++a]=e,e+=t;return o}(t,i,a=a===e?t<i?1:-1:fs(a),n)}}function Ha(e){return function(n,t){return"string"==typeof n&&"string"==typeof t||(n=xs(n),t=xs(t)),e(n,t)}}function Ka(n,t,i,a,s,c,l,p,u,d){var m=8&t;t|=m?r:o,4&(t&=~(m?o:r))||(t&=-4);var f=[n,t,s,m?c:e,m?l:e,m?e:c,m?e:l,p,u,d],h=i.apply(e,f);return wr(n)&&Pr(h,f),h.placeholder=a,Dr(h,n,t)}function Ga(e){var n=ke[e];return function(e,t){if(e=xs(e),(t=null==t?0:yt(hs(t),292))&&vt(e)){var i=(bs(e)+"e").split("e");return+((i=(bs(n(i[0]+"e"+(+i[1]+t)))+"e").split("e"))[0]+"e"+(+i[1]-t))}return n(e)}}var Ja=Tt&&1/lt(new Tt([,-0]))[1]==l?function(e){return new Tt(e)}:lc;function Za(e){return function(n){var t=hr(n);return t==_?ot(n):t==k?pt(n):function(e,n){return Dn(n,(function(n){return[n,e[n]]}))}(n,e(n))}}function Xa(t,l,p,u,d,m,f,h){var v=2&l;if(!v&&"function"!=typeof t)throw new Pe(n);var x=u?u.length:0;if(x||(l&=-97,u=d=e),f=f===e?f:bt(hs(f),0),h=h===e?h:hs(h),x-=d?d.length:0,l&o){var g=u,b=d;u=d=e}var y=v?e:or(t),_=[t,l,p,u,d,g,b,m,f,h];if(y&&function(e,n){var t=e[1],a=n[1],r=t|a,o=r<131,l=a==s&&8==t||a==s&&t==c&&e[7].length<=n[8]||384==a&&n[7].length<=n[8]&&8==t;if(!o&&!l)return e;1&a&&(e[2]=n[2],r|=1&t?0:4);var p=n[3];if(p){var u=e[3];e[3]=u?Ta(u,p,n[4]):p,e[4]=u?ct(e[3],i):n[4]}(p=n[5])&&(u=e[5],e[5]=u?Ea(u,p,n[6]):p,e[6]=u?ct(e[5],i):n[6]),(p=n[7])&&(e[7]=p),a&s&&(e[8]=null==e[8]?n[8]:yt(e[8],n[8])),null==e[9]&&(e[9]=n[9]),e[0]=n[0],e[1]=r}(_,y),t=_[0],l=_[1],p=_[2],u=_[3],d=_[4],!(h=_[9]=_[9]===e?v?0:t.length:bt(_[9]-x,0))&&24&l&&(l&=-25),l&&1!=l)w=8==l||l==a?function(n,t,i){var a=Ra(n);return function r(){for(var o=arguments.length,s=we(o),c=o,l=cr(r);c--;)s[c]=arguments[c];var p=o<3&&s[0]!==l&&s[o-1]!==l?[]:ct(s,l);return(o-=p.length)<i?Ka(n,t,qa,r.placeholder,e,s,p,e,e,i-o):Sn(this&&this!==mn&&this instanceof r?a:n,this,s)}}(t,l,h):l!=r&&33!=l||d.length?qa.apply(e,_):function(e,n,t,i){var a=1&n,r=Ra(e);return function n(){for(var o=-1,s=arguments.length,c=-1,l=i.length,p=we(l+s),u=this&&this!==mn&&this instanceof n?r:e;++c<l;)p[c]=i[c];for(;s--;)p[c++]=arguments[++o];return Sn(u,a?t:this,p)}}(t,l,p,u);else var w=function(e,n,t){var i=1&n,a=Ra(e);return function n(){return(this&&this!==mn&&this instanceof n?a:e).apply(i?t:this,arguments)}}(t,l,p);return Dr((y?na:Pr)(w,_),t,l)}function Qa(n,t,i,a){return n===e||qo(n,De[i])&&!Ie.call(a,i)?t:n}function er(n,t,i,a,r,o){return ns(n)&&ns(t)&&(o.set(t,n),Vi(n,t,e,er,o),o.delete(t)),n}function nr(n){return rs(n)?e:n}function tr(n,t,i,a,r,o){var s=1&i,c=n.length,l=t.length;if(c!=l&&!(s&&l>c))return!1;var p=o.get(n),u=o.get(t);if(p&&u)return p==t&&u==n;var d=-1,m=!0,f=2&i?new Gt:e;for(o.set(n,t),o.set(t,n);++d<c;){var h=n[d],v=t[d];if(a)var x=s?a(v,h,d,t,n,o):a(h,v,d,n,t,o);if(x!==e){if(x)continue;m=!1;break}if(f){if(!On(t,(function(e,n){if(!Qn(f,n)&&(h===e||r(h,e,i,a,o)))return f.push(n)}))){m=!1;break}}else if(h!==v&&!r(h,v,i,a,o)){m=!1;break}}return o.delete(n),o.delete(t),m}function ir(n){return Br(jr(n,e,Wr),n+"")}function ar(e){return Si(e,Bs,mr)}function rr(e){return Si(e,Ds,fr)}var or=Lt?function(e){return Lt.get(e)}:lc;function sr(e){for(var n=e.name+"",t=Bt[n],i=Ie.call(Bt,n)?t.length:0;i--;){var a=t[i],r=a.func;if(null==r||r==e)return a.name}return n}function cr(e){return(Ie.call(qt,"placeholder")?qt:e).placeholder}function lr(){var e=qt.iteratee||rc;return e=e===rc?Ii:e,arguments.length?e(arguments[0],arguments[1]):e}function pr(e,n){var t,i,a=e.__data__;return("string"==(i=typeof(t=n))||"number"==i||"symbol"==i||"boolean"==i?"__proto__"!==t:null===t)?a["string"==typeof n?"string":"hash"]:a.map}function ur(e){for(var n=Bs(e),t=n.length;t--;){var i=n[t],a=e[i];n[t]=[i,a,Sr(a)]}return n}function dr(n,t){var i=function(n,t){return null==n?e:n[t]}(n,t);return Fi(i)?i:e}var mr=Rn?function(e){return null==e?[]:(e=je(e),Pn(Rn(e),(function(n){return Ge.call(e,n)})))}:vc,fr=Rn?function(e){for(var n=[];e;)$n(n,mr(e)),e=He(e);return n}:vc,hr=ki;function vr(e,n,t){for(var i=-1,a=(n=ya(n,e)).length,r=!1;++i<a;){var o=Or(n[i]);if(!(r=null!=e&&t(e,o)))break;e=e[o]}return r||++i!=a?r:!!(a=null==e?0:e.length)&&es(a)&&br(o,a)&&(Wo(e)||Uo(e))}function xr(e){return"function"!=typeof e.constructor||Cr(e)?{}:Mt(He(e))}function gr(e){return Wo(e)||Uo(e)||!!(Qe&&e&&e[Qe])}function br(e,n){var t=typeof e;return!!(n=null==n?p:n)&&("number"==t||"symbol"!=t&&xe.test(e))&&e>-1&&e%1==0&&e<n}function yr(e,n,t){if(!ns(t))return!1;var i=typeof n;return!!("number"==i?Ho(t)&&br(n,t.length):"string"==i&&n in t)&&qo(t[n],e)}function _r(e,n){if(Wo(e))return!1;var t=typeof e;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=e&&!ls(e))||Q.test(e)||!X.test(e)||null!=n&&e in je(n)}function wr(e){var n=sr(e),t=qt[n];if("function"!=typeof t||!(n in Wt.prototype))return!1;if(e===t)return!0;var i=or(t);return!!i&&e===i[0]}(St&&hr(new St(new ArrayBuffer(1)))!=L||kt&&hr(new kt)!=_||jt&&hr(jt.resolve())!=C||Tt&&hr(new Tt)!=k||Et&&hr(new Et)!=E)&&(hr=function(n){var t=ki(n),i=t==A?n.constructor:e,a=i?Rr(i):"";if(a)switch(a){case Dt:return L;case $t:return _;case Ft:return C;case It:return k;case Ot:return E}return t});var Ar=$e?Xo:xc;function Cr(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||De)}function Sr(e){return e==e&&!ns(e)}function kr(n,t){return function(i){return null!=i&&i[n]===t&&(t!==e||n in je(i))}}function jr(n,t,i){return t=bt(t===e?n.length-1:t,0),function(){for(var e=arguments,a=-1,r=bt(e.length-t,0),o=we(r);++a<r;)o[a]=e[t+a];a=-1;for(var s=we(t+1);++a<t;)s[a]=e[a];return s[t]=i(o),Sn(n,this,s)}}function Tr(e,n){return n.length<2?e:Ci(e,aa(n,0,-1))}function Er(e,n){if(("constructor"!==n||"function"!=typeof e[n])&&"__proto__"!=n)return e[n]}var Pr=$r(na),Lr=hn||function(e,n){return mn.setTimeout(e,n)},Br=$r(ta);function Dr(e,n,t){var i=n+"";return Br(e,function(e,n){var t=n.length;if(!t)return e;var i=t-1;return n[i]=(t>1?"& ":"")+n[i],n=n.join(t>2?", ":" "),e.replace(re,"{\n/* [wrapped with "+n+"] */\n")}(i,function(e,n){return jn(m,(function(t){var i="_."+t[0];n&t[1]&&!Ln(e,i)&&e.push(i)})),e.sort()}(function(e){var n=e.match(oe);return n?n[1].split(se):[]}(i),t)))}function $r(n){var t=0,i=0;return function(){var a=_t(),r=16-(a-i);if(i=a,r>0){if(++t>=800)return arguments[0]}else t=0;return n.apply(e,arguments)}}function Fr(n,t){var i=-1,a=n.length,r=a-1;for(t=t===e?a:t;++i<t;){var o=Gi(i,r),s=n[o];n[o]=n[i],n[i]=s}return n.length=t,n}var Ir=function(e){var n=Fo(e,(function(e){return 500===t.size&&t.clear(),e})),t=n.cache;return n}((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(ee,(function(e,t,i,a){n.push(i?a.replace(pe,"$1"):t||e)})),n}));function Or(e){if("string"==typeof e||ls(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}function Rr(e){if(null!=e){try{return Fe.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Nr(e){if(e instanceof Wt)return e.clone();var n=new Ut(e.__wrapped__,e.__chain__);return n.__actions__=Pa(e.__actions__),n.__index__=e.__index__,n.__values__=e.__values__,n}var zr=Zi((function(e,n){return Ko(e)?di(e,gi(n,1,Ko,!0)):[]})),qr=Zi((function(n,t){var i=Jr(t);return Ko(i)&&(i=e),Ko(n)?di(n,gi(t,1,Ko,!0),lr(i,2)):[]})),Mr=Zi((function(n,t){var i=Jr(t);return Ko(i)&&(i=e),Ko(n)?di(n,gi(t,1,Ko,!0),e,i):[]}));function Vr(e,n,t){var i=null==e?0:e.length;if(!i)return-1;var a=null==t?0:hs(t);return a<0&&(a=bt(i+a,0)),zn(e,lr(n,3),a)}function Ur(n,t,i){var a=null==n?0:n.length;if(!a)return-1;var r=a-1;return i!==e&&(r=hs(i),r=i<0?bt(a+r,0):yt(r,a-1)),zn(n,lr(t,3),r,!0)}function Wr(e){return null!=e&&e.length?gi(e,1):[]}function Yr(n){return n&&n.length?n[0]:e}var Hr=Zi((function(e){var n=Dn(e,ga);return n.length&&n[0]===e[0]?Pi(n):[]})),Kr=Zi((function(n){var t=Jr(n),i=Dn(n,ga);return t===Jr(i)?t=e:i.pop(),i.length&&i[0]===n[0]?Pi(i,lr(t,2)):[]})),Gr=Zi((function(n){var t=Jr(n),i=Dn(n,ga);return(t="function"==typeof t?t:e)&&i.pop(),i.length&&i[0]===n[0]?Pi(i,e,t):[]}));function Jr(n){var t=null==n?0:n.length;return t?n[t-1]:e}var Zr=Zi(Xr);function Xr(e,n){return e&&e.length&&n&&n.length?Hi(e,n):e}var Qr=ir((function(e,n){var t=null==e?0:e.length,i=si(e,n);return Ki(e,Dn(n,(function(e){return br(e,t)?+e:e})).sort(ja)),i}));function eo(e){return null==e?e:Ct.call(e)}var no=Zi((function(e){return ua(gi(e,1,Ko,!0))})),to=Zi((function(n){var t=Jr(n);return Ko(t)&&(t=e),ua(gi(n,1,Ko,!0),lr(t,2))})),io=Zi((function(n){var t=Jr(n);return t="function"==typeof t?t:e,ua(gi(n,1,Ko,!0),e,t)}));function ao(e){if(!e||!e.length)return[];var n=0;return e=Pn(e,(function(e){if(Ko(e))return n=bt(e.length,n),!0})),Gn(n,(function(n){return Dn(e,Wn(n))}))}function ro(n,t){if(!n||!n.length)return[];var i=ao(n);return null==t?i:Dn(i,(function(n){return Sn(t,e,n)}))}var oo=Zi((function(e,n){return Ko(e)?di(e,n):[]})),so=Zi((function(e){return va(Pn(e,Ko))})),co=Zi((function(n){var t=Jr(n);return Ko(t)&&(t=e),va(Pn(n,Ko),lr(t,2))})),lo=Zi((function(n){var t=Jr(n);return t="function"==typeof t?t:e,va(Pn(n,Ko),e,t)})),po=Zi(ao),uo=Zi((function(n){var t=n.length,i=t>1?n[t-1]:e;return i="function"==typeof i?(n.pop(),i):e,ro(n,i)}));function mo(e){var n=qt(e);return n.__chain__=!0,n}function fo(e,n){return n(e)}var ho=ir((function(n){var t=n.length,i=t?n[0]:0,a=this.__wrapped__,r=function(e){return si(e,n)};return!(t>1||this.__actions__.length)&&a instanceof Wt&&br(i)?((a=a.slice(i,+i+(t?1:0))).__actions__.push({func:fo,args:[r],thisArg:e}),new Ut(a,this.__chain__).thru((function(n){return t&&!n.length&&n.push(e),n}))):this.thru(r)})),vo=Ba((function(e,n,t){Ie.call(e,t)?++e[t]:oi(e,t,1)})),xo=Na(Vr),go=Na(Ur);function bo(e,n){return(Wo(e)?jn:mi)(e,lr(n,3))}function yo(e,n){return(Wo(e)?Tn:fi)(e,lr(n,3))}var _o=Ba((function(e,n,t){Ie.call(e,t)?e[t].push(n):oi(e,t,[n])})),wo=Zi((function(e,n,t){var i=-1,a="function"==typeof n,r=Ho(e)?we(e.length):[];return mi(e,(function(e){r[++i]=a?Sn(n,e,t):Li(e,n,t)})),r})),Ao=Ba((function(e,n,t){oi(e,t,n)}));function Co(e,n){return(Wo(e)?Dn:zi)(e,lr(n,3))}var So=Ba((function(e,n,t){e[t?0:1].push(n)}),(function(){return[[],[]]})),ko=Zi((function(e,n){if(null==e)return[];var t=n.length;return t>1&&yr(e,n[0],n[1])?n=[]:t>2&&yr(n[0],n[1],n[2])&&(n=[n[0]]),Wi(e,gi(n,1),[])})),jo=fn||function(){return mn.Date.now()};function To(n,t,i){return t=i?e:t,t=n&&null==t?n.length:t,Xa(n,s,e,e,e,e,t)}function Eo(t,i){var a;if("function"!=typeof i)throw new Pe(n);return t=hs(t),function(){return--t>0&&(a=i.apply(this,arguments)),t<=1&&(i=e),a}}var Po=Zi((function(e,n,t){var i=1;if(t.length){var a=ct(t,cr(Po));i|=r}return Xa(e,i,n,t,a)})),Lo=Zi((function(e,n,t){var i=3;if(t.length){var a=ct(t,cr(Lo));i|=r}return Xa(n,i,e,t,a)}));function Bo(t,i,a){var r,o,s,c,l,p,u=0,d=!1,m=!1,f=!0;if("function"!=typeof t)throw new Pe(n);function h(n){var i=r,a=o;return r=o=e,u=n,c=t.apply(a,i)}function v(n){var t=n-p;return p===e||t>=i||t<0||m&&n-u>=s}function x(){var e=jo();if(v(e))return g(e);l=Lr(x,function(e){var n=i-(e-p);return m?yt(n,s-(e-u)):n}(e))}function g(n){return l=e,f&&r?h(n):(r=o=e,c)}function b(){var n=jo(),t=v(n);if(r=arguments,o=this,p=n,t){if(l===e)return function(e){return u=e,l=Lr(x,i),d?h(e):c}(p);if(m)return Aa(l),l=Lr(x,i),h(p)}return l===e&&(l=Lr(x,i)),c}return i=xs(i)||0,ns(a)&&(d=!!a.leading,s=(m="maxWait"in a)?bt(xs(a.maxWait)||0,i):s,f="trailing"in a?!!a.trailing:f),b.cancel=function(){l!==e&&Aa(l),u=0,r=p=o=l=e},b.flush=function(){return l===e?c:g(jo())},b}var Do=Zi((function(e,n){return ui(e,1,n)})),$o=Zi((function(e,n,t){return ui(e,xs(n)||0,t)}));function Fo(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new Pe(n);var i=function(){var n=arguments,a=t?t.apply(this,n):n[0],r=i.cache;if(r.has(a))return r.get(a);var o=e.apply(this,n);return i.cache=r.set(a,o)||r,o};return i.cache=new(Fo.Cache||Kt),i}function Io(e){if("function"!=typeof e)throw new Pe(n);return function(){var n=arguments;switch(n.length){case 0:return!e.call(this);case 1:return!e.call(this,n[0]);case 2:return!e.call(this,n[0],n[1]);case 3:return!e.call(this,n[0],n[1],n[2])}return!e.apply(this,n)}}Fo.Cache=Kt;var Oo=_a((function(e,n){var t=(n=1==n.length&&Wo(n[0])?Dn(n[0],Zn(lr())):Dn(gi(n,1),Zn(lr()))).length;return Zi((function(i){for(var a=-1,r=yt(i.length,t);++a<r;)i[a]=n[a].call(this,i[a]);return Sn(e,this,i)}))})),Ro=Zi((function(n,t){var i=ct(t,cr(Ro));return Xa(n,r,e,t,i)})),No=Zi((function(n,t){var i=ct(t,cr(No));return Xa(n,o,e,t,i)})),zo=ir((function(n,t){return Xa(n,c,e,e,e,t)}));function qo(e,n){return e===n||e!=e&&n!=n}var Mo=Ha(ji),Vo=Ha((function(e,n){return e>=n})),Uo=Bi(function(){return arguments}())?Bi:function(e){return ts(e)&&Ie.call(e,"callee")&&!Ge.call(e,"callee")},Wo=we.isArray,Yo=bn?Zn(bn):function(e){return ts(e)&&ki(e)==P};function Ho(e){return null!=e&&es(e.length)&&!Xo(e)}function Ko(e){return ts(e)&&Ho(e)}var Go=Yn||xc,Jo=yn?Zn(yn):function(e){return ts(e)&&ki(e)==x};function Zo(e){if(!ts(e))return!1;var n=ki(e);return n==g||"[object DOMException]"==n||"string"==typeof e.message&&"string"==typeof e.name&&!rs(e)}function Xo(e){if(!ns(e))return!1;var n=ki(e);return n==b||n==y||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Qo(e){return"number"==typeof e&&e==hs(e)}function es(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=p}function ns(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}function ts(e){return null!=e&&"object"==typeof e}var is=_n?Zn(_n):function(e){return ts(e)&&hr(e)==_};function as(e){return"number"==typeof e||ts(e)&&ki(e)==w}function rs(e){if(!ts(e)||ki(e)!=A)return!1;var n=He(e);if(null===n)return!0;var t=Ie.call(n,"constructor")&&n.constructor;return"function"==typeof t&&t instanceof t&&Fe.call(t)==ze}var os=wn?Zn(wn):function(e){return ts(e)&&ki(e)==S},ss=An?Zn(An):function(e){return ts(e)&&hr(e)==k};function cs(e){return"string"==typeof e||!Wo(e)&&ts(e)&&ki(e)==j}function ls(e){return"symbol"==typeof e||ts(e)&&ki(e)==T}var ps=Cn?Zn(Cn):function(e){return ts(e)&&es(e.length)&&!!on[ki(e)]},us=Ha(Ni),ds=Ha((function(e,n){return e<=n}));function ms(e){if(!e)return[];if(Ho(e))return cs(e)?dt(e):Pa(e);if(nn&&e[nn])return function(e){for(var n,t=[];!(n=e.next()).done;)t.push(n.value);return t}(e[nn]());var n=hr(e);return(n==_?ot:n==k?lt:qs)(e)}function fs(e){return e?(e=xs(e))===l||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function hs(e){var n=fs(e),t=n%1;return n==n?t?n-t:n:0}function vs(e){return e?ci(hs(e),0,d):0}function xs(e){if("number"==typeof e)return e;if(ls(e))return u;if(ns(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=ns(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=Jn(e);var t=fe.test(e);return t||ve.test(e)?pn(e.slice(2),t?2:8):me.test(e)?u:+e}function gs(e){return La(e,Ds(e))}function bs(e){return null==e?"":pa(e)}var ys=Da((function(e,n){if(Cr(n)||Ho(n))La(n,Bs(n),e);else for(var t in n)Ie.call(n,t)&&ti(e,t,n[t])})),_s=Da((function(e,n){La(n,Ds(n),e)})),ws=Da((function(e,n,t,i){La(n,Ds(n),e,i)})),As=Da((function(e,n,t,i){La(n,Bs(n),e,i)})),Cs=ir(si),Ss=Zi((function(n,t){n=je(n);var i=-1,a=t.length,r=a>2?t[2]:e;for(r&&yr(t[0],t[1],r)&&(a=1);++i<a;)for(var o=t[i],s=Ds(o),c=-1,l=s.length;++c<l;){var p=s[c],u=n[p];(u===e||qo(u,De[p])&&!Ie.call(n,p))&&(n[p]=o[p])}return n})),ks=Zi((function(n){return n.push(e,er),Sn(Fs,e,n)}));function js(n,t,i){var a=null==n?e:Ci(n,t);return a===e?i:a}function Ts(e,n){return null!=e&&vr(e,n,Ei)}var Es=Ma((function(e,n,t){null!=n&&"function"!=typeof n.toString&&(n=Ne.call(n)),e[n]=t}),nc(ac)),Ps=Ma((function(e,n,t){null!=n&&"function"!=typeof n.toString&&(n=Ne.call(n)),Ie.call(e,n)?e[n].push(t):e[n]=[t]}),lr),Ls=Zi(Li);function Bs(e){return Ho(e)?Zt(e):Oi(e)}function Ds(e){return Ho(e)?Zt(e,!0):Ri(e)}var $s=Da((function(e,n,t){Vi(e,n,t)})),Fs=Da((function(e,n,t,i){Vi(e,n,t,i)})),Is=ir((function(e,n){var t={};if(null==e)return t;var i=!1;n=Dn(n,(function(n){return n=ya(n,e),i||(i=n.length>1),n})),La(e,rr(e),t),i&&(t=li(t,7,nr));for(var a=n.length;a--;)da(t,n[a]);return t})),Os=ir((function(e,n){return null==e?{}:function(e,n){return Yi(e,n,(function(n,t){return Ts(e,t)}))}(e,n)}));function Rs(e,n){if(null==e)return{};var t=Dn(rr(e),(function(e){return[e]}));return n=lr(n),Yi(e,t,(function(e,t){return n(e,t[0])}))}var Ns=Za(Bs),zs=Za(Ds);function qs(e){return null==e?[]:Xn(e,Bs(e))}var Ms=Oa((function(e,n,t){return n=n.toLowerCase(),e+(t?Vs(n):n)}));function Vs(e){return Zs(bs(e).toLowerCase())}function Us(e){return(e=bs(e))&&e.replace(ge,tt).replace(Xe,"")}var Ws=Oa((function(e,n,t){return e+(t?"-":"")+n.toLowerCase()})),Ys=Oa((function(e,n,t){return e+(t?" ":"")+n.toLowerCase()})),Hs=Ia("toLowerCase"),Ks=Oa((function(e,n,t){return e+(t?"_":"")+n.toLowerCase()})),Gs=Oa((function(e,n,t){return e+(t?" ":"")+Zs(n)})),Js=Oa((function(e,n,t){return e+(t?" ":"")+n.toUpperCase()})),Zs=Ia("toUpperCase");function Xs(n,t,i){return n=bs(n),(t=i?e:t)===e?function(e){return tn.test(e)}(n)?function(e){return e.match(en)||[]}(n):function(e){return e.match(ce)||[]}(n):n.match(t)||[]}var Qs=Zi((function(n,t){try{return Sn(n,e,t)}catch(e){return Zo(e)?e:new Ce(e)}})),ec=ir((function(e,n){return jn(n,(function(n){n=Or(n),oi(e,n,Po(e[n],e))})),e}));function nc(e){return function(){return e}}var tc=za(),ic=za(!0);function ac(e){return e}function rc(e){return Ii("function"==typeof e?e:li(e,1))}var oc=Zi((function(e,n){return function(t){return Li(t,e,n)}})),sc=Zi((function(e,n){return function(t){return Li(e,t,n)}}));function cc(e,n,t){var i=Bs(n),a=Ai(n,i);null!=t||ns(n)&&(a.length||!i.length)||(t=n,n=e,e=this,a=Ai(n,Bs(n)));var r=!(ns(t)&&"chain"in t&&!t.chain),o=Xo(e);return jn(a,(function(t){var i=n[t];e[t]=i,o&&(e.prototype[t]=function(){var n=this.__chain__;if(r||n){var t=e(this.__wrapped__);return(t.__actions__=Pa(this.__actions__)).push({func:i,args:arguments,thisArg:e}),t.__chain__=n,t}return i.apply(e,$n([this.value()],arguments))})})),e}function lc(){}var pc=Ua(Dn),uc=Ua(En),dc=Ua(On);function mc(e){return _r(e)?Wn(Or(e)):function(e){return function(n){return Ci(n,e)}}(e)}var fc=Ya(),hc=Ya(!0);function vc(){return[]}function xc(){return!1}var gc,bc=Va((function(e,n){return e+n}),0),yc=Ga("ceil"),_c=Va((function(e,n){return e/n}),1),wc=Ga("floor"),Ac=Va((function(e,n){return e*n}),1),Cc=Ga("round"),Sc=Va((function(e,n){return e-n}),0);return qt.after=function(e,t){if("function"!=typeof t)throw new Pe(n);return e=hs(e),function(){if(--e<1)return t.apply(this,arguments)}},qt.ary=To,qt.assign=ys,qt.assignIn=_s,qt.assignInWith=ws,qt.assignWith=As,qt.at=Cs,qt.before=Eo,qt.bind=Po,qt.bindAll=ec,qt.bindKey=Lo,qt.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return Wo(e)?e:[e]},qt.chain=mo,qt.chunk=function(n,t,i){t=(i?yr(n,t,i):t===e)?1:bt(hs(t),0);var a=null==n?0:n.length;if(!a||t<1)return[];for(var r=0,o=0,s=we(xn(a/t));r<a;)s[o++]=aa(n,r,r+=t);return s},qt.compact=function(e){for(var n=-1,t=null==e?0:e.length,i=0,a=[];++n<t;){var r=e[n];r&&(a[i++]=r)}return a},qt.concat=function(){var e=arguments.length;if(!e)return[];for(var n=we(e-1),t=arguments[0],i=e;i--;)n[i-1]=arguments[i];return $n(Wo(t)?Pa(t):[t],gi(n,1))},qt.cond=function(e){var t=null==e?0:e.length,i=lr();return e=t?Dn(e,(function(e){if("function"!=typeof e[1])throw new Pe(n);return[i(e[0]),e[1]]})):[],Zi((function(n){for(var i=-1;++i<t;){var a=e[i];if(Sn(a[0],this,n))return Sn(a[1],this,n)}}))},qt.conforms=function(e){return function(e){var n=Bs(e);return function(t){return pi(t,e,n)}}(li(e,1))},qt.constant=nc,qt.countBy=vo,qt.create=function(e,n){var t=Mt(e);return null==n?t:ri(t,n)},qt.curry=function n(t,i,a){var r=Xa(t,8,e,e,e,e,e,i=a?e:i);return r.placeholder=n.placeholder,r},qt.curryRight=function n(t,i,r){var o=Xa(t,a,e,e,e,e,e,i=r?e:i);return o.placeholder=n.placeholder,o},qt.debounce=Bo,qt.defaults=Ss,qt.defaultsDeep=ks,qt.defer=Do,qt.delay=$o,qt.difference=zr,qt.differenceBy=qr,qt.differenceWith=Mr,qt.drop=function(n,t,i){var a=null==n?0:n.length;return a?aa(n,(t=i||t===e?1:hs(t))<0?0:t,a):[]},qt.dropRight=function(n,t,i){var a=null==n?0:n.length;return a?aa(n,0,(t=a-(t=i||t===e?1:hs(t)))<0?0:t):[]},qt.dropRightWhile=function(e,n){return e&&e.length?fa(e,lr(n,3),!0,!0):[]},qt.dropWhile=function(e,n){return e&&e.length?fa(e,lr(n,3),!0):[]},qt.fill=function(n,t,i,a){var r=null==n?0:n.length;return r?(i&&"number"!=typeof i&&yr(n,t,i)&&(i=0,a=r),function(n,t,i,a){var r=n.length;for((i=hs(i))<0&&(i=-i>r?0:r+i),(a=a===e||a>r?r:hs(a))<0&&(a+=r),a=i>a?0:vs(a);i<a;)n[i++]=t;return n}(n,t,i,a)):[]},qt.filter=function(e,n){return(Wo(e)?Pn:xi)(e,lr(n,3))},qt.flatMap=function(e,n){return gi(Co(e,n),1)},qt.flatMapDeep=function(e,n){return gi(Co(e,n),l)},qt.flatMapDepth=function(n,t,i){return i=i===e?1:hs(i),gi(Co(n,t),i)},qt.flatten=Wr,qt.flattenDeep=function(e){return null!=e&&e.length?gi(e,l):[]},qt.flattenDepth=function(n,t){return null!=n&&n.length?gi(n,t=t===e?1:hs(t)):[]},qt.flip=function(e){return Xa(e,512)},qt.flow=tc,qt.flowRight=ic,qt.fromPairs=function(e){for(var n=-1,t=null==e?0:e.length,i={};++n<t;){var a=e[n];i[a[0]]=a[1]}return i},qt.functions=function(e){return null==e?[]:Ai(e,Bs(e))},qt.functionsIn=function(e){return null==e?[]:Ai(e,Ds(e))},qt.groupBy=_o,qt.initial=function(e){return null!=e&&e.length?aa(e,0,-1):[]},qt.intersection=Hr,qt.intersectionBy=Kr,qt.intersectionWith=Gr,qt.invert=Es,qt.invertBy=Ps,qt.invokeMap=wo,qt.iteratee=rc,qt.keyBy=Ao,qt.keys=Bs,qt.keysIn=Ds,qt.map=Co,qt.mapKeys=function(e,n){var t={};return n=lr(n,3),_i(e,(function(e,i,a){oi(t,n(e,i,a),e)})),t},qt.mapValues=function(e,n){var t={};return n=lr(n,3),_i(e,(function(e,i,a){oi(t,i,n(e,i,a))})),t},qt.matches=function(e){return qi(li(e,1))},qt.matchesProperty=function(e,n){return Mi(e,li(n,1))},qt.memoize=Fo,qt.merge=$s,qt.mergeWith=Fs,qt.method=oc,qt.methodOf=sc,qt.mixin=cc,qt.negate=Io,qt.nthArg=function(e){return e=hs(e),Zi((function(n){return Ui(n,e)}))},qt.omit=Is,qt.omitBy=function(e,n){return Rs(e,Io(lr(n)))},qt.once=function(e){return Eo(2,e)},qt.orderBy=function(n,t,i,a){return null==n?[]:(Wo(t)||(t=null==t?[]:[t]),Wo(i=a?e:i)||(i=null==i?[]:[i]),Wi(n,t,i))},qt.over=pc,qt.overArgs=Oo,qt.overEvery=uc,qt.overSome=dc,qt.partial=Ro,qt.partialRight=No,qt.partition=So,qt.pick=Os,qt.pickBy=Rs,qt.property=mc,qt.propertyOf=function(n){return function(t){return null==n?e:Ci(n,t)}},qt.pull=Zr,qt.pullAll=Xr,qt.pullAllBy=function(e,n,t){return e&&e.length&&n&&n.length?Hi(e,n,lr(t,2)):e},qt.pullAllWith=function(n,t,i){return n&&n.length&&t&&t.length?Hi(n,t,e,i):n},qt.pullAt=Qr,qt.range=fc,qt.rangeRight=hc,qt.rearg=zo,qt.reject=function(e,n){return(Wo(e)?Pn:xi)(e,Io(lr(n,3)))},qt.remove=function(e,n){var t=[];if(!e||!e.length)return t;var i=-1,a=[],r=e.length;for(n=lr(n,3);++i<r;){var o=e[i];n(o,i,e)&&(t.push(o),a.push(i))}return Ki(e,a),t},qt.rest=function(t,i){if("function"!=typeof t)throw new Pe(n);return Zi(t,i=i===e?i:hs(i))},qt.reverse=eo,qt.sampleSize=function(n,t,i){return t=(i?yr(n,t,i):t===e)?1:hs(t),(Wo(n)?Qt:Qi)(n,t)},qt.set=function(e,n,t){return null==e?e:ea(e,n,t)},qt.setWith=function(n,t,i,a){return a="function"==typeof a?a:e,null==n?n:ea(n,t,i,a)},qt.shuffle=function(e){return(Wo(e)?ei:ia)(e)},qt.slice=function(n,t,i){var a=null==n?0:n.length;return a?(i&&"number"!=typeof i&&yr(n,t,i)?(t=0,i=a):(t=null==t?0:hs(t),i=i===e?a:hs(i)),aa(n,t,i)):[]},qt.sortBy=ko,qt.sortedUniq=function(e){return e&&e.length?ca(e):[]},qt.sortedUniqBy=function(e,n){return e&&e.length?ca(e,lr(n,2)):[]},qt.split=function(n,t,i){return i&&"number"!=typeof i&&yr(n,t,i)&&(t=i=e),(i=i===e?d:i>>>0)?(n=bs(n))&&("string"==typeof t||null!=t&&!os(t))&&!(t=pa(t))&&rt(n)?wa(dt(n),0,i):n.split(t,i):[]},qt.spread=function(e,t){if("function"!=typeof e)throw new Pe(n);return t=null==t?0:bt(hs(t),0),Zi((function(n){var i=n[t],a=wa(n,0,t);return i&&$n(a,i),Sn(e,this,a)}))},qt.tail=function(e){var n=null==e?0:e.length;return n?aa(e,1,n):[]},qt.take=function(n,t,i){return n&&n.length?aa(n,0,(t=i||t===e?1:hs(t))<0?0:t):[]},qt.takeRight=function(n,t,i){var a=null==n?0:n.length;return a?aa(n,(t=a-(t=i||t===e?1:hs(t)))<0?0:t,a):[]},qt.takeRightWhile=function(e,n){return e&&e.length?fa(e,lr(n,3),!1,!0):[]},qt.takeWhile=function(e,n){return e&&e.length?fa(e,lr(n,3)):[]},qt.tap=function(e,n){return n(e),e},qt.throttle=function(e,t,i){var a=!0,r=!0;if("function"!=typeof e)throw new Pe(n);return ns(i)&&(a="leading"in i?!!i.leading:a,r="trailing"in i?!!i.trailing:r),Bo(e,t,{leading:a,maxWait:t,trailing:r})},qt.thru=fo,qt.toArray=ms,qt.toPairs=Ns,qt.toPairsIn=zs,qt.toPath=function(e){return Wo(e)?Dn(e,Or):ls(e)?[e]:Pa(Ir(bs(e)))},qt.toPlainObject=gs,qt.transform=function(e,n,t){var i=Wo(e),a=i||Go(e)||ps(e);if(n=lr(n,4),null==t){var r=e&&e.constructor;t=a?i?new r:[]:ns(e)&&Xo(r)?Mt(He(e)):{}}return(a?jn:_i)(e,(function(e,i,a){return n(t,e,i,a)})),t},qt.unary=function(e){return To(e,1)},qt.union=no,qt.unionBy=to,qt.unionWith=io,qt.uniq=function(e){return e&&e.length?ua(e):[]},qt.uniqBy=function(e,n){return e&&e.length?ua(e,lr(n,2)):[]},qt.uniqWith=function(n,t){return t="function"==typeof t?t:e,n&&n.length?ua(n,e,t):[]},qt.unset=function(e,n){return null==e||da(e,n)},qt.unzip=ao,qt.unzipWith=ro,qt.update=function(e,n,t){return null==e?e:ma(e,n,ba(t))},qt.updateWith=function(n,t,i,a){return a="function"==typeof a?a:e,null==n?n:ma(n,t,ba(i),a)},qt.values=qs,qt.valuesIn=function(e){return null==e?[]:Xn(e,Ds(e))},qt.without=oo,qt.words=Xs,qt.wrap=function(e,n){return Ro(ba(n),e)},qt.xor=so,qt.xorBy=co,qt.xorWith=lo,qt.zip=po,qt.zipObject=function(e,n){return xa(e||[],n||[],ti)},qt.zipObjectDeep=function(e,n){return xa(e||[],n||[],ea)},qt.zipWith=uo,qt.entries=Ns,qt.entriesIn=zs,qt.extend=_s,qt.extendWith=ws,cc(qt,qt),qt.add=bc,qt.attempt=Qs,qt.camelCase=Ms,qt.capitalize=Vs,qt.ceil=yc,qt.clamp=function(n,t,i){return i===e&&(i=t,t=e),i!==e&&(i=(i=xs(i))==i?i:0),t!==e&&(t=(t=xs(t))==t?t:0),ci(xs(n),t,i)},qt.clone=function(e){return li(e,4)},qt.cloneDeep=function(e){return li(e,5)},qt.cloneDeepWith=function(n,t){return li(n,5,t="function"==typeof t?t:e)},qt.cloneWith=function(n,t){return li(n,4,t="function"==typeof t?t:e)},qt.conformsTo=function(e,n){return null==n||pi(e,n,Bs(n))},qt.deburr=Us,qt.defaultTo=function(e,n){return null==e||e!=e?n:e},qt.divide=_c,qt.endsWith=function(n,t,i){n=bs(n),t=pa(t);var a=n.length,r=i=i===e?a:ci(hs(i),0,a);return(i-=t.length)>=0&&n.slice(i,r)==t},qt.eq=qo,qt.escape=function(e){return(e=bs(e))&&K.test(e)?e.replace(Y,it):e},qt.escapeRegExp=function(e){return(e=bs(e))&&te.test(e)?e.replace(ne,"\\$&"):e},qt.every=function(n,t,i){var a=Wo(n)?En:hi;return i&&yr(n,t,i)&&(t=e),a(n,lr(t,3))},qt.find=xo,qt.findIndex=Vr,qt.findKey=function(e,n){return Nn(e,lr(n,3),_i)},qt.findLast=go,qt.findLastIndex=Ur,qt.findLastKey=function(e,n){return Nn(e,lr(n,3),wi)},qt.floor=wc,qt.forEach=bo,qt.forEachRight=yo,qt.forIn=function(e,n){return null==e?e:bi(e,lr(n,3),Ds)},qt.forInRight=function(e,n){return null==e?e:yi(e,lr(n,3),Ds)},qt.forOwn=function(e,n){return e&&_i(e,lr(n,3))},qt.forOwnRight=function(e,n){return e&&wi(e,lr(n,3))},qt.get=js,qt.gt=Mo,qt.gte=Vo,qt.has=function(e,n){return null!=e&&vr(e,n,Ti)},qt.hasIn=Ts,qt.head=Yr,qt.identity=ac,qt.includes=function(e,n,t,i){e=Ho(e)?e:qs(e),t=t&&!i?hs(t):0;var a=e.length;return t<0&&(t=bt(a+t,0)),cs(e)?t<=a&&e.indexOf(n,t)>-1:!!a&&qn(e,n,t)>-1},qt.indexOf=function(e,n,t){var i=null==e?0:e.length;if(!i)return-1;var a=null==t?0:hs(t);return a<0&&(a=bt(i+a,0)),qn(e,n,a)},qt.inRange=function(n,t,i){return t=fs(t),i===e?(i=t,t=0):i=fs(i),function(e,n,t){return e>=yt(n,t)&&e<bt(n,t)}(n=xs(n),t,i)},qt.invoke=Ls,qt.isArguments=Uo,qt.isArray=Wo,qt.isArrayBuffer=Yo,qt.isArrayLike=Ho,qt.isArrayLikeObject=Ko,qt.isBoolean=function(e){return!0===e||!1===e||ts(e)&&ki(e)==v},qt.isBuffer=Go,qt.isDate=Jo,qt.isElement=function(e){return ts(e)&&1===e.nodeType&&!rs(e)},qt.isEmpty=function(e){if(null==e)return!0;if(Ho(e)&&(Wo(e)||"string"==typeof e||"function"==typeof e.splice||Go(e)||ps(e)||Uo(e)))return!e.length;var n=hr(e);if(n==_||n==k)return!e.size;if(Cr(e))return!Oi(e).length;for(var t in e)if(Ie.call(e,t))return!1;return!0},qt.isEqual=function(e,n){return Di(e,n)},qt.isEqualWith=function(n,t,i){var a=(i="function"==typeof i?i:e)?i(n,t):e;return a===e?Di(n,t,e,i):!!a},qt.isError=Zo,qt.isFinite=function(e){return"number"==typeof e&&vt(e)},qt.isFunction=Xo,qt.isInteger=Qo,qt.isLength=es,qt.isMap=is,qt.isMatch=function(e,n){return e===n||$i(e,n,ur(n))},qt.isMatchWith=function(n,t,i){return i="function"==typeof i?i:e,$i(n,t,ur(t),i)},qt.isNaN=function(e){return as(e)&&e!=+e},qt.isNative=function(e){if(Ar(e))throw new Ce("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Fi(e)},qt.isNil=function(e){return null==e},qt.isNull=function(e){return null===e},qt.isNumber=as,qt.isObject=ns,qt.isObjectLike=ts,qt.isPlainObject=rs,qt.isRegExp=os,qt.isSafeInteger=function(e){return Qo(e)&&e>=-9007199254740991&&e<=p},qt.isSet=ss,qt.isString=cs,qt.isSymbol=ls,qt.isTypedArray=ps,qt.isUndefined=function(n){return n===e},qt.isWeakMap=function(e){return ts(e)&&hr(e)==E},qt.isWeakSet=function(e){return ts(e)&&"[object WeakSet]"==ki(e)},qt.join=function(e,n){return null==e?"":xt.call(e,n)},qt.kebabCase=Ws,qt.last=Jr,qt.lastIndexOf=function(n,t,i){var a=null==n?0:n.length;if(!a)return-1;var r=a;return i!==e&&(r=(r=hs(i))<0?bt(a+r,0):yt(r,a-1)),t==t?function(e,n,t){for(var i=t+1;i--;)if(e[i]===n)return i;return i}(n,t,r):zn(n,Vn,r,!0)},qt.lowerCase=Ys,qt.lowerFirst=Hs,qt.lt=us,qt.lte=ds,qt.max=function(n){return n&&n.length?vi(n,ac,ji):e},qt.maxBy=function(n,t){return n&&n.length?vi(n,lr(t,2),ji):e},qt.mean=function(e){return Un(e,ac)},qt.meanBy=function(e,n){return Un(e,lr(n,2))},qt.min=function(n){return n&&n.length?vi(n,ac,Ni):e},qt.minBy=function(n,t){return n&&n.length?vi(n,lr(t,2),Ni):e},qt.stubArray=vc,qt.stubFalse=xc,qt.stubObject=function(){return{}},qt.stubString=function(){return""},qt.stubTrue=function(){return!0},qt.multiply=Ac,qt.nth=function(n,t){return n&&n.length?Ui(n,hs(t)):e},qt.noConflict=function(){return mn._===this&&(mn._=qe),this},qt.noop=lc,qt.now=jo,qt.pad=function(e,n,t){e=bs(e);var i=(n=hs(n))?ut(e):0;if(!n||i>=n)return e;var a=(n-i)/2;return Wa(gn(a),t)+e+Wa(xn(a),t)},qt.padEnd=function(e,n,t){e=bs(e);var i=(n=hs(n))?ut(e):0;return n&&i<n?e+Wa(n-i,t):e},qt.padStart=function(e,n,t){e=bs(e);var i=(n=hs(n))?ut(e):0;return n&&i<n?Wa(n-i,t)+e:e},qt.parseInt=function(e,n,t){return t||null==n?n=0:n&&(n=+n),wt(bs(e).replace(ie,""),n||0)},qt.random=function(n,t,i){if(i&&"boolean"!=typeof i&&yr(n,t,i)&&(t=i=e),i===e&&("boolean"==typeof t?(i=t,t=e):"boolean"==typeof n&&(i=n,n=e)),n===e&&t===e?(n=0,t=1):(n=fs(n),t===e?(t=n,n=0):t=fs(t)),n>t){var a=n;n=t,t=a}if(i||n%1||t%1){var r=At();return yt(n+r*(t-n+ln("1e-"+((r+"").length-1))),t)}return Gi(n,t)},qt.reduce=function(e,n,t){var i=Wo(e)?Fn:Hn,a=arguments.length<3;return i(e,lr(n,4),t,a,mi)},qt.reduceRight=function(e,n,t){var i=Wo(e)?In:Hn,a=arguments.length<3;return i(e,lr(n,4),t,a,fi)},qt.repeat=function(n,t,i){return t=(i?yr(n,t,i):t===e)?1:hs(t),Ji(bs(n),t)},qt.replace=function(){var e=arguments,n=bs(e[0]);return e.length<3?n:n.replace(e[1],e[2])},qt.result=function(n,t,i){var a=-1,r=(t=ya(t,n)).length;for(r||(r=1,n=e);++a<r;){var o=null==n?e:n[Or(t[a])];o===e&&(a=r,o=i),n=Xo(o)?o.call(n):o}return n},qt.round=Cc,qt.runInContext=W,qt.sample=function(e){return(Wo(e)?Xt:Xi)(e)},qt.size=function(e){if(null==e)return 0;if(Ho(e))return cs(e)?ut(e):e.length;var n=hr(e);return n==_||n==k?e.size:Oi(e).length},qt.snakeCase=Ks,qt.some=function(n,t,i){var a=Wo(n)?On:ra;return i&&yr(n,t,i)&&(t=e),a(n,lr(t,3))},qt.sortedIndex=function(e,n){return oa(e,n)},qt.sortedIndexBy=function(e,n,t){return sa(e,n,lr(t,2))},qt.sortedIndexOf=function(e,n){var t=null==e?0:e.length;if(t){var i=oa(e,n);if(i<t&&qo(e[i],n))return i}return-1},qt.sortedLastIndex=function(e,n){return oa(e,n,!0)},qt.sortedLastIndexBy=function(e,n,t){return sa(e,n,lr(t,2),!0)},qt.sortedLastIndexOf=function(e,n){if(null!=e&&e.length){var t=oa(e,n,!0)-1;if(qo(e[t],n))return t}return-1},qt.startCase=Gs,qt.startsWith=function(e,n,t){return e=bs(e),t=null==t?0:ci(hs(t),0,e.length),n=pa(n),e.slice(t,t+n.length)==n},qt.subtract=Sc,qt.sum=function(e){return e&&e.length?Kn(e,ac):0},qt.sumBy=function(e,n){return e&&e.length?Kn(e,lr(n,2)):0},qt.template=function(n,t,i){var a=qt.templateSettings;i&&yr(n,t,i)&&(t=e),n=bs(n),t=ws({},t,a,Qa);var r,o,s=ws({},t.imports,a.imports,Qa),c=Bs(s),l=Xn(s,c),p=0,u=t.interpolate||be,d="__p += '",m=Te((t.escape||be).source+"|"+u.source+"|"+(u===Z?ue:be).source+"|"+(t.evaluate||be).source+"|$","g"),f="//# sourceURL="+(Ie.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++rn+"]")+"\n";n.replace(m,(function(e,t,i,a,s,c){return i||(i=a),d+=n.slice(p,c).replace(ye,at),t&&(r=!0,d+="' +\n__e("+t+") +\n'"),s&&(o=!0,d+="';\n"+s+";\n__p += '"),i&&(d+="' +\n((__t = ("+i+")) == null ? '' : __t) +\n'"),p=c+e.length,e})),d+="';\n";var h=Ie.call(t,"variable")&&t.variable;if(h){if(le.test(h))throw new Ce("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(o?d.replace(q,""):d).replace(M,"$1").replace(V,"$1;"),d="function("+(h||"obj")+") {\n"+(h?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(r?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var v=Qs((function(){return Se(c,f+"return "+d).apply(e,l)}));if(v.source=d,Zo(v))throw v;return v},qt.times=function(e,n){if((e=hs(e))<1||e>p)return[];var t=d,i=yt(e,d);n=lr(n),e-=d;for(var a=Gn(i,n);++t<e;)n(t);return a},qt.toFinite=fs,qt.toInteger=hs,qt.toLength=vs,qt.toLower=function(e){return bs(e).toLowerCase()},qt.toNumber=xs,qt.toSafeInteger=function(e){return e?ci(hs(e),-9007199254740991,p):0===e?e:0},qt.toString=bs,qt.toUpper=function(e){return bs(e).toUpperCase()},qt.trim=function(n,t,i){if((n=bs(n))&&(i||t===e))return Jn(n);if(!n||!(t=pa(t)))return n;var a=dt(n),r=dt(t);return wa(a,et(a,r),nt(a,r)+1).join("")},qt.trimEnd=function(n,t,i){if((n=bs(n))&&(i||t===e))return n.slice(0,mt(n)+1);if(!n||!(t=pa(t)))return n;var a=dt(n);return wa(a,0,nt(a,dt(t))+1).join("")},qt.trimStart=function(n,t,i){if((n=bs(n))&&(i||t===e))return n.replace(ie,"");if(!n||!(t=pa(t)))return n;var a=dt(n);return wa(a,et(a,dt(t))).join("")},qt.truncate=function(n,t){var i=30,a="...";if(ns(t)){var r="separator"in t?t.separator:r;i="length"in t?hs(t.length):i,a="omission"in t?pa(t.omission):a}var o=(n=bs(n)).length;if(rt(n)){var s=dt(n);o=s.length}if(i>=o)return n;var c=i-ut(a);if(c<1)return a;var l=s?wa(s,0,c).join(""):n.slice(0,c);if(r===e)return l+a;if(s&&(c+=l.length-c),os(r)){if(n.slice(c).search(r)){var p,u=l;for(r.global||(r=Te(r.source,bs(de.exec(r))+"g")),r.lastIndex=0;p=r.exec(u);)var d=p.index;l=l.slice(0,d===e?c:d)}}else if(n.indexOf(pa(r),c)!=c){var m=l.lastIndexOf(r);m>-1&&(l=l.slice(0,m))}return l+a},qt.unescape=function(e){return(e=bs(e))&&H.test(e)?e.replace(U,ft):e},qt.uniqueId=function(e){var n=++Oe;return bs(e)+n},qt.upperCase=Js,qt.upperFirst=Zs,qt.each=bo,qt.eachRight=yo,qt.first=Yr,cc(qt,(gc={},_i(qt,(function(e,n){Ie.call(qt.prototype,n)||(gc[n]=e)})),gc),{chain:!1}),qt.VERSION="4.17.21",jn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){qt[e].placeholder=qt})),jn(["drop","take"],(function(n,t){Wt.prototype[n]=function(i){i=i===e?1:bt(hs(i),0);var a=this.__filtered__&&!t?new Wt(this):this.clone();return a.__filtered__?a.__takeCount__=yt(i,a.__takeCount__):a.__views__.push({size:yt(i,d),type:n+(a.__dir__<0?"Right":"")}),a},Wt.prototype[n+"Right"]=function(e){return this.reverse()[n](e).reverse()}})),jn(["filter","map","takeWhile"],(function(e,n){var t=n+1,i=1==t||3==t;Wt.prototype[e]=function(e){var n=this.clone();return n.__iteratees__.push({iteratee:lr(e,3),type:t}),n.__filtered__=n.__filtered__||i,n}})),jn(["head","last"],(function(e,n){var t="take"+(n?"Right":"");Wt.prototype[e]=function(){return this[t](1).value()[0]}})),jn(["initial","tail"],(function(e,n){var t="drop"+(n?"":"Right");Wt.prototype[e]=function(){return this.__filtered__?new Wt(this):this[t](1)}})),Wt.prototype.compact=function(){return this.filter(ac)},Wt.prototype.find=function(e){return this.filter(e).head()},Wt.prototype.findLast=function(e){return this.reverse().find(e)},Wt.prototype.invokeMap=Zi((function(e,n){return"function"==typeof e?new Wt(this):this.map((function(t){return Li(t,e,n)}))})),Wt.prototype.reject=function(e){return this.filter(Io(lr(e)))},Wt.prototype.slice=function(n,t){n=hs(n);var i=this;return i.__filtered__&&(n>0||t<0)?new Wt(i):(n<0?i=i.takeRight(-n):n&&(i=i.drop(n)),t!==e&&(i=(t=hs(t))<0?i.dropRight(-t):i.take(t-n)),i)},Wt.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Wt.prototype.toArray=function(){return this.take(d)},_i(Wt.prototype,(function(n,t){var i=/^(?:filter|find|map|reject)|While$/.test(t),a=/^(?:head|last)$/.test(t),r=qt[a?"take"+("last"==t?"Right":""):t],o=a||/^find/.test(t);r&&(qt.prototype[t]=function(){var t=this.__wrapped__,s=a?[1]:arguments,c=t instanceof Wt,l=s[0],p=c||Wo(t),u=function(e){var n=r.apply(qt,$n([e],s));return a&&d?n[0]:n};p&&i&&"function"==typeof l&&1!=l.length&&(c=p=!1);var d=this.__chain__,m=!!this.__actions__.length,f=o&&!d,h=c&&!m;if(!o&&p){t=h?t:new Wt(this);var v=n.apply(t,s);return v.__actions__.push({func:fo,args:[u],thisArg:e}),new Ut(v,d)}return f&&h?n.apply(this,s):(v=this.thru(u),f?a?v.value()[0]:v.value():v)})})),jn(["pop","push","shift","sort","splice","unshift"],(function(e){var n=Le[e],t=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",i=/^(?:pop|shift)$/.test(e);qt.prototype[e]=function(){var e=arguments;if(i&&!this.__chain__){var a=this.value();return n.apply(Wo(a)?a:[],e)}return this[t]((function(t){return n.apply(Wo(t)?t:[],e)}))}})),_i(Wt.prototype,(function(e,n){var t=qt[n];if(t){var i=t.name+"";Ie.call(Bt,i)||(Bt[i]=[]),Bt[i].push({name:n,func:t})}})),Bt[qa(e,2).name]=[{name:"wrapper",func:e}],Wt.prototype.clone=function(){var e=new Wt(this.__wrapped__);return e.__actions__=Pa(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Pa(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Pa(this.__views__),e},Wt.prototype.reverse=function(){if(this.__filtered__){var e=new Wt(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Wt.prototype.value=function(){var e=this.__wrapped__.value(),n=this.__dir__,t=Wo(e),i=n<0,a=t?e.length:0,r=function(e,n,t){for(var i=-1,a=t.length;++i<a;){var r=t[i],o=r.size;switch(r.type){case"drop":e+=o;break;case"dropRight":n-=o;break;case"take":n=yt(n,e+o);break;case"takeRight":e=bt(e,n-o)}}return{start:e,end:n}}(0,a,this.__views__),o=r.start,s=r.end,c=s-o,l=i?s:o-1,p=this.__iteratees__,u=p.length,d=0,m=yt(c,this.__takeCount__);if(!t||!i&&a==c&&m==c)return ha(e,this.__actions__);var f=[];e:for(;c--&&d<m;){for(var h=-1,v=e[l+=n];++h<u;){var x=p[h],g=x.iteratee,b=x.type,y=g(v);if(2==b)v=y;else if(!y){if(1==b)continue e;break e}}f[d++]=v}return f},qt.prototype.at=ho,qt.prototype.chain=function(){return mo(this)},qt.prototype.commit=function(){return new Ut(this.value(),this.__chain__)},qt.prototype.next=function(){this.__values__===e&&(this.__values__=ms(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?e:this.__values__[this.__index__++]}},qt.prototype.plant=function(n){for(var t,i=this;i instanceof Vt;){var a=Nr(i);a.__index__=0,a.__values__=e,t?r.__wrapped__=a:t=a;var r=a;i=i.__wrapped__}return r.__wrapped__=n,t},qt.prototype.reverse=function(){var n=this.__wrapped__;if(n instanceof Wt){var t=n;return this.__actions__.length&&(t=new Wt(this)),(t=t.reverse()).__actions__.push({func:fo,args:[eo],thisArg:e}),new Ut(t,this.__chain__)}return this.thru(eo)},qt.prototype.toJSON=qt.prototype.valueOf=qt.prototype.value=function(){return ha(this.__wrapped__,this.__actions__)},qt.prototype.first=qt.prototype.head,nn&&(qt.prototype[nn]=function(){return this}),qt}();hn?((hn.exports=ht)._=ht,fn._=ht):mn._=ht}.call(W);var Pi={name:"FieldTip",components:{Popover:d},props:{tip:{type:String,default:""}},data:()=>({showMore:!1}),created(){},mounted(){},methods:{showToast(){this.showMore=!0;let e=this;setTimeout((()=>{e.showMore=!1}),3e3)}}};var Li=function(e,n,t,i,a,r,o,s,c,l){"boolean"!=typeof o&&(c=s,s=o,o=!1);var p,u="function"==typeof t?t.options:t;if(e&&e.render&&(u.render=e.render,u.staticRenderFns=e.staticRenderFns,u._compiled=!0,a&&(u.functional=!0)),i&&(u._scopeId=i),r?(p=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),n&&n.call(this,c(e)),e&&e._registeredComponents&&e._registeredComponents.add(r)},u._ssrRegister=p):n&&(p=o?function(){n.call(this,l(this.$root.$options.shadowRoot))}:function(e){n.call(this,s(e))}),p)if(u.functional){var d=u.render;u.render=function(e,n){return p.call(n),d(e,n)}}else{var m=u.beforeCreate;u.beforeCreate=m?[].concat(m,p):[p]}return t},Bi="undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());var Di=document.head||document.getElementsByTagName("head")[0],$i={};var Fi=function(e){return function(e,n){return function(e,n){var t=Bi?n.media||"default":e,i=$i[t]||($i[t]={ids:new Set,styles:[]});if(!i.ids.has(e)){i.ids.add(e);var a=n.source;if(n.map&&(a+="\n/*# sourceURL="+n.map.sources[0]+" */",a+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n.map))))+" */"),i.element||(i.element=document.createElement("style"),i.element.type="text/css",n.media&&i.element.setAttribute("media",n.media),Di.appendChild(i.element)),"styleSheet"in i.element)i.styles.push(a),i.element.styleSheet.cssText=i.styles.filter(Boolean).join("\n");else{var r=i.ids.size-1,o=document.createTextNode(a),s=i.element.childNodes;s[r]&&i.element.removeChild(s[r]),s.length?i.element.insertBefore(o,s[r]):i.element.appendChild(o)}}}(e,n)}};const Ii=Pi;var Oi=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("van-popover",{attrs:{trigger:"click",placement:"top-start"},scopedSlots:e._u([{key:"reference",fn:function(){return[t("div",{staticClass:"flex-middle jsonvue-full-height",on:{click:function(n){return n.stopPropagation(),e.showToast(n)}}},[t("van-icon",{attrs:{name:"question",color:"#DC9C23"}})],1)]},proxy:!0}]),model:{value:e.showMore,callback:function(n){e.showMore=n},expression:"showMore"}},[t("div",{staticStyle:{padding:"10px"}},[e._v("\n        "+e._s(e.tip)+"\n    ")])])};Oi._withStripped=!0;const Ri=Li({render:Oi,staticRenderFns:[]},(function(e){e&&e("data-v-02f11f00_0",{source:"\n\n/*# sourceMappingURL=FieldTip.vue.map */",map:{version:3,sources:["FieldTip.vue"],names:[],mappings:";;AAEA,uCAAuC",file:"FieldTip.vue"},media:void 0})}),Ii,"data-v-02f11f00",false,undefined,!1,Fi,void 0,void 0),Ni={props:{tip:{type:String,default:""},tipLocation:{type:String,default:"right"},isBold:{type:Boolean,default:!1}}};const zi={name:"FieldText",components:{Field:m,FieldTip:Ri},mixins:[Ni],inheritAttrs:!1,model:{prop:"currentText"},data(){return{showMore:!1,rules:Ei.exports.cloneDeep(this.validateRules)}},props:{validateRules:{type:[String,Object],default:()=>{}},label:{type:String},currentText:[String,Number],addAble:[String,Number],maxlength:{type:[String,Number],default:100},fieldType:{type:String,default:"text"},validateName:{type:String,default:""},availableBalanceAmt:{type:[String,Number]},hideAvailableBalance:{type:Boolean,default:!1},isEnd:{type:Boolean,default:!1},precision:{type:Number,default:2},inputAlign:{type:String,default:"right"}},computed:{name(){return this.validateName||this.label},numberPrecisionRegex(){return new RegExp(`^(\\d)*\\.\\d{${this.precision},}$`)}},methods:{changeText(e){const n=this.currentText;this.$emit("input",e),this.$emit("onText",e,n)},focus(){this.$refs.field.focus()},formatter(e,n=this.$attrs.type){if(e+="",e=Ei.exports.trim(e),console.log("value:"+this.currentText+" fieldText:"+e+" type:"+n),"number"===n&&this.numberPrecisionRegex.test(e))try{e=(e=Number(e)).toFixed(this.precision)}catch(e){}else if("int"===n&&/^[0-9]+\.?$/.test(e))try{e=(e=Number(e)).toFixed(0)}catch(e){}return e}},watch:{currentText:{handler(e){}}}};var qi=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ValidationProvider",{attrs:{name:e.name,rules:e.validateRules},scopedSlots:e._u([{key:"default",fn:function(n){var i=n.errors;return[t("Field",e._b({ref:"field",class:[e.isEnd?"bot-bor":"","top"===e.$attrs.labelAlign?"jsonvue-flex-column":""],attrs:{value:e.currentText,label:e.label,"error-message":i[0],formatter:e.formatter,"input-align":e.inputAlign,maxlength:e.maxlength,type:e.fieldType},on:{input:e.changeText},scopedSlots:e._u([{key:"label",fn:function(){return[t("div",{staticClass:"field-common__label"},[t("span",{class:e.isBold?"font-bold":""},[e._v(e._s(e.label))]),e._v(" "),e.tip&&"right"===e.tipLocation?t("FieldTip",{staticClass:"field-common__label-tip",attrs:{tip:e.tip}}):e._e()],1)]},proxy:!0},"amount"===e.fieldType?{key:"right-icon",fn:function(){return[t("div",{staticStyle:{color:"#333333","margin-left":"5px"}},[e._v("元")])]},proxy:!0}:"availableBalanceType"===e.fieldType&&0==e.hideAvailableBalance?{key:"right-icon",fn:function(){return[t("div",{staticStyle:{color:"#969799","margin-left":"20px"}},[e._v(e._s(e._f("currency")(e.availableBalanceAmt)))])]},proxy:!0}:null],null,!0)},"Field",e.$attrs,!1)),e._v(" "),e.tip&&"bottom"===e.tipLocation?t("div",{staticClass:"field-common__label-tip__bottom"},[e._v("\n        "+e._s(e.tip)+"\n    ")]):e._e()]}}])})};qi._withStripped=!0;const Mi=Li({render:qi,staticRenderFns:[]},(function(e){e&&e("data-v-ab7b58c8_0",{source:".font-bold[data-v-ab7b58c8] {\n  font-weight: bold;\n}\n.bot-bor[data-v-ab7b58c8] {\n  border-bottom: 0px;\n}\n[data-v-ab7b58c8] .van-field__control--right {\n  padding-right: 10px;\n}\n",map:{version:3,sources:["FieldText.vue"],names:[],mappings:"AAAA;EACE,iBAAiB;AACnB;AACA;EACE,kBAAkB;AACpB;AACC;EACC,mBAAmB;AACrB",file:"FieldText.vue",sourcesContent:[".font-bold {\n  font-weight: bold;\n}\n.bot-bor {\n  border-bottom: 0px;\n}\n /deep/ .van-field__control--right {\n  padding-right: 10px;\n}\n"]},media:void 0})}),zi,"data-v-ab7b58c8",false,undefined,!1,Fi,void 0,void 0);Mi.install=function(e){e.component(Mi.name,Mi)};var Vi={name:"FieldSelect",components:{Field:m,Popup:f,Search:h,Picker:v,Icon:x,RadioGroup:g,CellGroup:b,Cell:y,Radio:_,Pagination:w,FieldTip:Ri},mixins:[Ni],data(){return{show:!1,searchVal:"",columnsAll:[],defaultIndex:0,resultRadio:"",currentPage:1,page:5,rules:Ei.exports.cloneDeep(this.validateRules)}},inheritAttrs:!1,model:{prop:"currentSelect"},props:{currentSelect:{type:[Object,String,Number,Array],default:()=>{}},valueKey:{type:String,default:"name"},getType:{type:String,default:"code"},optionCodes:{type:Array,default:()=>[]},postData:String,postUrl:String,validateRules:{type:[String,Object]},scene:{type:[String,Number],default:1},disabled:{type:Boolean,value:!1},isEnd:{type:Boolean,default:!1},useShowSlot:{type:Boolean,default:!1},refreshWhenClick:{type:Boolean,default:!1},httpFunction:[Function],inputAlign:{type:String,default:"right"}},computed:{fieldVal(){let e="";return e="string"==typeof this.currentSelect?this.currentSelect:(this.currentSelect||{}).name||"",e},fieldId(){let e="";return e="string"==typeof this.currentSelect?"":(this.currentSelect||{}).id||"",e},columnsRadio(){let e=(this.currentPage-1)*this.page;return this.columns.slice(e,e+this.page)},pageCount(){return Math.ceil(this.columns.length/this.page)},columns(){let e;try{e=Ei.exports.cloneDeep(this.columnsAll).filter((e=>{let n=e.name+"";n=n.toLowerCase();let t=(this.searchVal+"").trim();return t=t.toLowerCase(),n.indexOf(t)>-1}))}catch(n){e=[]}return e}},watch:{show(){this.searchVal=""},searchVal(){this.currentPage=1},currentSelect:{handler(){"string"==typeof this.currentSelect?this.currentSelect:(this.currentSelect||{})[this.valueKey]},deep:!0}},methods:{onDelete(){this.$emit("onSelect",{}),this.$emit("input",{})},onSearch(){},toggle(e){this.resultRadio=e;let n={};this.columnsAll.every((t=>t.id!==e||(n=Ei.exports.cloneDeep(t),!1))),this.onConfirm(n)},onClick(){if(2!==this.scene&&!this.disabled&&"TEXT"!==this.getType&&"text"!==this.getType){if(this.$emit("paramsChange"),"CODE"===this.getType||"code"===this.getType)this.getColumns(this.optionCodes||[]);else{if(!this.postUrl&&!this.httpFunction instanceof Function)return;setTimeout((async()=>{if(this.refreshWhenClick||Array.isArray(this.columnsAll)&&0===this.columnsAll.length){let e=JSON.parse(this.postData||"{}");if(this.httpFunction instanceof Function){const n=await this.httpFunction(e);this.getColumns((Array.isArray(n)?n:void 0)||n.list||n.data.list||[])}else this.$post(this.postUrl,e).then((e=>{console.log("fieldSelect:",e),this.getColumns((Array.isArray(e)?e:void 0)||e.list||e.data.list||[])}))}}),300)}this.show=!0}},getColumns(e){this.columnsAll=e||[],this.defaultIndex=0,this.currentPage=1,this.resultRadio="",this.fieldId?this.columnsAll.every(((e,n)=>e.id!==this.fieldId||(this.defaultIndex=n,this.currentPage=Math.ceil((n+1)/this.page),this.resultRadio=e.id,!1))):this.columnsAll.every(((e,n)=>e.name!==this.fieldVal||(this.defaultIndex=n,this.currentPage=Math.ceil((n+1)/this.page),this.resultRadio=e.id,!1)))},onConfirm(e){this.$emit("onSelect",e),this.$emit("input",e),this.show=!1}}};const Ui=Vi;var Wi=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("ValidationProvider",{attrs:{name:e.$attrs.label,rules:e.validateRules},scopedSlots:e._u([{key:"default",fn:function(n){var i=n.errors;return[e.useShowSlot?e._t("default",null,{click:function(){return e.onClick()}}):t("Field",e._b({class:[e.isEnd?"bot-bor":"","top"===e.$attrs.labelAlign?"jsonvue-flex-column":""],attrs:{readonly:!0,"error-message":i[0],"input-align":e.inputAlign},on:{click:e.onClick},scopedSlots:e._u([{key:"label",fn:function(){return[t("div",{staticClass:"field-common__label"},[t("span",{class:e.isBold?"font-bold":""},[e._v(e._s(e.$attrs.label))]),e._v(" "),e.tip&&"right"===e.tipLocation?t("FieldTip",{staticClass:"field-common__label-tip",attrs:{tip:e.tip}}):e._e()],1)]},proxy:!0}],null,!0),model:{value:e.fieldVal,callback:function(n){e.fieldVal=n},expression:"fieldVal"}},"Field",e.$attrs,!1),[e._v(" "),t("div",{staticStyle:{display:"flex","align-items":"center"},attrs:{slot:"button"},slot:"button"},[2!==e.scene&&!e.disabled&&e.fieldVal?t("div",{on:{click:function(n){return n.stopPropagation(),e.onDelete(n)}}},[t("span",{staticClass:"txt-all"},[t("i",{staticClass:"iconfont icon-shanchu"})])]):e._e(),e._v(" "),2===e.scene||e.disabled||"TEXT"===e.getType&&"text"===e.getType?e._e():t("span",{staticClass:"txt-all",staticStyle:{"padding-left":"2px"}},[t("Icon",{attrs:{name:"arrow"}})],1)])]),e._v(" "),e.tip&&"bottom"===e.tipLocation?t("div",{staticClass:"field-common__label-tip__bottom"},[e._v("\n         "+e._s(e.tip)+"\n       ")]):e._e()]}}])}),e._v(" "),e.columnsAll.length<=100?t("Popup",{style:{width:"100%"},attrs:{position:"bottom","get-container":"#app"},model:{value:e.show,callback:function(n){e.show=n},expression:"show"}},[t("div",[e.columnsAll.length>10?t("form",{attrs:{action:"/"}},[t("Search",{attrs:{clearable:"",placeholder:"请搜索关键词"},on:{search:e.onSearch},model:{value:e.searchVal,callback:function(n){e.searchVal=n},expression:"searchVal"}})],1):e._e(),e._v(" "),t("Picker",{attrs:{"show-toolbar":"","value-key":e.valueKey,title:"请选择"+e.$attrs.label,columns:e.columns,"default-index":e.defaultIndex},on:{cancel:function(n){e.show=!1},confirm:e.onConfirm}})],1)]):t("Popup",{style:{width:"100%",height:"54%"},attrs:{position:"bottom","get-container":"#app"},model:{value:e.show,callback:function(n){e.show=n},expression:"show"}},[t("div",{staticClass:"jsonvue-page"},[t("div",{staticClass:"select-hd van-hairline--bottom"},[t("span",{staticClass:"null-pop"},[e._v(" ")]),e._v(" "),t("span",{staticClass:"van-info-title"},[e._v("添加"+e._s(e.$attrs.label))]),e._v(" "),t("Icon",{staticClass:"close-pop",attrs:{name:"close"},on:{click:function(n){e.show=!1}}})],1),e._v(" "),t("form",{attrs:{action:"/"}},[t("Search",{attrs:{clearable:"",placeholder:"请搜索关键词"},on:{search:e.onSearch},model:{value:e.searchVal,callback:function(n){e.searchVal=n},expression:"searchVal"}})],1),e._v(" "),t("div",{staticClass:"jsonvue-content"},[t("RadioGroup",{model:{value:e.resultRadio,callback:function(n){e.resultRadio=n},expression:"resultRadio"}},[t("CellGroup",e._l(e.columnsRadio,(function(n,i){return t("Cell",{key:i,attrs:{clickable:"",title:n.name},on:{click:function(t){return e.toggle(n.id)}}},[t("Radio",{staticClass:"ml5",attrs:{slot:"right-icon",name:n.id},slot:"right-icon"})],1)})),1)],1)],1),e._v(" "),t("Pagination",{attrs:{"page-count":e.pageCount,mode:"simple"},model:{value:e.currentPage,callback:function(n){e.currentPage=n},expression:"currentPage"}})],1)])],1)};Wi._withStripped=!0;const Yi=Li({render:Wi,staticRenderFns:[]},(function(e){e&&e("data-v-2b6268c6_0",{source:"\n.jsonvue-page[data-v-2b6268c6] {\n    display: flex;\n    flex-direction: column;\n}\n.jsonvue-flex1[data-v-2b6268c6] {\n    width: 100%;\n    flex: 1;\n}\n.jsonvue-content[data-v-2b6268c6] {\n    width: 100%;\n    flex: 1;\n    overflow-x: hidden;\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch;\n}\n.bot-bor[data-v-2b6268c6]{\n    border-bottom: 0px;\n}\n.select-hd[data-v-2b6268c6] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 20px 30px;\n  font-size: 15px;\n  background-color: #fff;\n}\n.van-info-title[data-v-2b6268c6]{\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 60%;\n  white-space: nowrap;\n  text-align: center;\n}\n",map:{version:3,sources:["D:\\ZJ_Project\\jsonvue\\src\\FieldSelectt\\FieldSelect.vue"],names:[],mappings:";AAyUA;IACA,aAAA;IACA,sBAAA;AACA;AACA;IACA,WAAA;IACA,OAAA;AACA;AACA;IACA,WAAA;IACA,OAAA;IACA,kBAAA;IACA,gBAAA;IACA,iCAAA;AACA;AACA;IACA,kBAAA;AACA;AACA;EACA,aAAA;EACA,mBAAA;EACA,8BAAA;EACA,kBAAA;EACA,eAAA;EACA,sBAAA;AACA;AACA;EACA,gBAAA;EACA,uBAAA;EACA,UAAA;EACA,mBAAA;EACA,kBAAA;AACA",file:"FieldSelect.vue",sourcesContent:['<template>\r\n    <div>\r\n       <ValidationProvider :name="$attrs.label" :rules="validateRules" v-slot="{errors}">\r\n            <Field\r\n                    v-if="!useShowSlot"\r\n                    v-bind="$attrs"\r\n                    :readonly="true"\r\n                    v-model="fieldVal"\r\n                    @click="onClick"\r\n                    :error-message="errors[0]"\r\n                    :input-align="inputAlign"\r\n                    :class="[isEnd ? \'bot-bor\' : \'\',$attrs.labelAlign === \'top\' ? \'jsonvue-flex-column\' : \'\']"\r\n            >\r\n\r\n                <template #label>\r\n                  <div class="field-common__label">\r\n                    <span :class=" isBold ? \'font-bold\' : \'\' ">{{$attrs.label}}</span>\r\n                    <FieldTip v-if="tip && tipLocation === \'right\'" class="field-common__label-tip"  :tip="tip"></FieldTip>\r\n                  </div>\r\n                </template>\r\n                <div  slot="button" style="display: flex;align-items: center">\r\n                    <div @click.stop="onDelete" v-if=" scene!==2 && !disabled && fieldVal " >\r\n                      <span class="txt-all" >\r\n                        <i class="iconfont icon-shanchu"></i>\r\n                      </span>\r\n                    </div>\r\n                    <span style="padding-left: 2px"\r\n                          class="txt-all"\r\n                          v-if="scene!==2 && !disabled && (getType !==\'TEXT\' || getType !==\'text\')"\r\n                    >\r\n                        <Icon name="arrow"></Icon>\r\n                      </span>\r\n                </div>\r\n            </Field>\r\n            <slot v-else :click="()=>onClick()"></slot>\r\n           <div v-if="tip && tipLocation === \'bottom\'" class="field-common__label-tip__bottom">\r\n             {{tip}}\r\n           </div>\r\n        </ValidationProvider>\r\n      <Popup\r\n              v-model="show"\r\n              position="bottom"\r\n              get-container="#app"\r\n              :style="{ width: \'100%\'}"\r\n              v-if="columnsAll.length<=100"\r\n      >\r\n          <div>\r\n              <form action="/" v-if="columnsAll.length>10">\r\n                  <Search v-model="searchVal" clearable placeholder="请搜索关键词" @search="onSearch"></Search>\r\n              </form>\r\n              <Picker\r\n                      show-toolbar\r\n                      :value-key="valueKey"\r\n                      :title="\'请选择\'+$attrs.label"\r\n                      :columns="columns"\r\n                      :default-index="defaultIndex"\r\n                      @cancel="show=false"\r\n                      @confirm="onConfirm"\r\n              />\r\n          </div>\r\n      </Popup>\r\n      <Popup\r\n              v-else\r\n              v-model="show"\r\n              position="bottom"\r\n              get-container="#app"\r\n              :style="{ width: \'100%\',height:\'54%\' }"\r\n      >\r\n          <div class="jsonvue-page">\r\n              <div class="select-hd van-hairline--bottom">\r\n                  <span class="null-pop">&nbsp;</span>\r\n                  <span class="van-info-title">添加{{$attrs.label}}</span>\r\n                  <Icon class="close-pop" @click="show=false" name="close" />\r\n              </div>\r\n              <form action="/">\r\n                  <Search v-model="searchVal" clearable placeholder="请搜索关键词" @search="onSearch"></Search>\r\n              </form>\r\n              <div class="jsonvue-content">\r\n                  <RadioGroup v-model="resultRadio">\r\n                      <CellGroup>\r\n                          <Cell\r\n                                  v-for="(item, index) in columnsRadio"\r\n                                  clickable\r\n                                  :key="index"\r\n                                  :title="item.name"\r\n                                  @click="toggle(item.id)"\r\n                          >\r\n                              <Radio class="ml5" :name="item.id" slot="right-icon" />\r\n                          </Cell>\r\n                      </CellGroup>\r\n                  </RadioGroup>\r\n              </div>\r\n              <Pagination\r\n                      v-model="currentPage"\r\n                      :page-count="pageCount"\r\n                      mode="simple"\r\n              />\r\n          </div>\r\n      </Popup>\r\n    </div>\r\n</template>\r\n<script>\r\n    import { cloneDeep } from "lodash";\r\n    import {Field,Popup,Search,Picker,Icon,RadioGroup,CellGroup,Cell,Radio,Pagination} from \'vant\'\r\n    import FieldTip from "../FieldTip.vue";\r\n    import {commonLabelMixin} from "../mixins/commonLabelMixin";\r\n    export default {\r\n        name: "FieldSelect",\r\n        components: {Field,Popup,Search,Picker,Icon,RadioGroup,CellGroup,Cell,Radio,Pagination,FieldTip},\r\n        mixins:[commonLabelMixin],\r\n        data() {\r\n            return {\r\n                show: false,\r\n                searchVal: "",\r\n                columnsAll: [],\r\n                defaultIndex: 0,\r\n                resultRadio: "",\r\n                currentPage: 1,\r\n                page:5,\r\n                rules:cloneDeep(this.validateRules)\r\n            };\r\n        },\r\n        inheritAttrs: false,\r\n        model: {\r\n            prop: "currentSelect"\r\n        },\r\n        props: {\r\n            currentSelect: {\r\n                type:[Object, String, Number, Array],\r\n                default:()=>{}\r\n            },\r\n            valueKey: {\r\n                type: String,\r\n                default: "name"\r\n            },\r\n            getType:{\r\n              type:String,\r\n              default:\'code\'\r\n            },\r\n            optionCodes:{\r\n              type:Array,\r\n              default:()=>[]\r\n            },\r\n            postData: String,\r\n            postUrl: String,\r\n            validateRules: {\r\n              type:[String,Object]\r\n            },\r\n            scene:{\r\n              type:[String,Number],\r\n              default:1\r\n            },\r\n            disabled:{\r\n                type:Boolean,\r\n                value:false\r\n            },\r\n            isEnd:{\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            useShowSlot:{\r\n                type:Boolean,\r\n                default:false\r\n            },\r\n            //每次点击时是否刷新数据 默认初次加载后缓存数据后不再刷新加载\r\n            refreshWhenClick:{\r\n              type:Boolean,\r\n              default:false\r\n            },\r\n            //http 外部http请求函数方便对接现有接口\r\n            httpFunction:[Function],\r\n            inputAlign:{\r\n              type:String,\r\n              default:\'right\'\r\n            }\r\n        },\r\n        computed: {\r\n            fieldVal() {\r\n              /* 字段选择的name */\r\n              let name = "";\r\n              if (typeof this.currentSelect == "string") {\r\n                name = this.currentSelect;\r\n              } else {\r\n                name = (this.currentSelect || {}).name || "";\r\n              }\r\n              return name;\r\n            },\r\n            fieldId() {\r\n                /* 字段id */\r\n                let id = "";\r\n                if (typeof this.currentSelect == "string") {\r\n                    id = "";\r\n                } else {\r\n                    id = (this.currentSelect || {}).id || "";\r\n                }\r\n                return id;\r\n            },\r\n            columnsRadio(){\r\n                let currentPage = (this.currentPage - 1) * this.page;\r\n                return this.columns.slice(currentPage,currentPage+this.page);\r\n            },\r\n            pageCount(){\r\n                return Math.ceil(this.columns.length/this.page);\r\n            },\r\n            columns() {\r\n                /* picker筛选 */\r\n                let columns;\r\n                try {\r\n                    let columnsAll = cloneDeep(this.columnsAll);\r\n                    columns = columnsAll.filter(item => {\r\n                        let name = item.name + "";\r\n                        name = name.toLowerCase();\r\n                        let searchVal = (this.searchVal + "").trim();\r\n                        searchVal = searchVal.toLowerCase();\r\n                        return name.indexOf(searchVal) > -1;\r\n                    });\r\n                } catch (error) {\r\n                    columns = [];\r\n                }\r\n                return columns;\r\n            }\r\n        },\r\n        watch: {\r\n            show() {\r\n                this.searchVal = "";\r\n            },\r\n            searchVal(){\r\n                this.currentPage = 1;\r\n            },\r\n            currentSelect: {\r\n                handler() {\r\n                    /* 监听值变化，触发返回 */\r\n                    //this.$emit("onSelect", this.currentSelect);\r\n                  let name = "";\r\n                  if (typeof this.currentSelect == "string") {\r\n                    name = this.currentSelect;\r\n                  } else {\r\n                    name = (this.currentSelect || {})[this.valueKey] || "";\r\n                  }\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        methods: {\r\n            onDelete(){\r\n                this.$emit("onSelect", {});\r\n                this.$emit("input",{})\r\n            },\r\n            onSearch() {},\r\n            toggle(id) {\r\n                this.resultRadio = id;\r\n                let value = {};\r\n                this.columnsAll.every(item => {\r\n                    if (item.id === id) {\r\n                        value = cloneDeep(item);\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                });\r\n                this.onConfirm(value);\r\n            },\r\n            onClick() {\r\n                if (this.scene === 2 || this.disabled || this.getType === "TEXT" || this.getType === "text") {\r\n                    return;\r\n                }\r\n                //参数变更组件\r\n                this.$emit(\'paramsChange\')\r\n                //触发下拉,获取数据\r\n                if (this.getType === "CODE" || this.getType === "code") {\r\n                    this.getColumns(this.optionCodes || []);\r\n                } else {\r\n                    if (!this.postUrl && !this.httpFunction instanceof Function) {\r\n                        return;\r\n                    }\r\n                    setTimeout(async ()=>{\r\n                        if (this.refreshWhenClick || Array.isArray(this.columnsAll) && this.columnsAll.length === 0) {\r\n                          let data = JSON.parse(this.postData || "{}")\r\n                          if (this.httpFunction instanceof Function) {\r\n                              const resp = await this.httpFunction(data)\r\n                              this.getColumns((Array.isArray(resp) ? resp : undefined) || resp.list || resp.data.list || []);\r\n                          } else {\r\n                            this.$post(this.postUrl, data).then(resp => {\r\n                              console.log("fieldSelect:",resp)\r\n                              this.getColumns((Array.isArray(resp) ? resp : undefined) || resp.list || resp.data.list || []);\r\n                            });\r\n                          }\r\n                        }\r\n                    },300)\r\n                }\r\n                this.show = true;\r\n            },\r\n            getColumns(columnsAll) {\r\n                this.columnsAll = columnsAll || [];\r\n                this.defaultIndex = 0;\r\n                this.currentPage = 1;\r\n                this.resultRadio = "";\r\n                if (this.fieldId) {\r\n                    this.columnsAll.every((item, index) => {\r\n                        if (item.id === this.fieldId) {\r\n                            this.defaultIndex = index;\r\n                            this.currentPage = Math.ceil((index+1)/this.page);\r\n                            this.resultRadio = item.id;\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                } else {\r\n                    this.columnsAll.every((item, index) => {\r\n                        if (item.name === this.fieldVal) {\r\n                            this.defaultIndex = index;\r\n                            this.currentPage = Math.ceil((index+1)/this.page);\r\n                            this.resultRadio = item.id;\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                }\r\n            },\r\n            onConfirm(value) {\r\n                /* 更新数据和触发 */\r\n                this.$emit("onSelect", value);\r\n                this.$emit("input", value);\r\n                this.show = false;\r\n            }\r\n        }\r\n    };\r\n<\/script>\r\n\r\n<style scoped>\r\n    .jsonvue-page {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n    .jsonvue-flex1 {\r\n        width: 100%;\r\n        flex: 1;\r\n    }\r\n    .jsonvue-content {\r\n        width: 100%;\r\n        flex: 1;\r\n        overflow-x: hidden;\r\n        overflow-y: auto;\r\n        -webkit-overflow-scrolling: touch;\r\n    }\r\n    .bot-bor{\r\n        border-bottom: 0px;\r\n    }\r\n    .select-hd {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      padding: 20px 30px;\r\n      font-size: 15px;\r\n      background-color: #fff;\r\n    }\r\n    .van-info-title{\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      width: 60%;\r\n      white-space: nowrap;\r\n      text-align: center;\r\n    }\r\n</style>\r\n']},media:void 0})}),Ui,"data-v-2b6268c6",false,undefined,!1,Fi,void 0,void 0);Yi.install=function(e){e.component(Yi.name,Yi)};const Hi={name:"FieldUpload"};var Ki=function(){var e=this,n=e.$createElement;return(e._self._c||n)("div",[e._v("文件上传组件")])};Ki._withStripped=!0;const Gi=Li({render:Ki,staticRenderFns:[]},undefined,Hi,undefined,false,undefined,!1,void 0,void 0,void 0);Gi.install=function(e){e.component(Gi.name,Gi)};const Ji={name:"FieldDate",components:{Field:m,Popup:f,DatetimePicker:A,FieldTip:Ri},mixins:[Ni],data:()=>({show:!1,nowDate:""}),inheritAttrs:!1,model:{prop:"currentDate"},props:{currentDate:{type:[String,Number],default:""},displayFormat:[String],minDate:[String,Number],maxDate:[String,Number],scene:{type:[String,Number],default:1},validateRules:{type:[Object,String],default:()=>{}},disabled:{type:Boolean,default:!1},isEnd:{type:Boolean,default:!1},fieldType:{type:String,default:"date"},inputAlign:{type:String,default:"right"}},computed:{minDateShow(){let e=new Date(this.minDate);if(e.toString().indexOf("Invalid")>-1){let e=(new Date).getFullYear();return new Date(e-10,0,1)}return e},maxDateShow(){let e=new Date(this.maxDate);if(e.toString().indexOf("Invalid")>-1){let e=(new Date).getFullYear();return new Date(e+10,11,31)}return e},fieldVal(){let e;if("time"!==this.fieldType){if(new Date(this.currentDate).toString().indexOf("Invalid")>-1)e=this.currentDate;else{let n=this.displayFormat||this.defaultDisplayFormat;e=yi(this.currentDate).format(n)}}else e=this.currentDate;return e},defaultDisplayFormat(){return"year-month"===this.fieldType?"YYYY-MM":"date"===this.fieldType?"YYYY-MM-DD":"datetime"===this.fieldType?"YYYY-MM-DD HH:mm":"time"===this.fieldType?"HH:mm":void 0}},watch:{currentDate:{handler(){}}},methods:{onClick(){if(2!==this.scene&&!this.disabled){if("time"!==this.fieldType){const e=new Date(this.currentDate);-1===e.toString().indexOf("Invalid")?this.nowDate=e:this.nowDate=new Date}else this.nowDate=this.currentDate||yi(new Date).format(this.defaultDisplayFormat);this.show=!0}},onConfirm(e){let n;console.log("fieldDate:value:",e),"time"!==this.fieldType?(n=new Date(e).getTime(),console.log("fieldDate:time:",n)):n=e,this.$emit("onDatetime",n),this.$emit("input",n),this.show=!1},formatter:(e,n)=>"year"===e?`${n}年`:"month"===e?`${n}月`:"day"===e?`${n}日`:"hour"===e?`${n}时`:"minute"===e?`${n}分`:n}};var Zi=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("ValidationProvider",{attrs:{name:e.$attrs.label,rules:e.validateRules},scopedSlots:e._u([{key:"default",fn:function(n){var i=n.errors;return[t("Field",e._b({class:[e.isEnd?"bot-bor":"","top"===e.$attrs.labelAlign?"jsonvue-flex-column":""],attrs:{readonly:!0,value:e.fieldVal,"error-message":i[0],"input-align":e.inputAlign},on:{click:e.onClick},scopedSlots:e._u([{key:"label",fn:function(){return[t("div",{staticClass:"field-common__label"},[t("span",{class:e.isBold?"font-bold":""},[e._v(e._s(e.$attrs.label))]),e._v(" "),e.tip&&"right"===e.tipLocation?t("FieldTip",{staticClass:"field-common__label-tip",attrs:{tip:e.tip}}):e._e()],1)]},proxy:!0},{key:"right-icon",fn:function(){return[2!==e.scene?t("i",{staticClass:"iconfont icon-riqi"}):e._e()]},proxy:!0}],null,!0)},"Field",e.$attrs,!1)),e._v(" "),e.tip&&"bottom"===e.tipLocation?t("div",{staticClass:"field-common__label-tip__bottom"},[e._v("\n          "+e._s(e.tip)+"\n        ")]):e._e()]}}])}),e._v(" "),t("Popup",{style:{width:"100%"},attrs:{position:"bottom","get-container":"#app"},model:{value:e.show,callback:function(n){e.show=n},expression:"show"}},[t("DatetimePicker",{attrs:{type:e.fieldType,"min-date":e.minDateShow,"max-date":e.maxDateShow,formatter:e.formatter},on:{confirm:e.onConfirm,cancel:function(n){e.show=!1}},model:{value:e.nowDate,callback:function(n){e.nowDate=n},expression:"nowDate"}})],1)],1)};Zi._withStripped=!0;const Xi=Li({render:Zi,staticRenderFns:[]},(function(e){e&&e("data-v-0c12d422_0",{source:"\n.bot-bor[data-v-0c12d422]{\n    border-bottom: 0px;\n}\n",map:{version:3,sources:["D:\\ZJ_Project\\jsonvue\\src\\FieldDate\\FieldDate.vue"],names:[],mappings:";AAkNA;IACA,kBAAA;AACA",file:"FieldDate.vue",sourcesContent:['<template>\r\n    <div>\r\n      <ValidationProvider :name="$attrs.label" :rules="validateRules" v-slot="{errors}">\r\n        <Field\r\n                    v-bind="$attrs"\r\n                    :readonly="true"\r\n                    :value="fieldVal"\r\n                    @click="onClick"\r\n                    :error-message="errors[0]"\r\n                    :input-align="inputAlign"\r\n                    :class="[isEnd ? \'bot-bor\' : \'\',$attrs.labelAlign === \'top\' ? \'jsonvue-flex-column\' : \'\']"\r\n            >\r\n\r\n                <template #label>\r\n                  <div class="field-common__label">\r\n                    <span :class=" isBold ? \'font-bold\' : \'\' ">{{$attrs.label}}</span>\r\n                    <FieldTip v-if="tip && tipLocation === \'right\'" class="field-common__label-tip"  :tip="tip"></FieldTip>\r\n                  </div>\r\n                </template>\r\n                <template #right-icon>\r\n                    <i v-if="scene!==2" class="iconfont icon-riqi"></i>\r\n                </template>\r\n            </Field>\r\n            <div v-if="tip && tipLocation === \'bottom\'" class="field-common__label-tip__bottom">\r\n              {{tip}}\r\n            </div>\r\n        </ValidationProvider>\r\n      <Popup v-model="show" position="bottom" get-container="#app" :style="{ width: \'100%\' }">\r\n          <DatetimePicker\r\n                  v-model="nowDate"\r\n                  :type="fieldType"\r\n                  :min-date="minDateShow"\r\n                  :max-date="maxDateShow"\r\n                  @confirm="onConfirm"\r\n                  @cancel="show=false"\r\n                  :formatter="formatter"\r\n          />\r\n      </Popup>\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport {Field,Popup,DatetimePicker} from \'vant\'\r\nimport {cloneDeep} from \'lodash\'\r\nimport dayjs from \'dayjs\'\r\nimport FieldTip from "../FieldTip.vue";\r\nimport {commonLabelMixin} from "../mixins/commonLabelMixin";\r\nexport default {\r\n    name:\'FieldDate\',\r\n    components: {Field,Popup,DatetimePicker,FieldTip},\r\n    mixins:[commonLabelMixin],\r\n      data() {\r\n            return {\r\n                show: false,\r\n                nowDate: "",\r\n            };\r\n        },\r\n        inheritAttrs: false,\r\n        model: {\r\n            prop: "currentDate"\r\n        },\r\n        props: {\r\n            currentDate: {\r\n              type:[String, Number],\r\n              default:\'\'\r\n            },\r\n            //日期显示格式\r\n            displayFormat:[String],\r\n            minDate: [String, Number],\r\n            maxDate: [String, Number],\r\n            scene:{\r\n              type:[String,Number],\r\n              default:1\r\n            },\r\n            validateRules:{\r\n              type:[Object,String],\r\n              default:()=>{}\r\n            },\r\n            disabled:{\r\n                type:Boolean,\r\n                default:false\r\n            },\r\n            isEnd:{\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            //日期组件选择类型，默认为年月日\r\n            fieldType:{\r\n              type:String,\r\n              default:\'date\'\r\n            },\r\n            inputAlign:{\r\n              type:String,\r\n              default:\'right\'\r\n            }\r\n        },\r\n        computed: {\r\n            minDateShow() {\r\n                let minDate = new Date(this.minDate);\r\n                if (minDate.toString().indexOf("Invalid") > -1) {\r\n                    let currentYear = new Date().getFullYear();\r\n                    return new Date(currentYear - 10, 0, 1);\r\n                }\r\n\r\n                return minDate;\r\n            },\r\n            maxDateShow() {\r\n                let maxDate = new Date(this.maxDate);\r\n                if (maxDate.toString().indexOf("Invalid") > -1) {\r\n                    let currentYear = new Date().getFullYear();\r\n                    return new Date(currentYear + 10, 11, 31);\r\n                }\r\n                return maxDate;\r\n            },\r\n            fieldVal() {\r\n                let currentDate;\r\n                if (this.fieldType !== \'time\') {\r\n                  //时间戳转为时间格式展示\r\n                  let isValid = new Date(this.currentDate);\r\n                  // console.log(\'fieldDate:fieldVal\',isValid)\r\n                  //无效时间直接赋值，有效时间转化时间戳\r\n                  if (isValid.toString().indexOf("Invalid") > -1) {\r\n                    currentDate = this.currentDate;\r\n                  } else {\r\n                    let format = this.displayFormat || this.defaultDisplayFormat;\r\n                    currentDate = dayjs(this.currentDate).format(format);\r\n                  }\r\n                } else {\r\n                  currentDate = this.currentDate\r\n                }\r\n\r\n                return currentDate;\r\n            },\r\n            //默认的显示格式\r\n            defaultDisplayFormat(){\r\n              if (this.fieldType === \'year-month\'){\r\n                return \'YYYY-MM\'\r\n              } else if (this.fieldType === \'date\') {\r\n                return "YYYY-MM-DD"\r\n              } else if (this.fieldType === \'datetime\') {\r\n                return "YYYY-MM-DD HH:mm"\r\n              } else if (this.fieldType === \'time\') {\r\n                return "HH:mm"\r\n              }\r\n            }\r\n        },\r\n        watch: {\r\n            currentDate: {\r\n                handler() {\r\n                    /* 传时间戳回去 */\r\n                    //this.$emit("onDatetime", this.currentDate);\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * 显示时间选择器，初始化时间\r\n             */\r\n            onClick() {\r\n                if (this.scene === 2 || this.disabled) {\r\n                    return;\r\n                }\r\n                if ( this.fieldType !== \'time\' ){\r\n                  const date = new Date(this.currentDate);\r\n                  if ( date.toString().indexOf("Invalid") === -1 ) {\r\n                    this.nowDate = date;\r\n                  } else {\r\n                    this.nowDate = new Date();\r\n                  }\r\n                } else {\r\n                  this.nowDate = this.currentDate || dayjs(new Date()).format(this.defaultDisplayFormat)\r\n                }\r\n\r\n                this.show = true;\r\n            },\r\n            onConfirm(value) {\r\n                console.log(\'fieldDate:value:\',value)\r\n                let dateTime\r\n                if (this.fieldType !== \'time\') {\r\n                  dateTime = new Date(value).getTime();\r\n                  console.log(\'fieldDate:time:\',dateTime)\r\n                } else {\r\n                  dateTime = value\r\n                }\r\n                /* 更新输入框时间 */\r\n                this.$emit("onDatetime", dateTime);\r\n                this.$emit("input", dateTime);\r\n                this.show = false;\r\n            },\r\n            /**\r\n             * 格式化时间\r\n             */\r\n            formatter(type, value) {\r\n                if (type === "year") {\r\n                    return `${value}年`;\r\n                } else if (type === "month") {\r\n                    return `${value}月`;\r\n                } else if (type === "day") {\r\n                    return `${value}日`;\r\n                } else if (type === "hour") {\r\n                    return `${value}时`;\r\n                } else if (type === "minute") {\r\n                    return `${value}分`;\r\n                }\r\n                return value;\r\n            }\r\n        }\r\n}\r\n<\/script>\r\n<style scoped>\r\n    .bot-bor{\r\n        border-bottom: 0px;\r\n    }\r\n</style>\r\n']},media:void 0})}),Ji,"data-v-0c12d422",false,undefined,!1,Fi,void 0,void 0);Xi.install=function(e){e.component(Xi.name,Xi)};const Qi={AreaList:{province_list:{11e4:"北京市",12e4:"天津市",13e4:"河北省",14e4:"山西省",15e4:"内蒙古自治区",21e4:"辽宁省",22e4:"吉林省",23e4:"黑龙江省",31e4:"上海市",32e4:"江苏省",33e4:"浙江省",34e4:"安徽省",35e4:"福建省",36e4:"江西省",37e4:"山东省",41e4:"河南省",42e4:"湖北省",43e4:"湖南省",44e4:"广东省",45e4:"广西壮族自治区",46e4:"海南省",5e5:"重庆市",51e4:"四川省",52e4:"贵州省",53e4:"云南省",54e4:"西藏自治区",61e4:"陕西省",62e4:"甘肃省",63e4:"青海省",64e4:"宁夏回族自治区",65e4:"新疆维吾尔自治区",71e4:"台湾省",81e4:"香港特别行政区",82e4:"澳门特别行政区"},city_list:{110100:"北京市",120100:"天津市",130100:"石家庄市",130200:"唐山市",130300:"秦皇岛市",130400:"邯郸市",130500:"邢台市",130600:"保定市",130700:"张家口市",130800:"承德市",130900:"沧州市",131e3:"廊坊市",131100:"衡水市",140100:"太原市",140200:"大同市",140300:"阳泉市",140400:"长治市",140500:"晋城市",140600:"朔州市",140700:"晋中市",140800:"运城市",140900:"忻州市",141e3:"临汾市",141100:"吕梁市",150100:"呼和浩特市",150200:"包头市",150300:"乌海市",150400:"赤峰市",150500:"通辽市",150600:"鄂尔多斯市",150700:"呼伦贝尔市",150800:"巴彦淖尔市",150900:"乌兰察布市",152200:"兴安盟",152500:"锡林郭勒盟",152900:"阿拉善盟",210100:"沈阳市",210200:"大连市",210300:"鞍山市",210400:"抚顺市",210500:"本溪市",210600:"丹东市",210700:"锦州市",210800:"营口市",210900:"阜新市",211e3:"辽阳市",211100:"盘锦市",211200:"铁岭市",211300:"朝阳市",211400:"葫芦岛市",220100:"长春市",220200:"吉林市",220300:"四平市",220400:"辽源市",220500:"通化市",220600:"白山市",220700:"松原市",220800:"白城市",222400:"延边朝鲜族自治州",230100:"哈尔滨市",230200:"齐齐哈尔市",230300:"鸡西市",230400:"鹤岗市",230500:"双鸭山市",230600:"大庆市",230700:"伊春市",230800:"佳木斯市",230900:"七台河市",231e3:"牡丹江市",231100:"黑河市",231200:"绥化市",232700:"大兴安岭地区",310100:"上海市",320100:"南京市",320200:"无锡市",320300:"徐州市",320400:"常州市",320500:"苏州市",320600:"南通市",320700:"连云港市",320800:"淮安市",320900:"盐城市",321e3:"扬州市",321100:"镇江市",321200:"泰州市",321300:"宿迁市",330100:"杭州市",330200:"宁波市",330300:"温州市",330400:"嘉兴市",330500:"湖州市",330600:"绍兴市",330700:"金华市",330800:"衢州市",330900:"舟山市",331e3:"台州市",331100:"丽水市",340100:"合肥市",340200:"芜湖市",340300:"蚌埠市",340400:"淮南市",340500:"马鞍山市",340600:"淮北市",340700:"铜陵市",340800:"安庆市",341e3:"黄山市",341100:"滁州市",341200:"阜阳市",341300:"宿州市",341500:"六安市",341600:"亳州市",341700:"池州市",341800:"宣城市",350100:"福州市",350200:"厦门市",350300:"莆田市",350400:"三明市",350500:"泉州市",350600:"漳州市",350700:"南平市",350800:"龙岩市",350900:"宁德市",360100:"南昌市",360200:"景德镇市",360300:"萍乡市",360400:"九江市",360500:"新余市",360600:"鹰潭市",360700:"赣州市",360800:"吉安市",360900:"宜春市",361e3:"抚州市",361100:"上饶市",370100:"济南市",370200:"青岛市",370300:"淄博市",370400:"枣庄市",370500:"东营市",370600:"烟台市",370700:"潍坊市",370800:"济宁市",370900:"泰安市",371e3:"威海市",371100:"日照市",371200:"莱芜市",371300:"临沂市",371400:"德州市",371500:"聊城市",371600:"滨州市",371700:"菏泽市",410100:"郑州市",410200:"开封市",410300:"洛阳市",410400:"平顶山市",410500:"安阳市",410600:"鹤壁市",410700:"新乡市",410800:"焦作市",410900:"濮阳市",411e3:"许昌市",411100:"漯河市",411200:"三门峡市",411300:"南阳市",411400:"商丘市",411500:"信阳市",411600:"周口市",411700:"驻马店市",419e3:"省直辖县",420100:"武汉市",420200:"黄石市",420300:"十堰市",420500:"宜昌市",420600:"襄阳市",420700:"鄂州市",420800:"荆门市",420900:"孝感市",421e3:"荆州市",421100:"黄冈市",421200:"咸宁市",421300:"随州市",422800:"恩施土家族苗族自治州",429e3:"省直辖县",430100:"长沙市",430200:"株洲市",430300:"湘潭市",430400:"衡阳市",430500:"邵阳市",430600:"岳阳市",430700:"常德市",430800:"张家界市",430900:"益阳市",431e3:"郴州市",431100:"永州市",431200:"怀化市",431300:"娄底市",433100:"湘西土家族苗族自治州",440100:"广州市",440200:"韶关市",440300:"深圳市",440400:"珠海市",440500:"汕头市",440600:"佛山市",440700:"江门市",440800:"湛江市",440900:"茂名市",441200:"肇庆市",441300:"惠州市",441400:"梅州市",441500:"汕尾市",441600:"河源市",441700:"阳江市",441800:"清远市",441900:"东莞市",442e3:"中山市",445100:"潮州市",445200:"揭阳市",445300:"云浮市",450100:"南宁市",450200:"柳州市",450300:"桂林市",450400:"梧州市",450500:"北海市",450600:"防城港市",450700:"钦州市",450800:"贵港市",450900:"玉林市",451e3:"百色市",451100:"贺州市",451200:"河池市",451300:"来宾市",451400:"崇左市",460100:"海口市",460200:"三亚市",460300:"三沙市",460400:"儋州市",469e3:"省直辖县",500100:"重庆市",500200:"县",510100:"成都市",510300:"自贡市",510400:"攀枝花市",510500:"泸州市",510600:"德阳市",510700:"绵阳市",510800:"广元市",510900:"遂宁市",511e3:"内江市",511100:"乐山市",511300:"南充市",511400:"眉山市",511500:"宜宾市",511600:"广安市",511700:"达州市",511800:"雅安市",511900:"巴中市",512e3:"资阳市",513200:"阿坝藏族羌族自治州",513300:"甘孜藏族自治州",513400:"凉山彝族自治州",520100:"贵阳市",520200:"六盘水市",520300:"遵义市",520400:"安顺市",520500:"毕节市",520600:"铜仁市",522300:"黔西南布依族苗族自治州",522600:"黔东南苗族侗族自治州",522700:"黔南布依族苗族自治州",530100:"昆明市",530300:"曲靖市",530400:"玉溪市",530500:"保山市",530600:"昭通市",530700:"丽江市",530800:"普洱市",530900:"临沧市",532300:"楚雄彝族自治州",532500:"红河哈尼族彝族自治州",532600:"文山壮族苗族自治州",532800:"西双版纳傣族自治州",532900:"大理白族自治州",533100:"德宏傣族景颇族自治州",533300:"怒江傈僳族自治州",533400:"迪庆藏族自治州",540100:"拉萨市",540200:"日喀则市",540300:"昌都市",540400:"林芝市",540500:"山南市",540600:"那曲市",542500:"阿里地区",610100:"西安市",610200:"铜川市",610300:"宝鸡市",610400:"咸阳市",610500:"渭南市",610600:"延安市",610700:"汉中市",610800:"榆林市",610900:"安康市",611e3:"商洛市",620100:"兰州市",620200:"嘉峪关市",620300:"金昌市",620400:"白银市",620500:"天水市",620600:"武威市",620700:"张掖市",620800:"平凉市",620900:"酒泉市",621e3:"庆阳市",621100:"定西市",621200:"陇南市",622900:"临夏回族自治州",623e3:"甘南藏族自治州",630100:"西宁市",630200:"海东市",632200:"海北藏族自治州",632300:"黄南藏族自治州",632500:"海南藏族自治州",632600:"果洛藏族自治州",632700:"玉树藏族自治州",632800:"海西蒙古族藏族自治州",640100:"银川市",640200:"石嘴山市",640300:"吴忠市",640400:"固原市",640500:"中卫市",650100:"乌鲁木齐市",650200:"克拉玛依市",650400:"吐鲁番市",650500:"哈密市",652300:"昌吉回族自治州",652700:"博尔塔拉蒙古自治州",652800:"巴音郭楞蒙古自治州",652900:"阿克苏地区",653e3:"克孜勒苏柯尔克孜自治州",653100:"喀什地区",653200:"和田地区",654e3:"伊犁哈萨克自治州",654200:"塔城地区",654300:"阿勒泰地区",659e3:"自治区直辖县级行政区划",710100:"台北市",710200:"高雄市",710300:"台南市",710400:"台中市",710500:"金门县",710600:"南投县",710700:"基隆市",710800:"新竹市",710900:"嘉义市",711100:"新北市",711200:"宜兰县",711300:"新竹县",711400:"桃园县",711500:"苗栗县",711700:"彰化县",711900:"嘉义县",712100:"云林县",712400:"屏东县",712500:"台东县",712600:"花莲县",712700:"澎湖县",712800:"连江县",810100:"香港岛",810200:"九龙",810300:"新界",820100:"澳门半岛",820200:"离岛",900400:"阿富汗",900800:"阿尔巴尼亚",901e3:"南极洲",901200:"阿尔及利亚",901600:"美属萨摩亚",902e3:"安道尔",902400:"安哥拉",902800:"安提瓜和巴布达",903100:"阿塞拜疆",903200:"阿根廷",903600:"澳大利亚",904e3:"奥地利",904400:"巴哈马",904800:"巴林",905e3:"孟加拉",905100:"亚美尼亚",905200:"巴巴多斯",905600:"比利时",906e3:"百慕大",906400:"不丹",906800:"玻利维亚",907e3:"波黑",907200:"博茨瓦纳",907400:"布韦岛",907600:"巴西",908400:"伯利兹",908600:"英属印度洋领地",909e3:"所罗门群岛",909200:"英属维尔京群岛",909600:"文莱",91e4:"保加利亚",910400:"缅甸",910800:"布隆迪",911200:"白俄罗斯",911600:"柬埔寨",912e3:"喀麦隆",912400:"加拿大",913200:"佛得角",913600:"开曼群岛",914e3:"中非",914400:"斯里兰卡",914800:"乍得",915200:"智利",916200:"圣诞岛",916600:"科科斯群岛",917e3:"哥伦比亚",917400:"科摩罗",917500:"马约特",917800:"刚果（布）",918e3:"刚果（金）",918400:"库克群岛",918800:"哥斯达黎加",919100:"克罗地亚",919200:"古巴",919600:"塞浦路斯",920300:"捷克",920400:"贝宁",920800:"丹麦",921200:"多米尼克",921400:"多米尼加",921800:"厄瓜多尔",922200:"萨尔瓦多",922600:"赤道几内亚",923100:"埃塞俄比亚",923200:"厄立特里亚",923300:"爱沙尼亚",923400:"法罗群岛",923800:"马尔维纳斯群岛（ 福克兰）",923900:"南乔治亚岛和南桑威奇群岛",924200:"斐济群岛",924600:"芬兰",924800:"奥兰群岛",925e3:"法国",925400:"法属圭亚那",925800:"法属波利尼西亚",926e3:"法属南部领地",926200:"吉布提",926600:"加蓬",926800:"格鲁吉亚",927e3:"冈比亚",927500:"巴勒斯坦",927600:"德国",928800:"加纳",929200:"直布罗陀",929600:"基里巴斯",93e4:"希腊",930400:"格陵兰",930800:"格林纳达",931200:"瓜德罗普",931600:"关岛",932e3:"危地马拉",932400:"几内亚",932800:"圭亚那",933200:"海地",933400:"赫德岛和麦克唐纳群岛",933600:"梵蒂冈",934e3:"洪都拉斯",934800:"匈牙利",935200:"冰岛",935600:"印度",936e3:"印尼",936400:"伊朗",936800:"伊拉克",937200:"爱尔兰",937600:"以色列",938e3:"意大利",938400:"科特迪瓦",938800:"牙买加",939200:"日本",939800:"哈萨克斯坦",94e4:"约旦",940400:"肯尼亚",940800:"朝鲜 北朝鲜",941e3:"韩国",941400:"科威特",941700:"吉尔吉斯斯坦",941800:"老挝",942200:"黎巴嫩",942600:"莱索托",942800:"拉脱维亚",943e3:"利比里亚",943400:"利比亚",943800:"列支敦士登",944e3:"立陶宛",944200:"卢森堡",945e3:"马达加斯加",945400:"马拉维",945800:"马来西亚",946200:"马尔代夫",946600:"马里",947e3:"马耳他",947400:"马提尼克",947800:"毛里塔尼亚",948e3:"毛里求斯",948400:"墨西哥",949200:"摩纳哥",949600:"蒙古国",949800:"摩尔多瓦",949900:"黑山",95e4:"蒙塞拉特岛",950400:"摩洛哥",950800:"莫桑比克",951200:"阿曼",951600:"纳米比亚",952e3:"瑙鲁",952400:"尼泊尔",952800:"荷兰",953300:"阿鲁巴",953500:"荷兰加勒比区",954e3:"新喀里多尼亚",954800:"瓦努阿图",955400:"新西兰",955800:"尼加拉瓜",956200:"尼日尔",956600:"尼日利亚",957e3:"纽埃",957400:"诺福克岛",957800:"挪威",958e3:"北马里亚纳群岛",958100:"美国本土外小岛屿",958300:"密克罗尼西亚联邦",958400:"马绍尔群岛",958500:"帕劳",958600:"巴基斯坦",959100:"巴拿马",959800:"巴布亚新几内亚",96e4:"巴拉圭",960400:"秘鲁",960800:"菲律宾",961200:"皮特凯恩群岛",961600:"波兰",962e3:"葡萄牙",962400:"几内亚比绍",962600:"东帝汶",963e3:"波多黎各",963400:"卡塔尔",963800:"留尼汪",964200:"罗马尼亚",964300:"俄罗斯",964600:"卢旺达",965200:"圣巴泰勒米岛",965400:"圣赫勒拿",965900:"圣基茨和尼维斯",966e3:"安圭拉",966200:"圣卢西亚",966300:"法属圣马丁",966600:"圣皮埃尔和密克隆",967e3:"圣文森特和格林纳丁斯",967400:"圣马力诺",967800:"圣多美和普林西比",968200:"沙特阿拉伯",968600:"塞内加尔",968800:"塞尔维亚",969e3:"塞舌尔",969400:"塞拉利昂",970200:"新加坡",970300:"斯洛伐克",970400:"越南",970500:"斯洛文尼亚",970600:"索马里",971e3:"南非",971600:"津巴布韦",972400:"西班牙",972800:"南苏丹",972900:"苏丹",973200:"西撒哈拉",974e3:"苏里南",974400:"斯瓦尔巴群岛和 扬马延岛",974800:"斯威士兰",975200:"瑞典",975600:"瑞士",976e3:"叙利亚",976200:"塔吉克斯坦",976400:"泰国",976800:"多哥",977200:"托克劳",977600:"汤加",978e3:"特立尼达和多巴哥",978400:"阿联酋",978800:"突尼斯",979200:"土耳其",979500:"土库曼斯坦",979600:"特克斯和凯科斯群岛",979800:"图瓦卢",98e4:"乌干达",980400:"乌克兰",980700:"马其顿",981800:"埃及",982600:"英国",983100:"根西岛",983200:"泽西岛",983300:"马恩岛",983400:"坦桑尼亚",984e3:"美国",985e3:"美属维尔京群岛",985400:"布基纳法索",985800:"乌拉圭",986e3:"乌兹别克斯坦",986200:"委内瑞拉",987600:"瓦利斯和富图纳",988200:"萨摩亚",988700:"也门",989400:"赞比亚"},county_list:{110101:"东城区",110102:"西城区",110105:"朝阳区",110106:"丰台区",110107:"石景山区",110108:"海淀区",110109:"门头沟区",110111:"房山区",110112:"通州区",110113:"顺义区",110114:"昌平区",110115:"大兴区",110116:"怀柔区",110117:"平谷区",110118:"密云区",110119:"延庆区",120101:"和平区",120102:"河东区",120103:"河西区",120104:"南开区",120105:"河北区",120106:"红桥区",120110:"东丽区",120111:"西青区",120112:"津南区",120113:"北辰区",120114:"武清区",120115:"宝坻区",120116:"滨海新区",120117:"宁河区",120118:"静海区",120119:"蓟州区",130102:"长安区",130104:"桥西区",130105:"新华区",130107:"井陉矿区",130108:"裕华区",130109:"藁城区",130110:"鹿泉区",130111:"栾城区",130121:"井陉县",130123:"正定县",130125:"行唐县",130126:"灵寿县",130127:"高邑县",130128:"深泽县",130129:"赞皇县",130130:"无极县",130131:"平山县",130132:"元氏县",130133:"赵县",130181:"辛集市",130183:"晋州市",130184:"新乐市",130202:"路南区",130203:"路北区",130204:"古冶区",130205:"开平区",130207:"丰南区",130208:"丰润区",130209:"曹妃甸区",130224:"滦南县",130225:"乐亭县",130227:"迁西县",130229:"玉田县",130281:"遵化市",130283:"迁安市",130284:"滦州市",130302:"海港区",130303:"山海关区",130304:"北戴河区",130306:"抚宁区",130321:"青龙满族自治县",130322:"昌黎县",130324:"卢龙县",130390:"经济技术开发区",130402:"邯山区",130403:"丛台区",130404:"复兴区",130406:"峰峰矿区",130407:"肥乡区",130408:"永年区",130423:"临漳县",130424:"成安县",130425:"大名县",130426:"涉县",130427:"磁县",130430:"邱县",130431:"鸡泽县",130432:"广平县",130433:"馆陶县",130434:"魏县",130435:"曲周县",130481:"武安市",130502:"桥东区",130503:"桥西区",130521:"邢台县",130522:"临城县",130523:"内丘县",130524:"柏乡县",130525:"隆尧县",130526:"任县",130527:"南和县",130528:"宁晋县",130529:"巨鹿县",130530:"新河县",130531:"广宗县",130532:"平乡县",130533:"威县",130534:"清河县",130535:"临西县",130581:"南宫市",130582:"沙河市",130602:"竞秀区",130606:"莲池区",130607:"满城区",130608:"清苑区",130609:"徐水区",130623:"涞水县",130624:"阜平县",130626:"定兴县",130627:"唐县",130628:"高阳县",130629:"容城县",130630:"涞源县",130631:"望都县",130632:"安新县",130633:"易县",130634:"曲阳县",130635:"蠡县",130636:"顺平县",130637:"博野县",130638:"雄县",130681:"涿州市",130682:"定州市",130683:"安国市",130684:"高碑店市",130702:"桥东区",130703:"桥西区",130705:"宣化区",130706:"下花园区",130708:"万全区",130709:"崇礼区",130722:"张北县",130723:"康保县",130724:"沽源县",130725:"尚义县",130726:"蔚县",130727:"阳原县",130728:"怀安县",130730:"怀来县",130731:"涿鹿县",130732:"赤城县",130802:"双桥区",130803:"双滦区",130804:"鹰手营子矿区",130821:"承德县",130822:"兴隆县",130824:"滦平县",130825:"隆化县",130826:"丰宁满族自治县",130827:"宽城满族自治县",130828:"围场满族蒙古族自治县",130881:"平泉市",130902:"新华区",130903:"运河区",130921:"沧县",130922:"青县",130923:"东光县",130924:"海兴县",130925:"盐山县",130926:"肃宁县",130927:"南皮县",130928:"吴桥县",130929:"献县",130930:"孟村回族自治县",130981:"泊头市",130982:"任丘市",130983:"黄骅市",130984:"河间市",131002:"安次区",131003:"广阳区",131022:"固安县",131023:"永清县",131024:"香河县",131025:"大城县",131026:"文安县",131028:"大厂回族自治县",131081:"霸州市",131082:"三河市",131090:"开发区",131102:"桃城区",131103:"冀州区",131121:"枣强县",131122:"武邑县",131123:"武强县",131124:"饶阳县",131125:"安平县",131126:"故城县",131127:"景县",131128:"阜城县",131182:"深州市",140105:"小店区",140106:"迎泽区",140107:"杏花岭区",140108:"尖草坪区",140109:"万柏林区",140110:"晋源区",140121:"清徐县",140122:"阳曲县",140123:"娄烦县",140181:"古交市",140212:"新荣区",140213:"平城区",140214:"云冈区",140215:"云州区",140221:"阳高县",140222:"天镇县",140223:"广灵县",140224:"灵丘县",140225:"浑源县",140226:"左云县",140302:"城区",140303:"矿区",140311:"郊区",140321:"平定县",140322:"盂县",140403:"潞州区",140404:"上党区",140405:"屯留区",140406:"潞城区",140423:"襄垣县",140425:"平顺县",140426:"黎城县",140427:"壶关县",140428:"长子县",140429:"武乡县",140430:"沁县",140431:"沁源县",140502:"城区",140521:"沁水县",140522:"阳城县",140524:"陵川县",140525:"泽州县",140581:"高平市",140602:"朔城区",140603:"平鲁区",140621:"山阴县",140622:"应县",140623:"右玉县",140681:"怀仁市",140702:"榆次区",140721:"榆社县",140722:"左权县",140723:"和顺县",140724:"昔阳县",140725:"寿阳县",140726:"太谷县",140727:"祁县",140728:"平遥县",140729:"灵石县",140781:"介休市",140802:"盐湖区",140821:"临猗县",140822:"万荣县",140823:"闻喜县",140824:"稷山县",140825:"新绛县",140826:"绛县",140827:"垣曲县",140828:"夏县",140829:"平陆县",140830:"芮城县",140881:"永济市",140882:"河津市",140902:"忻府区",140921:"定襄县",140922:"五台县",140923:"代县",140924:"繁峙县",140925:"宁武县",140926:"静乐县",140927:"神池县",140928:"五寨县",140929:"岢岚县",140930:"河曲县",140931:"保德县",140932:"偏关县",140981:"原平市",141002:"尧都区",141021:"曲沃县",141022:"翼城县",141023:"襄汾县",141024:"洪洞县",141025:"古县",141026:"安泽县",141027:"浮山县",141028:"吉县",141029:"乡宁县",141030:"大宁县",141031:"隰县",141032:"永和县",141033:"蒲县",141034:"汾西县",141081:"侯马市",141082:"霍州市",141102:"离石区",141121:"文水县",141122:"交城县",141123:"兴县",141124:"临县",141125:"柳林县",141126:"石楼县",141127:"岚县",141128:"方山县",141129:"中阳县",141130:"交口县",141181:"孝义市",141182:"汾阳市",150102:"新城区",150103:"回民区",150104:"玉泉区",150105:"赛罕区",150121:"土默特左旗",150122:"托克托县",150123:"和林格尔县",150124:"清水河县",150125:"武川县",150202:"东河区",150203:"昆都仑区",150204:"青山区",150205:"石拐区",150206:"白云鄂博矿区",150207:"九原区",150221:"土默特右旗",150222:"固阳县",150223:"达尔罕茂明安联合旗",150302:"海勃湾区",150303:"海南区",150304:"乌达区",150402:"红山区",150403:"元宝山区",150404:"松山区",150421:"阿鲁科尔沁旗",150422:"巴林左旗",150423:"巴林右旗",150424:"林西县",150425:"克什克腾旗",150426:"翁牛特旗",150428:"喀喇沁旗",150429:"宁城县",150430:"敖汉旗",150502:"科尔沁区",150521:"科尔沁左翼中旗",150522:"科尔沁左翼后旗",150523:"开鲁县",150524:"库伦旗",150525:"奈曼旗",150526:"扎鲁特旗",150581:"霍林郭勒市",150602:"东胜区",150603:"康巴什区",150621:"达拉特旗",150622:"准格尔旗",150623:"鄂托克前旗",150624:"鄂托克旗",150625:"杭锦旗",150626:"乌审旗",150627:"伊金霍洛旗",150702:"海拉尔区",150703:"扎赉诺尔区",150721:"阿荣旗",150722:"莫力达瓦达斡尔族自治旗",150723:"鄂伦春自治旗",150724:"鄂温克族自治旗",150725:"陈巴尔虎旗",150726:"新巴尔虎左旗",150727:"新巴尔虎右旗",150781:"满洲里市",150782:"牙克石市",150783:"扎兰屯市",150784:"额尔古纳市",150785:"根河市",150802:"临河区",150821:"五原县",150822:"磴口县",150823:"乌拉特前旗",150824:"乌拉特中旗",150825:"乌拉特后旗",150826:"杭锦后旗",150902:"集宁区",150921:"卓资县",150922:"化德县",150923:"商都县",150924:"兴和县",150925:"凉城县",150926:"察哈尔右翼前旗",150927:"察哈尔右翼中旗",150928:"察哈尔右翼后旗",150929:"四子王旗",150981:"丰镇市",152201:"乌兰浩特市",152202:"阿尔山市",152221:"科尔沁右翼前旗",152222:"科尔沁右翼中旗",152223:"扎赉特旗",152224:"突泉县",152501:"二连浩特市",152502:"锡林浩特市",152522:"阿巴嘎旗",152523:"苏尼特左旗",152524:"苏尼特右旗",152525:"东乌珠穆沁旗",152526:"西乌珠穆沁旗",152527:"太仆寺旗",152528:"镶黄旗",152529:"正镶白旗",152530:"正蓝旗",152531:"多伦县",152921:"阿拉善左旗",152922:"阿拉善右旗",152923:"额济纳旗",210102:"和平区",210103:"沈河区",210104:"大东区",210105:"皇姑区",210106:"铁西区",210111:"苏家屯区",210112:"浑南区",210113:"沈北新区",210114:"于洪区",210115:"辽中区",210123:"康平县",210124:"法库县",210181:"新民市",210190:"经济技术开发区",210202:"中山区",210203:"西岗区",210204:"沙河口区",210211:"甘井子区",210212:"旅顺口区",210213:"金州区",210214:"普兰店区",210224:"长海县",210281:"瓦房店市",210283:"庄河市",210302:"铁东区",210303:"铁西区",210304:"立山区",210311:"千山区",210321:"台安县",210323:"岫岩满族自治县",210381:"海城市",210390:"高新区",210402:"新抚区",210403:"东洲区",210404:"望花区",210411:"顺城区",210421:"抚顺县",210422:"新宾满族自治县",210423:"清原满族自治县",210502:"平山区",210503:"溪湖区",210504:"明山区",210505:"南芬区",210521:"本溪满族自治县",210522:"桓仁满族自治县",210602:"元宝区",210603:"振兴区",210604:"振安区",210624:"宽甸满族自治县",210681:"东港市",210682:"凤城市",210702:"古塔区",210703:"凌河区",210711:"太和区",210726:"黑山县",210727:"义县",210781:"凌海市",210782:"北镇市",210793:"经济技术开发区",210802:"站前区",210803:"西市区",210804:"鲅鱼圈区",210811:"老边区",210881:"盖州市",210882:"大石桥市",210902:"海州区",210903:"新邱区",210904:"太平区",210905:"清河门区",210911:"细河区",210921:"阜新蒙古族自治县",210922:"彰武县",211002:"白塔区",211003:"文圣区",211004:"宏伟区",211005:"弓长岭区",211011:"太子河区",211021:"辽阳县",211081:"灯塔市",211102:"双台子区",211103:"兴隆台区",211104:"大洼区",211122:"盘山县",211202:"银州区",211204:"清河区",211221:"铁岭县",211223:"西丰县",211224:"昌图县",211281:"调兵山市",211282:"开原市",211302:"双塔区",211303:"龙城区",211321:"朝阳县",211322:"建平县",211324:"喀喇沁左翼蒙古族自治县",211381:"北票市",211382:"凌源市",211402:"连山区",211403:"龙港区",211404:"南票区",211421:"绥中县",211422:"建昌县",211481:"兴城市",220102:"南关区",220103:"宽城区",220104:"朝阳区",220105:"二道区",220106:"绿园区",220112:"双阳区",220113:"九台区",220122:"农安县",220182:"榆树市",220183:"德惠市",220192:"经济技术开发区",220202:"昌邑区",220203:"龙潭区",220204:"船营区",220211:"丰满区",220221:"永吉县",220281:"蛟河市",220282:"桦甸市",220283:"舒兰市",220284:"磐石市",220302:"铁西区",220303:"铁东区",220322:"梨树县",220323:"伊通满族自治县",220381:"公主岭市",220382:"双辽市",220402:"龙山区",220403:"西安区",220421:"东丰县",220422:"东辽县",220502:"东昌区",220503:"二道江区",220521:"通化县",220523:"辉南县",220524:"柳河县",220581:"梅河口市",220582:"集安市",220602:"浑江区",220605:"江源区",220621:"抚松县",220622:"靖宇县",220623:"长白朝鲜族自治县",220681:"临江市",220702:"宁江区",220721:"前郭尔罗斯蒙古族自治县",220722:"长岭县",220723:"乾安县",220781:"扶余市",220802:"洮北区",220821:"镇赉县",220822:"通榆县",220881:"洮南市",220882:"大安市",222401:"延吉市",222402:"图们市",222403:"敦化市",222404:"珲春市",222405:"龙井市",222406:"和龙市",222424:"汪清县",222426:"安图县",230102:"道里区",230103:"南岗区",230104:"道外区",230108:"平房区",230109:"松北区",230110:"香坊区",230111:"呼兰区",230112:"阿城区",230113:"双城区",230123:"依兰县",230124:"方正县",230125:"宾县",230126:"巴彦县",230127:"木兰县",230128:"通河县",230129:"延寿县",230183:"尚志市",230184:"五常市",230202:"龙沙区",230203:"建华区",230204:"铁锋区",230205:"昂昂溪区",230206:"富拉尔基区",230207:"碾子山区",230208:"梅里斯达斡尔族区",230221:"龙江县",230223:"依安县",230224:"泰来县",230225:"甘南县",230227:"富裕县",230229:"克山县",230230:"克东县",230231:"拜泉县",230281:"讷河市",230302:"鸡冠区",230303:"恒山区",230304:"滴道区",230305:"梨树区",230306:"城子河区",230307:"麻山区",230321:"鸡东县",230381:"虎林市",230382:"密山市",230402:"向阳区",230403:"工农区",230404:"南山区",230405:"兴安区",230406:"东山区",230407:"兴山区",230421:"萝北县",230422:"绥滨县",230502:"尖山区",230503:"岭东区",230505:"四方台区",230506:"宝山区",230521:"集贤县",230522:"友谊县",230523:"宝清县",230524:"饶河县",230602:"萨尔图区",230603:"龙凤区",230604:"让胡路区",230605:"红岗区",230606:"大同区",230621:"肇州县",230622:"肇源县",230623:"林甸县",230624:"杜尔伯特蒙古族自治县",230702:"伊春区",230703:"南岔区",230704:"友好区",230705:"西林区",230706:"翠峦区",230707:"新青区",230708:"美溪区",230709:"金山屯区",230710:"五营区",230711:"乌马河区",230712:"汤旺河区",230713:"带岭区",230714:"乌伊岭区",230715:"红星区",230716:"上甘岭区",230722:"嘉荫县",230781:"铁力市",230803:"向阳区",230804:"前进区",230805:"东风区",230811:"郊区",230822:"桦南县",230826:"桦川县",230828:"汤原县",230881:"同江市",230882:"富锦市",230883:"抚远市",230902:"新兴区",230903:"桃山区",230904:"茄子河区",230921:"勃利县",231002:"东安区",231003:"阳明区",231004:"爱民区",231005:"西安区",231025:"林口县",231081:"绥芬河市",231083:"海林市",231084:"宁安市",231085:"穆棱市",231086:"东宁市",231102:"爱辉区",231121:"嫩江县",231123:"逊克县",231124:"孙吴县",231181:"北安市",231182:"五大连池市",231202:"北林区",231221:"望奎县",231222:"兰西县",231223:"青冈县",231224:"庆安县",231225:"明水县",231226:"绥棱县",231281:"安达市",231282:"肇东市",231283:"海伦市",232701:"漠河市",232721:"呼玛县",232722:"塔河县",232790:"松岭区",232791:"呼中区",232792:"加格达奇区",232793:"新林区",310101:"黄浦区",310104:"徐汇区",310105:"长宁区",310106:"静安区",310107:"普陀区",310109:"虹口区",310110:"杨浦区",310112:"闵行区",310113:"宝山区",310114:"嘉定区",310115:"浦东新区",310116:"金山区",310117:"松江区",310118:"青浦区",310120:"奉贤区",310151:"崇明区",320102:"玄武区",320104:"秦淮区",320105:"建邺区",320106:"鼓楼区",320111:"浦口区",320113:"栖霞区",320114:"雨花台区",320115:"江宁区",320116:"六合区",320117:"溧水区",320118:"高淳区",320205:"锡山区",320206:"惠山区",320211:"滨湖区",320213:"梁溪区",320214:"新吴区",320281:"江阴市",320282:"宜兴市",320302:"鼓楼区",320303:"云龙区",320305:"贾汪区",320311:"泉山区",320312:"铜山区",320321:"丰县",320322:"沛县",320324:"睢宁县",320381:"新沂市",320382:"邳州市",320391:"工业园区",320402:"天宁区",320404:"钟楼区",320411:"新北区",320412:"武进区",320413:"金坛区",320481:"溧阳市",320505:"虎丘区",320506:"吴中区",320507:"相城区",320508:"姑苏区",320509:"吴江区",320581:"常熟市",320582:"张家港市",320583:"昆山市",320585:"太仓市",320590:"工业园区",320591:"高新区",320602:"崇川区",320611:"港闸区",320612:"通州区",320623:"如东县",320681:"启东市",320682:"如皋市",320684:"海门市",320685:"海安市",320691:"高新区",320703:"连云区",320706:"海州区",320707:"赣榆区",320722:"东海县",320723:"灌云县",320724:"灌南县",320803:"淮安区",320804:"淮阴区",320812:"清江浦区",320813:"洪泽区",320826:"涟水县",320830:"盱眙县",320831:"金湖县",320890:"经济开发区",320902:"亭湖区",320903:"盐都区",320904:"大丰区",320921:"响水县",320922:"滨海县",320923:"阜宁县",320924:"射阳县",320925:"建湖县",320981:"东台市",321002:"广陵区",321003:"邗江区",321012:"江都区",321023:"宝应县",321081:"仪征市",321084:"高邮市",321090:"经济开发区",321102:"京口区",321111:"润州区",321112:"丹徒区",321181:"丹阳市",321182:"扬中市",321183:"句容市",321202:"海陵区",321203:"高港区",321204:"姜堰区",321281:"兴化市",321282:"靖江市",321283:"泰兴市",321302:"宿城区",321311:"宿豫区",321322:"沭阳县",321323:"泗阳县",321324:"泗洪县",330102:"上城区",330103:"下城区",330104:"江干区",330105:"拱墅区",330106:"西湖区",330108:"滨江区",330109:"萧山区",330110:"余杭区",330111:"富阳区",330112:"临安区",330122:"桐庐县",330127:"淳安县",330182:"建德市",330203:"海曙区",330205:"江北区",330206:"北仑区",330211:"镇海区",330212:"鄞州区",330213:"奉化区",330225:"象山县",330226:"宁海县",330281:"余姚市",330282:"慈溪市",330302:"鹿城区",330303:"龙湾区",330304:"瓯海区",330305:"洞头区",330324:"永嘉县",330326:"平阳县",330327:"苍南县",330328:"文成县",330329:"泰顺县",330381:"瑞安市",330382:"乐清市",330402:"南湖区",330411:"秀洲区",330421:"嘉善县",330424:"海盐县",330481:"海宁市",330482:"平湖市",330483:"桐乡市",330502:"吴兴区",330503:"南浔区",330521:"德清县",330522:"长兴县",330523:"安吉县",330602:"越城区",330603:"柯桥区",330604:"上虞区",330624:"新昌县",330681:"诸暨市",330683:"嵊州市",330702:"婺城区",330703:"金东区",330723:"武义县",330726:"浦江县",330727:"磐安县",330781:"兰溪市",330782:"义乌市",330783:"东阳市",330784:"永康市",330802:"柯城区",330803:"衢江区",330822:"常山县",330824:"开化县",330825:"龙游县",330881:"江山市",330902:"定海区",330903:"普陀区",330921:"岱山县",330922:"嵊泗县",331002:"椒江区",331003:"黄岩区",331004:"路桥区",331022:"三门县",331023:"天台县",331024:"仙居县",331081:"温岭市",331082:"临海市",331083:"玉环市",331102:"莲都区",331121:"青田县",331122:"缙云县",331123:"遂昌县",331124:"松阳县",331125:"云和县",331126:"庆元县",331127:"景宁畲族自治县",331181:"龙泉市",340102:"瑶海区",340103:"庐阳区",340104:"蜀山区",340111:"包河区",340121:"长丰县",340122:"肥东县",340123:"肥西县",340124:"庐江县",340181:"巢湖市",340190:"高新技术开发区",340191:"经济技术开发区",340202:"镜湖区",340203:"弋江区",340207:"鸠江区",340208:"三山区",340221:"芜湖县",340222:"繁昌县",340223:"南陵县",340225:"无为县",340302:"龙子湖区",340303:"蚌山区",340304:"禹会区",340311:"淮上区",340321:"怀远县",340322:"五河县",340323:"固镇县",340402:"大通区",340403:"田家庵区",340404:"谢家集区",340405:"八公山区",340406:"潘集区",340421:"凤台县",340422:"寿县",340503:"花山区",340504:"雨山区",340506:"博望区",340521:"当涂县",340522:"含山县",340523:"和县",340602:"杜集区",340603:"相山区",340604:"烈山区",340621:"濉溪县",340705:"铜官区",340706:"义安区",340711:"郊区",340722:"枞阳县",340802:"迎江区",340803:"大观区",340811:"宜秀区",340822:"怀宁县",340824:"潜山县",340825:"太湖县",340826:"宿松县",340827:"望江县",340828:"岳西县",340881:"桐城市",341002:"屯溪区",341003:"黄山区",341004:"徽州区",341021:"歙县",341022:"休宁县",341023:"黟县",341024:"祁门县",341102:"琅琊区",341103:"南谯区",341122:"来安县",341124:"全椒县",341125:"定远县",341126:"凤阳县",341181:"天长市",341182:"明光市",341202:"颍州区",341203:"颍东区",341204:"颍泉区",341221:"临泉县",341222:"太和县",341225:"阜南县",341226:"颍上县",341282:"界首市",341302:"埇桥区",341321:"砀山县",341322:"萧县",341323:"灵璧县",341324:"泗县",341390:"经济开发区",341502:"金安区",341503:"裕安区",341504:"叶集区",341522:"霍邱县",341523:"舒城县",341524:"金寨县",341525:"霍山县",341602:"谯城区",341621:"涡阳县",341622:"蒙城县",341623:"利辛县",341702:"贵池区",341721:"东至县",341722:"石台县",341723:"青阳县",341802:"宣州区",341821:"郎溪县",341822:"广德县",341823:"泾县",341824:"绩溪县",341825:"旌德县",341881:"宁国市",350102:"鼓楼区",350103:"台江区",350104:"仓山区",350105:"马尾区",350111:"晋安区",350112:"长乐区",350121:"闽侯县",350122:"连江县",350123:"罗源县",350124:"闽清县",350125:"永泰县",350128:"平潭县",350181:"福清市",350203:"思明区",350205:"海沧区",350206:"湖里区",350211:"集美区",350212:"同安区",350213:"翔安区",350302:"城厢区",350303:"涵江区",350304:"荔城区",350305:"秀屿区",350322:"仙游县",350402:"梅列区",350403:"三元区",350421:"明溪县",350423:"清流县",350424:"宁化县",350425:"大田县",350426:"尤溪县",350427:"沙县",350428:"将乐县",350429:"泰宁县",350430:"建宁县",350481:"永安市",350502:"鲤城区",350503:"丰泽区",350504:"洛江区",350505:"泉港区",350521:"惠安县",350524:"安溪县",350525:"永春县",350526:"德化县",350527:"金门县",350581:"石狮市",350582:"晋江市",350583:"南安市",350602:"芗城区",350603:"龙文区",350622:"云霄县",350623:"漳浦县",350624:"诏安县",350625:"长泰县",350626:"东山县",350627:"南靖县",350628:"平和县",350629:"华安县",350681:"龙海市",350702:"延平区",350703:"建阳区",350721:"顺昌县",350722:"浦城县",350723:"光泽县",350724:"松溪县",350725:"政和县",350781:"邵武市",350782:"武夷山市",350783:"建瓯市",350802:"新罗区",350803:"永定区",350821:"长汀县",350823:"上杭县",350824:"武平县",350825:"连城县",350881:"漳平市",350902:"蕉城区",350921:"霞浦县",350922:"古田县",350923:"屏南县",350924:"寿宁县",350925:"周宁县",350926:"柘荣县",350981:"福安市",350982:"福鼎市",360102:"东湖区",360103:"西湖区",360104:"青云谱区",360105:"湾里区",360111:"青山湖区",360112:"新建区",360121:"南昌县",360123:"安义县",360124:"进贤县",360190:"经济技术开发区",360192:"高新区",360202:"昌江区",360203:"珠山区",360222:"浮梁县",360281:"乐平市",360302:"安源区",360313:"湘东区",360321:"莲花县",360322:"上栗县",360323:"芦溪县",360402:"濂溪区",360403:"浔阳区",360404:"柴桑区",360423:"武宁县",360424:"修水县",360425:"永修县",360426:"德安县",360428:"都昌县",360429:"湖口县",360430:"彭泽县",360481:"瑞昌市",360482:"共青城市",360483:"庐山市",360490:"经济技术开发区",360502:"渝水区",360521:"分宜县",360602:"月湖区",360603:"余江区",360681:"贵溪市",360702:"章贡区",360703:"南康区",360704:"赣县区",360722:"信丰县",360723:"大余县",360724:"上犹县",360725:"崇义县",360726:"安远县",360727:"龙南县",360728:"定南县",360729:"全南县",360730:"宁都县",360731:"于都县",360732:"兴国县",360733:"会昌县",360734:"寻乌县",360735:"石城县",360781:"瑞金市",360802:"吉州区",360803:"青原区",360821:"吉安县",360822:"吉水县",360823:"峡江县",360824:"新干县",360825:"永丰县",360826:"泰和县",360827:"遂川县",360828:"万安县",360829:"安福县",360830:"永新县",360881:"井冈山市",360902:"袁州区",360921:"奉新县",360922:"万载县",360923:"上高县",360924:"宜丰县",360925:"靖安县",360926:"铜鼓县",360981:"丰城市",360982:"樟树市",360983:"高安市",361002:"临川区",361003:"东乡区",361021:"南城县",361022:"黎川县",361023:"南丰县",361024:"崇仁县",361025:"乐安县",361026:"宜黄县",361027:"金溪县",361028:"资溪县",361030:"广昌县",361102:"信州区",361103:"广丰区",361121:"上饶县",361123:"玉山县",361124:"铅山县",361125:"横峰县",361126:"弋阳县",361127:"余干县",361128:"鄱阳县",361129:"万年县",361130:"婺源县",361181:"德兴市",370102:"历下区",370103:"市中区",370104:"槐荫区",370105:"天桥区",370112:"历城区",370113:"长清区",370114:"章丘区",370115:"济阳区",370124:"平阴县",370126:"商河县",370190:"高新区",370202:"市南区",370203:"市北区",370211:"黄岛区",370212:"崂山区",370213:"李沧区",370214:"城阳区",370215:"即墨区",370281:"胶州市",370283:"平度市",370285:"莱西市",370290:"开发区",370302:"淄川区",370303:"张店区",370304:"博山区",370305:"临淄区",370306:"周村区",370321:"桓台县",370322:"高青县",370323:"沂源县",370402:"市中区",370403:"薛城区",370404:"峄城区",370405:"台儿庄区",370406:"山亭区",370481:"滕州市",370502:"东营区",370503:"河口区",370505:"垦利区",370522:"利津县",370523:"广饶县",370602:"芝罘区",370611:"福山区",370612:"牟平区",370613:"莱山区",370634:"长岛县",370681:"龙口市",370682:"莱阳市",370683:"莱州市",370684:"蓬莱市",370685:"招远市",370686:"栖霞市",370687:"海阳市",370690:"开发区",370702:"潍城区",370703:"寒亭区",370704:"坊子区",370705:"奎文区",370724:"临朐县",370725:"昌乐县",370781:"青州市",370782:"诸城市",370783:"寿光市",370784:"安丘市",370785:"高密市",370786:"昌邑市",370790:"开发区",370791:"高新区",370811:"任城区",370812:"兖州区",370826:"微山县",370827:"鱼台县",370828:"金乡县",370829:"嘉祥县",370830:"汶上县",370831:"泗水县",370832:"梁山县",370881:"曲阜市",370883:"邹城市",370890:"高新区",370902:"泰山区",370911:"岱岳区",370921:"宁阳县",370923:"东平县",370982:"新泰市",370983:"肥城市",371002:"环翠区",371003:"文登区",371082:"荣成市",371083:"乳山市",371091:"经济技术开发区",371102:"东港区",371103:"岚山区",371121:"五莲县",371122:"莒县",371202:"莱城区",371203:"钢城区",371302:"兰山区",371311:"罗庄区",371312:"河东区",371321:"沂南县",371322:"郯城县",371323:"沂水县",371324:"兰陵县",371325:"费县",371326:"平邑县",371327:"莒南县",371328:"蒙阴县",371329:"临沭县",371402:"德城区",371403:"陵城区",371422:"宁津县",371423:"庆云县",371424:"临邑县",371425:"齐河县",371426:"平原县",371427:"夏津县",371428:"武城县",371481:"乐陵市",371482:"禹城市",371502:"东昌府区",371521:"阳谷县",371522:"莘县",371523:"茌平县",371524:"东阿县",371525:"冠县",371526:"高唐县",371581:"临清市",371602:"滨城区",371603:"沾化区",371621:"惠民县",371622:"阳信县",371623:"无棣县",371625:"博兴县",371681:"邹平市",371702:"牡丹区",371703:"定陶区",371721:"曹县",371722:"单县",371723:"成武县",371724:"巨野县",371725:"郓城县",371726:"鄄城县",371728:"东明县",410102:"中原区",410103:"二七区",410104:"管城回族区",410105:"金水区",410106:"上街区",410108:"惠济区",410122:"中牟县",410181:"巩义市",410182:"荥阳市",410183:"新密市",410184:"新郑市",410185:"登封市",410190:"高新技术开发区",410191:"经济技术开发区",410202:"龙亭区",410203:"顺河回族区",410204:"鼓楼区",410205:"禹王台区",410212:"祥符区",410221:"杞县",410222:"通许县",410223:"尉氏县",410225:"兰考县",410302:"老城区",410303:"西工区",410304:"瀍河回族区",410305:"涧西区",410306:"吉利区",410311:"洛龙区",410322:"孟津县",410323:"新安县",410324:"栾川县",410325:"嵩县",410326:"汝阳县",410327:"宜阳县",410328:"洛宁县",410329:"伊川县",410381:"偃师市",410402:"新华区",410403:"卫东区",410404:"石龙区",410411:"湛河区",410421:"宝丰县",410422:"叶县",410423:"鲁山县",410425:"郏县",410481:"舞钢市",410482:"汝州市",410502:"文峰区",410503:"北关区",410505:"殷都区",410506:"龙安区",410522:"安阳县",410523:"汤阴县",410526:"滑县",410527:"内黄县",410581:"林州市",410590:"开发区",410602:"鹤山区",410603:"山城区",410611:"淇滨区",410621:"浚县",410622:"淇县",410702:"红旗区",410703:"卫滨区",410704:"凤泉区",410711:"牧野区",410721:"新乡县",410724:"获嘉县",410725:"原阳县",410726:"延津县",410727:"封丘县",410728:"长垣县",410781:"卫辉市",410782:"辉县市",410802:"解放区",410803:"中站区",410804:"马村区",410811:"山阳区",410821:"修武县",410822:"博爱县",410823:"武陟县",410825:"温县",410882:"沁阳市",410883:"孟州市",410902:"华龙区",410922:"清丰县",410923:"南乐县",410926:"范县",410927:"台前县",410928:"濮阳县",411002:"魏都区",411003:"建安区",411024:"鄢陵县",411025:"襄城县",411081:"禹州市",411082:"长葛市",411102:"源汇区",411103:"郾城区",411104:"召陵区",411121:"舞阳县",411122:"临颍县",411202:"湖滨区",411203:"陕州区",411221:"渑池县",411224:"卢氏县",411281:"义马市",411282:"灵宝市",411302:"宛城区",411303:"卧龙区",411321:"南召县",411322:"方城县",411323:"西峡县",411324:"镇平县",411325:"内乡县",411326:"淅川县",411327:"社旗县",411328:"唐河县",411329:"新野县",411330:"桐柏县",411381:"邓州市",411402:"梁园区",411403:"睢阳区",411421:"民权县",411422:"睢县",411423:"宁陵县",411424:"柘城县",411425:"虞城县",411426:"夏邑县",411481:"永城市",411502:"浉河区",411503:"平桥区",411521:"罗山县",411522:"光山县",411523:"新县",411524:"商城县",411525:"固始县",411526:"潢川县",411527:"淮滨县",411528:"息县",411602:"川汇区",411621:"扶沟县",411622:"西华县",411623:"商水县",411624:"沈丘县",411625:"郸城县",411626:"淮阳县",411627:"太康县",411628:"鹿邑县",411681:"项城市",411690:"经济开发区",411702:"驿城区",411721:"西平县",411722:"上蔡县",411723:"平舆县",411724:"正阳县",411725:"确山县",411726:"泌阳县",411727:"汝南县",411728:"遂平县",411729:"新蔡县",419001:"济源市",420102:"江岸区",420103:"江汉区",420104:"硚口区",420105:"汉阳区",420106:"武昌区",420107:"青山区",420111:"洪山区",420112:"东西湖区",420113:"汉南区",420114:"蔡甸区",420115:"江夏区",420116:"黄陂区",420117:"新洲区",420202:"黄石港区",420203:"西塞山区",420204:"下陆区",420205:"铁山区",420222:"阳新县",420281:"大冶市",420302:"茅箭区",420303:"张湾区",420304:"郧阳区",420322:"郧西县",420323:"竹山县",420324:"竹溪县",420325:"房县",420381:"丹江口市",420502:"西陵区",420503:"伍家岗区",420504:"点军区",420505:"猇亭区",420506:"夷陵区",420525:"远安县",420526:"兴山县",420527:"秭归县",420528:"长阳土家族自治县",420529:"五峰土家族自治县",420581:"宜都市",420582:"当阳市",420583:"枝江市",420590:"经济开发区",420602:"襄城区",420606:"樊城区",420607:"襄州区",420624:"南漳县",420625:"谷城县",420626:"保康县",420682:"老河口市",420683:"枣阳市",420684:"宜城市",420702:"梁子湖区",420703:"华容区",420704:"鄂城区",420802:"东宝区",420804:"掇刀区",420822:"沙洋县",420881:"钟祥市",420882:"京山市",420902:"孝南区",420921:"孝昌县",420922:"大悟县",420923:"云梦县",420981:"应城市",420982:"安陆市",420984:"汉川市",421002:"沙市区",421003:"荆州区",421022:"公安县",421023:"监利县",421024:"江陵县",421081:"石首市",421083:"洪湖市",421087:"松滋市",421102:"黄州区",421121:"团风县",421122:"红安县",421123:"罗田县",421124:"英山县",421125:"浠水县",421126:"蕲春县",421127:"黄梅县",421181:"麻城市",421182:"武穴市",421202:"咸安区",421221:"嘉鱼县",421222:"通城县",421223:"崇阳县",421224:"通山县",421281:"赤壁市",421303:"曾都区",421321:"随县",421381:"广水市",422801:"恩施市",422802:"利川市",422822:"建始县",422823:"巴东县",422825:"宣恩县",422826:"咸丰县",422827:"来凤县",422828:"鹤峰县",429004:"仙桃市",429005:"潜江市",429006:"天门市",429021:"神农架林区",430102:"芙蓉区",430103:"天心区",430104:"岳麓区",430105:"开福区",430111:"雨花区",430112:"望城区",430121:"长沙县",430181:"浏阳市",430182:"宁乡市",430202:"荷塘区",430203:"芦淞区",430204:"石峰区",430211:"天元区",430212:"渌口区",430223:"攸县",430224:"茶陵县",430225:"炎陵县",430281:"醴陵市",430302:"雨湖区",430304:"岳塘区",430321:"湘潭县",430381:"湘乡市",430382:"韶山市",430405:"珠晖区",430406:"雁峰区",430407:"石鼓区",430408:"蒸湘区",430412:"南岳区",430421:"衡阳县",430422:"衡南县",430423:"衡山县",430424:"衡东县",430426:"祁东县",430481:"耒阳市",430482:"常宁市",430502:"双清区",430503:"大祥区",430511:"北塔区",430521:"邵东县",430522:"新邵县",430523:"邵阳县",430524:"隆回县",430525:"洞口县",430527:"绥宁县",430528:"新宁县",430529:"城步苗族自治县",430581:"武冈市",430602:"岳阳楼区",430603:"云溪区",430611:"君山区",430621:"岳阳县",430623:"华容县",430624:"湘阴县",430626:"平江县",430681:"汨罗市",430682:"临湘市",430702:"武陵区",430703:"鼎城区",430721:"安乡县",430722:"汉寿县",430723:"澧县",430724:"临澧县",430725:"桃源县",430726:"石门县",430781:"津市市",430802:"永定区",430811:"武陵源区",430821:"慈利县",430822:"桑植县",430902:"资阳区",430903:"赫山区",430921:"南县",430922:"桃江县",430923:"安化县",430981:"沅江市",431002:"北湖区",431003:"苏仙区",431021:"桂阳县",431022:"宜章县",431023:"永兴县",431024:"嘉禾县",431025:"临武县",431026:"汝城县",431027:"桂东县",431028:"安仁县",431081:"资兴市",431102:"零陵区",431103:"冷水滩区",431121:"祁阳县",431122:"东安县",431123:"双牌县",431124:"道县",431125:"江永县",431126:"宁远县",431127:"蓝山县",431128:"新田县",431129:"江华瑶族自治县",431202:"鹤城区",431221:"中方县",431222:"沅陵县",431223:"辰溪县",431224:"溆浦县",431225:"会同县",431226:"麻阳苗族自治县",431227:"新晃侗族自治县",431228:"芷江侗族自治县",431229:"靖州苗族侗族自治县",431230:"通道侗族自治县",431281:"洪江市",431302:"娄星区",431321:"双峰县",431322:"新化县",431381:"冷水江市",431382:"涟源市",433101:"吉首市",433122:"泸溪县",433123:"凤凰县",433124:"花垣县",433125:"保靖县",433126:"古丈县",433127:"永顺县",433130:"龙山县",440103:"荔湾区",440104:"越秀区",440105:"海珠区",440106:"天河区",440111:"白云区",440112:"黄埔区",440113:"番禺区",440114:"花都区",440115:"南沙区",440117:"从化区",440118:"增城区",440203:"武江区",440204:"浈江区",440205:"曲江区",440222:"始兴县",440224:"仁化县",440229:"翁源县",440232:"乳源瑶族自治县",440233:"新丰县",440281:"乐昌市",440282:"南雄市",440303:"罗湖区",440304:"福田区",440305:"南山区",440306:"宝安区",440307:"龙岗区",440308:"盐田区",440309:"龙华区",440310:"坪山区",440311:"光明区",440402:"香洲区",440403:"斗门区",440404:"金湾区",440507:"龙湖区",440511:"金平区",440512:"濠江区",440513:"潮阳区",440514:"潮南区",440515:"澄海区",440523:"南澳县",440604:"禅城区",440605:"南海区",440606:"顺德区",440607:"三水区",440608:"高明区",440703:"蓬江区",440704:"江海区",440705:"新会区",440781:"台山市",440783:"开平市",440784:"鹤山市",440785:"恩平市",440802:"赤坎区",440803:"霞山区",440804:"坡头区",440811:"麻章区",440823:"遂溪县",440825:"徐闻县",440881:"廉江市",440882:"雷州市",440883:"吴川市",440890:"经济技术开发区",440902:"茂南区",440904:"电白区",440981:"高州市",440982:"化州市",440983:"信宜市",441202:"端州区",441203:"鼎湖区",441204:"高要区",441223:"广宁县",441224:"怀集县",441225:"封开县",441226:"德庆县",441284:"四会市",441302:"惠城区",441303:"惠阳区",441322:"博罗县",441323:"惠东县",441324:"龙门县",441402:"梅江区",441403:"梅县区",441422:"大埔县",441423:"丰顺县",441424:"五华县",441426:"平远县",441427:"蕉岭县",441481:"兴宁市",441502:"城区",441521:"海丰县",441523:"陆河县",441581:"陆丰市",441602:"源城区",441621:"紫金县",441622:"龙川县",441623:"连平县",441624:"和平县",441625:"东源县",441702:"江城区",441704:"阳东区",441721:"阳西县",441781:"阳春市",441802:"清城区",441803:"清新区",441821:"佛冈县",441823:"阳山县",441825:"连山壮族瑶族自治县",441826:"连南瑶族自治县",441881:"英德市",441882:"连州市",441901:"中堂镇",441903:"南城街道办事处",441904:"长安镇",441905:"东坑镇",441906:"樟木头镇",441907:"莞城街道办事处",441908:"石龙镇",441909:"桥头镇",441910:"万江街道办事处",441911:"麻涌镇",441912:"虎门镇",441913:"谢岗镇",441914:"石碣镇",441915:"茶山镇",441916:"东城街道办事处",441917:"洪梅镇",441918:"道滘镇",441919:"高埗镇",441920:"企石镇",441921:"凤岗镇",441922:"大岭山镇",441923:"松山湖管委会",441924:"清溪镇",441925:"望牛墩镇",441926:"厚街镇",441927:"常平镇",441928:"寮步镇",441929:"石排镇",441930:"横沥镇",441931:"塘厦镇",441932:"黄江镇",441933:"大朗镇",441934:"东莞港",441935:"东莞生态园",441990:"沙田镇",442001:"南头镇",442002:"神湾镇",442003:"东凤镇",442004:"五桂山街道办事处",442005:"黄圃镇",442006:"小榄镇",442007:"石岐区街道办事处",442008:"横栏镇",442009:"三角镇",442010:"三乡镇",442011:"港口镇",442012:"沙溪镇",442013:"板芙镇",442015:"东升镇",442016:"阜沙镇",442017:"民众镇",442018:"东区街道办事处",442019:"火炬开发区街道办事处",442020:"西区街道办事处",442021:"南区街道办事处",442022:"古镇镇",442023:"坦洲镇",442024:"大涌镇",442025:"南朗镇",445102:"湘桥区",445103:"潮安区",445122:"饶平县",445202:"榕城区",445203:"揭东区",445222:"揭西县",445224:"惠来县",445281:"普宁市",445302:"云城区",445303:"云安区",445321:"新兴县",445322:"郁南县",445381:"罗定市",450102:"兴宁区",450103:"青秀区",450105:"江南区",450107:"西乡塘区",450108:"良庆区",450109:"邕宁区",450110:"武鸣区",450123:"隆安县",450124:"马山县",450125:"上林县",450126:"宾阳县",450127:"横县",450202:"城中区",450203:"鱼峰区",450204:"柳南区",450205:"柳北区",450206:"柳江区",450222:"柳城县",450223:"鹿寨县",450224:"融安县",450225:"融水苗族自治县",450226:"三江侗族自治县",450302:"秀峰区",450303:"叠彩区",450304:"象山区",450305:"七星区",450311:"雁山区",450312:"临桂区",450321:"阳朔县",450323:"灵川县",450324:"全州县",450325:"兴安县",450326:"永福县",450327:"灌阳县",450328:"龙胜各族自治县",450329:"资源县",450330:"平乐县",450332:"恭城瑶族自治县",450381:"荔浦市",450403:"万秀区",450405:"长洲区",450406:"龙圩区",450421:"苍梧县",450422:"藤县",450423:"蒙山县",450481:"岑溪市",450502:"海城区",450503:"银海区",450512:"铁山港区",450521:"合浦县",450602:"港口区",450603:"防城区",450621:"上思县",450681:"东兴市",450702:"钦南区",450703:"钦北区",450721:"灵山县",450722:"浦北县",450802:"港北区",450803:"港南区",450804:"覃塘区",450821:"平南县",450881:"桂平市",450902:"玉州区",450903:"福绵区",450921:"容县",450922:"陆川县",450923:"博白县",450924:"兴业县",450981:"北流市",451002:"右江区",451021:"田阳县",451022:"田东县",451023:"平果县",451024:"德保县",451026:"那坡县",451027:"凌云县",451028:"乐业县",451029:"田林县",451030:"西林县",451031:"隆林各族自治县",451081:"靖西市",451102:"八步区",451103:"平桂区",451121:"昭平县",451122:"钟山县",451123:"富川瑶族自治县",451202:"金城江区",451203:"宜州区",451221:"南丹县",451222:"天峨县",451223:"凤山县",451224:"东兰县",451225:"罗城仫佬族自治县",451226:"环江毛南族自治县",451227:"巴马瑶族自治县",451228:"都安瑶族自治县",451229:"大化瑶族自治县",451302:"兴宾区",451321:"忻城县",451322:"象州县",451323:"武宣县",451324:"金秀瑶族自治县",451381:"合山市",451402:"江州区",451421:"扶绥县",451422:"宁明县",451423:"龙州县",451424:"大新县",451425:"天等县",451481:"凭祥市",460105:"秀英区",460106:"龙华区",460107:"琼山区",460108:"美兰区",460202:"海棠区",460203:"吉阳区",460204:"天涯区",460205:"崖州区",460321:"西沙群岛",460322:"南沙群岛",460323:"中沙群岛的岛礁及其海域",460401:"那大镇",460402:"和庆镇",460403:"南丰镇",460404:"大成镇",460405:"雅星镇",460406:"兰洋镇",460407:"光村镇",460408:"木棠镇",460409:"海头镇",460410:"峨蔓镇",460411:"王五镇",460412:"白马井镇",460413:"中和镇",460414:"排浦镇",460415:"东成镇",460416:"新州镇",460417:"洋浦经济开发区",460418:"华南热作学院",469001:"五指山市",469002:"琼海市",469005:"文昌市",469006:"万宁市",469007:"东方市",469021:"定安县",469022:"屯昌县",469023:"澄迈县",469024:"临高县",469025:"白沙黎族自治县",469026:"昌江黎族自治县",469027:"乐东黎族自治县",469028:"陵水黎族自治县",469029:"保亭黎族苗族自治县",469030:"琼中黎族苗族自治县",500101:"万州区",500102:"涪陵区",500103:"渝中区",500104:"大渡口区",500105:"江北区",500106:"沙坪坝区",500107:"九龙坡区",500108:"南岸区",500109:"北碚区",500110:"綦江区",500111:"大足区",500112:"渝北区",500113:"巴南区",500114:"黔江区",500115:"长寿区",500116:"江津区",500117:"合川区",500118:"永川区",500119:"南川区",500120:"璧山区",500151:"铜梁区",500152:"潼南区",500153:"荣昌区",500154:"开州区",500155:"梁平区",500156:"武隆区",500229:"城口县",500230:"丰都县",500231:"垫江县",500233:"忠县",500235:"云阳县",500236:"奉节县",500237:"巫山县",500238:"巫溪县",500240:"石柱土家族自治县",500241:"秀山土家族苗族自治县",500242:"酉阳土家族苗族自治县",500243:"彭水苗族土家族自治县",510104:"锦江区",510105:"青羊区",510106:"金牛区",510107:"武侯区",510108:"成华区",510112:"龙泉驿区",510113:"青白江区",510114:"新都区",510115:"温江区",510116:"双流区",510117:"郫都区",510121:"金堂县",510129:"大邑县",510131:"蒲江县",510132:"新津县",510181:"都江堰市",510182:"彭州市",510183:"邛崃市",510184:"崇州市",510185:"简阳市",510191:"高新区",510302:"自流井区",510303:"贡井区",510304:"大安区",510311:"沿滩区",510321:"荣县",510322:"富顺县",510402:"东区",510403:"西区",510411:"仁和区",510421:"米易县",510422:"盐边县",510502:"江阳区",510503:"纳溪区",510504:"龙马潭区",510521:"泸县",510522:"合江县",510524:"叙永县",510525:"古蔺县",510603:"旌阳区",510604:"罗江区",510623:"中江县",510681:"广汉市",510682:"什邡市",510683:"绵竹市",510703:"涪城区",510704:"游仙区",510705:"安州区",510722:"三台县",510723:"盐亭县",510725:"梓潼县",510726:"北川羌族自治县",510727:"平武县",510781:"江油市",510791:"高新区",510802:"利州区",510811:"昭化区",510812:"朝天区",510821:"旺苍县",510822:"青川县",510823:"剑阁县",510824:"苍溪县",510903:"船山区",510904:"安居区",510921:"蓬溪县",510922:"射洪县",510923:"大英县",511002:"市中区",511011:"东兴区",511024:"威远县",511025:"资中县",511083:"隆昌市",511102:"市中区",511111:"沙湾区",511112:"五通桥区",511113:"金口河区",511123:"犍为县",511124:"井研县",511126:"夹江县",511129:"沐川县",511132:"峨边彝族自治县",511133:"马边彝族自治县",511181:"峨眉山市",511302:"顺庆区",511303:"高坪区",511304:"嘉陵区",511321:"南部县",511322:"营山县",511323:"蓬安县",511324:"仪陇县",511325:"西充县",511381:"阆中市",511402:"东坡区",511403:"彭山区",511421:"仁寿县",511423:"洪雅县",511424:"丹棱县",511425:"青神县",511502:"翠屏区",511503:"南溪区",511504:"叙州区",511523:"江安县",511524:"长宁县",511525:"高县",511526:"珙县",511527:"筠连县",511528:"兴文县",511529:"屏山县",511602:"广安区",511603:"前锋区",511621:"岳池县",511622:"武胜县",511623:"邻水县",511681:"华蓥市",511702:"通川区",511703:"达川区",511722:"宣汉县",511723:"开江县",511724:"大竹县",511725:"渠县",511781:"万源市",511802:"雨城区",511803:"名山区",511822:"荥经县",511823:"汉源县",511824:"石棉县",511825:"天全县",511826:"芦山县",511827:"宝兴县",511902:"巴州区",511903:"恩阳区",511921:"通江县",511922:"南江县",511923:"平昌县",512002:"雁江区",512021:"安岳县",512022:"乐至县",513201:"马尔康市",513221:"汶川县",513222:"理县",513223:"茂县",513224:"松潘县",513225:"九寨沟县",513226:"金川县",513227:"小金县",513228:"黑水县",513230:"壤塘县",513231:"阿坝县",513232:"若尔盖县",513233:"红原县",513301:"康定市",513322:"泸定县",513323:"丹巴县",513324:"九龙县",513325:"雅江县",513326:"道孚县",513327:"炉霍县",513328:"甘孜县",513329:"新龙县",513330:"德格县",513331:"白玉县",513332:"石渠县",513333:"色达县",513334:"理塘县",513335:"巴塘县",513336:"乡城县",513337:"稻城县",513338:"得荣县",513401:"西昌市",513422:"木里藏族自治县",513423:"盐源县",513424:"德昌县",513425:"会理县",513426:"会东县",513427:"宁南县",513428:"普格县",513429:"布拖县",513430:"金阳县",513431:"昭觉县",513432:"喜德县",513433:"冕宁县",513434:"越西县",513435:"甘洛县",513436:"美姑县",513437:"雷波县",520102:"南明区",520103:"云岩区",520111:"花溪区",520112:"乌当区",520113:"白云区",520115:"观山湖区",520121:"开阳县",520122:"息烽县",520123:"修文县",520181:"清镇市",520201:"钟山区",520203:"六枝特区",520221:"水城县",520281:"盘州市",520302:"红花岗区",520303:"汇川区",520304:"播州区",520322:"桐梓县",520323:"绥阳县",520324:"正安县",520325:"道真仡佬族苗族自治县",520326:"务川仡佬族苗族自治县",520327:"凤冈县",520328:"湄潭县",520329:"余庆县",520330:"习水县",520381:"赤水市",520382:"仁怀市",520402:"西秀区",520403:"平坝区",520422:"普定县",520423:"镇宁布依族苗族自治县",520424:"关岭布依族苗族自治县",520425:"紫云苗族布依族自治县",520502:"七星关区",520521:"大方县",520522:"黔西县",520523:"金沙县",520524:"织金县",520525:"纳雍县",520526:"威宁彝族回族苗族自治县",520527:"赫章县",520602:"碧江区",520603:"万山区",520621:"江口县",520622:"玉屏侗族自治县",520623:"石阡县",520624:"思南县",520625:"印江土家族苗族自治县",520626:"德江县",520627:"沿河土家族自治县",520628:"松桃苗族自治县",522301:"兴义市",522302:"兴仁市",522323:"普安县",522324:"晴隆县",522325:"贞丰县",522326:"望谟县",522327:"册亨县",522328:"安龙县",522601:"凯里市",522622:"黄平县",522623:"施秉县",522624:"三穗县",522625:"镇远县",522626:"岑巩县",522627:"天柱县",522628:"锦屏县",522629:"剑河县",522630:"台江县",522631:"黎平县",522632:"榕江县",522633:"从江县",522634:"雷山县",522635:"麻江县",522636:"丹寨县",522701:"都匀市",522702:"福泉市",522722:"荔波县",522723:"贵定县",522725:"瓮安县",522726:"独山县",522727:"平塘县",522728:"罗甸县",522729:"长顺县",522730:"龙里县",522731:"惠水县",522732:"三都水族自治县",530102:"五华区",530103:"盘龙区",530111:"官渡区",530112:"西山区",530113:"东川区",530114:"呈贡区",530115:"晋宁区",530124:"富民县",530125:"宜良县",530126:"石林彝族自治县",530127:"嵩明县",530128:"禄劝彝族苗族自治县",530129:"寻甸回族彝族自治县",530181:"安宁市",530302:"麒麟区",530303:"沾益区",530304:"马龙区",530322:"陆良县",530323:"师宗县",530324:"罗平县",530325:"富源县",530326:"会泽县",530381:"宣威市",530402:"红塔区",530403:"江川区",530422:"澄江县",530423:"通海县",530424:"华宁县",530425:"易门县",530426:"峨山彝族自治县",530427:"新平彝族傣族自治县",530428:"元江哈尼族彝族傣族自治县",530502:"隆阳区",530521:"施甸县",530523:"龙陵县",530524:"昌宁县",530581:"腾冲市",530602:"昭阳区",530621:"鲁甸县",530622:"巧家县",530623:"盐津县",530624:"大关县",530625:"永善县",530626:"绥江县",530627:"镇雄县",530628:"彝良县",530629:"威信县",530681:"水富市",530702:"古城区",530721:"玉龙纳西族自治县",530722:"永胜县",530723:"华坪县",530724:"宁蒗彝族自治县",530802:"思茅区",530821:"宁洱哈尼族彝族自治县",530822:"墨江哈尼族自治县",530823:"景东彝族自治县",530824:"景谷傣族彝族自治县",530825:"镇沅彝族哈尼族拉祜族自治县",530826:"江城哈尼族彝族自治县",530827:"孟连傣族拉祜族佤族自治县",530828:"澜沧拉祜族自治县",530829:"西盟佤族自治县",530902:"临翔区",530921:"凤庆县",530922:"云县",530923:"永德县",530924:"镇康县",530925:"双江拉祜族佤族布朗族傣族自治县",530926:"耿马傣族佤族自治县",530927:"沧源佤族自治县",532301:"楚雄市",532322:"双柏县",532323:"牟定县",532324:"南华县",532325:"姚安县",532326:"大姚县",532327:"永仁县",532328:"元谋县",532329:"武定县",532331:"禄丰县",532501:"个旧市",532502:"开远市",532503:"蒙自市",532504:"弥勒市",532523:"屏边苗族自治县",532524:"建水县",532525:"石屏县",532527:"泸西县",532528:"元阳县",532529:"红河县",532530:"金平苗族瑶族傣族自治县",532531:"绿春县",532532:"河口瑶族自治县",532601:"文山市",532622:"砚山县",532623:"西畴县",532624:"麻栗坡县",532625:"马关县",532626:"丘北县",532627:"广南县",532628:"富宁县",532801:"景洪市",532822:"勐海县",532823:"勐腊县",532901:"大理市",532922:"漾濞彝族自治县",532923:"祥云县",532924:"宾川县",532925:"弥渡县",532926:"南涧彝族自治县",532927:"巍山彝族回族自治县",532928:"永平县",532929:"云龙县",532930:"洱源县",532931:"剑川县",532932:"鹤庆县",533102:"瑞丽市",533103:"芒市",533122:"梁河县",533123:"盈江县",533124:"陇川县",533301:"泸水市",533323:"福贡县",533324:"贡山独龙族怒族自治县",533325:"兰坪白族普米族自治县",533401:"香格里拉市",533422:"德钦县",533423:"维西傈僳族自治县",540102:"城关区",540103:"堆龙德庆区",540104:"达孜区",540121:"林周县",540122:"当雄县",540123:"尼木县",540124:"曲水县",540127:"墨竹工卡县",540202:"桑珠孜区",540221:"南木林县",540222:"江孜县",540223:"定日县",540224:"萨迦县",540225:"拉孜县",540226:"昂仁县",540227:"谢通门县",540228:"白朗县",540229:"仁布县",540230:"康马县",540231:"定结县",540232:"仲巴县",540233:"亚东县",540234:"吉隆县",540235:"聂拉木县",540236:"萨嘎县",540237:"岗巴县",540302:"卡若区",540321:"江达县",540322:"贡觉县",540323:"类乌齐县",540324:"丁青县",540325:"察雅县",540326:"八宿县",540327:"左贡县",540328:"芒康县",540329:"洛隆县",540330:"边坝县",540402:"巴宜区",540421:"工布江达县",540422:"米林县",540423:"墨脱县",540424:"波密县",540425:"察隅县",540426:"朗县",540502:"乃东区",540521:"扎囊县",540522:"贡嘎县",540523:"桑日县",540524:"琼结县",540525:"曲松县",540526:"措美县",540527:"洛扎县",540528:"加查县",540529:"隆子县",540530:"错那县",540531:"浪卡子县",540602:"色尼区",540621:"嘉黎县",540622:"比如县",540623:"聂荣县",540624:"安多县",540625:"申扎县",540626:"索县",540627:"班戈县",540628:"巴青县",540629:"尼玛县",540630:"双湖县",542521:"普兰县",542522:"札达县",542523:"噶尔县",542524:"日土县",542525:"革吉县",542526:"改则县",542527:"措勤县",610102:"新城区",610103:"碑林区",610104:"莲湖区",610111:"灞桥区",610112:"未央区",610113:"雁塔区",610114:"阎良区",610115:"临潼区",610116:"长安区",610117:"高陵区",610118:"鄠邑区",610122:"蓝田县",610124:"周至县",610202:"王益区",610203:"印台区",610204:"耀州区",610222:"宜君县",610302:"渭滨区",610303:"金台区",610304:"陈仓区",610322:"凤翔县",610323:"岐山县",610324:"扶风县",610326:"眉县",610327:"陇县",610328:"千阳县",610329:"麟游县",610330:"凤县",610331:"太白县",610402:"秦都区",610403:"杨陵区",610404:"渭城区",610422:"三原县",610423:"泾阳县",610424:"乾县",610425:"礼泉县",610426:"永寿县",610428:"长武县",610429:"旬邑县",610430:"淳化县",610431:"武功县",610481:"兴平市",610482:"彬州市",610502:"临渭区",610503:"华州区",610522:"潼关县",610523:"大荔县",610524:"合阳县",610525:"澄城县",610526:"蒲城县",610527:"白水县",610528:"富平县",610581:"韩城市",610582:"华阴市",610602:"宝塔区",610603:"安塞区",610621:"延长县",610622:"延川县",610623:"子长县",610625:"志丹县",610626:"吴起县",610627:"甘泉县",610628:"富县",610629:"洛川县",610630:"宜川县",610631:"黄龙县",610632:"黄陵县",610702:"汉台区",610703:"南郑区",610722:"城固县",610723:"洋县",610724:"西乡县",610725:"勉县",610726:"宁强县",610727:"略阳县",610728:"镇巴县",610729:"留坝县",610730:"佛坪县",610802:"榆阳区",610803:"横山区",610822:"府谷县",610824:"靖边县",610825:"定边县",610826:"绥德县",610827:"米脂县",610828:"佳县",610829:"吴堡县",610830:"清涧县",610831:"子洲县",610881:"神木市",610902:"汉滨区",610921:"汉阴县",610922:"石泉县",610923:"宁陕县",610924:"紫阳县",610925:"岚皋县",610926:"平利县",610927:"镇坪县",610928:"旬阳县",610929:"白河县",611002:"商州区",611021:"洛南县",611022:"丹凤县",611023:"商南县",611024:"山阳县",611025:"镇安县",611026:"柞水县",620102:"城关区",620103:"七里河区",620104:"西固区",620105:"安宁区",620111:"红古区",620121:"永登县",620122:"皋兰县",620123:"榆中县",620201:"市辖区",620290:"雄关区",620291:"长城区",620292:"镜铁区",620293:"新城镇",620294:"峪泉镇",620295:"文殊镇",620302:"金川区",620321:"永昌县",620402:"白银区",620403:"平川区",620421:"靖远县",620422:"会宁县",620423:"景泰县",620502:"秦州区",620503:"麦积区",620521:"清水县",620522:"秦安县",620523:"甘谷县",620524:"武山县",620525:"张家川回族自治县",620602:"凉州区",620621:"民勤县",620622:"古浪县",620623:"天祝藏族自治县",620702:"甘州区",620721:"肃南裕固族自治县",620722:"民乐县",620723:"临泽县",620724:"高台县",620725:"山丹县",620802:"崆峒区",620821:"泾川县",620822:"灵台县",620823:"崇信县",620825:"庄浪县",620826:"静宁县",620881:"华亭市",620902:"肃州区",620921:"金塔县",620922:"瓜州县",620923:"肃北蒙古族自治县",620924:"阿克塞哈萨克族自治县",620981:"玉门市",620982:"敦煌市",621002:"西峰区",621021:"庆城县",621022:"环县",621023:"华池县",621024:"合水县",621025:"正宁县",621026:"宁县",621027:"镇原县",621102:"安定区",621121:"通渭县",621122:"陇西县",621123:"渭源县",621124:"临洮县",621125:"漳县",621126:"岷县",621202:"武都区",621221:"成县",621222:"文县",621223:"宕昌县",621224:"康县",621225:"西和县",621226:"礼县",621227:"徽县",621228:"两当县",622901:"临夏市",622921:"临夏县",622922:"康乐县",622923:"永靖县",622924:"广河县",622925:"和政县",622926:"东乡族自治县",622927:"积石山保安族东乡族撒拉族自治县",623001:"合作市",623021:"临潭县",623022:"卓尼县",623023:"舟曲县",623024:"迭部县",623025:"玛曲县",623026:"碌曲县",623027:"夏河县",630102:"城东区",630103:"城中区",630104:"城西区",630105:"城北区",630121:"大通回族土族自治县",630122:"湟中县",630123:"湟源县",630202:"乐都区",630203:"平安区",630222:"民和回族土族自治县",630223:"互助土族自治县",630224:"化隆回族自治县",630225:"循化撒拉族自治县",632221:"门源回族自治县",632222:"祁连县",632223:"海晏县",632224:"刚察县",632321:"同仁县",632322:"尖扎县",632323:"泽库县",632324:"河南蒙古族自治县",632521:"共和县",632522:"同德县",632523:"贵德县",632524:"兴海县",632525:"贵南县",632621:"玛沁县",632622:"班玛县",632623:"甘德县",632624:"达日县",632625:"久治县",632626:"玛多县",632701:"玉树市",632722:"杂多县",632723:"称多县",632724:"治多县",632725:"囊谦县",632726:"曲麻莱县",632801:"格尔木市",632802:"德令哈市",632803:"茫崖市",632821:"乌兰县",632822:"都兰县",632823:"天峻县",640104:"兴庆区",640105:"西夏区",640106:"金凤区",640121:"永宁县",640122:"贺兰县",640181:"灵武市",640202:"大武口区",640205:"惠农区",640221:"平罗县",640302:"利通区",640303:"红寺堡区",640323:"盐池县",640324:"同心县",640381:"青铜峡市",640402:"原州区",640422:"西吉县",640423:"隆德县",640424:"泾源县",640425:"彭阳县",640502:"沙坡头区",640521:"中宁县",640522:"海原县",650102:"天山区",650103:"沙依巴克区",650104:"新市区",650105:"水磨沟区",650106:"头屯河区",650107:"达坂城区",650109:"米东区",650121:"乌鲁木齐县",650202:"独山子区",650203:"克拉玛依区",650204:"白碱滩区",650205:"乌尔禾区",650402:"高昌区",650421:"鄯善县",650422:"托克逊县",650502:"伊州区",650521:"巴里坤哈萨克自治县",650522:"伊吾县",652301:"昌吉市",652302:"阜康市",652323:"呼图壁县",652324:"玛纳斯县",652325:"奇台县",652327:"吉木萨尔县",652328:"木垒哈萨克自治县",652701:"博乐市",652702:"阿拉山口市",652722:"精河县",652723:"温泉县",652801:"库尔勒市",652822:"轮台县",652823:"尉犁县",652824:"若羌县",652825:"且末县",652826:"焉耆回族自治县",652827:"和静县",652828:"和硕县",652829:"博湖县",652901:"阿克苏市",652922:"温宿县",652923:"库车县",652924:"沙雅县",652925:"新和县",652926:"拜城县",652927:"乌什县",652928:"阿瓦提县",652929:"柯坪县",653001:"阿图什市",653022:"阿克陶县",653023:"阿合奇县",653024:"乌恰县",653101:"喀什市",653121:"疏附县",653122:"疏勒县",653123:"英吉沙县",653124:"泽普县",653125:"莎车县",653126:"叶城县",653127:"麦盖提县",653128:"岳普湖县",653129:"伽师县",653130:"巴楚县",653131:"塔什库尔干塔吉克自治县",653201:"和田市",653221:"和田县",653222:"墨玉县",653223:"皮山县",653224:"洛浦县",653225:"策勒县",653226:"于田县",653227:"民丰县",654002:"伊宁市",654003:"奎屯市",654004:"霍尔果斯市",654021:"伊宁县",654022:"察布查尔锡伯自治县",654023:"霍城县",654024:"巩留县",654025:"新源县",654026:"昭苏县",654027:"特克斯县",654028:"尼勒克县",654201:"塔城市",654202:"乌苏市",654221:"额敏县",654223:"沙湾县",654224:"托里县",654225:"裕民县",654226:"和布克赛尔蒙古自治县",654301:"阿勒泰市",654321:"布尔津县",654322:"富蕴县",654323:"福海县",654324:"哈巴河县",654325:"青河县",654326:"吉木乃县",659001:"石河子市",659002:"阿拉尔市",659003:"图木舒克市",659004:"五家渠市",659005:"北屯市",659006:"铁门关市",659007:"双河市",659008:"可克达拉市",659009:"昆玉市",710101:"中正区",710102:"大同区",710103:"中山区",710104:"松山区",710105:"大安区",710106:"万华区",710107:"信义区",710108:"士林区",710109:"北投区",710110:"内湖区",710111:"南港区",710112:"文山区",710199:"其它区",710201:"新兴区",710202:"前金区",710203:"芩雅区",710204:"盐埕区",710205:"鼓山区",710206:"旗津区",710207:"前镇区",710208:"三民区",710209:"左营区",710210:"楠梓区",710211:"小港区",710241:"苓雅区",710242:"仁武区",710243:"大社区",710244:"冈山区",710245:"路竹区",710246:"阿莲区",710247:"田寮区",710248:"燕巢区",710249:"桥头区",710250:"梓官区",710251:"弥陀区",710252:"永安区",710253:"湖内区",710254:"凤山区",710255:"大寮区",710256:"林园区",710257:"鸟松区",710258:"大树区",710259:"旗山区",710260:"美浓区",710261:"六龟区",710262:"内门区",710263:"杉林区",710264:"甲仙区",710265:"桃源区",710266:"那玛夏区",710267:"茂林区",710268:"茄萣区",710299:"其它区",710301:"中西区",710302:"东区",710303:"南区",710304:"北区",710305:"安平区",710306:"安南区",710339:"永康区",710340:"归仁区",710341:"新化区",710342:"左镇区",710343:"玉井区",710344:"楠西区",710345:"南化区",710346:"仁德区",710347:"关庙区",710348:"龙崎区",710349:"官田区",710350:"麻豆区",710351:"佳里区",710352:"西港区",710353:"七股区",710354:"将军区",710355:"学甲区",710356:"北门区",710357:"新营区",710358:"后壁区",710359:"白河区",710360:"东山区",710361:"六甲区",710362:"下营区",710363:"柳营区",710364:"盐水区",710365:"善化区",710366:"大内区",710367:"山上区",710368:"新市区",710369:"安定区",710399:"其它区",710401:"中区",710402:"东区",710403:"南区",710404:"西区",710405:"北区",710406:"北屯区",710407:"西屯区",710408:"南屯区",710431:"太平区",710432:"大里区",710433:"雾峰区",710434:"乌日区",710435:"丰原区",710436:"后里区",710437:"石冈区",710438:"东势区",710439:"和平区",710440:"新社区",710441:"潭子区",710442:"大雅区",710443:"神冈区",710444:"大肚区",710445:"沙鹿区",710446:"龙井区",710447:"梧栖区",710448:"清水区",710449:"大甲区",710450:"外埔区",710451:"大安区",710499:"其它区",710507:"金沙镇",710508:"金湖镇",710509:"金宁乡",710510:"金城镇",710511:"烈屿乡",710512:"乌坵乡",710614:"南投市",710615:"中寮乡",710616:"草屯镇",710617:"国姓乡",710618:"埔里镇",710619:"仁爱乡",710620:"名间乡",710621:"集集镇",710622:"水里乡",710623:"鱼池乡",710624:"信义乡",710625:"竹山镇",710626:"鹿谷乡",710701:"仁爱区",710702:"信义区",710703:"中正区",710704:"中山区",710705:"安乐区",710706:"暖暖区",710707:"七堵区",710799:"其它区",710801:"东区",710802:"北区",710803:"香山区",710899:"其它区",710901:"东区",710902:"西区",710999:"其它区",711130:"万里区",711132:"板桥区",711133:"汐止区",711134:"深坑区",711135:"石碇区",711136:"瑞芳区",711137:"平溪区",711138:"双溪区",711139:"贡寮区",711140:"新店区",711141:"坪林区",711142:"乌来区",711143:"永和区",711144:"中和区",711145:"土城区",711146:"三峡区",711147:"树林区",711148:"莺歌区",711149:"三重区",711150:"新庄区",711151:"泰山区",711152:"林口区",711153:"芦洲区",711154:"五股区",711155:"八里区",711156:"淡水区",711157:"三芝区",711158:"石门区",711287:"宜兰市",711288:"头城镇",711289:"礁溪乡",711290:"壮围乡",711291:"员山乡",711292:"罗东镇",711293:"三星乡",711294:"大同乡",711295:"五结乡",711296:"冬山乡",711297:"苏澳镇",711298:"南澳乡",711299:"钓鱼台",711387:"竹北市",711388:"湖口乡",711389:"新丰乡",711390:"新埔镇",711391:"关西镇",711392:"芎林乡",711393:"宝山乡",711394:"竹东镇",711395:"五峰乡",711396:"横山乡",711397:"尖石乡",711398:"北埔乡",711399:"峨眉乡",711414:"中坜区",711415:"平镇区",711417:"杨梅区",711418:"新屋区",711419:"观音区",711420:"桃园区",711421:"龟山区",711422:"八德区",711423:"大溪区",711425:"大园区",711426:"芦竹区",711487:"中坜市",711488:"平镇市",711489:"龙潭乡",711490:"杨梅市",711491:"新屋乡",711492:"观音乡",711493:"桃园市",711494:"龟山乡",711495:"八德市",711496:"大溪镇",711497:"复兴乡",711498:"大园乡",711499:"芦竹乡",711520:"头份市",711582:"竹南镇",711583:"头份镇",711584:"三湾乡",711585:"南庄乡",711586:"狮潭乡",711587:"后龙镇",711588:"通霄镇",711589:"苑里镇",711590:"苗栗市",711591:"造桥乡",711592:"头屋乡",711593:"公馆乡",711594:"大湖乡",711595:"泰安乡",711596:"铜锣乡",711597:"三义乡",711598:"西湖乡",711599:"卓兰镇",711736:"员林市",711774:"彰化市",711775:"芬园乡",711776:"花坛乡",711777:"秀水乡",711778:"鹿港镇",711779:"福兴乡",711780:"线西乡",711781:"和美镇",711782:"伸港乡",711783:"员林镇",711784:"社头乡",711785:"永靖乡",711786:"埔心乡",711787:"溪湖镇",711788:"大村乡",711789:"埔盐乡",711790:"田中镇",711791:"北斗镇",711792:"田尾乡",711793:"埤头乡",711794:"溪州乡",711795:"竹塘乡",711796:"二林镇",711797:"大城乡",711798:"芳苑乡",711799:"二水乡",711982:"番路乡",711983:"梅山乡",711984:"竹崎乡",711985:"阿里山乡",711986:"中埔乡",711987:"大埔乡",711988:"水上乡",711989:"鹿草乡",711990:"太保市",711991:"朴子市",711992:"东石乡",711993:"六脚乡",711994:"新港乡",711995:"民雄乡",711996:"大林镇",711997:"溪口乡",711998:"义竹乡",711999:"布袋镇",712180:"斗南镇",712181:"大埤乡",712182:"虎尾镇",712183:"土库镇",712184:"褒忠乡",712185:"东势乡",712186:"台西乡",712187:"仑背乡",712188:"麦寮乡",712189:"斗六市",712190:"林内乡",712191:"古坑乡",712192:"莿桐乡",712193:"西螺镇",712194:"二仑乡",712195:"北港镇",712196:"水林乡",712197:"口湖乡",712198:"四湖乡",712199:"元长乡",712451:"崁顶乡",712467:"屏东市",712468:"三地门乡",712469:"雾台乡",712470:"玛家乡",712471:"九如乡",712472:"里港乡",712473:"高树乡",712474:"盐埔乡",712475:"长治乡",712476:"麟洛乡",712477:"竹田乡",712478:"内埔乡",712479:"万丹乡",712480:"潮州镇",712481:"泰武乡",712482:"来义乡",712483:"万峦乡",712484:"莰顶乡",712485:"新埤乡",712486:"南州乡",712487:"林边乡",712488:"东港镇",712489:"琉球乡",712490:"佳冬乡",712491:"新园乡",712492:"枋寮乡",712493:"枋山乡",712494:"春日乡",712495:"狮子乡",712496:"车城乡",712497:"牡丹乡",712498:"恒春镇",712499:"满州乡",712584:"台东市",712585:"绿岛乡",712586:"兰屿乡",712587:"延平乡",712588:"卑南乡",712589:"鹿野乡",712590:"关山镇",712591:"海端乡",712592:"池上乡",712593:"东河乡",712594:"成功镇",712595:"长滨乡",712596:"金峰乡",712597:"大武乡",712598:"达仁乡",712599:"太麻里乡",712686:"花莲市",712687:"新城乡",712688:"太鲁阁",712689:"秀林乡",712690:"吉安乡",712691:"寿丰乡",712692:"凤林镇",712693:"光复乡",712694:"丰滨乡",712695:"瑞穗乡",712696:"万荣乡",712697:"玉里镇",712698:"卓溪乡",712699:"富里乡",712794:"马公市",712795:"西屿乡",712796:"望安乡",712797:"七美乡",712798:"白沙乡",712799:"湖西乡",712896:"南竿乡",712897:"北竿乡",712898:"东引乡",712899:"莒光乡",810101:"中西区",810102:"湾仔区",810103:"东区",810104:"南区",810201:"九龙城区",810202:"油尖旺区",810203:"深水埗区",810204:"黄大仙区",810205:"观塘区",810301:"北区",810302:"大埔区",810303:"沙田区",810304:"西贡区",810305:"元朗区",810306:"屯门区",810307:"荃湾区",810308:"葵青区",810309:"离岛区",820101:"澳门半岛",820201:"离岛"}}};var ea={name:"DomesticCity",components:{Tabs:C,Tab:S},model:{prop:"selId",event:"input"},props:{area:{type:Object,default:{}},selId:{type:String,default:""},viewType:{type:String,default:""},selectLevel:{type:[String,Number],default:"3"}},computed:{level(){return parseInt(this.selectLevel)}},data:()=>({active:0,cityTab:[],mapArea:{},tag:0}),created(){1===this.level?this.cityTab=[{name:"请选择省份",id:""}]:2===this.level?this.cityTab=[{name:"请选择",id:""},{name:"请选择",id:""}]:this.cityTab=[{name:"请选择",id:""},{name:"请选择",id:""},{name:"请选择",id:""}]},mounted(){this.active=0,0===this.active&&(this.mapArea=this.area.province_list),this.level>1&&this.echo()},methods:{disabled(e){try{return!(0===e||0!==e&&""!==this.cityTab[e-1].id)}catch(e){return!1}},confirm(){let e=[],n="";this.cityTab.forEach(((n,t)=>{""===n.id?e.push({code:"",id:"",name:""}):e.push({code:n.id,id:n.id,name:n.name})}));for(let t=0;t<e.length;t++)""===e[t].code&&""===e[t].id||(n=e[t].code||e[t].id);this.$emit("confirm",e),this.$emit("input",n)},reset(e){0===e?this.cityTab[0].id.substring(0,3)!==this.cityTab[1].id.substring(0,3)&&(this.cityTab[1].id="",this.cityTab[1].name="请选择",this.cityTab[2]&&(this.cityTab[2].id="",this.cityTab[2].name="请选择")):1===e&&this.cityTab[2]&&this.cityTab[1].id.substring(0,4)!==this.cityTab[2].id.substring(0,4)&&(this.cityTab[2].id="",this.cityTab[2].name="请选择")},getCity(){let e=this;if(this.$nextTick((()=>{e.$refs.main.scrollTop=0})),0===this.active){if(this.mapArea=this.area.province_list,"1"===this.selectLevel||1===this.selectLevel)return;this.reset(this.active)}else if(1===this.active){console.log("省级id",this.cityTab[0].id),this.mapArea={};for(let e in this.area.city_list)e.substring(0,2)===this.cityTab[0].id.substring(0,2)&&(this.mapArea[e]=this.area.city_list[e]);this.reset(this.active)}else if(2===this.active){console.log("市级id",this.cityTab[1].id),this.mapArea={};for(let e in this.area.county_list)e.substring(0,4)===this.cityTab[1].id.substring(0,4)&&(this.mapArea[e]=this.area.county_list[e])}},selItem(e,n){console.log("选择的item",e),console.log("选择的id",n),this.cityTab[this.active].id=n,this.cityTab[this.active].name=e,1===this.level||2===this.level&&1===this.active||(this.reset(this.active),console.log(this.active),setTimeout((()=>{this.active>=1&&this.cityTab[2]?this.active=2:this.active=this.active+1,this.getCity()}),300))},echo(){if(this.tag=0,3===this.level)for(let e in this.area.county_list)if(e===this.selId){this.tag=1,this.cityTab[2].name=this.area.county_list[e],this.cityTab[2].id=e;for(let e in this.area.city_list)if(e.substring(0,4)===this.selId.substring(0,4)){this.cityTab[1].name=this.area.city_list[e],this.cityTab[1].id=e;for(let n in this.area.province_list)n.substring(0,2)===e.substring(0,2)&&(this.cityTab[0].name=this.area.province_list[n],this.cityTab[0].id=n)}}for(let e in this.area.city_list)if(e===this.selId){this.tag=1,this.cityTab[1].name=this.area.city_list[e],this.cityTab[1].id=e;for(let n in this.area.province_list)n.substring(0,2)===e.substring(0,2)&&(this.cityTab[0].name=this.area.province_list[n],this.cityTab[0].id=n)}for(let e in this.area.province_list)e===this.selId&&(this.tag=1,this.cityTab[0].name=this.area.province_list[e],this.cityTab[0].id=e);0===this.tag&&(this.active=0)}},watch:{selId:{handler(e,n){console.log("obj changed"),this.active=0,0===this.active&&(this.mapArea=this.area.province_list),this.level>1&&this.echo(),console.log(this.city,"this.city")},deep:!0}}};const na=ea;var ta=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"containers"},[t("div",{staticClass:"headers"},[t("div",{style:{width:1===e.level?"100%":"70%"}},[t("Tabs",{attrs:{color:"#1989fa","title-inactive-color":"#333333","title-active-color":"#0084ff"},on:{click:e.getCity},model:{value:e.active,callback:function(n){e.active=n},expression:"active"}},e._l(e.cityTab,(function(n,i){return t("Tab",{key:i,attrs:{title:n.name,disabled:e.disabled(i)}})})),1)],1),e._v(" "),e.cityTab.length>1&&""===e.cityTab[1].id?t("div",{staticClass:"noBtn"},[e._v("确定")]):t("div",{staticClass:"okBtn",on:{click:e.confirm}},[e._v("确定")])]),e._v(" "),t("div",{ref:"main",staticClass:"bodys",class:{bodyView:"all"===e.viewType}},[2===e.active?t("div",{class:{selColor:""===e.cityTab[e.active].id},staticStyle:{padding:"10px 20px"},on:{click:function(n){return e.selItem("请选择","")}}},[e._v("\n            请选择\n        ")]):e._e(),e._v(" "),e._l(e.mapArea,(function(n,i){return t("div",{key:i,class:{selColor:e.cityTab[e.active].id===i},staticStyle:{padding:"10px 20px"},on:{click:function(t){return e.selItem(n,i)}}},[e._v("\n            "+e._s(n)+"\n        ")])}))],2)])};ta._withStripped=!0;const ia={name:"FieldAddress",components:{Field:m,Area:k,Popup:f,DomesticCity:Li({render:ta,staticRenderFns:[]},(function(e){e&&e("data-v-14ad888e_0",{source:".containers[data-v-14ad888e] {\n  width: 100%;\n  background: #fff;\n  display: flex;\n  flex-direction: column;\n}\n.containers .headers[data-v-14ad888e] {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100vw;\n}\n.containers .bodys[data-v-14ad888e] {\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  overflow-y: scroll;\n  border-top: 1px solid #eee;\n  font-size: 14px;\n  height: 50vh;\n}\n.containers .bodyView[data-v-14ad888e] {\n  height: 80vh;\n}\n.selColor[data-v-14ad888e] {\n  color: #0084ff;\n}\n.okBtn[data-v-14ad888e] {\n  margin-right: 20px;\n  font-size: 14px;\n  color: #0084ff;\n  position: fixed;\n  right: 0;\n}\n.noBtn[data-v-14ad888e] {\n  margin-right: 20px;\n  font-size: 14px;\n  color: #888;\n}\n",map:{version:3,sources:["DomesticCity.vue"],names:[],mappings:"AAAA;EACE,WAAW;EACX,gBAAgB;EAChB,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,8BAA8B;EAC9B,YAAY;AACd;AACA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,kBAAkB;EAClB,0BAA0B;EAC1B,eAAe;EACf,YAAY;AACd;AACA;EACE,YAAY;AACd;AACA;EACE,cAAc;AAChB;AACA;EACE,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,eAAe;EACf,QAAQ;AACV;AACA;EACE,kBAAkB;EAClB,eAAe;EACf,WAAW;AACb",file:"DomesticCity.vue",sourcesContent:[".containers {\n  width: 100%;\n  background: #fff;\n  display: flex;\n  flex-direction: column;\n}\n.containers .headers {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100vw;\n}\n.containers .bodys {\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  overflow-y: scroll;\n  border-top: 1px solid #eee;\n  font-size: 14px;\n  height: 50vh;\n}\n.containers .bodyView {\n  height: 80vh;\n}\n.selColor {\n  color: #0084ff;\n}\n.okBtn {\n  margin-right: 20px;\n  font-size: 14px;\n  color: #0084ff;\n  position: fixed;\n  right: 0;\n}\n.noBtn {\n  margin-right: 20px;\n  font-size: 14px;\n  color: #888;\n}\n"]},media:void 0})}),na,"data-v-14ad888e",false,undefined,!1,Fi,void 0,void 0),FieldTip:Ri,Icon:x},mixins:[Ni],props:{currentSelect:{type:[Object,String,Number,Array],default:()=>{}},validateRules:{type:Object,default:()=>{}},disabled:{type:Boolean,default:!1},isEnd:{type:Boolean,default:!1},scene:{type:[String,Number],default:"1"},selectLevel:{type:[String,Number],default:3},showProvinceName:{type:Boolean,default:!1},inputAlign:{type:String,default:"right"}},data(){return{show:!1,addressList:Qi.AreaList,rules:Ei.exports.cloneDeep(this.validateRules)}},computed:{fieldVal(){let e="";return e="string"==typeof this.currentSelect?this.currentSelect:(this.currentSelect||{}).name||"",e}},inheritAttrs:!1,model:{prop:"currentSelect"},watch:{currentSelect:{handler(){this.$emit("onSelect",this.currentSelect)},deep:!0}},methods:{onAddress(){2===this.scene||this.disabled||(this.show=!0)},onConfirm(e){console.log("fieldAddressConfirmValue:",e),this.show=!1;const n=this.selectLevel+"";let t="object"==typeof e[0]?e[0].name:"",i="object"==typeof e[1]&&parseInt(n)>1&&e[1].name?e[1].name:"",a="object"==typeof e[2]&&parseInt(n)>2&&e[2].name?e[2].name:"",r="",o="object"==typeof e[0]?e[0].id:"",s="object"==typeof e[1]&&parseInt(n)>1&&e[1].id?","+e[1].id:"",c="object"==typeof e[2]&&parseInt(n)>2&&e[2].id?","+e[2].id:"",l="";"1"===n?(r=t,l=o):(r=i+a,r=this.showProvinceName&&t!==i?t+r:r,l=o+s+c);let p={name:r,id:l};this.$emit("onCell",p),this.$emit("input",p)},onDelete(){let e={name:"",id:""};this.$emit("onTree",e),this.$emit("input",e)}},mounted(){},destroyed(){}};var aa=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("ValidationProvider",{attrs:{name:e.$attrs.label,rules:e.validateRules},scopedSlots:e._u([{key:"default",fn:function(n){var i=n.errors;return[t("Field",e._b({class:[e.isEnd?"bot-bor":"","top"===e.$attrs.labelAlign?"jsonvue-flex-column":""],attrs:{readonly:!0,"error-message":i[0],value:e.fieldVal,"input-align":e.inputAlign},on:{click:e.onAddress},scopedSlots:e._u([{key:"label",fn:function(){return[t("div",{staticClass:"field-common__label"},[t("span",{class:e.isBold?"font-bold":""},[e._v(e._s(e.$attrs.label))]),e._v(" "),e.tip&&"right"===e.tipLocation?t("FieldTip",{staticClass:"field-common__label-tip",attrs:{tip:e.tip}}):e._e()],1)]},proxy:!0}],null,!0)},"Field",e.$attrs,!1),[e._v(" "),t("div",{staticStyle:{display:"flex","align-items":"center"},attrs:{slot:"button"},slot:"button"},[2!==e.scene&&!e.disabled&&e.fieldVal?t("div",{on:{click:function(n){return n.stopPropagation(),e.onDelete(n)}}},[t("span",{staticClass:"txt-all"},[t("i",{staticClass:"iconfont icon-shanchu"})])]):e._e(),e._v(" "),2===e.scene||e.disabled?e._e():t("span",{staticClass:"txt-all",staticStyle:{"padding-left":"2px"}},[t("Icon",{attrs:{name:"arrow"}})],1)])]),e._v(" "),e.tip&&"bottom"===e.tipLocation?t("div",{staticClass:"field-common__label-tip__bottom"},[e._v("\n              "+e._s(e.tip)+"\n            ")]):e._e()]}}])}),e._v(" "),t("Popup",{attrs:{position:"bottom","get-container":"#app"},model:{value:e.show,callback:function(n){e.show=n},expression:"show"}},[t("DomesticCity",{attrs:{area:e.addressList,selectLevel:e.selectLevel},on:{confirm:e.onConfirm}})],1)],1)};aa._withStripped=!0;const ra=Li({render:aa,staticRenderFns:[]},(function(e){e&&e("data-v-0787f05c_0",{source:".bot-bor {\n  border-bottom: 0px;\n}\n\n/*# sourceMappingURL=FieldAddress.vue.map */",map:{version:3,sources:["D:\\ZJ_Project\\jsonvue\\src\\FieldAdress\\FieldAddress.vue","FieldAddress.vue"],names:[],mappings:"AAkLA;EACA,kBAAA;ACjLA;;AAEA,2CAA2C",file:"FieldAddress.vue",sourcesContent:['\x3c!--地址选择--\x3e\r\n<template>\r\n    <div>\r\n        <ValidationProvider :name="$attrs.label" :rules="validateRules" v-slot="{errors}">\r\n\x3c!--          :is-link="!disabled&&scene!==2"--\x3e\r\n            <Field\r\n                    v-bind="$attrs"\r\n                    :readonly="true"\r\n                    :error-message="errors[0]"\r\n                    :value="fieldVal"\r\n                    @click="onAddress"\r\n                    :input-align="inputAlign"\r\n                    :class="[isEnd ? \'bot-bor\' : \'\',$attrs.labelAlign === \'top\' ? \'jsonvue-flex-column\' : \'\']"\r\n\r\n            >\r\n                <template #label>\r\n                  <div class="field-common__label">\r\n                    <span :class=" isBold ? \'font-bold\' : \'\' ">{{$attrs.label}}</span>\r\n                    <FieldTip v-if="tip && tipLocation === \'right\'" class="field-common__label-tip"  :tip="tip"></FieldTip>\r\n                  </div>\r\n                </template>\r\n                <div  slot="button" style="display: flex;align-items: center">\r\n                  <div @click.stop="onDelete" v-if=" scene!==2 && !disabled && fieldVal " >\r\n                        <span class="txt-all" >\r\n                          <i class="iconfont icon-shanchu"></i>\r\n                        </span>\r\n                  </div>\r\n                  <span style="padding-left: 2px"\r\n                        class="txt-all"\r\n                        v-if="scene !== 2 && !disabled"\r\n                  >\r\n                          <Icon name="arrow"></Icon>\r\n                        </span>\r\n                </div>\r\n            </Field>\r\n            <div v-if="tip && tipLocation === \'bottom\'" class="field-common__label-tip__bottom">\r\n              {{tip}}\r\n            </div>\r\n        </ValidationProvider>\r\n        <Popup\r\n            v-model="show"\r\n            position="bottom"\r\n            get-container="#app"\r\n        >\r\n            <DomesticCity :area="addressList" :selectLevel="selectLevel"  @confirm="onConfirm"></DomesticCity>\r\n        </Popup>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {Field,Area,Popup,Icon} from \'vant\'\r\n    import {citys} from "../utils/citys";\r\n    import DomesticCity from "./DomesticCity.vue"\r\n    import {cloneDeep} from \'lodash\'\r\n    import {commonLabelMixin} from "../mixins/commonLabelMixin";\r\n    import FieldTip from "../FieldTip.vue";\r\n\r\n    export default {\r\n        name:\'FieldAddress\',\r\n        components: {Field,Area,Popup,DomesticCity,FieldTip,Icon},\r\n        mixins:[commonLabelMixin],\r\n        props: {\r\n        currentSelect: {\r\n          type:[Object, String, Number, Array],\r\n          default:()=>{}\r\n        },\r\n        validateRules:{\r\n            type:Object,\r\n            default:()=>{}\r\n        },\r\n        disabled:{\r\n          type:Boolean,\r\n          default:false\r\n        },\r\n        isEnd:{\r\n          type: Boolean,\r\n          default: false\r\n        },\r\n        //组件状态 0 创建 1 编辑 2 详情\r\n        scene:{\r\n          type:[String,Number],\r\n          default:\'1\'\r\n        },\r\n        //省市县选择级别 1(只能选择省),2（只能选择市）,3（只能选择县）\r\n        selectLevel:{\r\n          type:[String,Number],\r\n          default:3\r\n        },\r\n        //省市县选择级别为2或者3时 是否显示省份名称默认显示\r\n        showProvinceName:{\r\n            type:Boolean,\r\n            default:false\r\n        },\r\n        inputAlign:{\r\n          type:String,\r\n          default:\'right\'\r\n        }\r\n\r\n      },\r\n        data() {\r\n            return {\r\n                show:false,\r\n                addressList:citys.AreaList,\r\n                rules:cloneDeep(this.validateRules)\r\n            };\r\n        },\r\n        computed: {\r\n            fieldVal() {\r\n                /* 字段选择的name */\r\n                let name = "";\r\n                if (typeof this.currentSelect == "string") {\r\n                    name = this.currentSelect;\r\n                } else {\r\n                    name = (this.currentSelect || {}).name || "";\r\n                }\r\n                return name;\r\n            }\r\n        },\r\n        inheritAttrs: false,\r\n        model: {\r\n            prop: "currentSelect"\r\n        },\r\n        watch: {\r\n            currentSelect: {\r\n                handler() {\r\n                    /* 监听值变化，触发返回 */\r\n                    this.$emit("onSelect", this.currentSelect);\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        methods: {\r\n            onAddress() {\r\n                if (this.scene === 2 || this.disabled) {\r\n                    return;\r\n                }\r\n                this.show = true\r\n               },\r\n            onConfirm(value){\r\n               console.log(\'fieldAddressConfirmValue:\',value)\r\n               this.show=false\r\n               const level = this.selectLevel + ""\r\n               let provinceName = typeof value[0] === \'object\' ? value[0].name : \'\'\r\n               let cityName = typeof value[1] === \'object\'&& parseInt(level) > 1 && value[1].name ? value[1].name: \'\'\r\n               let distinctName = typeof value[2] === \'object\' &&  parseInt(level) > 2 && value[2].name ? value[2].name: \'\'\r\n               let name = ""\r\n\r\n\r\n               let provinceCode = typeof value[0] === \'object\' ? value[0].id : \'\'\r\n               let cityCode = typeof value[1] === \'object\' && parseInt(level) > 1 && value[1].id ? ","+value[1].id : \'\'\r\n               let distinctCode = typeof value[2] === \'object\' &&  parseInt(level) > 2  && value[2].id ? ","+value[2].id : \'\'\r\n\r\n               let id = ""\r\n               if(level === \'1\'){\r\n                 name = provinceName\r\n                 id = provinceCode\r\n               }else{\r\n                 name = cityName+distinctName\r\n                 name = ( this.showProvinceName && provinceName !== cityName ) ? provinceName + name : name\r\n                 id = provinceCode+cityCode+distinctCode\r\n               }\r\n               let selectAddress = { name, id }\r\n               this.$emit(\'onCell\',selectAddress)\r\n               this.$emit(\'input\',selectAddress)\r\n            },\r\n            onDelete(){\r\n                let name =\'\'\r\n                let id =\'\'\r\n                let selectAddress = { name,id }\r\n                this.$emit(\'onTree\',selectAddress)\r\n                this.$emit(\'input\',selectAddress)\r\n            },\r\n        },\r\n        mounted() {},\r\n        destroyed() {}\r\n    };\r\n<\/script>\r\n<style lang=\'scss\'>\r\n    .bot-bor{\r\n        border-bottom: 0px;\r\n    }\r\n</style>\r\n',".bot-bor {\n  border-bottom: 0px;\n}\n\n/*# sourceMappingURL=FieldAddress.vue.map */"]},media:void 0})}),ia,undefined,false,undefined,!1,Fi,void 0,void 0);ra.install=function(e){e.component(ra.name,ra)};var oa={name:"FieldCheckBoxSelect",components:{Popup:f,Field:m,Icon:x,Search:h,RadioGroup:g,Radio:_,Cell:y,PullRefresh:j,List:T,Button:E,Loading:P,FieldTip:Ri},mixins:[Ni],data(){return{show:!1,searchVal:"",selectData:[],result:"",loading:!0,pullRefresh:!1,dataLoading:!1,finished:!1,currentPage:1,pageSize:30,rules:Ei.exports.cloneDeep(this.validateRules)}},inheritAttrs:!1,model:{prop:"currentSelect"},props:{currentSelect:[Object,Array,String,Number],postData:{type:[String,Object],default:()=>({pageInfo:{}})},postUrl:String,scene:{type:[String,Number],default:1},validateRules:Object,configName:{type:String,default:""},disabled:Boolean,addAble:{type:Boolean,default:!1},isSecondPage:Boolean,isEnd:{type:Boolean,default:!1},isType:{type:String,default:""},useItemSlot:{type:Boolean,default:!1},refreshWhenClick:{type:Boolean,default:!1},inputAlign:{type:String,default:"right"}},computed:{showDeleteIcon(){return 2!==this.scene&&!this.disabled&&this.fieldVal},filterListShow(){return e=>{let n=!0;return this.addNewParams.FieldTree&&this.addNewParams.FieldTree.serialNumber.forEach((t=>{e.name===t&&(n=!1)})),n}},showNoResult(){let e=!1===this.pullRefresh&&this.addAble&&!Ei.exports.isEmpty(this.searchVal)&&0===this.selectData.length;return console.log("showAdd",e),e},searchTree(){return this.toTree(this.selectData)},fieldId(){let e="";return e="string"==typeof this.currentSelect?this.currentSelect:this.currentSelect.id||"",e},fieldVal(){let e="";return e="string"==typeof this.currentSelect?this.currentSelect:(this.currentSelect||{}).name||"",e},fieldLabel(){return this.$attrs.label}},methods:{enterCardSearch(){this.$router.push({path:"/CardRecordSearch"})},onClose(){this.show=!1,this.isSecondPage||this.$nativeApi&&this.$nativeApi.JSONVUE_AppGestureIfForbid({isForbid:1})},onShow(){this.show=!0,this.isSecondPage||this.$nativeApi&&this.$nativeApi.JSONVUE_AppGestureIfForbid({isForbid:0})},onAddHandle(){this.$emit("input",{name:this.searchVal}),this.onClose()},onDelete(){this.$emit("onTree",{id:"",name:"",isDelete:!0}),this.$emit("input",{id:"",name:""})},onSearch(){this.onRefresh()},onLoad(e=!1){this.dataLoading=!0;let n=this.postData;n.pageInfo.currentPage=this.currentPage,n.name=this.searchVal,console.log("itemSearchData",n),this.$get(this.postUrl).then((n=>{console.log("reps",n),(n=n.data).info=n.result||n.list||[];let t=[];t=n.info instanceof Array?n.info:n.records instanceof Array?n.records:n.info.records;let i=t||[];this.selectData=e?i:this.selectData.concat(i),this.loading=!1,this.dataLoading=!1,this.pullRefresh=!1,this.currentPage++,(i||[]).length<this.pageSize&&(this.finished=!0)})).catch((e=>{console.log("err",e),this.loading=!1,this.finished=!0,this.dataLoading=!1,this.pullRefresh=!1}))},onRefresh(){this.currentPage=1,this.pullRefresh=!0,this.finished=!1,this.selectData=[],this.onLoad(!0)},filterTree(e){return function e(n,t){if(!n||!n.length)return[];const i=[];for(const a of n)t(a)?(i.push(a),a.children=e(a.children,t)):i.push(...e(a.children,t));return i}(e,(e=>{let n=(e.name||"")+"";n=n.toLowerCase();let t=(this.searchVal+"").trim();return t=t.toLowerCase(),n.indexOf(t)>-1}))},toTree(e){let n=Ei.exports.cloneDeep(e),t=[];if(!Array.isArray(n))return t;n.forEach((e=>{delete e.children}));let i={};return n.forEach((e=>{i[e.id]=e})),n.forEach((e=>{let n=i[e.upOrgId];n?(n.isPid=!0,(n.children||(n.children=[])).push(e)):t.push(e)})),t},toggle(e){this.result=e,this.onConfirm()},onClick(){2===this.scene||this.disabled||(this.$emit("paramsChange"),this.result=this.currentSelect.id,this.onShow(),this.postUrl&&(this.refreshWhenClick||Array.isArray(this.selectData)&&0===this.selectData.length)&&setTimeout((()=>{this.onRefresh()}),300))},onConfirm(){this.onClose();let e="";this.result&&this.selectData.every((n=>n.id!==this.result||(e={...n},!1))),this.$emit("onTree",e),this.$emit("input",e)}},watch:{show(){this.searchVal=""},currentSelect:{handler(e){e&&e.chain&&this.$emit("onTree",this.currentSelect)},deep:!0}}};const sa=oa;var ca=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("ValidationProvider",{attrs:{name:e.fieldLabel,rules:e.rules},scopedSlots:e._u([{key:"default",fn:function(n){var i=n.errors;return[t("Field",e._b({class:[e.isEnd?"bot-bor":"","top"===e.$attrs.labelAlign?"jsonvue-flex-column":""],attrs:{readonly:!0,value:e.fieldVal,clearable:"","error-message":i[0],"input-align":e.inputAlign},on:{click:e.onClick},scopedSlots:e._u([{key:"label",fn:function(){return[t("div",{staticClass:"field-common__label"},[t("span",{class:e.isBold?"font-bold":""},[e._v(e._s(e.$attrs.label))]),e._v(" "),e.tip&&"right"===e.tipLocation?t("FieldTip",{staticClass:"field-common__label-tip",attrs:{tip:e.tip}}):e._e()],1)]},proxy:!0}],null,!0)},"Field",e.$attrs,!1),[e._v(" "),t("div",{staticStyle:{display:"flex","align-items":"center"},attrs:{slot:"button"},slot:"button"},[e.showDeleteIcon?t("div",{on:{click:function(n){return n.stopPropagation(),e.onDelete(n)}}},[t("span",{staticClass:"txt-all"},[t("i",{staticClass:"iconfont icon-shanchu"})])]):e._e(),e._v(" "),2===e.scene||e.disabled?e._e():t("span",{staticClass:"txt-all",staticStyle:{"padding-left":"2px"}},[t("Icon",{attrs:{name:"arrow"}})],1)])]),e._v(" "),e._t("tip",[e.tip&&"bottom"===e.tipLocation?t("div",{staticClass:"field-common__label-tip__bottom"},[e._v("\n                 "+e._s(e.tip)+"\n               ")]):e._e()])]}}],null,!0)}),e._v(" "),t("Popup",{style:{width:"quota"===e.isType?"100%":"90%",height:"100%"},attrs:{position:"right","get-container":"#app"},model:{value:e.show,callback:function(n){e.show=n},expression:"show"}},[t("div",{staticClass:"jsonvue-page"},[t("div",{staticClass:"select-hd van-hairline--bottom"},[t("div",{staticClass:"inline-flex flex-middle",on:{click:e.onClose}},[t("Icon",{attrs:{name:"arrow-left"}}),t("span",[e._v("返回")])],1),e._v(" "),t("span",{staticClass:"van-info-title"},[e._v("请选择"+e._s(e.fieldLabel))]),e._v(" "),t("span",[e._v(" ")])]),e._v(" "),t("Search",{attrs:{clearable:"","show-action":"",placeholder:"请输入搜索关键词",background:"#f5f5f5"},on:{input:e.onSearch,clear:e.onRefresh},model:{value:e.searchVal,callback:function(n){e.searchVal=n},expression:"searchVal"}}),e._v(" "),e.loading?t("Loading",{staticClass:"jsonvue-loading1 flex van-row--justify-center"}):t("div",{staticClass:"jsonvue-content"},[e.showNoResult?t("div",{staticClass:"flex-center flex-middle flex1",staticStyle:{height:"100%"}},[t("div",{staticClass:"jsonvue-btn inner ml10 mr10 "},[t("div",{staticClass:"on-result"},[e._v("搜索结果为空")]),e._v(" "),t("div",{staticClass:"flex"},[t("Button",{staticClass:"flex1",attrs:{plain:"",type:"info"},on:{click:e.onAddHandle}},[t("span",[e._v("+添加"+e._s(e.$attrs.label))])])],1)])]):t("RadioGroup",{model:{value:e.result,callback:function(n){e.result=n},expression:"result"}},[t("ul",{staticClass:"select-list"},[t("PullRefresh",{on:{refresh:e.onRefresh},model:{value:e.pullRefresh,callback:function(n){e.pullRefresh=n},expression:"pullRefresh"}},[t("List",{attrs:{finished:e.finished},on:{load:e.onLoad},model:{value:e.dataLoading,callback:function(n){e.dataLoading=n},expression:"dataLoading"}},e._l(e.searchTree,(function(n,i){return t("li",{key:i},[t("div",{staticClass:"level1",on:{click:function(t){return t.stopPropagation(),e.toggle(n.id)}}},[t("Cell",{attrs:{clickable:"",title:n.name}},[e.useItemSlot?e._t("itemSlot",null,{slot:"title",row:n}):e._e(),e._v(" "),t("Radio",{attrs:{slot:"right-icon",name:n.id},on:{click:function(e){}},slot:"right-icon"})],2)],1)])})),0)],1),e._v(" "),"cardRecordConfig"===e.configName?t("div",{staticClass:"card-btn-view"},[t("Button",{attrs:{type:"info",size:"small"},on:{click:e.enterCardSearch}},[e._v("流水查询")])],1):e._e()],1)])],1)],1)])],1)};ca._withStripped=!0;const la=Li({render:ca,staticRenderFns:[]},(function(e){e&&e("data-v-539c3800_0",{source:".card-btn-view[data-v-539c3800] {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  padding: 10px 10px 20px 10px;\n}\n.on-result[data-v-539c3800] {\n  display: flex;\n  font-size: 20px;\n  margin-bottom: 50px;\n  justify-content: center;\n  align-items: center;\n}\n.jsonvue-page[data-v-539c3800] {\n  display: flex;\n  flex-direction: column;\n}\n.select-hd[data-v-539c3800] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 20px;\n  font-size: 15px;\n  background-color: #fff;\n}\n.van-info-title[data-v-539c3800] {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 60%;\n  white-space: nowrap;\n  text-align: center;\n}\n.van-search__content[data-v-539c3800] {\n  background-color: #fff;\n}\n.bot-bor[data-v-539c3800] {\n  border-bottom: 0px;\n}\n.quota[data-v-539c3800] .van-field__label {\n  width: 0px;\n  text-align: left;\n}\n.quota[data-v-539c3800] .van-cell {\n  background: #eee;\n  border-radius: 5px;\n  width: 99%;\n}\n.tip-info[data-v-539c3800] {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  padding-right: 20px;\n  padding-bottom: 10px;\n}\n",map:{version:3,sources:["FieldCheckBoxSelect.vue"],names:[],mappings:"AAAA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,4BAA4B;AAC9B;AACA;EACE,aAAa;EACb,eAAe;EACf,mBAAmB;EACnB,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,kBAAkB;EAClB,eAAe;EACf,sBAAsB;AACxB;AACA;EACE,gBAAgB;EAChB,uBAAuB;EACvB,UAAU;EACV,mBAAmB;EACnB,kBAAkB;AACpB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,UAAU;EACV,gBAAgB;AAClB;AACA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,UAAU;AACZ;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,yBAAyB;EACzB,mBAAmB;EACnB,oBAAoB;AACtB",file:"FieldCheckBoxSelect.vue",sourcesContent:[".card-btn-view {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  padding: 10px 10px 20px 10px;\n}\n.on-result {\n  display: flex;\n  font-size: 20px;\n  margin-bottom: 50px;\n  justify-content: center;\n  align-items: center;\n}\n.jsonvue-page {\n  display: flex;\n  flex-direction: column;\n}\n.select-hd {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 20px;\n  font-size: 15px;\n  background-color: #fff;\n}\n.van-info-title {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 60%;\n  white-space: nowrap;\n  text-align: center;\n}\n.van-search__content {\n  background-color: #fff;\n}\n.bot-bor {\n  border-bottom: 0px;\n}\n.quota /deep/ .van-field__label {\n  width: 0px;\n  text-align: left;\n}\n.quota /deep/ .van-cell {\n  background: #eee;\n  border-radius: 5px;\n  width: 99%;\n}\n.tip-info {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  padding-right: 20px;\n  padding-bottom: 10px;\n}\n"]},media:void 0})}),sa,"data-v-539c3800",false,undefined,!1,Fi,void 0,void 0);la.install=function(e){e.component(la.name,la)};var pa={name:"DefaultView",components:{Icon:x},props:{list:{type:Array,default:()=>[]}},data:()=>({listShow:[]}),methods:{onEdit(e){this.$emit("commonEdit",e)},getFieldValueShow(e,n){return e instanceof Object?e.name||"":"date"===n&&e?this.$options.filters.dtformat(e,"yyyy-MM-dd"):e||""}},watch:{list:{handler(e){this.listShow=e.map((e=>({list:e,expand:!1})))},immediate:!0}}};const ua=pa;var da=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",e._l(e.listShow,(function(n,i){return t("ul",{key:i,staticClass:"detail-list inner"},[t("li",{staticClass:"default-view-container"},[t("div",{staticClass:"hd"},[t("div",{staticClass:"li-page"},[t("span",{staticClass:"item"},[e._v(e._s(i+1))])])]),e._v(" "),t("div",{staticClass:"ft",class:{listH:!n.expand}},e._l(n.list,(function(n,a){return t("div",{key:a,on:{click:function(n){return e.onEdit(i)}}},[n.fieldType?t("div",{key:a,staticClass:"item"},[t("div",[n.required?t("span",{staticClass:"text-danger"},[e._v("*")]):t("span",[e._v(" ")]),e._v(" "),t("span",[e._v(e._s(n.label))])]),e._v(" "),t("span",[e._v(e._s(e.getFieldValueShow(n.fieldValue,n.fieldType)))])]):e._e()])})),0),e._v(" "),n.list.length>3?t("div",{staticClass:"drop-more",on:{click:function(e){n.expand=!n.expand}}},[n.expand?[t("span",[e._v("收缩")]),e._v(" "),t("Icon",{staticClass:"ml5",attrs:{name:"arrow-up"}})]:[t("span",[e._v("展开")]),e._v(" "),t("Icon",{staticClass:"ml5",attrs:{name:"arrow-down"}})]],2):e._e()])])})),0)};da._withStripped=!0;const ma=Li({render:da,staticRenderFns:[]},(function(e){e&&e("data-v-512af01f_0",{source:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",map:{version:3,sources:[],names:[],mappings:"",file:"DefaultView.vue"},media:void 0})}),ua,"data-v-512af01f",false,undefined,!1,Fi,void 0,void 0);var fa={name:"ModuleFieldNoCrud",components:{FieldSelect:Yi,FieldText:Mi,FieldCheckBoxSelect:la,FieldDate:Xi,FieldAddress:ra,Field:m},props:{fieldList:{type:Array,default:()=>[]},moduleCode:{type:String,default:""},scene:{type:[Number,String],default:1},isSecondPage:{type:Boolean,default:!1}},data:()=>({moduleCreating:!0,moduleObj:{}}),methods:{onSinglePageSave(e,n,t){this.$emit("onSinglePageSave",e,n,t)},onSinglePageRemove(e,n,t){this.$emit("onSinglePageRemove",e,n,t)},onPageCell(e,n,t,i){this.$emit("onPageCell",e,n,t,i)},onPageBlur(e,n,t,i){this.$emit("onPageBlur",e,n,t,i)},onPageParamsChange(e,n,t){this.$emit("pageParamsChange",e,n,t)},onCell(e,n){this.$emit("onCell",e,n)},onBlur(e,n){this.$emit("onBlur",e,n)},onParamsChange(e){this.$emit("paramsChange",e)},onPageSave(e){this.$emit("onPageSave",e)},onAddProject(e,n){this.$emit("onAddProject",e,n)}},created(){},mounted(){},watch:{}};const ha=fa;var va=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",e._l(e.fieldList,(function(n,i){return t("div",{key:i},[n.formSlot?t("ValidationProvider",{attrs:{name:n.label,rules:{required:n.required}},scopedSlots:e._u([{key:"default",fn:function(i){var a=i.errors;return[t("Field",{attrs:{label:n.label,required:n.required,"error-message":a[0],"error-message-align":"right","input-align":"right"}},[t("template",{slot:"input"},[e._t(n.fieldName,null,{row:n})],2)],2)]}}],null,!0)}):n.hidden||"text"!==n.fieldType&&"textarea"!==n.fieldType&&"int"!==n.fieldType&&"amount"!==n.fieldType&&"number"!==n.fieldType?n.hidden||"select"!==n.fieldType?n.hidden||"address"!==n.fieldType?n.hidden||"date"!==n.fieldType?n.hidden||"tree"!==n.fieldType?e._e():t("FieldCheckBoxSelect",{attrs:{label:n.label||n.fieldName,scene:e.scene,"config-name":n.config.configName,"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:2!==e.scene?"请选择"+(n.label||n.fieldName):"","post-url":n.postUrl,"post-data":n.postData,disabled:n.disabled,"add-able":"true"===n.config.addAble||!1,isSecondPage:e.isSecondPage,remark:n.remark,"is-end":e.fieldList.length===i+1},on:{onTree:function(t){return e.onCell(t,n)},paramsChange:function(t){return e.onParamsChange(n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}}):t("FieldDate",{attrs:{scene:e.scene,label:n.label||n.fieldName,"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:1===e.scene?"请输入"+(n.label||n.fieldName):"","min-date":n.minDate?n.minDate:"1900-01-01","max-date":n.maxDate,disabled:n.disabled,getType:n.configName?n.configName:"YYYY-MM-DD",remark:n.remark,"is-end":e.fieldList.length===i+1},on:{onDatetime:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}}):t("FieldAddress",{attrs:{"validate-rules":2!==e.scene?{required:n.required}:{},required:n.required&&2!==e.scene,label:n.label||n.fieldName,placeholder:1===e.scene?"请选择"+(n.label||n.fieldName):"",disabled:n.disabled,remark:n.remark,"is-end":e.fieldList.length===i+1,"select-level":n.selectLevel,"show-province-name":n.showProvinceName},on:{onCell:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}}):t("FieldSelect",{attrs:{scene:e.scene,"get-type":n.getType,label:n.label||n.fieldName,"option-codes":n.optionCodes||[],"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:2!==e.scene?"请选择":"","post-url":n.postUrl,"post-data":n.postData,disabled:n.disabled,remark:n.remark,"is-end":e.fieldList.length===i+1},on:{paramsChange:function(t){return e.onParamsChange(n)},onSelect:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}}):t("FieldText",{attrs:{"validate-rules":2!==e.scene?Object.assign({},{required:n.required,ismoney:"amount"===n.fieldType&&(n.fieldValue,n.label||n.fieldName)},n.validateRules):{},readonly:n.disabled||2===e.scene,required:n.required&&2!==e.scene,placeholder:n.placeholder||(2!==e.scene?"请输入"+(n.label||n.fieldName):""),label:n.label||n.fieldName,type:n.textFieldType||"text",fieldType:n.fieldType||"text",maxlength:n.maxLength,"show-word-limit":"textarea"===n.fieldType&&2!==e.scene,autosize:"textarea"===n.fieldType,"error-message-align":"right","input-align":"right",remark:n.remark,"is-end":e.fieldList.length===i+1},on:{onText:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}})],1)})),0)};va._withStripped=!0;const xa=Li({render:va,staticRenderFns:[]},undefined,ha,undefined,false,undefined,!1,void 0,void 0,void 0);var ga={name:"MultiSecondPageEdit",components:{ModuleFieldNoCrud:xa,Button:E,Icon:x,NavBar:L,Pagination:w},props:{label:String,isEdit:{type:Boolean,default:!0},pageList:{type:Array,default:()=>[]},activeIndex:0,moduleList:Array,currsentPages:{type:Number,default:0},addAble:{type:Boolean,default:!0},scene:{type:[String,Number],default:0},addNewParams:{type:Object,default:()=>{}}},data:()=>({currentPage:1,shows:!0}),watch:{currsentPages:{handler(e){this.currentPage=e},deep:!0,immediate:!0}},computed:{showStatus(){try{return(this.pageList[this.activeIndex]||[]).every((e=>"id"!==e.fieldHumpName||!e.fieldValue))}catch(e){return!0}},title(){return((this.$route||{}).params||{}).label||this.label},secondPageList(){return((this.$route||{}).params||{}).pageList||this.pageList},secondModuleList(){return((this.$route||{}).params||{}).moduleList||this.moduleList},secondIndex(){return((this.$route||{}).params||{}).activeIndex||this.activeIndex||0}},methods:{onAdd(){this.$dialog.confirm({title:"提示",message:"是否保存当前数据并新增?",confirmButtonText:"确定",cancelButtonText:"取消"}).then((()=>{this.onSave((()=>{let e=Ei.exports.cloneDeep(this.moduleList);this.pageList.push(e),this.$emit("onAdd",this.pageList.length-1)}))})).catch((e=>{}))},onCopy(){this.$dialog.confirm({title:"提示",message:"是否保存当前数据并复制?",confirmButtonText:"确定",cancelButtonText:"取消"}).then((()=>{this.onSave((()=>{this.$emit("onCopy")}))})).catch((e=>{}))},onDelete(){this.$dialog.confirm({title:"提示",message:"是否确认删除明细?",confirmButtonText:"确定",cancelButtonText:"取消"}).then((()=>{if(this.pageList.length<=1){let e=Ei.exports.cloneDeep(this.secondModuleList);this.pageList.splice(0,1,e)}else{this.currentPage>this.pageList.length-1&&(this.currentPage=this.currentPage-1),console.log("当前页：",this.currentPage)}this.$emit("onDelete",this.currentPage)})).catch((e=>{}))},onSaveAll(){this.onSave((()=>{this.$emit("onSaveAll")}))},onCancle(){this.$emit("onCancle")},onSave(e){this.$refs["fieldCell"+this.activeIndex][0].validate().then((n=>{console.log("子表单验证结果:",n),n?(this.$emit("onSave"),setTimeout((()=>{e()}))):this.$toast.fail({message:"请完善表单"})}))},onBack(){this.$emit("onBack")},onCell(e,n,t){this.$emit("onPageCell",e,n,t)},onParamsChange(e,n){this.$emit("pageParamsChange",e,n)},onChangeActiveIndex(e,n){console.log(`changePage:${"0"===n?"上一页":"下一页"}  当前页码为:${e}`);let t=e;"0"===n?1!==e&&(this.currentPage=e-1):this.secondPageList.length!==this.currentPage&&(this.currentPage=e+1),t=Number(this.currentPage)-1,this.$emit("changeIndex",{ind:t,currentPage:this.currentPage,oldInd:e,pageLen:this.secondPageList.length})}},created(){},mounted(){this.$bus.on("openSelectPage",(e=>{this.currentPage=e.page}))}};const ba=ga;var ya=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"jsonvue-page"},[t("NavBar",{attrs:{title:(2!==e.scene&&e.isEdit?"添加":"查看")+e.title,"left-arrow":""},on:{"click-left":e.onBack,"click-right":e.onSaveAll}}),e._v(" "),e.shows?t("div",{staticClass:"detail-tabs"},[t("div",{staticClass:"li-page"},[t("Pagination",{attrs:{"page-count":e.secondPageList.length,mode:"simple"},scopedSlots:e._u([{key:"prev-text",fn:function(){return[t("div",{staticClass:"page-icon-container",on:{click:function(n){n.stopPropagation(),1!==e.currsentPages&&e.onChangeActiveIndex(e.currsentPages,"0")}}},[t("Icon",{attrs:{name:"arrow-left"}})],1)]},proxy:!0},{key:"next-text",fn:function(){return[t("div",{staticClass:"page-icon-container",on:{click:function(n){n.stopPropagation(),e.secondPageList.length!==e.currsentPages&&e.onChangeActiveIndex(e.currsentPages,"1")}}},[t("Icon",{attrs:{name:"arrow"}})],1)]},proxy:!0}],null,!1,392400522),model:{value:e.currsentPages,callback:function(n){e.currsentPages=n},expression:"currsentPages"}})],1),e._v(" "),2!==e.scene&&e.isEdit&&e.addAble?t("div",{staticClass:"tabs-tool flex-middle"},[t("i",{staticClass:"iconfont icon-add",on:{click:e.onAdd}}),e._v(" "),t("i",{staticClass:"iconfont icon-copy",on:{click:e.onCopy}}),e._v(" "),t("i",{staticClass:"iconfont icon-delete",on:{click:e.onDelete}})]):e._e()]):e._e(),e._v(" "),t("div",{staticClass:"popup-content"},[e._l(e.secondPageList,(function(n,i){return[e.secondIndex===i?t("div",{key:i},[t("ValidationObserver",{ref:"fieldCell"+i,refInFor:!0,attrs:{disabled:!0}},[e.secondIndex===i?t("ModuleFieldNoCrud",{staticClass:"mb10",attrs:{"field-list":n,scene:!1===e.isEdit?2:e.scene,addNewParams:e.addNewParams},on:{onCell:e.onCell,paramsChange:e.onParamsChange,"update:fieldList":function(e){n=e},"update:field-list":function(e){n=e}}}):e._e()],1)],1):e._e()]}))],2),e._v(" "),2!==e.scene&&e.isEdit?t("Button",{attrs:{type:"info"},on:{click:e.onSaveAll}},[e._v("\n        保存\n    ")]):e._e()],1)};ya._withStripped=!0;const _a={methods:{findFieldInAllWithConfig(e,n,t){let i=[];return e.forEach((e=>{e.fieldList.forEach((e=>{e[n]&&e[n]===t&&i.push(e)}))})),i},findFieldWithConfig(e,n,t){let i=[];return e.forEach((e=>{e[n]&&e[n]===t&&i.push(e)})),i}}};var wa={name:"FieldCrud",components:{Cell:y,Button:E,Icon:x,Popup:f,NavBar:L,ActionSheet:B,ModuleField:xa,DefaultView:ma,MultiSecondPageEdit:Li({render:ya,staticRenderFns:[]},(function(e){e&&e("data-v-780e88bf_0",{source:"\n.van-pagination--simple{\n  display: flex;\n  align-items: center;\n}\n.van-pagination__item{\n    min-width: 1rem;\n    width: 1rem;\n    height: 1rem;\n    /*background-color: #646566;*/\n    /*color: white;*/\n    border-radius: 50%;\n    line-height: 1rem;\n    /*margin-top: 0.2rem;*/\n}\n.van-pagination__prev, .van-pagination__next{\n    background-color: #1989fa;\n}\n.van-pagination__item--disabled, .van-pagination__item--disabled:active{\n    background-color: #646566;\n}\n.van-pagination--simple .van-pagination__prev::after, .van-pagination--simple .van-pagination__next::after {\n    border-width: 0;\n}\n.van-pagination__page-desc{\n    margin: 0 10px\n}\n.page-icon-container{\n    color: #fff;\n    display:flex;\n    justify-content: center;\n    align-items: center\n}\n",map:{version:3,sources:["D:\\ZJ_Project\\jsonvue\\src\\FieldCrud\\MultiSecondPageEdit.vue"],names:[],mappings:";AAmQA;EACA,aAAA;EACA,mBAAA;AACA;AACA;IACA,eAAA;IACA,WAAA;IACA,YAAA;IACA,6BAAA;IACA,gBAAA;IACA,kBAAA;IACA,iBAAA;IACA,sBAAA;AACA;AACA;IACA,yBAAA;AACA;AACA;IACA,yBAAA;AACA;AAEA;IACA,eAAA;AACA;AAEA;IACA;AACA;AACA;IACA,WAAA;IACA,YAAA;IACA,uBAAA;IACA;AACA",file:"MultiSecondPageEdit.vue",sourcesContent:['\x3c!--二级界面多页编辑--\x3e\r\n<template>\r\n    <div class="jsonvue-page">\r\n        <NavBar  :title="`${scene===2||!isEdit?\'查看\':\'添加\'}`+title" left-arrow @click-left="onBack" @click-right="onSaveAll" ></NavBar>\r\n        <div class="detail-tabs" v-if="shows">\r\n          <div class="li-page">\r\n            <Pagination v-model="currsentPages" :page-count="secondPageList.length" mode="simple">\r\n              <template #prev-text>\r\n                <div @click.stop="currsentPages===1?\'\':onChangeActiveIndex(currsentPages,\'0\')"  class="page-icon-container">\r\n                  <Icon name="arrow-left"/>\r\n                </div>\r\n              </template>\r\n              <template #next-text>\r\n                <div @click.stop="secondPageList.length===currsentPages?\'\':onChangeActiveIndex(currsentPages,\'1\')" class="page-icon-container">\r\n                  <Icon name="arrow"  />\r\n                </div>\r\n              </template>\r\n            </Pagination>\r\n          </div>\r\n          <div  v-if="scene!==2&&isEdit&&addAble" class="tabs-tool flex-middle">\r\n            <i class="iconfont icon-add" @click="onAdd"></i>\r\n            <i class="iconfont icon-copy" @click="onCopy"></i>\r\n            <i class="iconfont icon-delete" @click="onDelete"></i>\r\n          </div>\r\n        </div>\r\n        <div class="popup-content">\r\n          <template v-for="(item,index) in secondPageList">\r\n            <div class="" v-if="secondIndex === index" :key="index">\r\n              <ValidationObserver  :ref="\'fieldCell\'+index" :disabled="true">\r\n                  <ModuleFieldNoCrud\r\n                      v-if="secondIndex === index"\r\n                      class="mb10"\r\n                      @onCell="onCell"\r\n                      @paramsChange="onParamsChange"\r\n                      :field-list.sync="item"\r\n                      :scene="isEdit === false ? 2 :scene"\r\n                      :addNewParams="addNewParams"\r\n                  ></ModuleFieldNoCrud>\r\n              </ValidationObserver>\r\n            </div>\r\n          </template>\r\n        </div>\r\n        <Button  v-if="scene !== 2 && isEdit " type="info" @click="onSaveAll">\r\n            保存\r\n        </Button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {Button,Icon,NavBar,Pagination ,} from \'vant\'\r\n    import {cloneDeep} from \'lodash\'\r\n    import ModuleFieldNoCrud from "../ModuleFieldNoCrud.vue";\r\n    export default {\r\n        name: "MultiSecondPageEdit",\r\n        components:{ModuleFieldNoCrud,Button,Icon,NavBar,Pagination},\r\n        props:{\r\n            label:String,\r\n            // 覆盖是否可以编辑功能\r\n            isEdit:{\r\n                type:Boolean,\r\n                default:true\r\n            },\r\n            pageList:{\r\n                type:Array,\r\n                default(){\r\n                    return []\r\n                }\r\n            },\r\n            activeIndex:0,\r\n            moduleList:Array,\r\n            currsentPages:{\r\n                type:Number,\r\n                default:0\r\n            },\r\n            //是否可以增加和删除 默认可以\r\n            addAble:{\r\n                type:Boolean,\r\n                default:true\r\n            },\r\n            scene:{\r\n              type:[String,Number],\r\n              default:0\r\n            },\r\n            addNewParams:{\r\n              type:Object,\r\n              default:()=>{}\r\n            }\r\n        },\r\n        data(){\r\n            return {\r\n                currentPage: 1,\r\n                shows:true\r\n            }\r\n        },\r\n        watch:{\r\n            currsentPages:{\r\n                handler(val){\r\n                    this.currentPage=val\r\n                },\r\n                deep:true,\r\n                immediate:true\r\n            }\r\n        },\r\n        computed:{\r\n            showStatus() {\r\n                try {\r\n                    return (this.pageList[this.activeIndex] || []).every(item => {\r\n                        if (item.fieldHumpName === "id" && item.fieldValue) {\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                } catch (error) {\r\n                    return true;\r\n                }\r\n            },\r\n            title(){\r\n                return ((this.$route || {}).params || {}).label || this.label\r\n            },\r\n            secondPageList(){\r\n                return ((this.$route || {}).params || {}).pageList || this.pageList\r\n            },\r\n            secondModuleList(){\r\n                return ((this.$route || {}).params || {}).moduleList || this.moduleList\r\n            },\r\n            secondIndex(){\r\n                return ((this.$route || {}).params || {}).activeIndex || this.activeIndex || 0\r\n            }\r\n        },\r\n        methods:{\r\n            onAdd(){\r\n                this.$dialog.confirm({\r\n                    title:\'提示\',\r\n                    message:\'是否保存当前数据并新增?\',\r\n                    confirmButtonText:\'确定\',\r\n                    cancelButtonText:\'取消\',\r\n                })\r\n                    .then(()=>{\r\n                        this.onSave(()=>{\r\n                            let moduleList = cloneDeep(this.moduleList);\r\n                            this.pageList.push(moduleList);\r\n                            this.$emit(\'onAdd\',this.pageList.length - 1)\r\n                        })\r\n                    })\r\n                    .catch(err=>{\r\n\r\n                    })\r\n\r\n            },\r\n            onCopy(){\r\n                this.$dialog.confirm({\r\n                    title:\'提示\',\r\n                    message:\'是否保存当前数据并复制?\',\r\n                    confirmButtonText:\'确定\',\r\n                    cancelButtonText:\'取消\',\r\n                })\r\n                    .then(()=>{\r\n                        this.onSave(()=>{\r\n                            this.$emit("onCopy")\r\n                        })\r\n                    })\r\n                    .catch(err=>{\r\n\r\n                    })\r\n\r\n            },\r\n            onDelete(){\r\n                this.$dialog.confirm({\r\n                    title:\'提示\',\r\n                    message:\'是否确认删除明细?\',\r\n                    confirmButtonText:\'确定\',\r\n                    cancelButtonText:\'取消\',\r\n                })\r\n                    .then(()=>{\r\n                        if (this.pageList.length <= 1) {\r\n                            let moduleList = cloneDeep(this.secondModuleList);\r\n                            this.pageList.splice(0, 1, moduleList);\r\n                            //清除错误信息\r\n                        }else{\r\n\r\n                            let tempPage = this.currentPage\r\n                            //console.log(\'总页面:\',this.pageList.length)\r\n                            if (tempPage>this.pageList.length-1){\r\n                                this.currentPage = this.currentPage-1\r\n                            }\r\n                            console.log(\'当前页：\',this.currentPage)\r\n\r\n                        }\r\n                        this.$emit(\'onDelete\',this.currentPage)\r\n                    })\r\n                    .catch(err=>{\r\n\r\n                    })\r\n            },\r\n            onSaveAll(){\r\n                this.onSave(()=>{\r\n                   this.$emit(\'onSaveAll\')\r\n                })\r\n            },\r\n            onCancle(){\r\n                this.$emit(\'onCancle\')\r\n            },\r\n            onSave(success){\r\n                this.$refs["fieldCell" + this.activeIndex][0].validate()\r\n                    .then(result => {\r\n                        console.log(\'子表单验证结果:\',result)\r\n                        if (result) {\r\n                           this.$emit(\'onSave\')\r\n                           setTimeout(()=>{\r\n                             success()\r\n                           })\r\n                        } else {\r\n                            this.$toast.fail({\r\n                                message: "请完善表单"\r\n                            });\r\n                        }\r\n                    });\r\n            },\r\n            onBack(){\r\n                this.$emit(\'onBack\')\r\n            },\r\n            onCell(value,item,module){\r\n                this.$emit("onPageCell",value,item,module)\r\n            },\r\n            onParamsChange(item,module){\r\n                this.$emit("pageParamsChange",item,module)\r\n            },\r\n            onChangeActiveIndex(index,tag){\r\n                console.log(`changePage:${tag === \'0\' ? \'上一页\' : \'下一页\'}  当前页码为:${index}`)\r\n                let ind=index\r\n                if(tag===\'0\'){\r\n                    if(index!==1){\r\n                        this.currentPage=index-1\r\n                    }\r\n                }else {\r\n                    if(this.secondPageList.length!==this.currentPage){\r\n                        this.currentPage=index+1\r\n                    }\r\n                }\r\n                ind = Number(this.currentPage) - 1 ;\r\n                this.$emit("changeIndex",{\r\n                    ind:ind,\r\n                    currentPage:this.currentPage,\r\n                    oldInd:index,\r\n                    pageLen:this.secondPageList.length\r\n                })\r\n            }\r\n        },\r\n        created() {\r\n        },\r\n        mounted(){\r\n            this.$bus.on(\'openSelectPage\',el=>{\r\n                this.currentPage=el.page\r\n            })\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style >\r\n    .van-pagination--simple{\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n    .van-pagination__item{\r\n        min-width: 1rem;\r\n        width: 1rem;\r\n        height: 1rem;\r\n        /*background-color: #646566;*/\r\n        /*color: white;*/\r\n        border-radius: 50%;\r\n        line-height: 1rem;\r\n        /*margin-top: 0.2rem;*/\r\n    }\r\n    .van-pagination__prev, .van-pagination__next{\r\n        background-color: #1989fa;\r\n    }\r\n    .van-pagination__item--disabled, .van-pagination__item--disabled:active{\r\n        background-color: #646566;\r\n    }\r\n\r\n    .van-pagination--simple .van-pagination__prev::after, .van-pagination--simple .van-pagination__next::after {\r\n        border-width: 0;\r\n    }\r\n\r\n    .van-pagination__page-desc{\r\n        margin: 0 10px\r\n    }\r\n    .page-icon-container{\r\n        color: #fff;\r\n        display:flex;\r\n        justify-content: center;\r\n        align-items: center\r\n    }\r\n</style>\r\n']},media:void 0})}),ba,undefined,false,undefined,!1,Fi,void 0,void 0)},mixins:[_a],props:{typeModuleList:{type:Array,default:()=>[]},currentSelect:{type:Array,default:()=>[]},typeAndPageList:{type:Array,default:()=>[]},typeList:{type:Array,default:()=>[]},showData:{type:Boolean,default:!0},showName:{type:Boolean,default:!1},cfgModuleVO:Object,scene:{type:[String,Number],default:0},functionUrl:String,tipTitleInfoList:{type:Array,default:()=>[]},addAble:{type:Boolean,default:!0},showMoney:{type:Boolean,default:!1},extConfig:{},crudViewSlot:{type:Boolean,default:!1}},data:()=>({parentTitle:"",show:!1,activeIndex:0,currentSelectShow:[],typeSelectShow:[],currentSelectType:"travel",timer:null,prevent:!1,pageList:[],moduleList:[],showTypeSelectView:!1,currentType:{},unAddTypeList:[],typePage:{},typeKey:0,totalAmount:0,moduleShow:!0,isAction:!1,isShow:!1,currentPage:0,showIsSave:!1,indObj:{},testShow:!1}),inheritAttrs:!1,model:{prop:"currentSelect"},computed:{isShowType:()=>!0,nowPage(){return this.currentPage?this.currentPage:1},showMoreBtn(){return this.typeList.find((e=>"otherIncome"===e.type))},showSmallAddBtn(){let e=0;this.currentSelect.forEach((n=>{e+=n.list.length})),this.isShow=e>1;const n=this.typeList.every((e=>{let n=this.currentSelect.find((n=>n.code===e.code));return!!n&&!Ei.exports.isEmpty(n.list)}));return console.log("showSmallAddBtn",this.currentSelect),console.log("allSelected",n),!n},showBigAddBtn(){return this.currentSelect.every((e=>Ei.exports.isEmpty(e.list)))}},created(){const e=this;this.$nextTick().then((()=>{setTimeout((()=>{e.$emit("update:curdEditFunc",this.onOpenTypeEdit)}),0)}))},mounted(){this.parentTitle=document.title,this.onUpdate()},destroyed(){clearTimeout(this.timer)},methods:{showLabour(e){this.showLabours=e},onCell(e,n,t){this.$emit("onPageCell",e,n,this.pageList,this.activeIndex)},onPageParamsChange(e,n){this.$emit("pageParamsChange",e,this.pageList,this.activeIndex)},onSaveAll(){this.$emit("onPageSave",{moduleCode:this.moduleCode,type:this.currentType.type,secondModuleList:this.pageList[this.currentPage-1]}),this.show=!1},onSelect(e){this.isAction=!0;let n=e.code,t=this.typeModuleList.find(((e,t)=>(e.code===n&&(this.typeKey=t),e.code===n)));this.currentType=e,this.typeKey=-1,this.moduleList=t.moduleList,this.pageList=[Ei.exports.cloneDeep(this.moduleList)];let i=Ei.exports.cloneDeep(e);i.list=this.pageList,this.typeAndPageList[0]=i,this.show=!0,this.showTypeSelectView=!1},onSelectTypeThenEdit(){if(this.isAction=!0,1===this.typeList.length)return void this.onSelect(this.typeList[0]);let e=Ei.exports.cloneDeep(this.typeList);this.unAddTypeList=[],e.forEach((e=>{this.currentSelect.find((n=>n.code===e.code&&!Ei.exports.isEmpty(n.list)))||this.unAddTypeList.push(e)}));let n=this.currentSelect.every((e=>Ei.exports.isEmpty(e.list)));Ei.exports.isEmpty(this.unAddTypeList)&&n&&(this.unAddTypeList=e),this.showTypeSelectView=!0,this.testShow=!0},onOpenTypeEdit(e,n,t){t||(t=0),this.currentPage=t+1,this.isAction=!0,this.typeKey=n,this.typePage=e,this.currentType=this.typeList.find((n=>n.code===e.code)),this.moduleList=this.typeModuleList.find((n=>e.code===n.code)),t&&(this.activeIndex=t),this.pageList=Ei.exports.cloneDeep(e.list),this.show=!0},onShow(){this.show=!0},onUpdate(){if(this.showBigAddBtn){let e=Ei.exports.cloneDeep(this.moduleList);this.$emit("update:pageList",[e]),this.currentSelectShow=[]}},confirmSave(){this.onSave(),this.activeIndex=this.indObj.ind,this.currentPage=this.indObj.currentPage,this.showIsSave=!1},cancelSave(){this.onCancle(),this.activeIndex=this.indObj.ind,this.currentPage=this.indObj.currentPage,this.showIsSave=!1},cancelDialog(){this.activeIndex=this.indObj.oldInd-1,this.currentPage=this.indObj.oldInd,this.showIsSave=!1},onChangeActiveIndex(e){let n=this.typePage.list?this.typePage.list[this.activeIndex]:[],t=this.pageList[this.activeIndex];if(n&&Ei.exports.isEqual(n,t))this.activeIndex=e.ind,this.currentPage=e.currentPage;else{if(this.indObj=e,2===this.scene)return this.activeIndex=e.ind,void(this.currentPage=e.currentPage);this.showIsSave=!0}},onCopy(){let e=Ei.exports.cloneDeep(this.pageList[this.activeIndex]);"fictitious"===e[e.length-1].moduleCode&&e.pop(),e.every((e=>"id"!==e.fieldHumpName||(e.fieldValue="",e.fieldValueName="",!1))),this.pageList.push(e),this.activeIndex=this.pageList.length-1,this.currentPage=Ei.exports.cloneDeep(this.pageList.length)},onAdd(e){this.activeIndex=e,this.currentPage=e+1,this.$emit("onPageAdd",this.cfgModuleVO,this.activeIndex)},onDelete(){this.onDeleteFn()},onDeleteFn(){if(this.pageList.length<=1){let e=Ei.exports.cloneDeep(this.moduleList);this.pageList.splice(0,1,e),this.deleteCurrentIndex(),setTimeout((()=>{}),10)}else{this.deleteCurrentIndex(),this.prevent=!0;let e=this.pageList[this.activeIndex+1];if(e){let n=Ei.exports.cloneDeep(e),t=this.pageList[this.activeIndex]||[];t.every((e=>"id"!==e.fieldHumpName||(e.fieldValue="",!1))),this.pageList.splice(this.activeIndex,1,Ei.exports.merge(t,n)),this.pageList.splice(this.activeIndex+1,1),this.$nextTick((()=>{}))}else this.pageList.splice(this.activeIndex,1);if(0===this.activeIndex)return void(this.currentPage=1);if(this.activeIndex>this.pageList.length-1)this.activeIndex=this.pageList.length-1,this.currentPage=Ei.exports.cloneDeep(this.pageList.length);else{let e=Ei.exports.cloneDeep(this.activeIndex);this.activeIndex=e-1,this.currentPage=Ei.exports.cloneDeep(e)}}},deleteCurrentIndex(){let e=this.currentSelect.find((e=>e.code===this.currentType.code))||{list:[]},n=e.list;if(n.length>0){n.splice(this.activeIndex,1);let t=Ei.exports.cloneDeep(this.currentSelect);t[this.typeKey]=e,1===t.length&&0===t[0].list.length?this.$emit("input",[]):this.$emit("input",t)}},onSave(){let e=Ei.exports.cloneDeep(this.pageList[this.activeIndex]),n=Ei.exports.cloneDeep(this.currentSelect),t=n.find((e=>this.currentType.code===e.code));Ei.exports.isEmpty(t)&&(t=Ei.exports.cloneDeep(this.currentType),n.push(t)),Ei.exports.isEmpty(t.list)&&(t.list=[]),t.list[this.activeIndex]=e,this.typePage=t,this.$emit("input",n),this.$toast({message:"保存成功"}),this.$forceUpdate()},onCancle(){this.pageList=Ei.exports.cloneDeep(this.typePage.list)},onBack(){if(2===this.scene)return void(this.show=!1);let e=[],n=[];if((this.typePage.list||[]).forEach(((n,t)=>{n&&Ei.exports.isEqual(n,this.pageList[t])&&e.push(t)})),(this.pageList||[]).forEach(((t,i)=>{-1===e.indexOf(i)&&n.push(i+1)})),this.isShowType){if(n.length>0){let e=n.join(",");this.$dialog.confirm({message:`你还有第[${e}]页未保存,请完善表单！`,confirmButtonText:"继续编辑",cancelButtonText:"放弃保存"}).then((()=>{})).catch((()=>{let e=Ei.exports.cloneDeep(this.typePage),n=(e.list||[]).filter((e=>e));e.list=n||[];let t=Ei.exports.cloneDeep(this.currentSelect);Ei.exports.isEmpty(e.list)||(t[this.typeKey]=e),this.show=!1}))}else this.$emit("update:pageList",[]),this.show=!1;this.$nextTick((()=>{})),this.$emit("onPageSelect",this.currentSelect,this.cfgModuleVO)}else this.show=!1}},watch:{currentSelect:{handler(){if(this.onUpdate(),Array.isArray(this.currentSelect)&&1===this.currentSelect.length){let e=0;(this.currentSelect[0].list||[]).forEach((n=>{const t=this.findFieldWithConfig(n,"isSum",!0)||[];console.log("amtSumList_fieldList:",n),console.log("amtSumList:",t);const i=t.reduce(((e,n)=>e+parseFloat(n.fieldValue||"0")),0);e+=parseFloat(i||"0")})),this.totalAmount=e}},deep:!0},show(){if(this.setNativeTopBack instanceof Function&&this.setNativeTopBack(this.show),this.show){document.title="添加"+this.$attrs.label;let e=this.typeModuleList.find((e=>e.code===this.currentType.code))||{};this.moduleList=Ei.exports.cloneDeep(e.moduleList)||[]}else this.activeIndex=0}}};const Aa=wa;var Ca=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("Cell",e._b({staticStyle:{padding:"0 0.42667rem 0.26667rem 0.42667rem"},scopedSlots:e._u([{key:"title",fn:function(){return[e.showData?t("div",{staticClass:"flex-middle justify-between"},[e.$attrs.required?t("span",{staticClass:"text-danger"},[e._v("*")]):e._e(),e._v(" "),e.showName?t("span",[e._v(e._s(e.$attrs.label))]):t("span"),e._v(" "),!e.showBigAddBtn&&e.showSmallAddBtn&&2!==e.scene?t("i",{staticClass:"iconfont icon-bianji text-info feeBianji",on:{click:e.onSelectTypeThenEdit}}):e._e()]):e._e()]},proxy:!0},{key:"label",fn:function(){return[e.showBigAddBtn&&e.showData&&2!==e.scene?t("div",{staticClass:"jsonvue-btn inner"},[t("div",{staticClass:"flex"},[t("Button",{staticClass:"flex1",attrs:{plain:"",type:"info"},on:{click:e.onSelectTypeThenEdit}},[t("div",{staticClass:"flex flex-center flex-middle"},[t("span",{staticClass:"iconfont icon-jia"}),e._v(" "),t("div",[e._v("添加"+e._s(e.$attrs.label))])])])],1)]):e.showData?t("div",[t("Cell",{staticStyle:{padding:"6px"},scopedSlots:e._u([{key:"title",fn:function(){return[t("div",{directives:[{name:"show",rawName:"v-show",value:e.showMoney,expression:"showMoney"}],staticClass:"prefix"},[e._v("￥"),t("span",{staticClass:"money"},[e._v(e._s(e._f("currency")(e.totalAmount)))])])]},proxy:!0},{key:"default",fn:function(){return[e.isShow?t("Icon",{attrs:{name:e.moduleShow?"arrow-up":"arrow-down"},on:{click:function(n){e.moduleShow=!e.moduleShow}}}):e._e()]},proxy:!0}])}),e._v(" "),e._l(e.currentSelect,(function(n,i){return e.crudViewSlot?e._t("crudView",null,{row:e.currentSelect}):t("div",{directives:[{name:"show",rawName:"v-show",value:e.moduleShow,expression:"moduleShow"}],key:i},[t("div",[t("DefaultView",{attrs:{list:n.list},on:{commonEdit:function(t){return e.onOpenTypeEdit(n,i,arguments[0])}}})],1),e._v(" "),t("div",{directives:[{name:"show",rawName:"v-show",value:e.showMoreBtn&&n.list.length>5,expression:"showMoreBtn&&typePage.list.length>5"}],staticClass:"more-btn",on:{click:function(t){return e.onOpenTypeEdit(n,i,arguments[1])}}},[e._v("查看更多")])])}))],2):e._e(),e._v(" "),e._t("error")]},proxy:!0}],null,!0)},"Cell",e.$attrs,!1)),e._v(" "),t("ActionSheet",{attrs:{actions:e.unAddTypeList,"cancel-text":"取消",description:"请选择类型","get-container":"#app"},on:{select:e.onSelect},model:{value:e.showTypeSelectView,callback:function(n){e.showTypeSelectView=n},expression:"showTypeSelectView"}}),e._v(" "),t("Popup",{staticClass:"jsonvue-popup",style:{width:"100%",height:"100%"},attrs:{position:"right","close-on-click-overlay":!1},model:{value:e.show,callback:function(n){e.show=n},expression:"show"}},[t("MultiSecondPageEdit",{attrs:{isEdit:e.isShowType,currsentPages:e.nowPage,label:e.$attrs.label,"page-list":e.pageList,"module-list":e.moduleList,"active-index":e.activeIndex,addAble:e.addAble,scene:e.scene},on:{onPageCell:e.onCell,pageParamsChange:e.onPageParamsChange,onSave:e.onSave,onAdd:e.onAdd,onDelete:e.onDeleteFn,onBack:e.onBack,onCopy:e.onCopy,changeIndex:e.onChangeActiveIndex,onSaveAll:e.onSaveAll,onCancle:e.onCancle}})],1),e._v(" "),t("van-dialog",{attrs:{title:"提示","show-confirm-button":!0,confirmButtonText:"是",confirmButtonColor:"#f00",cancelButtonText:"否",message:"是否保存当前编辑内容",showCancelButton:!0},on:{confirm:e.confirmSave,cancel:e.cancelSave},model:{value:e.showIsSave,callback:function(n){e.showIsSave=n},expression:"showIsSave"}},[t("div",{attrs:{slot:"title"},slot:"title"},[e._v("\n            提示\n            "),t("div",{staticClass:"dia-closs",on:{click:e.cancelDialog}},[t("Icon",{attrs:{name:"cross"}})],1)])])],1)};Ca._withStripped=!0;const Sa=Li({render:Ca,staticRenderFns:[]},(function(e){e&&e("data-v-7879e090_0",{source:"\n.action-size[data-v-7879e090]{\n    font-size: 10px;\n}\n.prefix[data-v-7879e090]{\n    font-size: 15px;\n    color: #333333;\n    text-align: left;\n}\n.money[data-v-7879e090]{\n    font-size: 20px;\n    font-weight: normal;\n    letter-spacing: 0px;\n    color: #333333;\n}\n.more-btn[data-v-7879e090]{\n    width: 100%;display: flex;flex-direction: row;justify-content: flex-end;padding: 10px;padding-right: 25px;color: #1989fa;font-size: 13px\n}\n.dia-closs[data-v-7879e090]{\n    position: absolute;right: 0.29rem;margin-top: -2rem\n}\n[data-v-7879e090] .van-cell::after{\n  display: none;\n}\n",map:{version:3,sources:["D:\\ZJ_Project\\jsonvue\\src\\FieldCrud\\FieldCrud.vue"],names:[],mappings:";AA2pBA;IACA,eAAA;AACA;AACA;IACA,eAAA;IACA,cAAA;IACA,gBAAA;AACA;AACA;IACA,eAAA;IACA,mBAAA;IACA,mBAAA;IACA,cAAA;AACA;AACA;IACA,WAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,yBAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,cAAA,CAAA;AACA;AACA;IACA,kBAAA,CAAA,cAAA,CAAA;AACA;AACA;EACA,aAAA;AACA",file:"FieldCrud.vue",sourcesContent:['\x3c!--明细页面布局--\x3e\r\n<template>\r\n    <div>\r\n        <Cell v-bind="$attrs" style="padding: 0 0.42667rem 0.26667rem 0.42667rem">\r\n            <template #title>\r\n                <div class="flex-middle justify-between" v-if="showData">\r\n                    <span v-if="$attrs.required" class="text-danger">*</span>\r\n                    <span v-if="showName">{{$attrs.label}}</span>\r\n                    <span v-else></span>\r\n                    <i\r\n                            class="iconfont icon-bianji text-info feeBianji"\r\n                            v-if="!showBigAddBtn&& showSmallAddBtn && scene !==2"\r\n                            @click="onSelectTypeThenEdit"\r\n                    ></i>\r\n                </div>\r\n            </template>\r\n            <template #label>\r\n                <div class="jsonvue-btn inner" v-if="showBigAddBtn&&showData&& scene !==2">\r\n                    <div class="flex" >\r\n                        <Button class="flex1"   plain type="info" @click="onSelectTypeThenEdit">\r\n                            <div class="flex flex-center flex-middle">\r\n                                <span class="iconfont icon-jia"></span>\r\n                                <div>添加{{$attrs.label}}</div>\r\n                            </div>\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div v-else-if="showData">\r\n                    <Cell style="padding: 6px">\r\n                        <template #title>\r\n                            <div v-show="showMoney" class="prefix">￥<span class="money">{{totalAmount|currency}}</span></div>\r\n                        </template>\r\n                        <template #default>\r\n                            <Icon :name="!moduleShow?\'arrow-down\':\'arrow-up\'" @click="moduleShow=!moduleShow" v-if="isShow"></Icon>\r\n                        </template>\r\n                    </Cell>\r\n\r\n                    <div v-if="!crudViewSlot" v-show="moduleShow"  v-for="(typePage,key) in currentSelect" :key="key">\r\n                        <div >\r\n                            <DefaultView\r\n                                    :list="typePage.list"\r\n                                    @commonEdit="onOpenTypeEdit(typePage,key,arguments[0])"\r\n                            ></DefaultView>\r\n                        </div>\r\n                        <div class="more-btn" v-show="showMoreBtn&&typePage.list.length>5" @click="onOpenTypeEdit(typePage,key,arguments[1])">查看更多</div>\r\n                    </div>\r\n                    <slot v-else name="crudView" :row="currentSelect"></slot>\r\n                </div>\r\n                <slot name="error"></slot>\r\n            </template>\r\n        </Cell>\r\n\r\n        <ActionSheet\r\n            v-model="showTypeSelectView"\r\n            :actions="unAddTypeList"\r\n            @select="onSelect"\r\n            cancel-text="取消"\r\n            description="请选择类型"\r\n            get-container="#app"\r\n         ></ActionSheet>\r\n\r\n        <Popup\r\n                v-model="show"\r\n                position="right"\r\n                :style="{ width: \'100%\',height:\'100%\' }"\r\n                class="jsonvue-popup"\r\n                :close-on-click-overlay="false"\r\n        >\r\n                    <MultiSecondPageEdit\r\n                            :isEdit="isShowType"\r\n                            :currsentPages="nowPage"\r\n                            :label="$attrs.label"\r\n                            :page-list="pageList"\r\n                            :module-list="moduleList"\r\n                            :active-index="activeIndex"\r\n                            :addAble="addAble"\r\n                            :scene="scene"\r\n                            @onPageCell="onCell"\r\n                            @pageParamsChange="onPageParamsChange"\r\n                            @onSave="onSave"\r\n                            @onAdd="onAdd"\r\n                            @onDelete="onDeleteFn"\r\n                            @onBack="onBack"\r\n                            @onCopy="onCopy"\r\n                            @changeIndex="onChangeActiveIndex"\r\n                            @onSaveAll="onSaveAll"\r\n                            @onCancle="onCancle"\r\n                    ></MultiSecondPageEdit>\r\n        </Popup>\r\n        <van-dialog\r\n                    v-model="showIsSave"\r\n                    title="提示"\r\n                    :show-confirm-button="true"\r\n                    confirmButtonText="是"\r\n                    confirmButtonColor="#f00"\r\n                    cancelButtonText="否"\r\n                    @confirm="confirmSave"\r\n                    message="是否保存当前编辑内容"\r\n                    @cancel="cancelSave"\r\n                    :showCancelButton="true">\r\n            <div slot="title">\r\n                提示\r\n                <div class="dia-closs" @click="cancelDialog">\r\n                    <Icon name="cross" />\r\n                </div>\r\n            </div>\r\n        </van-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import { cloneDeep, merge ,isEmpty,isEqual,} from "lodash";\r\n    import {Cell,Button,Icon,Popup,NavBar,ActionSheet} from \'vant\'\r\n    import DefaultView from \'./DefaultView.vue\'\r\n    import MultiSecondPageEdit from "./MultiSecondPageEdit.vue";\r\n    import ModuleField from "../ModuleFieldNoCrud.vue";\r\n    import {configMixin} from "../mixins/config.mixin";\r\n\r\n    export default {\r\n        name: "FieldCrud",\r\n        components: {Cell,Button,Icon,Popup,NavBar,ActionSheet\r\n        ,ModuleField,\r\n         DefaultView,\r\n         MultiSecondPageEdit,\r\n        },\r\n        mixins:[configMixin],\r\n        props: {\r\n            //页面模板\r\n            typeModuleList: {\r\n                type:Array,\r\n                default() {\r\n                    return []\r\n                }\r\n            },\r\n            currentSelect: {\r\n                type:Array,\r\n                default:()=>[]\r\n            },\r\n            //有分类的\r\n            typeAndPageList:{\r\n                type:Array,\r\n                default(){\r\n                    return[ ]\r\n                }\r\n            },\r\n            //类型列表\r\n            typeList:{\r\n                type:Array,\r\n                default(){\r\n                    return []\r\n                }\r\n            },\r\n            //不显示数据\r\n            showData:{\r\n                type:Boolean,\r\n                default:true\r\n            },\r\n            showName:{\r\n                type:Boolean,\r\n                default:false\r\n            },\r\n            cfgModuleVO: Object,\r\n            scene:{\r\n                type:[String,Number],\r\n                default:0\r\n            },\r\n            functionUrl:String,\r\n            tipTitleInfoList:{\r\n                type:Array,\r\n                default(){\r\n                    return []\r\n                },\r\n            },\r\n            //是否可以新增或者删除\r\n            addAble:{\r\n                type:Boolean,\r\n                default:true\r\n            },\r\n            //是否显示金额输入框\r\n            showMoney:{\r\n              type:Boolean,\r\n              default:false\r\n            },\r\n            extConfig:{\r\n            },\r\n            //是否自定义显示\r\n            crudViewSlot:{\r\n              type:Boolean,\r\n              default:false\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                parentTitle: "",\r\n                show: false,\r\n                activeIndex: 0,\r\n                currentSelectShow: [],\r\n                typeSelectShow:[],\r\n                // TODO: 2020/2/27 优化类型分配\r\n                currentSelectType:\'travel\',\r\n                timer: null,\r\n                prevent: false, //用来处理删除和提交时候触发不必要的监听\r\n                pageList:[],\r\n                moduleList:[],\r\n                //类型选择\r\n                showTypeSelectView:false,\r\n                //当前类型\r\n                currentType:{},\r\n                unAddTypeList:[],\r\n                //当前编辑的类型及列表数据\r\n                typePage:{},\r\n                //当前类型索引\r\n                typeKey:0,\r\n                //总金额\r\n                totalAmount:0,\r\n                moduleShow:true,\r\n                //用户是否操作过\r\n                isAction:false,\r\n                isShow:false,\r\n                currentPage:0,\r\n                showIsSave:false,\r\n                indObj:{},\r\n                testShow:false,\r\n\r\n            };\r\n        },\r\n        inheritAttrs: false,\r\n        model: {\r\n            prop: "currentSelect"\r\n        },\r\n        computed: {\r\n            // 根据组件类型判断是否显示\r\n            isShowType(){\r\n                return true\r\n            },\r\n            nowPage(){\r\n              return this.currentPage?this.currentPage:1\r\n            },\r\n            showMoreBtn(){\r\n                return this.typeList.find(type=>type.type ===\'otherIncome\')\r\n            },\r\n            showSmallAddBtn(){\r\n                let tag=0\r\n                this.currentSelect.forEach(el=>{\r\n                    tag=tag+el.list.length\r\n                })\r\n                if(tag>1){\r\n                    this.isShow=true\r\n                }else {\r\n                    this.isShow=false\r\n                }\r\n                const allSelected = this.typeList.every(\r\n                    current=>{\r\n                        let temp = this.currentSelect.find(selected=>selected.code === current.code)\r\n                        if (temp){\r\n                            return !isEmpty(temp.list)\r\n                        } else {\r\n                            return false\r\n                        }\r\n                    })\r\n                console.log("showSmallAddBtn",this.currentSelect)\r\n                console.log("allSelected",allSelected)\r\n\r\n                return !allSelected\r\n\r\n            },\r\n            showBigAddBtn(){\r\n              return this.currentSelect.every(item=>{\r\n                return isEmpty(item.list)\r\n              })\r\n            }\r\n        },\r\n        created(){\r\n            //开启时提示\r\n            const self = this;\r\n            this.$nextTick().then(()=>{\r\n              setTimeout(()=>{\r\n                self.$emit(\'update:curdEditFunc\',this.onOpenTypeEdit)\r\n              },0)\r\n            })\r\n        },\r\n        mounted() {\r\n            this.parentTitle = document.title;\r\n            this.onUpdate();\r\n        },\r\n        destroyed() {\r\n            clearTimeout(this.timer);\r\n        },\r\n        methods: {\r\n            showLabour(booleam){\r\n                this.showLabours=booleam\r\n            },\r\n            onCell(value,item,module){\r\n                this.$emit("onPageCell",value,item,this.pageList,this.activeIndex)\r\n            },\r\n            onPageParamsChange(item,module){\r\n                 this.$emit("pageParamsChange",item,this.pageList,this.activeIndex)\r\n            },\r\n            onSaveAll(){\r\n                this.$emit("onPageSave",{\r\n                    moduleCode:this.moduleCode,\r\n                    type:this.currentType.type,\r\n                    secondModuleList:this.pageList[this.currentPage-1]\r\n                })\r\n                this.show = false\r\n            },\r\n            //选择对应类型\r\n            onSelect(type){\r\n                this.isAction = true\r\n                let feeTypeCode = type.code\r\n                let typeKey = -1\r\n                let typePageModule = this.typeModuleList.find((item,index)=>{\r\n                    if(item.code === feeTypeCode){\r\n                        this.typeKey = index\r\n                    }\r\n                    return item.code === feeTypeCode\r\n                })\r\n                this.currentType=type\r\n                this.typeKey = typeKey\r\n                this.moduleList = typePageModule.moduleList\r\n                this.pageList = [cloneDeep(this.moduleList)]\r\n\r\n                let typePage = cloneDeep(type)\r\n                typePage.list = this.pageList\r\n                this.typeAndPageList[0] = typePage\r\n\r\n                this.show = true\r\n                this.showTypeSelectView = false\r\n            },\r\n            //选择对应类型明细后进入对应编辑页\r\n            onSelectTypeThenEdit(){\r\n                this.isAction = true\r\n                if (this.typeList.length === 1){\r\n                    this.onSelect(this.typeList[0])\r\n                    return\r\n                }\r\n                let allTypeList = cloneDeep(this.typeList)\r\n                this.unAddTypeList = []\r\n                allTypeList.forEach(type=>{\r\n                   let alreadyAdd =  this.currentSelect.find(current=>current.code === type.code && !isEmpty(current.list))\r\n                   if (!alreadyAdd){\r\n                       this.unAddTypeList.push(type)\r\n                   }\r\n                })\r\n                let allListEmpty = this.currentSelect.every(current=>{return isEmpty(current.list)})\r\n                if(isEmpty(this.unAddTypeList)&&allListEmpty){\r\n                    this.unAddTypeList = allTypeList\r\n                }\r\n                 this.showTypeSelectView = true\r\n                 this.testShow = true\r\n            },\r\n            //显示指定类型的编辑页面\r\n            onOpenTypeEdit(typePage,key,index){\r\n                if(!index){\r\n                    index=0\r\n                }\r\n              //修改分页页码\r\n              this.currentPage=index+1\r\n              this.isAction = true\r\n              this.typeKey = key\r\n              this.typePage = typePage\r\n              this.currentType = this.typeList.find(type=>type.code === typePage.code)\r\n              this.moduleList = this.typeModuleList.find(module=>{\r\n                  return typePage.code === module.code\r\n              })\r\n\r\n              if (index){\r\n                  this.activeIndex = index\r\n              }\r\n\r\n              this.pageList = cloneDeep(typePage.list)\r\n              this.show = true\r\n            },\r\n            onShow(){\r\n                this.show = true\r\n            },\r\n            onUpdate() {\r\n                if (this.showBigAddBtn) {\r\n                    let moduleList = cloneDeep(this.moduleList);\r\n                    this.$emit("update:pageList", [moduleList]);\r\n                    this.currentSelectShow = [];\r\n                }\r\n            },\r\n            // 保存\r\n            confirmSave(){\r\n                this.onSave()\r\n                this.activeIndex = this.indObj.ind\r\n                this.currentPage=this.indObj.currentPage\r\n                this.showIsSave=false\r\n            },\r\n            // 不保存\r\n            cancelSave(){\r\n                this.onCancle()\r\n                this.activeIndex = this.indObj.ind\r\n                this.currentPage=this.indObj.currentPage\r\n                this.showIsSave=false\r\n            },\r\n            // 取消\r\n            cancelDialog(){\r\n                this.activeIndex = this.indObj.oldInd-1\r\n                this.currentPage=this.indObj.oldInd\r\n                this.showIsSave=false\r\n            },\r\n            onChangeActiveIndex(index){\r\n                // 解决初始化创建时候该数据不存在的情况。\r\n                let pre = this.typePage.list?this.typePage.list[this.activeIndex]:[]\r\n                let now = this.pageList[this.activeIndex]\r\n                if (pre && isEqual(pre,now)){\r\n                    this.activeIndex = index.ind\r\n                    this.currentPage=index.currentPage\r\n                }else{\r\n                    this.indObj=index\r\n                    if(this.scene===2){\r\n                        // 屏蔽详情页面出现弹框检验\r\n                        this.activeIndex = index.ind\r\n                        this.currentPage=index.currentPage\r\n                        return\r\n                    }\r\n                    this.showIsSave=true\r\n                }\r\n\r\n\r\n            },\r\n            //拷贝\r\n            onCopy() {\r\n                let moduleList = cloneDeep(this.pageList[this.activeIndex]);\r\n                //复制时候清除id，防止一起复制了\r\n                if(moduleList[moduleList.length-1].moduleCode===\'fictitious\'){\r\n                    moduleList.pop()\r\n                }\r\n                moduleList.every(item => {\r\n                    if (item.fieldHumpName === "id") {\r\n                        item.fieldValue = "";\r\n                        item.fieldValueName = "";\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                });\r\n                this.pageList.push(moduleList);\r\n                this.activeIndex = this.pageList.length - 1;\r\n                this.currentPage=cloneDeep( this.pageList.length )\r\n            },\r\n            //新增\r\n            onAdd(index) {\r\n                this.activeIndex = index;\r\n                this.currentPage=index+1\r\n                this.$emit("onPageAdd", this.cfgModuleVO, this.activeIndex);\r\n            },\r\n            /**\r\n             * 删除\r\n             */\r\n            onDelete() {\r\n                    this.onDeleteFn();\r\n            },\r\n            //删除\r\n            onDeleteFn() {\r\n                if (this.pageList.length <= 1) {\r\n                    let moduleList = cloneDeep(this.moduleList);\r\n                    this.pageList.splice(0, 1, moduleList);\r\n                    //this.$emit("input", []);\r\n                    this.deleteCurrentIndex()\r\n                    setTimeout(() => {\r\n                        //this.$refs["fieldCell0"][0].errors.clear();\r\n                    }, 10);\r\n                } else {\r\n                    this.deleteCurrentIndex()\r\n                    this.prevent = true;\r\n\r\n                    // this.pageList.splice(this.activeIndex, 1);\r\n\r\n                    let item = this.pageList[this.activeIndex + 1];\r\n\r\n                    //把后一页往前移动\r\n                    if (item) {\r\n                      let cItem = cloneDeep(item);\r\n                      let mItem = this.pageList[this.activeIndex] || [];\r\n                      mItem.every(item => {\r\n                        if (item.fieldHumpName === "id") {\r\n                          item.fieldValue = "";\r\n                          return false;\r\n                        }\r\n                        return true;\r\n                      });\r\n                      this.pageList.splice(this.activeIndex, 1, merge(mItem, cItem));\r\n                      this.pageList.splice(this.activeIndex + 1, 1);\r\n\r\n                      this.$nextTick(() => {\r\n                          //错误信息处理\r\n                        //this.$refs["fieldCell" + this.activeIndex][0].errors.clear();\r\n                      });\r\n                    } else {\r\n                      this.pageList.splice(this.activeIndex, 1);\r\n                    }\r\n                    if(this.activeIndex===0){\r\n                        this.currentPage=1\r\n                        return\r\n                    }\r\n                    if (this.activeIndex > this.pageList.length - 1) {\r\n                        this.activeIndex = this.pageList.length - 1;\r\n                        this.currentPage=cloneDeep( this.pageList.length )\r\n                    }else {\r\n                        let len=cloneDeep(this.activeIndex)\r\n                        this.activeIndex=len-1\r\n                        this.currentPage=cloneDeep(len)\r\n                    }\r\n                }\r\n            },\r\n            deleteCurrentIndex(){\r\n                //找到当前页\r\n                let tempList = this.currentSelect.find(current=>{\r\n                    return current.code === this.currentType.code\r\n                }) || {list:[]}\r\n\r\n\r\n                let list = tempList.list\r\n                let length = list.length;\r\n\r\n                //删除正在编辑的页面\r\n                if (length > 0) {\r\n                    list.splice(this.activeIndex, 1);\r\n                    let typeAndPageList = cloneDeep(this.currentSelect)\r\n                    typeAndPageList[this.typeKey] = tempList\r\n                    if (typeAndPageList.length === 1 && typeAndPageList[0].list.length === 0){\r\n                      this.$emit(\'input\',[])\r\n                    } else {\r\n                      this.$emit(\'input\',typeAndPageList)\r\n                    }\r\n                }\r\n            },\r\n            onSave() {\r\n                let currentModuleList = cloneDeep(this.pageList[this.activeIndex]);\r\n                let typeAndPageList = cloneDeep(this.currentSelect)\r\n\r\n                let item = typeAndPageList.find(typeAndPage=>{\r\n                    return this.currentType.code === typeAndPage.code\r\n                })\r\n                if(isEmpty(item)){\r\n                    item = cloneDeep(this.currentType)\r\n                    typeAndPageList.push(item)\r\n                }\r\n                if(isEmpty(item.list)){\r\n                    item.list=[]\r\n                }\r\n                item.list[this.activeIndex] = currentModuleList;\r\n                this.typePage = item\r\n                this.$emit("input", typeAndPageList);\r\n                this.$toast({message: "保存成功"});\r\n                this.$forceUpdate()\r\n\r\n              // this.$nextTick(()=>{\r\n                // })\r\n            },\r\n            //取消保存\r\n            onCancle(){\r\n                this.pageList=cloneDeep(this.typePage.list)\r\n            },\r\n            onBack() {\r\n                if(this.scene===2){\r\n                    this.show = false;\r\n                    return\r\n                }\r\n                //判断是否都保存拦截\r\n                let savedPages = [] ;\r\n                let unSavedPages = [];\r\n                (this.typePage.list || []).forEach((item, index) => {\r\n                    if (item && isEqual(item,this.pageList[index])) {\r\n                        savedPages.push(index);\r\n                    }\r\n                });\r\n                (this.pageList || []).forEach((item, index) => {\r\n                    if (savedPages.indexOf(index) === -1) {\r\n                        unSavedPages.push(index + 1);\r\n                    }\r\n                });\r\n                // 显示，不需要页面编辑直接返回\r\n                if(!this.isShowType){\r\n                    this.show = false;\r\n                    return\r\n                }\r\n                if (unSavedPages.length > 0) {\r\n                    let message = unSavedPages.join(",");\r\n                    this.$dialog\r\n                        .confirm({\r\n                            message: `你还有第[${message}]页未保存,请完善表单！`,\r\n                            confirmButtonText: "继续编辑",\r\n                            cancelButtonText: "放弃保存"\r\n                        })\r\n                        .then(() => {})\r\n                        .catch(() => {\r\n                            let typePage = cloneDeep(this.typePage);\r\n                            let currentSavedList = (typePage.list || []).filter(item => {\r\n                                return item;\r\n                            });\r\n                            typePage.list = currentSavedList || []\r\n\r\n                            let currentSelect = cloneDeep(this.currentSelect)\r\n                            if(isEmpty(typePage.list)){\r\n\r\n                            }else{\r\n                                currentSelect[this.typeKey] = typePage\r\n\r\n                            }\r\n                            this.show = false;\r\n\r\n\r\n                        });\r\n                } else {\r\n                    this.$emit("update:pageList", []);\r\n                    this.show = false;\r\n                }\r\n                this.$nextTick(() => {\r\n\r\n                    // TODO: 2020/1/13  清楚上次的错误信息\r\n\r\n                    // this.$refs["fieldCell" + this.activeIndex][0].errors.clear();\r\n                });\r\n                this.$emit("onPageSelect", this.currentSelect, this.cfgModuleVO);\r\n            },\r\n        },\r\n\r\n        watch: {\r\n            currentSelect: {\r\n                handler() {\r\n                    this.onUpdate();\r\n                    //计算统计金额\r\n                    if(Array.isArray( this.currentSelect ) && this.currentSelect.length === 1) {\r\n                        let totalAmount = 0\r\n                        const typeAndPageInfo = this.currentSelect[0]\r\n                        const pageList = typeAndPageInfo.list  || []\r\n                        pageList.forEach(fieldList=>{\r\n                          const amtSumList = this.findFieldWithConfig(fieldList,\'isSum\',true) || []\r\n                          console.log(\'amtSumList_fieldList:\',fieldList)\r\n                          console.log(\'amtSumList:\',amtSumList)\r\n                          const amt = amtSumList.reduce((total,item)=>{\r\n                            return total+parseFloat(item.fieldValue || "0")\r\n                          },0)\r\n                          totalAmount = totalAmount + parseFloat(amt || \'0\')\r\n                        })\r\n                        this.totalAmount = totalAmount\r\n                    }\r\n                },\r\n                deep: true\r\n            },\r\n            /**\r\n             * 添加/编辑/查看页面\r\n             * */\r\n            show() {\r\n                if (this.setNativeTopBack instanceof Function) {\r\n                  this.setNativeTopBack(this.show)\r\n                }\r\n                if (this.show) {\r\n                    //this.activeIndex = 0;\r\n                    document.title = "添加" + this.$attrs.label;\r\n                    let typeModule = this.typeModuleList.find(typeModuleItem=>{\r\n                        return typeModuleItem.code === this.currentType.code\r\n                    }) || {}\r\n                    this.moduleList = cloneDeep(typeModule.moduleList) || []\r\n                }else{\r\n                    this.activeIndex = 0\r\n                }\r\n            },\r\n        },\r\n\r\n    }\r\n<\/script>\r\n<style scoped>\r\n    .action-size{\r\n        font-size: 10px;\r\n    }\r\n    .prefix{\r\n        font-size: 15px;\r\n        color: #333333;\r\n        text-align: left;\r\n    }\r\n    .money{\r\n        font-size: 20px;\r\n        font-weight: normal;\r\n        letter-spacing: 0px;\r\n        color: #333333;\r\n    }\r\n    .more-btn{\r\n        width: 100%;display: flex;flex-direction: row;justify-content: flex-end;padding: 10px;padding-right: 25px;color: #1989fa;font-size: 13px\r\n    }\r\n    .dia-closs{\r\n        position: absolute;right: 0.29rem;margin-top: -2rem\r\n    }\r\n    >>> .van-cell::after{\r\n      display: none;\r\n    }\r\n</style>\r\n']},media:void 0})}),Aa,"data-v-7879e090",false,undefined,!1,Fi,void 0,void 0);Sa.install=function(e){e.component(Sa.name,Sa)};var ka={name:"ModuleFieldReactive",components:{FieldSelect:Yi,FieldText:Mi,FieldCheckBoxSelect:la,FieldDate:Xi,FieldAddress:ra,Field:m},props:{fieldList:{type:Array,default:()=>[]},moduleCode:{type:String,default:""},scene:{type:[Number,String],default:1},isSecondPage:{type:Boolean,default:!1},useModel:{type:Boolean,default:!1}},data:()=>({moduleCreating:!0,moduleObj:{}}),methods:{onSinglePageSave(e,n,t){this.$emit("onSinglePageSave",e,n,t)},onSinglePageRemove(e,n,t){this.$emit("onSinglePageRemove",e,n,t)},onPageCell(e,n,t,i){this.$emit("onPageCell",e,n,t,i)},onPageBlur(e,n,t,i){this.$emit("onPageBlur",e,n,t,i)},onPageParamsChange(e,n,t){this.$emit("pageParamsChange",e,n,t)},onCell(e,n){this.$emit("onCell",e,n)},onBlur(e,n){this.$emit("onBlur",e,n)},onParamsChange(e){this.$emit("paramsChange",e)},onPageSave(e){this.$emit("onPageSave",e)},onAddProject(e,n){this.$emit("onAddProject",e,n)},validate(){return this.$refs.validOb.validate()}},created(){console.log("moduleField","created"),this.$nextTick((()=>{console.log("moduleField","nextTick"),setTimeout((()=>{console.log("moduleField","timeout0");const e={};this.fieldList.forEach((n=>{n.fieldName&&(e[n.fieldName]=n.fieldValue)})),this.moduleObj=e}),0)}))},mounted(){console.log("moduleField","mounted")},watch:{moduleObj:{handler(){this.moduleCreating?this.moduleCreating=!1:this.$emit("input",this.moduleObj)},deep:!0}}};const ja=ka;var Ta=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ValidationObserver",{ref:"validOb",attrs:{tag:"div"}},e._l(e.fieldList,(function(n,i){return t("div",{key:i},[n.formSlot?t("ValidationProvider",{attrs:{name:n.label,rules:{required:n.required}},scopedSlots:e._u([{key:"default",fn:function(i){var a=i.errors;return[t("Field",{attrs:{label:n.label,required:n.required,"error-message":a[0],"error-message-align":"right","input-align":"right"}},[t("template",{slot:"input"},[e._t(n.fieldName,null,{row:n})],2)],2)]}}],null,!0)}):n.hidden||"text"!==n.fieldType&&"textarea"!==n.fieldType&&"int"!==n.fieldType&&"amount"!==n.fieldType&&"number"!==n.fieldType?n.hidden||"select"!==n.fieldType?n.hidden||"address"!==n.fieldType?n.hidden||"date"!==n.fieldType?n.hidden||"tree"!==n.fieldType?e._e():t("FieldCheckBoxSelect",{attrs:{label:n.label||n.fieldName,scene:e.scene,"config-name":n.config.configName,"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:2!==e.scene?"请选择"+(n.label||n.fieldName):"","post-url":n.postUrl,"post-data":n.postData,disabled:n.disabled,"add-able":"true"===n.config.addAble||!1,isSecondPage:e.isSecondPage,remark:n.remark,"is-end":e.fieldList.length===i+1},on:{onTree:function(t){return e.onCell(t,n)},paramsChange:function(t){return e.onParamsChange(n)}},model:{value:e.moduleObj[n.fieldName],callback:function(t){e.$set(e.moduleObj,n.fieldName,t)},expression:"moduleObj[item.fieldName]"}}):t("FieldDate",{attrs:{scene:e.scene,label:n.label||n.fieldName,"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:1===e.scene?"请输入"+(n.label||n.fieldName):"","min-date":n.minDate?n.minDate:"1900-01-01","max-date":n.maxDate,disabled:n.disabled,getType:n.configName?n.configName:"YYYY-MM-DD",remark:n.remark,"is-end":e.fieldList.length===i+1},on:{onDatetime:function(t){return e.onCell(t,n)}},model:{value:e.moduleObj[n.fieldName],callback:function(t){e.$set(e.moduleObj,n.fieldName,t)},expression:"moduleObj[item.fieldName]"}}):t("FieldAddress",{attrs:{"validate-rules":2!==e.scene?{required:n.required}:{},required:n.required&&2!==e.scene,label:n.label||n.fieldName,placeholder:1===e.scene?"请选择"+(n.label||n.fieldName):"",disabled:n.disabled,remark:n.remark,"is-end":e.fieldList.length===i+1,"select-level":n.selectLevel,"show-province-name":n.showProvinceName},on:{onCell:function(t){return e.onCell(t,n)}},model:{value:e.moduleObj[n.fieldName],callback:function(t){e.$set(e.moduleObj,n.fieldName,t)},expression:"moduleObj[item.fieldName]"}}):t("FieldSelect",{attrs:{scene:e.scene,"get-type":n.getType,label:n.label||n.fieldName,"option-codes":n.optionCodes||[],"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:2!==e.scene?"请选择":"","post-url":n.postUrl,"post-data":n.postData,disabled:n.disabled,remark:n.remark,"is-end":e.fieldList.length===i+1},on:{paramsChange:function(t){return e.onParamsChange(n)},onSelect:function(t){return e.onCell(t,n)}},model:{value:e.moduleObj[n.fieldName],callback:function(t){e.$set(e.moduleObj,n.fieldName,t)},expression:"moduleObj[item.fieldName]"}}):t("FieldText",{attrs:{"validate-rules":2!==e.scene?Object.assign({},{required:n.required,ismoney:"amount"===n.fieldType&&(n.fieldValue,n.label||n.fieldName)},n.validateRules):{},readonly:n.disabled||2===e.scene,required:n.required&&2!==e.scene,placeholder:n.placeholder||(2!==e.scene?"请输入"+(n.label||n.fieldName):""),label:n.label||n.fieldName,type:n.textFieldType||"text",fieldType:n.fieldType||"text",maxlength:n.maxLength,"show-word-limit":"textarea"===n.fieldType&&2!==e.scene,autosize:"textarea"===n.fieldType,"error-message-align":"right","input-align":"right",remark:n.remark,"is-end":e.fieldList.length===i+1},on:{onText:function(t){return e.onCell(t,n)}},model:{value:e.moduleObj[n.fieldName],callback:function(t){e.$set(e.moduleObj,n.fieldName,t)},expression:"moduleObj[item.fieldName]"}})],1)})),0)};Ta._withStripped=!0;const Ea=Li({render:Ta,staticRenderFns:[]},undefined,ja,undefined,false,undefined,!1,void 0,void 0,void 0);var Pa={name:"ModuleField",components:{FieldSelect:Yi,FieldText:Mi,FieldCheckBoxSelect:la,FieldDate:Xi,FieldAddress:ra,Field:m,FieldCrud:Sa},props:{fieldList:{type:Array,default:()=>[]},moduleCode:{type:String,default:""},scene:{type:[Number,String],default:1},isSecondPage:{type:Boolean,default:!1},showDivider:{type:Boolean,default:!1}},data:()=>({moduleCreating:!0,moduleObj:{}}),methods:{onSinglePageSave(e,n,t){this.$emit("onSinglePageSave",e,n,t)},onSinglePageRemove(e,n,t){this.$emit("onSinglePageRemove",e,n,t)},onPageCell(e,n,t,i){this.$emit("onPageCell",e,n,t,i)},onPageBlur(e,n,t,i){this.$emit("onPageBlur",e,n,t,i)},onPageParamsChange(e,n,t){this.$emit("pageParamsChange",e,n,t)},onCell(e,n,t){this.$emit("onCell",e,n,t)},onBlur(e,n){this.$emit("onBlur",e,n)},onParamsChange(e){this.$emit("paramsChange",e)},onPageSave(e){this.$emit("onPageSave",e)},onAddProject(e,n){this.$emit("onAddProject",e,n)},validate(){return this.$refs.validOb.validate()},getValidOb(){return this.$refs.validOb}}};const La=Pa;var Ba=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ValidationObserver",{ref:"validOb",attrs:{tag:"div"}},e._l(e.fieldList,(function(n,i){return t("div",{key:i},[n.formSlot?t("ValidationProvider",{attrs:{name:n.label,rules:{required:n.required}},scopedSlots:e._u([{key:"default",fn:function(i){var a=i.errors;return[t("Field",e._b({class:["top"===n.labelAlign?"jsonvue-flex-column":""],attrs:{label:n.label,required:n.required,"error-message":a[0],"error-message-align":"right","input-align":n.inputAlign?n.inputAlign:"right"}},"Field",n,!1),[t("template",{slot:"input"},[e._t(n.fieldName,null,{row:n})],2)],2)]}}],null,!0)}):n.hidden||"text"!==n.fieldType&&"textarea"!==n.fieldType&&"int"!==n.fieldType&&"digit"!==n.fieldType&&"amount"!==n.fieldType&&"number"!==n.fieldType?n.hidden||"select"!==n.fieldType?n.hidden||"address"!==n.fieldType?n.hidden||"date"!==n.fieldType&&"datetime"!==n.fieldType&&"year-month"!==n.fieldType&&"time"!==n.fieldType?n.hidden||"tree"!==n.fieldType?n.hidden||"fieldCrud"!==n.fieldType?e._e():t("ValidationProvider",{attrs:{name:n.label,rules:{required:n.required}},scopedSlots:e._u([{key:"default",fn:function(i){var a=i.errors;return[t("FieldCrud",{attrs:{"validate-rules":{required:!0},required:n.required,label:n.label,"type-module-list":n.typeSecondModuleList,"type-and-page-list":n.typeSecondEditPageList,"type-list":n.typeList,extConfig:n.config.extConfig,scene:e.scene,showData:n.showData,showName:n.config.showName,addAble:"false"!==n.config.addAble,"show-money":n.showMoney,tipTitleInfoList:n.fieldValue&&n.fieldValue.length>0&&n.fieldValue[0].travelStatisticsList||[],"crud-view-slot":n.crudViewSlot||!1,curdEditFunc:n.crudEditFunc},on:{onPageSave:e.onPageSave,onPageCell:e.onPageCell,pageParamsChange:e.onPageParamsChange,"update:curdEditFunc":function(t){return e.$set(n,"crudEditFunc",t)},"update:curd-edit-func":function(t){return e.$set(n,"crudEditFunc",t)}},model:{value:n.typeSecondShowPageList,callback:function(t){e.$set(n,"typeSecondShowPageList",t)},expression:"item.typeSecondShowPageList"}},[t("template",{slot:"crudView"},[e._t("crudView_"+n.fieldName,null,{row:n})],2)],2),e._v(" "),t("div",{staticClass:"van-field__error-message",class:"left"===n.errorMessageAlign?"text-left":"text-right",staticStyle:{"padding-right":"10px"},attrs:{slot:"error"},slot:"error"},[e._v("\n        "+e._s(a[0])+"\n      ")])]}}],null,!0)}):t("FieldCheckBoxSelect",e._b({attrs:{label:n.label||n.fieldName,scene:e.scene,"config-name":n.config.configName,"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:2!==e.scene?"请选择"+(n.label||n.fieldName):"","post-url":n.postUrl,"post-data":n.postData,disabled:n.disabled,"add-able":"true"===n.config.addAble||!1,isSecondPage:e.isSecondPage,tip:n.tip,"is-end":e.fieldList.length===i+1,"use-item-slot":n.useItemSlot,"refresh-when-click":n.refreshWhenClick,"error-message-align":n.errorMessageAlign?n.errorMessageAlign:"right"},on:{onTree:function(t){return e.onCell(t,n)},paramsChange:function(t){return e.onParamsChange(n)}},scopedSlots:e._u([{key:"itemSlot",fn:function(t){return[e._t("checkBoxSelectItem_"+n.fieldName,null,{row:t.row})]}}],null,!0),model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}},"FieldCheckBoxSelect",n,!1)):t("FieldDate",e._b({attrs:{scene:e.scene,label:n.label||n.fieldName,"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:1===e.scene?"请输入"+(n.label||n.fieldName):"","min-date":n.minDate?n.minDate:"1900-01-01","max-date":n.maxDate,disabled:n.disabled,displayFormat:n.displayFormat&&"YYYY-MM-DD",tip:n.tip,"is-end":e.fieldList.length===i+1,"field-type":n.fieldType,"error-message-align":n.errorMessageAlign?n.errorMessageAlign:"right"},on:{onDatetime:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}},"FieldDate",n,!1)):t("FieldAddress",e._b({attrs:{"validate-rules":2!==e.scene?{required:n.required}:{},required:n.required&&2!==e.scene,label:n.label||n.fieldName,placeholder:1===e.scene?"请选择"+(n.label||n.fieldName):"",disabled:n.disabled,tip:n.tip,"is-end":e.fieldList.length===i+1,"select-level":n.selectLevel,"show-province-name":n.showProvinceName,"error-message-align":n.errorMessageAlign?n.errorMessageAlign:"right"},on:{onCell:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}},"FieldAddress",n,!1)):t("FieldSelect",e._b({attrs:{scene:e.scene,"get-type":n.getType,label:n.label||n.fieldName,"option-codes":n.optionCodes||[],"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:2!==e.scene?"请选择":"","post-url":n.postUrl,"post-data":n.postData,disabled:n.disabled,tip:n.tip,"is-end":e.fieldList.length===i+1,"error-message-align":n.errorMessageAlign?n.errorMessageAlign:"right"},on:{paramsChange:function(t){return e.onParamsChange(n)},onSelect:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}},"FieldSelect",n,!1)):t("FieldText",e._b({attrs:{"validate-rules":2!==e.scene?Object.assign({},{required:n.required,ismoney:"amount"===n.fieldType&&(n.fieldValue,n.label||n.fieldName)},n.validateRules):{},readonly:n.disabled||2===e.scene,required:n.required&&2!==e.scene,placeholder:n.placeholder||(2!==e.scene?"请输入"+(n.label||n.fieldName):""),label:n.label||n.fieldName,type:n.textFieldType||"text",fieldType:n.fieldType||"text",maxlength:n.maxLength,"show-word-limit":"textarea"===n.fieldType&&2!==e.scene,autosize:"textarea"===n.fieldType,"error-message-align":n.errorMessageAlign?n.errorMessageAlign:"right",tip:n.tip,"is-end":e.fieldList.length===i+1,precision:n.precision},on:{onText:function(t){return e.onCell(arguments[0],n,arguments[1])}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}},"FieldText",n,!1)),e._v(" "),e.showDivider?t("van-divider",{staticClass:"jsonvue-field__divider"}):e._e()],1)})),0)};Ba._withStripped=!0;const Da=Li({render:Ba,staticRenderFns:[]},undefined,La,undefined,false,undefined,!1,void 0,void 0,void 0);var $a={name:"ModuleGroup",components:{ModuleField:Da},props:{outerStyle:{type:Object,default:()=>{}},scene:{type:[String,Number],default:1},status:String,isSecondPage:{type:Boolean,default:!1},itemSingleSelect:{type:String,default:"0"},addNewParams:{type:Object},moduleList:{type:Array}},methods:{onCell(e,n,t){this.$emit("onCell",e,n,t)},onBlur(e,n,t){this.$emit("onBlur",e,n,t)},onParamsChange(e){this.$emit("paramsChange",e)},onAddProject(e,n,t){this.$emit("onAddProject",e,n,t)},onPageSave(e){this.$emit("onPageSave",e)},onPageCell(e,n,t,i,a){this.$emit("onPageCell",e,n,t,i,a)},onPageBlur(e,n,t,i,a){this.$emit("onPageBlur",e,n,t,i,a)},onPageParamsChange(e,n,t,i){this.$emit("pageParamsChange",e,n,t,i)},onSinglePageSave(e,n,t,i){this.$emit("onSinglePageSave",e,n,t,i)},onSinglePageRemove(e,n,t,i){this.$emit("onSinglePageRemove",e,n,t,i)},onSelectTypeThenEdit(e,n){let t=n.currentTarget.parentNode.parentNode.querySelector(".icon-bianji");void 0!==t&&t.click()},getAddBtnName:e=>e.moduleCode+"AddBtn"}};const Fa=$a;var Ia=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",e._l(e.moduleList,(function(n,i){return t("div",{directives:[{name:"show",rawName:"v-show",value:!0!==n.hidden,expression:"module.hidden !== true"}],key:i,staticClass:"module-container",style:e.outerStyle},[t("div",{staticClass:"name title-bold",staticStyle:{"font-size":"16px"}},[e._v(e._s(n.moduleName))]),e._v(" "),t("ModuleField",{attrs:{scene:e.scene,"field-list":n.fieldList,status:e.status,isSecondPage:e.isSecondPage,itemSingleSelect:e.itemSingleSelect,addNewParams:e.addNewParams,moduleCode:n.moduleCode},on:{onCell:function(t){return e.onCell(arguments[0],arguments[1],n)},paramsChange:function(t){return e.onParamsChange(arguments[0],n)},onAddProject:function(t){return e.onAddProject(arguments[0],arguments[1],n)},onPageSave:e.onPageSave,onBlur:function(t){return e.onBlur(arguments[0],arguments[1],n)},onPageCell:function(t){return e.onPageCell(arguments[0],arguments[1],arguments[2],arguments[3],n)},onPageBlur:function(t){return e.onPageBlur(arguments[0],arguments[1],arguments[2],arguments[3],n)},pageParamsChange:function(t){return e.onPageParamsChange(arguments[0],arguments[1],arguments[2],n)},onSinglePageSave:function(t){return e.onSinglePageSave(arguments[0],arguments[1],arguments[2],n)},onSinglePageRemove:function(t){return e.onSinglePageRemove(arguments[0],arguments[1],arguments[2],n)}}})],1)})),0)};Ia._withStripped=!0;const Oa=Li({render:Ia,staticRenderFns:[]},(function(e){e&&e("data-v-49db4999_0",{source:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",map:{version:3,sources:[],names:[],mappings:"",file:"ModuleGroup.vue"},media:void 0})}),Fa,"data-v-49db4999",false,undefined,!1,Fi,void 0,void 0);e.prototype.$axios=gi,e.prototype.$post=gi.post,e.prototype.$get=gi.get,e.prototype.$dayjs=yi;var Ra={install:function(e){e.prototype.$axios=gi,e.prototype.$post=gi.post,e.prototype.$get=gi.get,function(e){const n=new e({methods:{emit(e,...n){this.$emit(e,...n)},on(e,n){this.$on(e,n)},off(e,n){this.$off(e,n)}}});e.prototype.$bus=n}(e),Ti(e),Mi.install(e),Yi.install(e),Gi.install(e),Xi.install(e),ra.install(e),la.install(e),Sa.install(e),e.component(xa.name,xa),e.component(Ea.name,Ea),e.component(Da.name,Da),e.component(Oa.name,Oa)},FieldText:Mi,FieldSelect:Yi,FieldUpload:Gi,FieldDate:Xi,FieldAddress:ra,FieldCheckBoxSelect:la,FieldCrud:Sa,initValidate:function(e,n){e("required",q),e("email",D),e("min",z),e("max",I),e("max_value",R),e("positive",(e=>e>=0)),e("idcard",M),e("mobiles",V),e("ismoney",U),n({zh_CN:{messages:{alpha:"{_field_}只能包含字母字符",alpha_dash:"{_field_}能够包含字母数字字符、破折号和下划线",alpha_num:"{_field_}只能包含字母数字字符",alpha_spaces:"{_field_}只能包含字母字符和空格",between:"{_field_}必须在{min}与{max}之间",confirmed:"{_field_}不能和{target}匹配",digits:"{_field_}必须是数字，且精确到{length}位数",dimensions:"{_field_}必须在{width}像素与{height}像素之间",email:"{_field_}不是一个有效的邮箱",excluded:"{_field_}不是一个有效值",ext:"{_field_}不是一个有效的文件",image:"{_field_}不是一张有效的图片",oneOf:"{_field_}不是一个有效值",integer:"{_field_}必须是整数",length:"{_field_}长度必须为{length}",max:"{_field_}不能超过{length}个字符",max_value:"{_field_}必须小于或等于{max}",mimes:"{_field_}不是一个有效的文件类型",min:"{_field_}必须至少有{length}个字符",min_value:"{_field_}必须大于或等于{min}",numeric:"{_field_}只能包含数字字符",regex:"{_field_}格式无效",required:"{_field_}不能为空",required_if:"{_field_}是必须的",size:"{_field_}必须小于{size}KB",positive:"{_field_}不能为负数"},names:{email:"邮箱地址",password:"密码",money:"金额"},fields:{password:{}}}}),n("zh_CN")}};export{Ra as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5lc20uanMiLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy92ZWUtdmFsaWRhdGUvZGlzdC9ydWxlcy5qcyIsIi4uL3NyYy91dGlscy92ZXJpZmljYXRpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvRm9ybURhdGEuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMiLCIuLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9oYXMtZmxhZy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdXBwb3J0cy1jb2xvci9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvbm9kZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvZm9sbG93LXJlZGlyZWN0cy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9mb2xsb3ctcmVkaXJlY3RzL2RlYnVnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvaHR0cC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb21iaW5lZC1zdHJlYW0vbGliL2NvbWJpbmVkX3N0cmVhbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9kZWxheWVkLXN0cmVhbS9saWIvZGVsYXllZF9zdHJlYW0uanMiLCIuLi9ub2RlX21vZHVsZXMvbWltZS10eXBlcy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9taW1lLWRiL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L2xpYi9hc3luYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvZGVmZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvYXN5bmNraXQvbGliL2Fib3J0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L2xpYi9pdGVyYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L2xpYi9zdGF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9saWIvdGVybWluYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9wYXJhbGxlbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9zZXJpYWxPcmRlcmVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2FzeW5ja2l0L3NlcmlhbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9hc3luY2tpdC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL3BvcHVsYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9lbnYvRm9ybURhdGEuanMiLCIuLi9ub2RlX21vZHVsZXMvZm9ybS1kYXRhL2xpYi9mb3JtX2RhdGEuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIi4uL3NyYy91dGlscy9odHRwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RheWpzL2RheWpzLm1pbi5qcyIsIi4uL3NyYy91dGlscy92dWUtYnVzLmpzIiwiLi4vc3JjL3V0aWxzL2ZpbHRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbG9kYXNoLmpzIiwiLi4vc3JjL0ZpZWxkVGlwLnZ1ZSIsIi4uL25vZGVfbW9kdWxlcy92dWUtcnVudGltZS1oZWxwZXJzL2Rpc3Qvbm9ybWFsaXplLWNvbXBvbmVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy92dWUtcnVudGltZS1oZWxwZXJzL2Rpc3QvaW5qZWN0LXN0eWxlL2Jyb3dzZXIuanMiLCIuLi9zcmMvbWl4aW5zL2NvbW1vbkxhYmVsTWl4aW4uanMiLCIuLi9zcmMvRmllbGRUZXh0L0ZpZWxkVGV4dC52dWUiLCIuLi9zcmMvRmllbGRUZXh0L2luZGV4LmpzIiwiLi4vc3JjL0ZpZWxkU2VsZWN0dC9GaWVsZFNlbGVjdC52dWUiLCIuLi9zcmMvRmllbGRTZWxlY3R0L2luZGV4LmpzIiwiLi4vc3JjL0ZpZWxkVXBsb2FkL0ZpZWxkVXBsb2FkLnZ1ZSIsIi4uL3NyYy9GaWVsZFVwbG9hZC9pbmRleC5qcyIsIi4uL3NyYy9GaWVsZERhdGUvRmllbGREYXRlLnZ1ZSIsIi4uL3NyYy9GaWVsZERhdGUvaW5kZXguanMiLCIuLi9zcmMvdXRpbHMvY2l0eXMuanMiLCIuLi9zcmMvRmllbGRBZHJlc3MvRG9tZXN0aWNDaXR5LnZ1ZSIsIi4uL3NyYy9GaWVsZEFkcmVzcy9GaWVsZEFkZHJlc3MudnVlIiwiLi4vc3JjL0ZpZWxkQWRyZXNzL2luZGV4LmpzIiwiLi4vc3JjL0ZpZWxkQ2hlY2tCb3hTZWxlY3QvRmllbGRDaGVja0JveFNlbGVjdC52dWUiLCIuLi9zcmMvRmllbGRDaGVja0JveFNlbGVjdC9pbmRleC5qcyIsIi4uL3NyYy9GaWVsZENydWQvRGVmYXVsdFZpZXcudnVlIiwiLi4vc3JjL01vZHVsZUZpZWxkTm9DcnVkLnZ1ZSIsIi4uL3NyYy9GaWVsZENydWQvTXVsdGlTZWNvbmRQYWdlRWRpdC52dWUiLCIuLi9zcmMvbWl4aW5zL2NvbmZpZy5taXhpbi5qcyIsIi4uL3NyYy9GaWVsZENydWQvRmllbGRDcnVkLnZ1ZSIsIi4uL3NyYy9GaWVsZENydWQvaW5kZXguanMiLCIuLi9zcmMvTW9kdWxlRmllbGRSZWFjdGl2ZS52dWUiLCIuLi9zcmMvTW9kdWxlRmllbGQudnVlIiwiLi4vc3JjL01vZHVsZUdyb3VwLnZ1ZSIsIi4uL3NyYy9pbmRleC5qcyIsIi4uL3NyYy91dGlscy92ZWUtdmFsaWRhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gICogdmVlLXZhbGlkYXRlIHYzLjQuMTVcbiAgKiAoYykgMjAyMyBBYmRlbHJhaG1hbiBBd2FkXG4gICogQGxpY2Vuc2UgTUlUXG4gICovXG4vKipcclxuICogU29tZSBBbHBoYSBSZWdleCBoZWxwZXJzLlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2hyaXNvL3ZhbGlkYXRvci5qcy9ibG9iL21hc3Rlci9zcmMvbGliL2FscGhhLmpzXHJcbiAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1taXNsZWFkaW5nLWNoYXJhY3Rlci1jbGFzcyAqL1xyXG52YXIgYWxwaGEkMSA9IHtcclxuICAgIGVuOiAvXltBLVpdKiQvaSxcclxuICAgIGNzOiAvXltBLVrDgcSMxI7DicSaw43Fh8OTxZjFoMWkw5rFrsOdxb1dKiQvaSxcclxuICAgIGRhOiAvXltBLVrDhsOYw4VdKiQvaSxcclxuICAgIGRlOiAvXltBLVrDhMOWw5zDn10qJC9pLFxyXG4gICAgZXM6IC9eW0EtWsOBw4nDjcORw5PDmsOcXSokL2ksXHJcbiAgICBmYTogL15b2KHYotij2KTYpdim2KfYqNip2KrYq9is2K3Yrtiv2LDYsdiy2LPYtNi12LbYt9i42LnYutmB2YLZg9mE2YXZhtmH2YjZidmK2YvZjNmN2Y7Zj9mQ2ZHZktmw2b7amNqv2obaqduMXSokLyxcclxuICAgIGZyOiAvXltBLVrDgMOCw4bDh8OJw4jDisOLw4/DjsOUxZLDmcObw5zFuF0qJC9pLFxyXG4gICAgaXQ6IC9eW0EtWlxceEMwLVxceEZGXSokL2ksXHJcbiAgICBsdDogL15bQS1axITEjMSYxJbErsWgxbLFqsW9XSokL2ksXHJcbiAgICBubDogL15bQS1aw4nDi8OPw5PDlsOcXSokL2ksXHJcbiAgICBodTogL15bQS1aw4HDicONw5PDlsWQw5rDnMWwXSokL2ksXHJcbiAgICBwbDogL15bQS1axITEhsSYxZrFgcWDw5PFu8W5XSokL2ksXHJcbiAgICBwdDogL15bQS1aw4PDgcOAw4LDh8OJw4rDjcOVw5PDlMOaw5xdKiQvaSxcclxuICAgIHJvOiAvXltBLVrEgsOCw47FnsWiXSokL2ksXHJcbiAgICBydTogL15b0JAt0K/QgV0qJC9pLFxyXG4gICAgc2s6IC9eW0EtWsOBw4TEjMSOw4nDjcS5xL3Fh8OTxZTFoMWkw5rDncW9XSokL2ksXHJcbiAgICBzcjogL15bQS1axIzEhsW9xaDEkF0qJC9pLFxyXG4gICAgc3Y6IC9eW0EtWsOFw4TDll0qJC9pLFxyXG4gICAgdHI6IC9eW0EtWsOHxJ7EsMSxw5bFnsOcXSokL2ksXHJcbiAgICB1azogL15b0JAt0KnQrNCu0K/QhNCG0IfSkF0qJC9pLFxyXG4gICAgYXI6IC9eW9ih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsF0qJC8sXHJcbiAgICBhejogL15bQS1aw4fGj8SexLDEscOWxZ7DnF0qJC9pLFxyXG4gICAgZWw6IC9eW86RLc+OXSokL2ksXHJcbiAgICBqYTogL15bQS1aXFx1MzAwMC1cXHUzMDNGXFx1MzA0MC1cXHUzMDlGXFx1MzBBMC1cXHUzMEZGXFx1RkYwMC1cXHVGRkVGXFx1NEUwMC1cXHU5RkFGXSokL2ksXHJcbiAgICBoZTogL15bQS1aXFx1MDVEMC1cXHUwNUVBJ10qJC9pXHJcbn07XHJcbnZhciBhbHBoYVNwYWNlcyA9IHtcclxuICAgIGVuOiAvXltBLVpcXHNdKiQvaSxcclxuICAgIGNzOiAvXltBLVrDgcSMxI7DicSaw43Fh8OTxZjFoMWkw5rFrsOdxb1cXHNdKiQvaSxcclxuICAgIGRhOiAvXltBLVrDhsOYw4VcXHNdKiQvaSxcclxuICAgIGRlOiAvXltBLVrDhMOWw5zDn1xcc10qJC9pLFxyXG4gICAgZXM6IC9eW0EtWsOBw4nDjcORw5PDmsOcXFxzXSokL2ksXHJcbiAgICBmYTogL15b2KHYotij2KTYpdim2KfYqNip2KrYq9is2K3Yrtiv2LDYsdiy2LPYtNi12LbYt9i42LnYutmB2YLZg9mE2YXZhtmH2YjZidmK2YvZjNmN2Y7Zj9mQ2ZHZktmw2b7amNqv2obaqduMXSokLyxcclxuICAgIGZyOiAvXltBLVrDgMOCw4bDh8OJw4jDisOLw4/DjsOUxZLDmcObw5zFuFxcc10qJC9pLFxyXG4gICAgaXQ6IC9eW0EtWlxceEMwLVxceEZGXFxzXSokL2ksXHJcbiAgICBsdDogL15bQS1axITEjMSYxJbErsWgxbLFqsW9XFxzXSokL2ksXHJcbiAgICBubDogL15bQS1aw4nDi8OPw5PDlsOcXFxzXSokL2ksXHJcbiAgICBodTogL15bQS1aw4HDicONw5PDlsWQw5rDnMWwXFxzXSokL2ksXHJcbiAgICBwbDogL15bQS1axITEhsSYxZrFgcWDw5PFu8W5XFxzXSokL2ksXHJcbiAgICBwdDogL15bQS1aw4PDgcOAw4LDh8OJw4rDjcOVw5PDlMOaw5xcXHNdKiQvaSxcclxuICAgIHJvOiAvXltBLVrEgsOCw47FnsWiXFxzXSokL2ksXHJcbiAgICBydTogL15b0JAt0K/QgVxcc10qJC9pLFxyXG4gICAgc2s6IC9eW0EtWsOBw4TEjMSOw4nDjcS5xL3Fh8OTxZTFoMWkw5rDncW9XFxzXSokL2ksXHJcbiAgICBzcjogL15bQS1axIzEhsW9xaDEkFxcc10qJC9pLFxyXG4gICAgc3Y6IC9eW0EtWsOFw4TDllxcc10qJC9pLFxyXG4gICAgdHI6IC9eW0EtWsOHxJ7EsMSxw5bFnsOcXFxzXSokL2ksXHJcbiAgICB1azogL15b0JAt0KnQrNCu0K/QhNCG0IfSkFxcc10qJC9pLFxyXG4gICAgYXI6IC9eW9ih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsFxcc10qJC8sXHJcbiAgICBhejogL15bQS1aw4fGj8SexLDEscOWxZ7DnFxcc10qJC9pLFxyXG4gICAgZWw6IC9eW86RLc+OXFxzXSokL2ksXHJcbiAgICBqYTogL15bQS1aXFx1MzAwMC1cXHUzMDNGXFx1MzA0MC1cXHUzMDlGXFx1MzBBMC1cXHUzMEZGXFx1RkYwMC1cXHVGRkVGXFx1NEUwMC1cXHU5RkFGXFxzXSokL2ksXHJcbiAgICBoZTogL15bQS1aXFx1MDVEMC1cXHUwNUVBJ1xcc10qJC9pXHJcbn07XHJcbnZhciBhbHBoYW51bWVyaWMgPSB7XHJcbiAgICBlbjogL15bMC05QS1aXSokL2ksXHJcbiAgICBjczogL15bMC05QS1aw4HEjMSOw4nEmsONxYfDk8WYxaDFpMOaxa7DncW9XSokL2ksXHJcbiAgICBkYTogL15bMC05QS1aw4bDmMOFXSQvaSxcclxuICAgIGRlOiAvXlswLTlBLVrDhMOWw5zDn10qJC9pLFxyXG4gICAgZXM6IC9eWzAtOUEtWsOBw4nDjcORw5PDmsOcXSokL2ksXHJcbiAgICBmYTogL15b2KHYotij2KTYpdim2KfYqNip2KrYq9is2K3Yrtiv2LDYsdiy2LPYtNi12LbYt9i42LnYutmB2YLZg9mE2YXZhtmH2YjZidmK2YvZjNmN2Y7Zj9mQ2ZHZktmw2b7amNqv2obaqduMXSokLyxcclxuICAgIGZyOiAvXlswLTlBLVrDgMOCw4bDh8OJw4jDisOLw4/DjsOUxZLDmcObw5zFuF0qJC9pLFxyXG4gICAgaXQ6IC9eWzAtOUEtWlxceEMwLVxceEZGXSokL2ksXHJcbiAgICBsdDogL15bMC05QS1axITEjMSYxJbErsWgxbLFqsW9XSokL2ksXHJcbiAgICBodTogL15bMC05QS1aw4HDicONw5PDlsWQw5rDnMWwXSokL2ksXHJcbiAgICBubDogL15bMC05QS1aw4nDi8OPw5PDlsOcXSokL2ksXHJcbiAgICBwbDogL15bMC05QS1axITEhsSYxZrFgcWDw5PFu8W5XSokL2ksXHJcbiAgICBwdDogL15bMC05QS1aw4PDgcOAw4LDh8OJw4rDjcOVw5PDlMOaw5xdKiQvaSxcclxuICAgIHJvOiAvXlswLTlBLVrEgsOCw47FnsWiXSokL2ksXHJcbiAgICBydTogL15bMC050JAt0K/QgV0qJC9pLFxyXG4gICAgc2s6IC9eWzAtOUEtWsOBw4TEjMSOw4nDjcS5xL3Fh8OTxZTFoMWkw5rDncW9XSokL2ksXHJcbiAgICBzcjogL15bMC05QS1axIzEhsW9xaDEkF0qJC9pLFxyXG4gICAgc3Y6IC9eWzAtOUEtWsOFw4TDll0qJC9pLFxyXG4gICAgdHI6IC9eWzAtOUEtWsOHxJ7EsMSxw5bFnsOcXSokL2ksXHJcbiAgICB1azogL15bMC050JAt0KnQrNCu0K/QhNCG0IfSkF0qJC9pLFxyXG4gICAgYXI6IC9eW9mg2aHZotmj2aTZpdmm2afZqNmpMC052KHYotij2KTYpdim2KfYqNip2KrYq9is2K3Yrtiv2LDYsdiy2LPYtNi12LbYt9i42LnYutmB2YLZg9mE2YXZhtmH2YjZidmK2YvZjNmN2Y7Zj9mQ2ZHZktmwXSokLyxcclxuICAgIGF6OiAvXlswLTlBLVrDh8aPxJ7EsMSxw5bFnsOcXSokL2ksXHJcbiAgICBlbDogL15bMC05zpEtz45dKiQvaSxcclxuICAgIGphOiAvXlswLTlBLVpcXHUzMDAwLVxcdTMwM0ZcXHUzMDQwLVxcdTMwOUZcXHUzMEEwLVxcdTMwRkZcXHVGRjAwLVxcdUZGRUZcXHU0RTAwLVxcdTlGQUZdKiQvaSxcclxuICAgIGhlOiAvXlswLTlBLVpcXHUwNUQwLVxcdTA1RUEnXSokL2lcclxufTtcclxudmFyIGFscGhhRGFzaCA9IHtcclxuICAgIGVuOiAvXlswLTlBLVpfLV0qJC9pLFxyXG4gICAgY3M6IC9eWzAtOUEtWsOBxIzEjsOJxJrDjcWHw5PFmMWgxaTDmsWuw53FvV8tXSokL2ksXHJcbiAgICBkYTogL15bMC05QS1aw4bDmMOFXy1dKiQvaSxcclxuICAgIGRlOiAvXlswLTlBLVrDhMOWw5zDn18tXSokL2ksXHJcbiAgICBlczogL15bMC05QS1aw4HDicONw5HDk8Oaw5xfLV0qJC9pLFxyXG4gICAgZmE6IC9eW9ih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsNm+2pjar9qG2qnbjF0qJC8sXHJcbiAgICBmcjogL15bMC05QS1aw4DDgsOGw4fDicOIw4rDi8OPw47DlMWSw5nDm8OcxbhfLV0qJC9pLFxyXG4gICAgaXQ6IC9eWzAtOUEtWlxceEMwLVxceEZGXy1dKiQvaSxcclxuICAgIGx0OiAvXlswLTlBLVrEhMSMxJjElsSuxaDFssWqxb1fLV0qJC9pLFxyXG4gICAgbmw6IC9eWzAtOUEtWsOJw4vDj8OTw5bDnF8tXSokL2ksXHJcbiAgICBodTogL15bMC05QS1aw4HDicONw5PDlsWQw5rDnMWwXy1dKiQvaSxcclxuICAgIHBsOiAvXlswLTlBLVrEhMSGxJjFmsWBxYPDk8W7xblfLV0qJC9pLFxyXG4gICAgcHQ6IC9eWzAtOUEtWsODw4HDgMOCw4fDicOKw43DlcOTw5TDmsOcXy1dKiQvaSxcclxuICAgIHJvOiAvXlswLTlBLVrEgsOCw47FnsWiXy1dKiQvaSxcclxuICAgIHJ1OiAvXlswLTnQkC3Qr9CBXy1dKiQvaSxcclxuICAgIHNrOiAvXlswLTlBLVrDgcOExIzEjsOJw43EucS9xYfDk8WUxaDFpMOaw53FvV8tXSokL2ksXHJcbiAgICBzcjogL15bMC05QS1axIzEhsW9xaDEkF8tXSokL2ksXHJcbiAgICBzdjogL15bMC05QS1aw4XDhMOWXy1dKiQvaSxcclxuICAgIHRyOiAvXlswLTlBLVrDh8SexLDEscOWxZ7DnF8tXSokL2ksXHJcbiAgICB1azogL15bMC050JAt0KnQrNCu0K/QhNCG0IfSkF8tXSokL2ksXHJcbiAgICBhcjogL15b2aDZodmi2aPZpNml2abZp9mo2akwLTnYodii2KPYpNil2KbYp9io2KnYqtir2KzYrdiu2K/YsNix2LLYs9i02LXYtti32LjYudi62YHZgtmD2YTZhdmG2YfZiNmJ2YrZi9mM2Y3ZjtmP2ZDZkdmS2bBfLV0qJC8sXHJcbiAgICBhejogL15bMC05QS1aw4fGj8SexLDEscOWxZ7DnF8tXSokL2ksXHJcbiAgICBlbDogL15bMC05zpEtz45fLV0qJC9pLFxyXG4gICAgamE6IC9eWzAtOUEtWlxcdTMwMDAtXFx1MzAzRlxcdTMwNDAtXFx1MzA5RlxcdTMwQTAtXFx1MzBGRlxcdUZGMDAtXFx1RkZFRlxcdTRFMDAtXFx1OUZBRl8tXSokL2ksXHJcbiAgICBoZTogL15bMC05QS1aXFx1MDVEMC1cXHUwNUVBJ18tXSokL2lcclxufTtcblxudmFyIHZhbGlkYXRlJHIgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgX2IgPSAoX2EgPT09IHZvaWQgMCA/IHt9IDogX2EpLmxvY2FsZSwgbG9jYWxlID0gX2IgPT09IHZvaWQgMCA/ICcnIDogX2I7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUuZXZlcnkoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gdmFsaWRhdGUkcih2YWwsIHsgbG9jYWxlOiBsb2NhbGUgfSk7IH0pO1xyXG4gICAgfVxyXG4gICAgLy8gTWF0Y2ggYXQgbGVhc3Qgb25lIGxvY2FsZS5cclxuICAgIGlmICghbG9jYWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGFscGhhJDEpLnNvbWUoZnVuY3Rpb24gKGxvYykgeyByZXR1cm4gYWxwaGEkMVtsb2NdLnRlc3QodmFsdWUpOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiAoYWxwaGEkMVtsb2NhbGVdIHx8IGFscGhhJDEuZW4pLnRlc3QodmFsdWUpO1xyXG59O1xyXG52YXIgcGFyYW1zJGsgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2xvY2FsZSdcclxuICAgIH1cclxuXTtcclxudmFyIGFscGhhID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJHIsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRrXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRxID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIF9iID0gKF9hID09PSB2b2lkIDAgPyB7fSA6IF9hKS5sb2NhbGUsIGxvY2FsZSA9IF9iID09PSB2b2lkIDAgPyAnJyA6IF9iO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJHEodmFsLCB7IGxvY2FsZTogbG9jYWxlIH0pOyB9KTtcclxuICAgIH1cclxuICAgIC8vIE1hdGNoIGF0IGxlYXN0IG9uZSBsb2NhbGUuXHJcbiAgICBpZiAoIWxvY2FsZSkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhbHBoYURhc2gpLnNvbWUoZnVuY3Rpb24gKGxvYykgeyByZXR1cm4gYWxwaGFEYXNoW2xvY10udGVzdCh2YWx1ZSk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChhbHBoYURhc2hbbG9jYWxlXSB8fCBhbHBoYURhc2guZW4pLnRlc3QodmFsdWUpO1xyXG59O1xyXG52YXIgcGFyYW1zJGogPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2xvY2FsZSdcclxuICAgIH1cclxuXTtcclxudmFyIGFscGhhX2Rhc2ggPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkcSxcclxuICAgIHBhcmFtczogcGFyYW1zJGpcclxufTtcblxudmFyIHZhbGlkYXRlJHAgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgX2IgPSAoX2EgPT09IHZvaWQgMCA/IHt9IDogX2EpLmxvY2FsZSwgbG9jYWxlID0gX2IgPT09IHZvaWQgMCA/ICcnIDogX2I7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUuZXZlcnkoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gdmFsaWRhdGUkcCh2YWwsIHsgbG9jYWxlOiBsb2NhbGUgfSk7IH0pO1xyXG4gICAgfVxyXG4gICAgLy8gTWF0Y2ggYXQgbGVhc3Qgb25lIGxvY2FsZS5cclxuICAgIGlmICghbG9jYWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGFscGhhbnVtZXJpYykuc29tZShmdW5jdGlvbiAobG9jKSB7IHJldHVybiBhbHBoYW51bWVyaWNbbG9jXS50ZXN0KHZhbHVlKTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGFscGhhbnVtZXJpY1tsb2NhbGVdIHx8IGFscGhhbnVtZXJpYy5lbikudGVzdCh2YWx1ZSk7XHJcbn07XHJcbnZhciBwYXJhbXMkaSA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbG9jYWxlJ1xyXG4gICAgfVxyXG5dO1xyXG52YXIgYWxwaGFfbnVtID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJHAsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRpXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRvID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIF9iID0gKF9hID09PSB2b2lkIDAgPyB7fSA6IF9hKS5sb2NhbGUsIGxvY2FsZSA9IF9iID09PSB2b2lkIDAgPyAnJyA6IF9iO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJG8odmFsLCB7IGxvY2FsZTogbG9jYWxlIH0pOyB9KTtcclxuICAgIH1cclxuICAgIC8vIE1hdGNoIGF0IGxlYXN0IG9uZSBsb2NhbGUuXHJcbiAgICBpZiAoIWxvY2FsZSkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhbHBoYVNwYWNlcykuc29tZShmdW5jdGlvbiAobG9jKSB7IHJldHVybiBhbHBoYVNwYWNlc1tsb2NdLnRlc3QodmFsdWUpOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiAoYWxwaGFTcGFjZXNbbG9jYWxlXSB8fCBhbHBoYVNwYWNlcy5lbikudGVzdCh2YWx1ZSk7XHJcbn07XHJcbnZhciBwYXJhbXMkaCA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbG9jYWxlJ1xyXG4gICAgfVxyXG5dO1xyXG52YXIgYWxwaGFfc3BhY2VzID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJG8sXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRoXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRuID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIG1pbiA9IF9iLm1pbiwgbWF4ID0gX2IubWF4O1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuICEhdmFsaWRhdGUkbih2YWwsIHsgbWluOiBtaW4sIG1heDogbWF4IH0pOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBOdW1iZXIobWluKSA8PSB2YWx1ZSAmJiBOdW1iZXIobWF4KSA+PSB2YWx1ZTtcclxufTtcclxudmFyIHBhcmFtcyRnID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdtaW4nXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdtYXgnXHJcbiAgICB9XHJcbl07XHJcbnZhciBiZXR3ZWVuID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJG4sXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRnXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRtID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIHRhcmdldCA9IF9hLnRhcmdldDtcclxuICAgIHJldHVybiBTdHJpbmcodmFsdWUpID09PSBTdHJpbmcodGFyZ2V0KTtcclxufTtcclxudmFyIHBhcmFtcyRmID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICd0YXJnZXQnLFxyXG4gICAgICAgIGlzVGFyZ2V0OiB0cnVlXHJcbiAgICB9XHJcbl07XHJcbnZhciBjb25maXJtZWQgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkbSxcclxuICAgIHBhcmFtczogcGFyYW1zJGZcclxufTtcblxudmFyIHZhbGlkYXRlJGwgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgbGVuZ3RoID0gX2EubGVuZ3RoO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJGwodmFsLCB7IGxlbmd0aDogbGVuZ3RoIH0pOyB9KTtcclxuICAgIH1cclxuICAgIHZhciBzdHJWYWwgPSBTdHJpbmcodmFsdWUpO1xyXG4gICAgcmV0dXJuIC9eWzAtOV0qJC8udGVzdChzdHJWYWwpICYmIHN0clZhbC5sZW5ndGggPT09IGxlbmd0aDtcclxufTtcclxudmFyIHBhcmFtcyRlID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdsZW5ndGgnLFxyXG4gICAgICAgIGNhc3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbl07XHJcbnZhciBkaWdpdHMgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkbCxcclxuICAgIHBhcmFtczogcGFyYW1zJGVcclxufTtcblxudmFyIHZhbGlkYXRlSW1hZ2UgPSBmdW5jdGlvbiAoZmlsZSwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgdmFyIFVSTCA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTDtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGltYWdlLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKGZhbHNlKTsgfTtcclxuICAgICAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKGltYWdlLndpZHRoID09PSB3aWR0aCAmJiBpbWFnZS5oZWlnaHQgPT09IGhlaWdodCk7IH07XHJcbiAgICAgICAgaW1hZ2Uuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgdmFsaWRhdGUkayA9IGZ1bmN0aW9uIChmaWxlcywgX2EpIHtcclxuICAgIHZhciB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XHJcbiAgICB2YXIgbGlzdCA9IFtdO1xyXG4gICAgZmlsZXMgPSBBcnJheS5pc0FycmF5KGZpbGVzKSA/IGZpbGVzIDogW2ZpbGVzXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyBpZiBmaWxlIGlzIG5vdCBhbiBpbWFnZSwgcmVqZWN0LlxyXG4gICAgICAgIGlmICghL1xcLihqcGd8c3ZnfGpwZWd8cG5nfGJtcHxnaWYpJC9pLnRlc3QoZmlsZXNbaV0ubmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpc3QucHVzaChmaWxlc1tpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwobGlzdC5tYXAoZnVuY3Rpb24gKGZpbGUpIHsgcmV0dXJuIHZhbGlkYXRlSW1hZ2UoZmlsZSwgd2lkdGgsIGhlaWdodCk7IH0pKS50aGVuKGZ1bmN0aW9uICh2YWx1ZXMpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWVzLmV2ZXJ5KGZ1bmN0aW9uICh2KSB7IHJldHVybiB2OyB9KTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgcGFyYW1zJGQgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ3dpZHRoJyxcclxuICAgICAgICBjYXN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnaGVpZ2h0JyxcclxuICAgICAgICBjYXN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5dO1xyXG52YXIgZGltZW5zaW9ucyA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRrLFxyXG4gICAgcGFyYW1zOiBwYXJhbXMkZFxyXG59O1xuXG52YXIgdmFsaWRhdGUkaiA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBtdWx0aXBsZSA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkubXVsdGlwbGU7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIHZhciByZSA9IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcXSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC87XHJcbiAgICBpZiAobXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXHJcbiAgICAgICAgICAgIC5zcGxpdCgnLCcpXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGVtYWlsU3RyKSB7IHJldHVybiBlbWFpbFN0ci50cmltKCk7IH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHJlLnRlc3QoU3RyaW5nKHZhbCkpOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZS50ZXN0KFN0cmluZyh2YWx1ZSkpO1xyXG59O1xyXG52YXIgcGFyYW1zJGMgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ211bHRpcGxlJyxcclxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxyXG4gICAgfVxyXG5dO1xyXG52YXIgZW1haWwgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkaixcclxuICAgIHBhcmFtczogcGFyYW1zJGNcclxufTtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGlzRW1wdHlBcnJheShhcnIpIHtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFycikgJiYgYXJyLmxlbmd0aCA9PT0gMDtcclxufVxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xyXG5mdW5jdGlvbiBpc0NhbGxhYmxlKGZuKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nO1xyXG59XG5cbmZ1bmN0aW9uIGluY2x1ZGVzKGNvbGxlY3Rpb24sIGl0ZW0pIHtcclxuICAgIHJldHVybiBjb2xsZWN0aW9uLmluZGV4T2YoaXRlbSkgIT09IC0xO1xyXG59XHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhbiBhcnJheS1saWtlIG9iamVjdCB0byBhcnJheSwgcHJvdmlkZXMgYSBzaW1wbGUgcG9seWZpbGwgZm9yIEFycmF5LmZyb21cclxuICovXHJcbmZ1bmN0aW9uIHRvQXJyYXkoYXJyYXlMaWtlKSB7XHJcbiAgICBpZiAoaXNDYWxsYWJsZShBcnJheS5mcm9tKSkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGFycmF5TGlrZSk7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgcmV0dXJuIF9jb3B5QXJyYXkoYXJyYXlMaWtlKTtcclxufVxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBfY29weUFycmF5KGFycmF5TGlrZSkge1xyXG4gICAgdmFyIGFycmF5ID0gW107XHJcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXlMaWtlLmxlbmd0aDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhcnJheS5wdXNoKGFycmF5TGlrZVtpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbn1cblxudmFyIHZhbGlkYXRlJGkgPSBmdW5jdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5ldmVyeShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWxpZGF0ZSRpKHZhbCwgb3B0aW9ucyk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvQXJyYXkob3B0aW9ucykuc29tZShmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgIHJldHVybiBpdGVtID09IHZhbHVlO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBvbmVPZiA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRpXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRoID0gZnVuY3Rpb24gKHZhbHVlLCBhcmdzKSB7XHJcbiAgICByZXR1cm4gIXZhbGlkYXRlJGkodmFsdWUsIGFyZ3MpO1xyXG59O1xyXG52YXIgZXhjbHVkZWQgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkaFxyXG59O1xuXG52YXIgdmFsaWRhdGUkZyA9IGZ1bmN0aW9uIChmaWxlcywgZXh0ZW5zaW9ucykge1xyXG4gICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIi4oXCIgKyBleHRlbnNpb25zLmpvaW4oJ3wnKSArIFwiKSRcIiwgJ2knKTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGZpbGVzKSkge1xyXG4gICAgICAgIHJldHVybiBmaWxlcy5ldmVyeShmdW5jdGlvbiAoZmlsZSkgeyByZXR1cm4gcmVnZXgudGVzdChmaWxlLm5hbWUpOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZWdleC50ZXN0KGZpbGVzLm5hbWUpO1xyXG59O1xyXG52YXIgZXh0ID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGdcclxufTtcblxudmFyIHZhbGlkYXRlJGYgPSBmdW5jdGlvbiAoZmlsZXMpIHtcclxuICAgIHZhciByZWdleCA9IC9cXC4oanBnfHN2Z3xqcGVnfHBuZ3xibXB8Z2lmfHdlYnApJC9pO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmlsZXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZpbGVzLmV2ZXJ5KGZ1bmN0aW9uIChmaWxlKSB7IHJldHVybiByZWdleC50ZXN0KGZpbGUubmFtZSk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QoZmlsZXMubmFtZSk7XHJcbn07XHJcbnZhciBpbWFnZSA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRmXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUuZXZlcnkoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gL14tP1swLTldKyQvLnRlc3QoU3RyaW5nKHZhbCkpOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiAvXi0/WzAtOV0rJC8udGVzdChTdHJpbmcodmFsdWUpKTtcclxufTtcclxudmFyIGludGVnZXIgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkZVxyXG59O1xuXG52YXIgdmFsaWRhdGUkZCA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBvdGhlciA9IF9hLm90aGVyO1xyXG4gICAgcmV0dXJuIHZhbHVlID09PSBvdGhlcjtcclxufTtcclxudmFyIHBhcmFtcyRiID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdvdGhlcidcclxuICAgIH1cclxuXTtcclxudmFyIGlzID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGQsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRiXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRjID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIG90aGVyID0gX2Eub3RoZXI7XHJcbiAgICByZXR1cm4gdmFsdWUgIT09IG90aGVyO1xyXG59O1xyXG52YXIgcGFyYW1zJGEgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ290aGVyJ1xyXG4gICAgfVxyXG5dO1xyXG52YXIgaXNfbm90ID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGMsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRhXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRiID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIGxlbmd0aCA9IF9hLmxlbmd0aDtcclxuICAgIGlmIChpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHZhbHVlID0gdG9BcnJheSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcclxuICAgIH1cclxuICAgIGlmICghdmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFsdWUgPSB0b0FycmF5KHZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPT09IGxlbmd0aDtcclxufTtcclxudmFyIHBhcmFtcyQ5ID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdsZW5ndGgnLFxyXG4gICAgICAgIGNhc3Q6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gTnVtYmVyKHZhbHVlKTsgfVxyXG4gICAgfVxyXG5dO1xyXG52YXIgbGVuZ3RoID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGIsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyQ5XHJcbn07XG5cbnZhciB2YWxpZGF0ZSRhID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIGxlbmd0aCA9IF9hLmxlbmd0aDtcclxuICAgIGlmIChpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gbGVuZ3RoID49IDA7XHJcbiAgICB9XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUuZXZlcnkoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gdmFsaWRhdGUkYSh2YWwsIHsgbGVuZ3RoOiBsZW5ndGggfSk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSkubGVuZ3RoIDw9IGxlbmd0aDtcclxufTtcclxudmFyIHBhcmFtcyQ4ID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdsZW5ndGgnLFxyXG4gICAgICAgIGNhc3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbl07XHJcbnZhciBtYXggPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkYSxcclxuICAgIHBhcmFtczogcGFyYW1zJDhcclxufTtcblxudmFyIHZhbGlkYXRlJDkgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgbWF4ID0gX2EubWF4O1xyXG4gICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJycpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID4gMCAmJiB2YWx1ZS5ldmVyeShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWxpZGF0ZSQ5KHZhbCwgeyBtYXg6IG1heCB9KTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTnVtYmVyKHZhbHVlKSA8PSBtYXg7XHJcbn07XHJcbnZhciBwYXJhbXMkNyA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbWF4JyxcclxuICAgICAgICBjYXN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5dO1xyXG52YXIgbWF4X3ZhbHVlID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJDksXHJcbiAgICBwYXJhbXM6IHBhcmFtcyQ3XHJcbn07XG5cbnZhciB2YWxpZGF0ZSQ4ID0gZnVuY3Rpb24gKGZpbGVzLCBtaW1lcykge1xyXG4gICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChtaW1lcy5qb2luKCd8JykucmVwbGFjZSgnKicsICcuKycpICsgXCIkXCIsICdpJyk7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmaWxlcykpIHtcclxuICAgICAgICByZXR1cm4gZmlsZXMuZXZlcnkoZnVuY3Rpb24gKGZpbGUpIHsgcmV0dXJuIHJlZ2V4LnRlc3QoZmlsZS50eXBlKTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVnZXgudGVzdChmaWxlcy50eXBlKTtcclxufTtcclxudmFyIG1pbWVzID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJDhcclxufTtcblxudmFyIHZhbGlkYXRlJDcgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgbGVuZ3RoID0gX2EubGVuZ3RoO1xyXG4gICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5ldmVyeShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWxpZGF0ZSQ3KHZhbCwgeyBsZW5ndGg6IGxlbmd0aCB9KTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RyaW5nKHZhbHVlKS5sZW5ndGggPj0gbGVuZ3RoO1xyXG59O1xyXG52YXIgcGFyYW1zJDYgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2xlbmd0aCcsXHJcbiAgICAgICAgY2FzdDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXTtcclxudmFyIG1pbiA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSQ3LFxyXG4gICAgcGFyYW1zOiBwYXJhbXMkNlxyXG59O1xuXG52YXIgdmFsaWRhdGUkNiA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBtaW4gPSBfYS5taW47XHJcbiAgICBpZiAoaXNOdWxsT3JVbmRlZmluZWQodmFsdWUpIHx8IHZhbHVlID09PSAnJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPiAwICYmIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJDYodmFsLCB7IG1pbjogbWluIH0pOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBOdW1iZXIodmFsdWUpID49IG1pbjtcclxufTtcclxudmFyIHBhcmFtcyQ1ID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdtaW4nLFxyXG4gICAgICAgIGNhc3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbl07XHJcbnZhciBtaW5fdmFsdWUgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkNixcclxuICAgIHBhcmFtczogcGFyYW1zJDVcclxufTtcblxudmFyIGFyID0gL15b2aDZodmi2aPZpNml2abZp9mo2aldKyQvO1xyXG52YXIgZW4gPSAvXlswLTldKyQvO1xyXG52YXIgdmFsaWRhdGUkNSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgdmFyIHRlc3RWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICB2YXIgc3RyVmFsdWUgPSBTdHJpbmcodmFsKTtcclxuICAgICAgICByZXR1cm4gZW4udGVzdChzdHJWYWx1ZSkgfHwgYXIudGVzdChzdHJWYWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KHRlc3RWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGVzdFZhbHVlKHZhbHVlKTtcclxufTtcclxudmFyIG51bWVyaWMgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkNVxyXG59O1xuXG52YXIgdmFsaWRhdGUkNCA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciByZWdleCA9IF9hLnJlZ2V4O1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJDQodmFsLCB7IHJlZ2V4OiByZWdleCB9KTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVnZXgudGVzdChTdHJpbmcodmFsdWUpKTtcclxufTtcclxudmFyIHBhcmFtcyQ0ID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdyZWdleCcsXHJcbiAgICAgICAgY2FzdDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXTtcclxudmFyIHJlZ2V4ID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJDQsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyQ0XHJcbn07XG5cbnZhciB2YWxpZGF0ZSQzID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIGFsbG93RmFsc2UgPSAoX2EgPT09IHZvaWQgMCA/IHsgYWxsb3dGYWxzZTogdHJ1ZSB9IDogX2EpLmFsbG93RmFsc2U7XHJcbiAgICB2YXIgcmVzdWx0ID0ge1xyXG4gICAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgICByZXF1aXJlZDogdHJ1ZVxyXG4gICAgfTtcclxuICAgIGlmIChpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkgfHwgaXNFbXB0eUFycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICAvLyBpbmNhc2UgYSBmaWVsZCBjb25zaWRlcnMgYGZhbHNlYCBhcyBhbiBlbXB0eSB2YWx1ZSBsaWtlIGNoZWNrYm94ZXMuXHJcbiAgICBpZiAodmFsdWUgPT09IGZhbHNlICYmICFhbGxvd0ZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHJlc3VsdC52YWxpZCA9ICEhU3RyaW5nKHZhbHVlKS50cmltKCkubGVuZ3RoO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxudmFyIGNvbXB1dGVzUmVxdWlyZWQkMSA9IHRydWU7XHJcbnZhciBwYXJhbXMkMyA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnYWxsb3dGYWxzZScsXHJcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxyXG4gICAgfVxyXG5dO1xyXG52YXIgcmVxdWlyZWQgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkMyxcclxuICAgIHBhcmFtczogcGFyYW1zJDMsXHJcbiAgICBjb21wdXRlc1JlcXVpcmVkOiBjb21wdXRlc1JlcXVpcmVkJDFcclxufTtcblxudmFyIHRlc3RFbXB0eSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGlzRW1wdHlBcnJheSh2YWx1ZSkgfHwgaW5jbHVkZXMoW2ZhbHNlLCBudWxsLCB1bmRlZmluZWRdLCB2YWx1ZSkgfHwgIVN0cmluZyh2YWx1ZSkudHJpbSgpLmxlbmd0aDtcclxufTtcclxudmFyIHZhbGlkYXRlJDIgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgdGFyZ2V0ID0gX2EudGFyZ2V0LCB2YWx1ZXMgPSBfYS52YWx1ZXM7XHJcbiAgICB2YXIgcmVxdWlyZWQ7XHJcbiAgICBpZiAodmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzKSAmJiB0eXBlb2YgdmFsdWVzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB2YWx1ZXMgPSBbdmFsdWVzXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgcmVxdWlyZWQgPSB2YWx1ZXMuc29tZShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWwgPT0gU3RyaW5nKHRhcmdldCkudHJpbSgpOyB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJlcXVpcmVkID0gIXRlc3RFbXB0eSh0YXJnZXQpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFyZXF1aXJlZCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhbGlkOiB0cnVlLFxyXG4gICAgICAgICAgICByZXF1aXJlZDogcmVxdWlyZWRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB2YWxpZDogIXRlc3RFbXB0eSh2YWx1ZSksXHJcbiAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkXHJcbiAgICB9O1xyXG59O1xyXG52YXIgcGFyYW1zJDIgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ3RhcmdldCcsXHJcbiAgICAgICAgaXNUYXJnZXQ6IHRydWVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ3ZhbHVlcydcclxuICAgIH1cclxuXTtcclxudmFyIGNvbXB1dGVzUmVxdWlyZWQgPSB0cnVlO1xyXG52YXIgcmVxdWlyZWRfaWYgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkMixcclxuICAgIHBhcmFtczogcGFyYW1zJDIsXHJcbiAgICBjb21wdXRlc1JlcXVpcmVkOiBjb21wdXRlc1JlcXVpcmVkXHJcbn07XG5cbnZhciB2YWxpZGF0ZSQxID0gZnVuY3Rpb24gKGZpbGVzLCBfYSkge1xyXG4gICAgdmFyIHNpemUgPSBfYS5zaXplO1xyXG4gICAgaWYgKGlzTmFOKHNpemUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdmFyIG5TaXplID0gc2l6ZSAqIDEwMjQ7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmlsZXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZpbGVzLnNpemUgPD0gblNpemU7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGZpbGVzW2ldLnNpemUgPiBuU2l6ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07XHJcbnZhciBwYXJhbXMkMSA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnc2l6ZScsXHJcbiAgICAgICAgY2FzdDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXTtcclxudmFyIHNpemUgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkMSxcclxuICAgIHBhcmFtczogcGFyYW1zJDFcclxufTtcblxudmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKHZhbHVlLCBwYXJhbXMpIHtcclxuICAgIHZhciBfYSA9IHBhcmFtcyB8fCB7fSwgX2IgPSBfYS5kZWNpbWFscywgZGVjaW1hbHMgPSBfYiA9PT0gdm9pZCAwID8gMCA6IF9iLCBfYyA9IF9hLnNlcGFyYXRvciwgc2VwYXJhdG9yID0gX2MgPT09IHZvaWQgMCA/ICdkb3QnIDogX2M7XHJcbiAgICB2YXIgZGVsaW1pdGVyUmVnZXhQYXJ0ID0gc2VwYXJhdG9yID09PSAnY29tbWEnID8gJyw/JyA6ICdcXFxcLj8nO1xyXG4gICAgdmFyIGRlY2ltYWxSZWdleFBhcnQgPSBkZWNpbWFscyA9PT0gMCA/ICdcXFxcZConIDogXCIoXFxcXGR7XCIgKyBkZWNpbWFscyArIFwifSk/XCI7XHJcbiAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKFwiXi0/XFxcXGQrXCIgKyBkZWxpbWl0ZXJSZWdleFBhcnQgKyBkZWNpbWFsUmVnZXhQYXJ0ICsgXCIkXCIpO1xyXG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuZXZlcnkoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gcmVnZXgudGVzdChTdHJpbmcodmFsKSk7IH0pIDogcmVnZXgudGVzdChTdHJpbmcodmFsdWUpKTtcclxufTtcclxudmFyIHBhcmFtcyA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnZGVjaW1hbHMnLFxyXG4gICAgICAgIGRlZmF1bHQ6IDBcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ3NlcGFyYXRvcicsXHJcbiAgICAgICAgZGVmYXVsdDogJ2RvdCdcclxuICAgIH1cclxuXTtcclxudmFyIGRvdWJsZSA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSxcclxuICAgIHBhcmFtczogcGFyYW1zXHJcbn07XG5cbmV4cG9ydCB7IGFscGhhLCBhbHBoYV9kYXNoLCBhbHBoYV9udW0sIGFscGhhX3NwYWNlcywgYmV0d2VlbiwgY29uZmlybWVkLCBkaWdpdHMsIGRpbWVuc2lvbnMsIGRvdWJsZSwgZW1haWwsIGV4Y2x1ZGVkLCBleHQsIGltYWdlLCBpbnRlZ2VyLCBpcywgaXNfbm90LCBsZW5ndGgsIG1heCwgbWF4X3ZhbHVlLCBtaW1lcywgbWluLCBtaW5fdmFsdWUsIG51bWVyaWMsIG9uZU9mLCByZWdleCwgcmVxdWlyZWQsIHJlcXVpcmVkX2lmLCBzaXplIH07XG4iLCIvLyDouqvku73or4Hlj7fnoIHmoKHpqoxcclxuZXhwb3J0IGNvbnN0IGlkY2FyZHMgPSBmdW5jdGlvbiAoaWRjYXJkKXtcclxuICAgIGlmIChpZGNhcmQpIHtcclxuICAgICAgICB2YXIgZXJlZyxpZGNhcmRfYXJyYXkgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICB2YXIgYXJlYT17MTE6XCLljJfkuqxcIiwxMjpcIuWkqea0pVwiLDEzOlwi5rKz5YyXXCIsMTQ6XCLlsbHopb9cIiwxNTpcIuWGheiSmeWPpFwiLDIxOlwi6L695a6BXCIsMjI6XCLlkInmnpdcIiwyMzpcIum7kem+meaxn1wiLDMxOlwi5LiK5rW3XCIsMzI6XCLmsZ/oi49cIiwzMzpcIua1meaxn1wiLDM0Olwi5a6J5b69XCIsMzU6XCLnpo/lu7pcIiwzNjpcIuaxn+ilv1wiLDM3Olwi5bGx5LicXCIsNDE6XCLmsrPljZdcIiw0MjpcIua5luWMl1wiLDQzOlwi5rmW5Y2XXCIsNDQ6XCLlub/kuJxcIiw0NTpcIuW5v+ilv1wiLDQ2Olwi5rW35Y2XXCIsNTA6XCLph43luoZcIiw1MTpcIuWbm+W3nVwiLDUyOlwi6LS15beeXCIsNTM6XCLkupHljZdcIiw1NDpcIuilv+iXj1wiLDYxOlwi6ZmV6KW/XCIsNjI6XCLnlJjogoNcIiw2MzpcIumdkua1t1wiLDY0Olwi5a6B5aSPXCIsNjU6XCLmlrDnloZcIiw3MTpcIuWPsOa5vlwiLDgxOlwi6aaZ5rivXCIsODI6XCLmvrPpl6hcIiw5MTpcIuWbveWkllwifVxyXG4gICAgICAgIGlkY2FyZF9hcnJheSA9IGlkY2FyZC5zcGxpdChcIlwiKTtcclxuICAgICAgICAvL+WcsOWMuuajgOmqjFxyXG4gICAgICAgIGlmIChpZGNhcmQubGVuZ3RoIDwgMiB8fCBhcmVhW3BhcnNlSW50KGlkY2FyZC5zdWJzdHIoMCwgMikpXSA9PSBudWxsKSByZXR1cm4gXCLouqvku73or4HlnLDljLrpnZ7ms5UhXCI7XHJcbiAgICAgICAgLy/ouqvku73lj7fnoIHkvY3mlbDlj4rmoLzlvI/mo4DpqoxcclxuICAgICAgICBzd2l0Y2ggKGlkY2FyZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY2FzZSAxNTpcclxuICAgICAgICAgICAgICAgIGlmICgocGFyc2VJbnQoaWRjYXJkLnN1YnN0cig2LCAyKSkgKyAxOTAwKSAlIDQwMCA9PSAwIHx8ICgocGFyc2VJbnQoaWRjYXJkLnN1YnN0cig2LCAyKSkgKyAxOTAwKSAlIDEwMCAhPSAwICYmIChwYXJzZUludChpZGNhcmQuc3Vic3RyKDYsIDIpKSArIDE5MDApICUgNCA9PSAwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVyZWcgPSAvXlsxLTldWzAtOV17NX1bMC05XXsyfSgoMDF8MDN8MDV8MDd8MDh8MTB8MTIpKDBbMS05XXxbMS0yXVswLTldfDNbMC0xXSl8KDA0fDA2fDA5fDExKSgwWzEtOV18WzEtMl1bMC05XXwzMCl8MDIoMFsxLTldfFsxLTJdWzAtOV0pKVswLTldezN9JC87Ly/mtYvor5Xlh7rnlJ/ml6XmnJ/nmoTlkIjms5XmgKdcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJlZyA9IC9eWzEtOV1bMC05XXs1fVswLTldezJ9KCgwMXwwM3wwNXwwN3wwOHwxMHwxMikoMFsxLTldfFsxLTJdWzAtOV18M1swLTFdKXwoMDR8MDZ8MDl8MTEpKDBbMS05XXxbMS0yXVswLTldfDMwKXwwMigwWzEtOV18MVswLTldfDJbMC04XSkpWzAtOV17M30kLzsvL+a1i+ivleWHuueUn+aXpeacn+eahOWQiOazleaAp1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGVyZWcudGVzdChpZGNhcmQpKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIFwi6Lqr5Lu96K+B5Y+356CB5Ye655Sf5pel5pyf6LaF5Ye66IyD5Zu05oiW5ZCr5pyJ6Z2e5rOV5a2X56ymIVwiO1xyXG4gICAgICAgICAgICBjYXNlIDE4OlxyXG4gICAgICAgICAgICAgICAgLy8xOCDkvY3ouqvku73lj7fnoIHmo4DmtYtcclxuICAgICAgICAgICAgICAgIC8v5Ye655Sf5pel5pyf55qE5ZCI5rOV5oCn5qOA5p+lXHJcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoaWRjYXJkLnN1YnN0cig2LCA0KSkgJSA0MDAgPT0gMCB8fCAocGFyc2VJbnQoaWRjYXJkLnN1YnN0cig2LCA0KSkgJSAxMDAgIT0gMCAmJiBwYXJzZUludChpZGNhcmQuc3Vic3RyKDYsIDQpKSAlIDQgPT0gMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlcmVnID0gL15bMS05XVswLTldezV9WzAtOV17NH0oKDAxfDAzfDA1fDA3fDA4fDEwfDEyKSgwWzEtOV18WzEtMl1bMC05XXwzWzAtMV0pfCgwNHwwNnwwOXwxMSkoMFsxLTldfFsxLTJdWzAtOV18MzApfDAyKDBbMS05XXxbMS0yXVswLTldKSlbMC05XXszfVswLTlYeF0kLzsvL+mXsOW5tOWHuueUn+aXpeacn+eahOWQiOazleaAp+ato+WImeihqOi+vuW8j1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlcmVnID0gL15bMS05XVswLTldezV9WzAtOV17NH0oKDAxfDAzfDA1fDA3fDA4fDEwfDEyKSgwWzEtOV18WzEtMl1bMC05XXwzWzAtMV0pfCgwNHwwNnwwOXwxMSkoMFsxLTldfFsxLTJdWzAtOV18MzApfDAyKDBbMS05XXwxWzAtOV18MlswLThdKSlbMC05XXszfVswLTlYeF0kLzsvL+W5s+W5tOWHuueUn+aXpeacn+eahOWQiOazleaAp+ato+WImeihqOi+vuW8j1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGVyZWcudGVzdChpZGNhcmQpKSB7Ly/mtYvor5Xlh7rnlJ/ml6XmnJ/nmoTlkIjms5XmgKdcclxuICAgICAgICAgICAgICAgICAgICAvL+iuoeeul+agoemqjOS9jVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBTID0gKHBhcnNlSW50KGlkY2FyZF9hcnJheVswXSkgKyBwYXJzZUludChpZGNhcmRfYXJyYXlbMTBdKSkgKiA3XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgKHBhcnNlSW50KGlkY2FyZF9hcnJheVsxXSkgKyBwYXJzZUludChpZGNhcmRfYXJyYXlbMTFdKSkgKiA5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgKHBhcnNlSW50KGlkY2FyZF9hcnJheVsyXSkgKyBwYXJzZUludChpZGNhcmRfYXJyYXlbMTJdKSkgKiAxMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIChwYXJzZUludChpZGNhcmRfYXJyYXlbM10pICsgcGFyc2VJbnQoaWRjYXJkX2FycmF5WzEzXSkpICogNVxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIChwYXJzZUludChpZGNhcmRfYXJyYXlbNF0pICsgcGFyc2VJbnQoaWRjYXJkX2FycmF5WzE0XSkpICogOFxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIChwYXJzZUludChpZGNhcmRfYXJyYXlbNV0pICsgcGFyc2VJbnQoaWRjYXJkX2FycmF5WzE1XSkpICogNFxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIChwYXJzZUludChpZGNhcmRfYXJyYXlbNl0pICsgcGFyc2VJbnQoaWRjYXJkX2FycmF5WzE2XSkpICogMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIHBhcnNlSW50KGlkY2FyZF9hcnJheVs3XSkgKiAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgcGFyc2VJbnQoaWRjYXJkX2FycmF5WzhdKSAqIDZcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBwYXJzZUludChpZGNhcmRfYXJyYXlbOV0pICogMztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXCIxMFg5ODc2NTQzMlwiLnN1YnN0cihTICUgMTEsIDEpID09IGlkY2FyZF9hcnJheVsxN10pIHJldHVybiB0cnVlOyAvL+ajgOa1i0lE55qE5qCh6aqM5L2NXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gJ+i6q+S7veivgeWPt+eggeagoemqjOmUmeivryEnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHJldHVybiAn6Lqr5Lu96K+B5Y+356CB5Ye655Sf5pel5pyf6LaF5Ye66IyD5Zu05oiW5ZCr5pyJ6Z2e5rOV5a2X56ymISc7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+i6q+S7veivgeWPt+eggeS9jeaVsOS4jeWvuSEnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vLyDmiYvmnLrlj7fmoKHpqoxcclxuZXhwb3J0IGNvbnN0IG1vYmlsZSA9IGZ1bmN0aW9uIChtb2JpbGUpe1xyXG4gICAgaWYgKG1vYmlsZSAmJiAobW9iaWxlLmxlbmd0aCAhPSAxMSB8fCAhL15bMV0rWzMsNSw3LDhdK1xcZHs5fS8udGVzdChtb2JpbGUpKSkge1xyXG4gICAgICAgIHJldHVybiBcIuivt+ato+ehruWhq+WGmeaJi+acuuWPt1wiO1xyXG4gICAgfWVsc2Uge1xyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIOagoemqjOmHkeminVxyXG5leHBvcnQgY29uc3QgaXNtb25leSA9IGZ1bmN0aW9uIChtb25leSxuYW1lKXtcclxuICAgIHZhciByZWcgPSAvKF5bMS05XShbMC05XSspPyhcXC5bMC05XXsxLDJ9KT8kKXwoXigwKXsxfSQpfCheWzAtOV1cXC5bMC05XShbMC05XSk/JCkvXHJcbiAgICBpZiAocmVnLnRlc3QobW9uZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBuYW1lK1wi5b+F6aG76L6T5YWl6YeR6aKdXCI7XHJcbiAgICB9XHJcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbnZhciBraW5kT2YgPSAoZnVuY3Rpb24oY2FjaGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoaW5nKSB7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpbmcpO1xuICAgIHJldHVybiBjYWNoZVtzdHJdIHx8IChjYWNoZVtzdHJdID0gc3RyLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpKTtcbiAgfTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG5mdW5jdGlvbiBraW5kT2ZUZXN0KHR5cGUpIHtcbiAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzS2luZE9mKHRoaW5nKSB7XG4gICAgcmV0dXJuIGtpbmRPZih0aGluZykgPT09IHR5cGU7XG4gIH07XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzRmlsZSA9IGtpbmRPZlRlc3QoJ0ZpbGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0Jsb2IgPSBraW5kT2ZUZXN0KCdCbG9iJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlTGlzdFxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh0aGluZykge1xuICB2YXIgcGF0dGVybiA9ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG4gIHJldHVybiB0aGluZyAmJiAoXG4gICAgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZyBpbnN0YW5jZW9mIEZvcm1EYXRhKSB8fFxuICAgIHRvU3RyaW5nLmNhbGwodGhpbmcpID09PSBwYXR0ZXJuIHx8XG4gICAgKGlzRnVuY3Rpb24odGhpbmcudG9TdHJpbmcpICYmIHRoaW5nLnRvU3RyaW5nKCkgPT09IHBhdHRlcm4pXG4gICk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIudHJpbSA/IHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcHNdXG4gKiBAcGFyYW0ge29iamVjdH0gW2Rlc2NyaXB0b3JzXVxuICovXG5cbmZ1bmN0aW9uIGluaGVyaXRzKGNvbnN0cnVjdG9yLCBzdXBlckNvbnN0cnVjdG9yLCBwcm9wcywgZGVzY3JpcHRvcnMpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZSwgZGVzY3JpcHRvcnMpO1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgcHJvcHMgJiYgT2JqZWN0LmFzc2lnbihjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3BzKTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZpbHRlcl1cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gdG9GbGF0T2JqZWN0KHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyKSB7XG4gIHZhciBwcm9wcztcbiAgdmFyIGk7XG4gIHZhciBwcm9wO1xuICB2YXIgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlT2JqKTtcbiAgfSB3aGlsZSAoc291cmNlT2JqICYmICghZmlsdGVyIHx8IGZpbHRlcihzb3VyY2VPYmosIGRlc3RPYmopKSAmJiBzb3VyY2VPYmogIT09IE9iamVjdC5wcm90b3R5cGUpO1xuXG4gIHJldHVybiBkZXN0T2JqO1xufVxuXG4vKlxuICogZGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb249IDBdXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbiA+IHN0ci5sZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHN0ci5sZW5ndGg7XG4gIH1cbiAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgdmFyIGxhc3RJbmRleCA9IHN0ci5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBuZXcgYXJyYXkgZnJvbSBhcnJheSBsaWtlIG9iamVjdFxuICogQHBhcmFtIHsqfSBbdGhpbmddXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkodGhpbmcpIHtcbiAgaWYgKCF0aGluZykgcmV0dXJuIG51bGw7XG4gIHZhciBpID0gdGhpbmcubGVuZ3RoO1xuICBpZiAoaXNVbmRlZmluZWQoaSkpIHJldHVybiBudWxsO1xuICB2YXIgYXJyID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGFycltpXSA9IHRoaW5nW2ldO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG52YXIgaXNUeXBlZEFycmF5ID0gKGZ1bmN0aW9uKFR5cGVkQXJyYXkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIFR5cGVkQXJyYXkgJiYgdGhpbmcgaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xuICB9O1xufSkodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT00sXG4gIGluaGVyaXRzOiBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0OiB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZjoga2luZE9mLFxuICBraW5kT2ZUZXN0OiBraW5kT2ZUZXN0LFxuICBlbmRzV2l0aDogZW5kc1dpdGgsXG4gIHRvQXJyYXk6IHRvQXJyYXksXG4gIGlzVHlwZWRBcnJheTogaXNUeXBlZEFycmF5LFxuICBpc0ZpbGVMaXN0OiBpc0ZpbGVMaXN0XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWQsXG4gICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIEF4aW9zRXJyb3IobWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBFcnJvci5jYWxsKHRoaXMpO1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH1cbn0pO1xuXG52YXIgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG52YXIgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCdcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5dLmZvckVhY2goZnVuY3Rpb24oY29kZSkge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gZnVuY3Rpb24oZXJyb3IsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UsIGN1c3RvbVByb3BzKSB7XG4gIHZhciBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHs/T2JqZWN0fSBbZm9ybURhdGFdXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICoqL1xuXG5mdW5jdGlvbiB0b0Zvcm1EYXRhKG9iaiwgZm9ybURhdGEpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IEZvcm1EYXRhKCk7XG5cbiAgdmFyIHN0YWNrID0gW107XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkKGRhdGEsIHBhcmVudEtleSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KGRhdGEpIHx8IHV0aWxzLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIGlmIChzdGFjay5pbmRleE9mKGRhdGEpICE9PSAtMSkge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXJlbnRLZXkpO1xuICAgICAgfVxuXG4gICAgICBzdGFjay5wdXNoKGRhdGEpO1xuXG4gICAgICB1dGlscy5mb3JFYWNoKGRhdGEsIGZ1bmN0aW9uIGVhY2godmFsdWUsIGtleSkge1xuICAgICAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG4gICAgICAgIHZhciBmdWxsS2V5ID0gcGFyZW50S2V5ID8gcGFyZW50S2V5ICsgJy4nICsga2V5IDoga2V5O1xuICAgICAgICB2YXIgYXJyO1xuXG4gICAgICAgIGlmICh2YWx1ZSAmJiAhcGFyZW50S2V5ICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICF1dGlscy5pc1VuZGVmaW5lZChlbCkgJiYgZm9ybURhdGEuYXBwZW5kKGZ1bGxLZXksIGNvbnZlcnRWYWx1ZShlbCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnVpbGQodmFsdWUsIGZ1bGxLZXkpO1xuICAgICAgfSk7XG5cbiAgICAgIHN0YWNrLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQocGFyZW50S2V5LCBjb252ZXJ0VmFsdWUoZGF0YSkpO1xuICAgIH1cbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvRm9ybURhdGE7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9BeGlvc0Vycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICBbQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRV1bTWF0aC5mbG9vcihyZXNwb25zZS5zdGF0dXMgLyAxMDApIC0gNF0sXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWxlZEVycm9yKG1lc3NhZ2UpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsZWRFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICB2YXIgbWF0Y2ggPSAvXihbLStcXHddezEsMjV9KSg6P1xcL1xcL3w6KS8uZXhlYyh1cmwpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG59O1xuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB3ID0gZCAqIDc7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcblx0Y3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG5cdGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuXHRjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cdGNyZWF0ZURlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGRlYnVnIGluc3RhbmNlIHRvIGJlIGNvbG9yZWRcblx0KiBAcmV0dXJuIHtOdW1iZXJ8U3RyaW5nfSBBbiBBTlNJIGNvbG9yIGNvZGUgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG5cdFx0bGV0IGhhc2ggPSAwO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0aGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcblx0XHR9XG5cblx0XHRyZXR1cm4gY3JlYXRlRGVidWcuY29sb3JzW01hdGguYWJzKGhhc2gpICUgY3JlYXRlRGVidWcuY29sb3JzLmxlbmd0aF07XG5cdH1cblx0Y3JlYXRlRGVidWcuc2VsZWN0Q29sb3IgPSBzZWxlY3RDb2xvcjtcblxuXHQvKipcblx0KiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAcmV0dXJuIHtGdW5jdGlvbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblx0XHRsZXQgcHJldlRpbWU7XG5cdFx0bGV0IGVuYWJsZU92ZXJyaWRlID0gbnVsbDtcblx0XHRsZXQgbmFtZXNwYWNlc0NhY2hlO1xuXHRcdGxldCBlbmFibGVkQ2FjaGU7XG5cblx0XHRmdW5jdGlvbiBkZWJ1ZyguLi5hcmdzKSB7XG5cdFx0XHQvLyBEaXNhYmxlZD9cblx0XHRcdGlmICghZGVidWcuZW5hYmxlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNlbGYgPSBkZWJ1ZztcblxuXHRcdFx0Ly8gU2V0IGBkaWZmYCB0aW1lc3RhbXBcblx0XHRcdGNvbnN0IGN1cnIgPSBOdW1iZXIobmV3IERhdGUoKSk7XG5cdFx0XHRjb25zdCBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG5cdFx0XHRzZWxmLmRpZmYgPSBtcztcblx0XHRcdHNlbGYucHJldiA9IHByZXZUaW1lO1xuXHRcdFx0c2VsZi5jdXJyID0gY3Vycjtcblx0XHRcdHByZXZUaW1lID0gY3VycjtcblxuXHRcdFx0YXJnc1swXSA9IGNyZWF0ZURlYnVnLmNvZXJjZShhcmdzWzBdKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHQvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuXHRcdFx0XHRhcmdzLnVuc2hpZnQoJyVPJyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cdFx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdFx0YXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIChtYXRjaCwgZm9ybWF0KSA9PiB7XG5cdFx0XHRcdC8vIElmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcblx0XHRcdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRcdFx0cmV0dXJuICclJztcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcblx0XHRkZWJ1Zy5jb2xvciA9IGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdGRlYnVnLmRlc3Ryb3kgPSBjcmVhdGVEZWJ1Zy5kZXN0cm95OyAvLyBYWFggVGVtcG9yYXJ5LiBXaWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZWJ1ZywgJ2VuYWJsZWQnLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRcdGdldDogKCkgPT4ge1xuXHRcdFx0XHRpZiAoZW5hYmxlT3ZlcnJpZGUgIT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gZW5hYmxlT3ZlcnJpZGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG5hbWVzcGFjZXNDYWNoZSAhPT0gY3JlYXRlRGVidWcubmFtZXNwYWNlcykge1xuXHRcdFx0XHRcdG5hbWVzcGFjZXNDYWNoZSA9IGNyZWF0ZURlYnVnLm5hbWVzcGFjZXM7XG5cdFx0XHRcdFx0ZW5hYmxlZENhY2hlID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVuYWJsZWRDYWNoZTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IHYgPT4ge1xuXHRcdFx0XHRlbmFibGVPdmVycmlkZSA9IHY7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBFbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuXHRcdGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlYnVnO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0Y29uc3QgbmV3RGVidWcgPSBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuXHRcdG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuXHRcdHJldHVybiBuZXdEZWJ1Zztcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cdFx0Y3JlYXRlRGVidWcubmFtZXNwYWNlcyA9IG5hbWVzcGFjZXM7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRsZXQgaTtcblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG5cdFx0Y29uc3QgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoIXNwbGl0W2ldKSB7XG5cdFx0XHRcdC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuXHRcdFx0aWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zbGljZSgxKSArICckJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0KiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cblx0KlxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGRpc2FibGUoKSB7XG5cdFx0Y29uc3QgbmFtZXNwYWNlcyA9IFtcblx0XHRcdC4uLmNyZWF0ZURlYnVnLm5hbWVzLm1hcCh0b05hbWVzcGFjZSksXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5za2lwcy5tYXAodG9OYW1lc3BhY2UpLm1hcChuYW1lc3BhY2UgPT4gJy0nICsgbmFtZXNwYWNlKVxuXHRcdF0uam9pbignLCcpO1xuXHRcdGNyZWF0ZURlYnVnLmVuYWJsZSgnJyk7XG5cdFx0cmV0dXJuIG5hbWVzcGFjZXM7XG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuXHQqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG5cdFx0aWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRsZXQgaTtcblx0XHRsZXQgbGVuO1xuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCogQ29udmVydCByZWdleHAgdG8gbmFtZXNwYWNlXG5cdCpcblx0KiBAcGFyYW0ge1JlZ0V4cH0gcmVneGVwXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gdG9OYW1lc3BhY2UocmVnZXhwKSB7XG5cdFx0cmV0dXJuIHJlZ2V4cC50b1N0cmluZygpXG5cdFx0XHQuc3Vic3RyaW5nKDIsIHJlZ2V4cC50b1N0cmluZygpLmxlbmd0aCAtIDIpXG5cdFx0XHQucmVwbGFjZSgvXFwuXFwqXFw/JC8sICcqJyk7XG5cdH1cblxuXHQvKipcblx0KiBDb2VyY2UgYHZhbGAuXG5cdCpcblx0KiBAcGFyYW0ge01peGVkfSB2YWxcblx0KiBAcmV0dXJuIHtNaXhlZH1cblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuXHRcdGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0cmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8qKlxuXHQqIFhYWCBETyBOT1QgVVNFLiBUaGlzIGlzIGEgdGVtcG9yYXJ5IHN0dWIgZnVuY3Rpb24uXG5cdCogWFhYIEl0IFdJTEwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXHQqL1xuXHRmdW5jdGlvbiBkZXN0cm95KCkge1xuXHRcdGNvbnNvbGUud2FybignSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLicpO1xuXHR9XG5cblx0Y3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG5cblx0cmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSAoZmxhZywgYXJndikgPT4ge1xuXHRhcmd2ID0gYXJndiB8fCBwcm9jZXNzLmFyZ3Y7XG5cdGNvbnN0IHByZWZpeCA9IGZsYWcuc3RhcnRzV2l0aCgnLScpID8gJycgOiAoZmxhZy5sZW5ndGggPT09IDEgPyAnLScgOiAnLS0nKTtcblx0Y29uc3QgcG9zID0gYXJndi5pbmRleE9mKHByZWZpeCArIGZsYWcpO1xuXHRjb25zdCB0ZXJtaW5hdG9yUG9zID0gYXJndi5pbmRleE9mKCctLScpO1xuXHRyZXR1cm4gcG9zICE9PSAtMSAmJiAodGVybWluYXRvclBvcyA9PT0gLTEgPyB0cnVlIDogcG9zIDwgdGVybWluYXRvclBvcyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuY29uc3QgaGFzRmxhZyA9IHJlcXVpcmUoJ2hhcy1mbGFnJyk7XG5cbmNvbnN0IGVudiA9IHByb2Nlc3MuZW52O1xuXG5sZXQgZm9yY2VDb2xvcjtcbmlmIChoYXNGbGFnKCduby1jb2xvcicpIHx8XG5cdGhhc0ZsYWcoJ25vLWNvbG9ycycpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9yPWZhbHNlJykpIHtcblx0Zm9yY2VDb2xvciA9IGZhbHNlO1xufSBlbHNlIGlmIChoYXNGbGFnKCdjb2xvcicpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9ycycpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9yPXRydWUnKSB8fFxuXHRoYXNGbGFnKCdjb2xvcj1hbHdheXMnKSkge1xuXHRmb3JjZUNvbG9yID0gdHJ1ZTtcbn1cbmlmICgnRk9SQ0VfQ09MT1InIGluIGVudikge1xuXHRmb3JjZUNvbG9yID0gZW52LkZPUkNFX0NPTE9SLmxlbmd0aCA9PT0gMCB8fCBwYXJzZUludChlbnYuRk9SQ0VfQ09MT1IsIDEwKSAhPT0gMDtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlTGV2ZWwobGV2ZWwpIHtcblx0aWYgKGxldmVsID09PSAwKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRsZXZlbCxcblx0XHRoYXNCYXNpYzogdHJ1ZSxcblx0XHRoYXMyNTY6IGxldmVsID49IDIsXG5cdFx0aGFzMTZtOiBsZXZlbCA+PSAzXG5cdH07XG59XG5cbmZ1bmN0aW9uIHN1cHBvcnRzQ29sb3Ioc3RyZWFtKSB7XG5cdGlmIChmb3JjZUNvbG9yID09PSBmYWxzZSkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0aWYgKGhhc0ZsYWcoJ2NvbG9yPTE2bScpIHx8XG5cdFx0aGFzRmxhZygnY29sb3I9ZnVsbCcpIHx8XG5cdFx0aGFzRmxhZygnY29sb3I9dHJ1ZWNvbG9yJykpIHtcblx0XHRyZXR1cm4gMztcblx0fVxuXG5cdGlmIChoYXNGbGFnKCdjb2xvcj0yNTYnKSkge1xuXHRcdHJldHVybiAyO1xuXHR9XG5cblx0aWYgKHN0cmVhbSAmJiAhc3RyZWFtLmlzVFRZICYmIGZvcmNlQ29sb3IgIT09IHRydWUpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGNvbnN0IG1pbiA9IGZvcmNlQ29sb3IgPyAxIDogMDtcblxuXHRpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuXHRcdC8vIE5vZGUuanMgNy41LjAgaXMgdGhlIGZpcnN0IHZlcnNpb24gb2YgTm9kZS5qcyB0byBpbmNsdWRlIGEgcGF0Y2ggdG9cblx0XHQvLyBsaWJ1diB0aGF0IGVuYWJsZXMgMjU2IGNvbG9yIG91dHB1dCBvbiBXaW5kb3dzLiBBbnl0aGluZyBlYXJsaWVyIGFuZCBpdFxuXHRcdC8vIHdvbid0IHdvcmsuIEhvd2V2ZXIsIGhlcmUgd2UgdGFyZ2V0IE5vZGUuanMgOCBhdCBtaW5pbXVtIGFzIGl0IGlzIGFuIExUU1xuXHRcdC8vIHJlbGVhc2UsIGFuZCBOb2RlLmpzIDcgaXMgbm90LiBXaW5kb3dzIDEwIGJ1aWxkIDEwNTg2IGlzIHRoZSBmaXJzdCBXaW5kb3dzXG5cdFx0Ly8gcmVsZWFzZSB0aGF0IHN1cHBvcnRzIDI1NiBjb2xvcnMuIFdpbmRvd3MgMTAgYnVpbGQgMTQ5MzEgaXMgdGhlIGZpcnN0IHJlbGVhc2Vcblx0XHQvLyB0aGF0IHN1cHBvcnRzIDE2bS9UcnVlQ29sb3IuXG5cdFx0Y29uc3Qgb3NSZWxlYXNlID0gb3MucmVsZWFzZSgpLnNwbGl0KCcuJyk7XG5cdFx0aWYgKFxuXHRcdFx0TnVtYmVyKHByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdCgnLicpWzBdKSA+PSA4ICYmXG5cdFx0XHROdW1iZXIob3NSZWxlYXNlWzBdKSA+PSAxMCAmJlxuXHRcdFx0TnVtYmVyKG9zUmVsZWFzZVsyXSkgPj0gMTA1ODZcblx0XHQpIHtcblx0XHRcdHJldHVybiBOdW1iZXIob3NSZWxlYXNlWzJdKSA+PSAxNDkzMSA/IDMgOiAyO1xuXHRcdH1cblxuXHRcdHJldHVybiAxO1xuXHR9XG5cblx0aWYgKCdDSScgaW4gZW52KSB7XG5cdFx0aWYgKFsnVFJBVklTJywgJ0NJUkNMRUNJJywgJ0FQUFZFWU9SJywgJ0dJVExBQl9DSSddLnNvbWUoc2lnbiA9PiBzaWduIGluIGVudikgfHwgZW52LkNJX05BTUUgPT09ICdjb2Rlc2hpcCcpIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH1cblxuXHRcdHJldHVybiBtaW47XG5cdH1cblxuXHRpZiAoJ1RFQU1DSVRZX1ZFUlNJT04nIGluIGVudikge1xuXHRcdHJldHVybiAvXig5XFwuKDAqWzEtOV1cXGQqKVxcLnxcXGR7Mix9XFwuKS8udGVzdChlbnYuVEVBTUNJVFlfVkVSU0lPTikgPyAxIDogMDtcblx0fVxuXG5cdGlmIChlbnYuQ09MT1JURVJNID09PSAndHJ1ZWNvbG9yJykge1xuXHRcdHJldHVybiAzO1xuXHR9XG5cblx0aWYgKCdURVJNX1BST0dSQU0nIGluIGVudikge1xuXHRcdGNvbnN0IHZlcnNpb24gPSBwYXJzZUludCgoZW52LlRFUk1fUFJPR1JBTV9WRVJTSU9OIHx8ICcnKS5zcGxpdCgnLicpWzBdLCAxMCk7XG5cblx0XHRzd2l0Y2ggKGVudi5URVJNX1BST0dSQU0pIHtcblx0XHRcdGNhc2UgJ2lUZXJtLmFwcCc6XG5cdFx0XHRcdHJldHVybiB2ZXJzaW9uID49IDMgPyAzIDogMjtcblx0XHRcdGNhc2UgJ0FwcGxlX1Rlcm1pbmFsJzpcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHQvLyBObyBkZWZhdWx0XG5cdFx0fVxuXHR9XG5cblx0aWYgKC8tMjU2KGNvbG9yKT8kL2kudGVzdChlbnYuVEVSTSkpIHtcblx0XHRyZXR1cm4gMjtcblx0fVxuXG5cdGlmICgvXnNjcmVlbnxeeHRlcm18XnZ0MTAwfF52dDIyMHxecnh2dHxjb2xvcnxhbnNpfGN5Z3dpbnxsaW51eC9pLnRlc3QoZW52LlRFUk0pKSB7XG5cdFx0cmV0dXJuIDE7XG5cdH1cblxuXHRpZiAoJ0NPTE9SVEVSTScgaW4gZW52KSB7XG5cdFx0cmV0dXJuIDE7XG5cdH1cblxuXHRpZiAoZW52LlRFUk0gPT09ICdkdW1iJykge1xuXHRcdHJldHVybiBtaW47XG5cdH1cblxuXHRyZXR1cm4gbWluO1xufVxuXG5mdW5jdGlvbiBnZXRTdXBwb3J0TGV2ZWwoc3RyZWFtKSB7XG5cdGNvbnN0IGxldmVsID0gc3VwcG9ydHNDb2xvcihzdHJlYW0pO1xuXHRyZXR1cm4gdHJhbnNsYXRlTGV2ZWwobGV2ZWwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0c3VwcG9ydHNDb2xvcjogZ2V0U3VwcG9ydExldmVsLFxuXHRzdGRvdXQ6IGdldFN1cHBvcnRMZXZlbChwcm9jZXNzLnN0ZG91dCksXG5cdHN0ZGVycjogZ2V0U3VwcG9ydExldmVsKHByb2Nlc3Muc3RkZXJyKVxufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5jb25zdCB0dHkgPSByZXF1aXJlKCd0dHknKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgTm9kZS5qcyBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cblxuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLmRlc3Ryb3kgPSB1dGlsLmRlcHJlY2F0ZShcblx0KCkgPT4ge30sXG5cdCdJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuJ1xuKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbNiwgMiwgMywgNCwgNSwgMV07XG5cbnRyeSB7XG5cdC8vIE9wdGlvbmFsIGRlcGVuZGVuY3kgKGFzIGluLCBkb2Vzbid0IG5lZWQgdG8gYmUgaW5zdGFsbGVkLCBOT1QgbGlrZSBvcHRpb25hbERlcGVuZGVuY2llcyBpbiBwYWNrYWdlLmpzb24pXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcblx0Y29uc3Qgc3VwcG9ydHNDb2xvciA9IHJlcXVpcmUoJ3N1cHBvcnRzLWNvbG9yJyk7XG5cblx0aWYgKHN1cHBvcnRzQ29sb3IgJiYgKHN1cHBvcnRzQ29sb3Iuc3RkZXJyIHx8IHN1cHBvcnRzQ29sb3IpLmxldmVsID49IDIpIHtcblx0XHRleHBvcnRzLmNvbG9ycyA9IFtcblx0XHRcdDIwLFxuXHRcdFx0MjEsXG5cdFx0XHQyNixcblx0XHRcdDI3LFxuXHRcdFx0MzIsXG5cdFx0XHQzMyxcblx0XHRcdDM4LFxuXHRcdFx0MzksXG5cdFx0XHQ0MCxcblx0XHRcdDQxLFxuXHRcdFx0NDIsXG5cdFx0XHQ0Myxcblx0XHRcdDQ0LFxuXHRcdFx0NDUsXG5cdFx0XHQ1Nixcblx0XHRcdDU3LFxuXHRcdFx0NjIsXG5cdFx0XHQ2Myxcblx0XHRcdDY4LFxuXHRcdFx0NjksXG5cdFx0XHQ3NCxcblx0XHRcdDc1LFxuXHRcdFx0NzYsXG5cdFx0XHQ3Nyxcblx0XHRcdDc4LFxuXHRcdFx0NzksXG5cdFx0XHQ4MCxcblx0XHRcdDgxLFxuXHRcdFx0OTIsXG5cdFx0XHQ5Myxcblx0XHRcdDk4LFxuXHRcdFx0OTksXG5cdFx0XHQxMTIsXG5cdFx0XHQxMTMsXG5cdFx0XHQxMjgsXG5cdFx0XHQxMjksXG5cdFx0XHQxMzQsXG5cdFx0XHQxMzUsXG5cdFx0XHQxNDgsXG5cdFx0XHQxNDksXG5cdFx0XHQxNjAsXG5cdFx0XHQxNjEsXG5cdFx0XHQxNjIsXG5cdFx0XHQxNjMsXG5cdFx0XHQxNjQsXG5cdFx0XHQxNjUsXG5cdFx0XHQxNjYsXG5cdFx0XHQxNjcsXG5cdFx0XHQxNjgsXG5cdFx0XHQxNjksXG5cdFx0XHQxNzAsXG5cdFx0XHQxNzEsXG5cdFx0XHQxNzIsXG5cdFx0XHQxNzMsXG5cdFx0XHQxNzgsXG5cdFx0XHQxNzksXG5cdFx0XHQxODQsXG5cdFx0XHQxODUsXG5cdFx0XHQxOTYsXG5cdFx0XHQxOTcsXG5cdFx0XHQxOTgsXG5cdFx0XHQxOTksXG5cdFx0XHQyMDAsXG5cdFx0XHQyMDEsXG5cdFx0XHQyMDIsXG5cdFx0XHQyMDMsXG5cdFx0XHQyMDQsXG5cdFx0XHQyMDUsXG5cdFx0XHQyMDYsXG5cdFx0XHQyMDcsXG5cdFx0XHQyMDgsXG5cdFx0XHQyMDksXG5cdFx0XHQyMTQsXG5cdFx0XHQyMTUsXG5cdFx0XHQyMjAsXG5cdFx0XHQyMjFcblx0XHRdO1xuXHR9XG59IGNhdGNoIChlcnJvcikge1xuXHQvLyBTd2FsbG93IC0gd2Ugb25seSBjYXJlIGlmIGBzdXBwb3J0cy1jb2xvcmAgaXMgYXZhaWxhYmxlOyBpdCBkb2Vzbid0IGhhdmUgdG8gYmUuXG59XG5cbi8qKlxuICogQnVpbGQgdXAgdGhlIGRlZmF1bHQgYGluc3BlY3RPcHRzYCBvYmplY3QgZnJvbSB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICpcbiAqICAgJCBERUJVR19DT0xPUlM9bm8gREVCVUdfREVQVEg9MTAgREVCVUdfU0hPV19ISURERU49ZW5hYmxlZCBub2RlIHNjcmlwdC5qc1xuICovXG5cbmV4cG9ydHMuaW5zcGVjdE9wdHMgPSBPYmplY3Qua2V5cyhwcm9jZXNzLmVudikuZmlsdGVyKGtleSA9PiB7XG5cdHJldHVybiAvXmRlYnVnXy9pLnRlc3Qoa2V5KTtcbn0pLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcblx0Ly8gQ2FtZWwtY2FzZVxuXHRjb25zdCBwcm9wID0ga2V5XG5cdFx0LnN1YnN0cmluZyg2KVxuXHRcdC50b0xvd2VyQ2FzZSgpXG5cdFx0LnJlcGxhY2UoL18oW2Etel0pL2csIChfLCBrKSA9PiB7XG5cdFx0XHRyZXR1cm4gay50b1VwcGVyQ2FzZSgpO1xuXHRcdH0pO1xuXG5cdC8vIENvZXJjZSBzdHJpbmcgdmFsdWUgaW50byBKUyB2YWx1ZVxuXHRsZXQgdmFsID0gcHJvY2Vzcy5lbnZba2V5XTtcblx0aWYgKC9eKHllc3xvbnx0cnVlfGVuYWJsZWQpJC9pLnRlc3QodmFsKSkge1xuXHRcdHZhbCA9IHRydWU7XG5cdH0gZWxzZSBpZiAoL14obm98b2ZmfGZhbHNlfGRpc2FibGVkKSQvaS50ZXN0KHZhbCkpIHtcblx0XHR2YWwgPSBmYWxzZTtcblx0fSBlbHNlIGlmICh2YWwgPT09ICdudWxsJykge1xuXHRcdHZhbCA9IG51bGw7XG5cdH0gZWxzZSB7XG5cdFx0dmFsID0gTnVtYmVyKHZhbCk7XG5cdH1cblxuXHRvYmpbcHJvcF0gPSB2YWw7XG5cdHJldHVybiBvYmo7XG59LCB7fSk7XG5cbi8qKlxuICogSXMgc3Rkb3V0IGEgVFRZPyBDb2xvcmVkIG91dHB1dCBpcyBlbmFibGVkIHdoZW4gYHRydWVgLlxuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0cmV0dXJuICdjb2xvcnMnIGluIGV4cG9ydHMuaW5zcGVjdE9wdHMgP1xuXHRcdEJvb2xlYW4oZXhwb3J0cy5pbnNwZWN0T3B0cy5jb2xvcnMpIDpcblx0XHR0dHkuaXNhdHR5KHByb2Nlc3Muc3RkZXJyLmZkKTtcbn1cblxuLyoqXG4gKiBBZGRzIEFOU0kgY29sb3IgZXNjYXBlIGNvZGVzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0Y29uc3Qge25hbWVzcGFjZTogbmFtZSwgdXNlQ29sb3JzfSA9IHRoaXM7XG5cblx0aWYgKHVzZUNvbG9ycykge1xuXHRcdGNvbnN0IGMgPSB0aGlzLmNvbG9yO1xuXHRcdGNvbnN0IGNvbG9yQ29kZSA9ICdcXHUwMDFCWzMnICsgKGMgPCA4ID8gYyA6ICc4OzU7JyArIGMpO1xuXHRcdGNvbnN0IHByZWZpeCA9IGAgICR7Y29sb3JDb2RlfTsxbSR7bmFtZX0gXFx1MDAxQlswbWA7XG5cblx0XHRhcmdzWzBdID0gcHJlZml4ICsgYXJnc1swXS5zcGxpdCgnXFxuJykuam9pbignXFxuJyArIHByZWZpeCk7XG5cdFx0YXJncy5wdXNoKGNvbG9yQ29kZSArICdtKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpICsgJ1xcdTAwMUJbMG0nKTtcblx0fSBlbHNlIHtcblx0XHRhcmdzWzBdID0gZ2V0RGF0ZSgpICsgbmFtZSArICcgJyArIGFyZ3NbMF07XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZSgpIHtcblx0aWYgKGV4cG9ydHMuaW5zcGVjdE9wdHMuaGlkZURhdGUpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblx0cmV0dXJuIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArICcgJztcbn1cblxuLyoqXG4gKiBJbnZva2VzIGB1dGlsLmZvcm1hdCgpYCB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzIGFuZCB3cml0ZXMgdG8gc3RkZXJyLlxuICovXG5cbmZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG5cdHJldHVybiBwcm9jZXNzLnN0ZGVyci53cml0ZSh1dGlsLmZvcm1hdCguLi5hcmdzKSArICdcXG4nKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHRpZiAobmFtZXNwYWNlcykge1xuXHRcdHByb2Nlc3MuZW52LkRFQlVHID0gbmFtZXNwYWNlcztcblx0fSBlbHNlIHtcblx0XHQvLyBJZiB5b3Ugc2V0IGEgcHJvY2Vzcy5lbnYgZmllbGQgdG8gbnVsbCBvciB1bmRlZmluZWQsIGl0IGdldHMgY2FzdCB0byB0aGVcblx0XHQvLyBzdHJpbmcgJ251bGwnIG9yICd1bmRlZmluZWQnLiBKdXN0IGRlbGV0ZSBpbnN0ZWFkLlxuXHRcdGRlbGV0ZSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdHJldHVybiBwcm9jZXNzLmVudi5ERUJVRztcbn1cblxuLyoqXG4gKiBJbml0IGxvZ2ljIGZvciBgZGVidWdgIGluc3RhbmNlcy5cbiAqXG4gKiBDcmVhdGUgYSBuZXcgYGluc3BlY3RPcHRzYCBvYmplY3QgaW4gY2FzZSBgdXNlQ29sb3JzYCBpcyBzZXRcbiAqIGRpZmZlcmVudGx5IGZvciBhIHBhcnRpY3VsYXIgYGRlYnVnYCBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBpbml0KGRlYnVnKSB7XG5cdGRlYnVnLmluc3BlY3RPcHRzID0ge307XG5cblx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGV4cG9ydHMuaW5zcGVjdE9wdHMpO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRkZWJ1Zy5pbnNwZWN0T3B0c1trZXlzW2ldXSA9IGV4cG9ydHMuaW5zcGVjdE9wdHNba2V5c1tpXV07XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJW8gdG8gYHV0aWwuaW5zcGVjdCgpYCwgYWxsIG9uIGEgc2luZ2xlIGxpbmUuXG4gKi9cblxuZm9ybWF0dGVycy5vID0gZnVuY3Rpb24gKHYpIHtcblx0dGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblx0cmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKVxuXHRcdC5zcGxpdCgnXFxuJylcblx0XHQubWFwKHN0ciA9PiBzdHIudHJpbSgpKVxuXHRcdC5qb2luKCcgJyk7XG59O1xuXG4vKipcbiAqIE1hcCAlTyB0byBgdXRpbC5pbnNwZWN0KClgLCBhbGxvd2luZyBtdWx0aXBsZSBsaW5lcyBpZiBuZWVkZWQuXG4gKi9cblxuZm9ybWF0dGVycy5PID0gZnVuY3Rpb24gKHYpIHtcblx0dGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblx0cmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKTtcbn07XG4iLCIvKipcbiAqIERldGVjdCBFbGVjdHJvbiByZW5kZXJlciAvIG53anMgcHJvY2Vzcywgd2hpY2ggaXMgbm9kZSwgYnV0IHdlIHNob3VsZFxuICogdHJlYXQgYXMgYSBicm93c2VyLlxuICovXG5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInIHx8IHByb2Nlc3MuYnJvd3NlciA9PT0gdHJ1ZSB8fCBwcm9jZXNzLl9fbndqcykge1xuXHRtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnJvd3Nlci5qcycpO1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL25vZGUuanMnKTtcbn1cbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuZXhwb3J0cy5kZXN0cm95ID0gKCgpID0+IHtcblx0bGV0IHdhcm5lZCA9IGZhbHNlO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKCF3YXJuZWQpIHtcblx0XHRcdHdhcm5lZCA9IHRydWU7XG5cdFx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0XHR9XG5cdH07XG59KSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUuZGVidWcoKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKiBJZiBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGF2YWlsYWJsZSwgZmFsbHMgYmFja1xuICogdG8gYGNvbnNvbGUubG9nYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzLmxvZyA9IGNvbnNvbGUuZGVidWcgfHwgY29uc29sZS5sb2cgfHwgKCgpID0+IHt9KTtcblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCJ2YXIgdXJsID0gcmVxdWlyZShcInVybFwiKTtcbnZhciBVUkwgPSB1cmwuVVJMO1xudmFyIGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcbnZhciBodHRwcyA9IHJlcXVpcmUoXCJodHRwc1wiKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoXCJzdHJlYW1cIikuV3JpdGFibGU7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoXCIuL2RlYnVnXCIpO1xuXG4vLyBDcmVhdGUgaGFuZGxlcnMgdGhhdCBwYXNzIGV2ZW50cyBmcm9tIG5hdGl2ZSByZXF1ZXN0c1xudmFyIGV2ZW50cyA9IFtcImFib3J0XCIsIFwiYWJvcnRlZFwiLCBcImNvbm5lY3RcIiwgXCJlcnJvclwiLCBcInNvY2tldFwiLCBcInRpbWVvdXRcIl07XG52YXIgZXZlbnRIYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5ldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgZXZlbnRIYW5kbGVyc1tldmVudF0gPSBmdW5jdGlvbiAoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHRoaXMuX3JlZGlyZWN0YWJsZS5lbWl0KGV2ZW50LCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgfTtcbn0pO1xuXG52YXIgSW52YWxpZFVybEVycm9yID0gY3JlYXRlRXJyb3JUeXBlKFxuICBcIkVSUl9JTlZBTElEX1VSTFwiLFxuICBcIkludmFsaWQgVVJMXCIsXG4gIFR5cGVFcnJvclxuKTtcbi8vIEVycm9yIHR5cGVzIHdpdGggY29kZXNcbnZhciBSZWRpcmVjdGlvbkVycm9yID0gY3JlYXRlRXJyb3JUeXBlKFxuICBcIkVSUl9GUl9SRURJUkVDVElPTl9GQUlMVVJFXCIsXG4gIFwiUmVkaXJlY3RlZCByZXF1ZXN0IGZhaWxlZFwiXG4pO1xudmFyIFRvb01hbnlSZWRpcmVjdHNFcnJvciA9IGNyZWF0ZUVycm9yVHlwZShcbiAgXCJFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTXCIsXG4gIFwiTWF4aW11bSBudW1iZXIgb2YgcmVkaXJlY3RzIGV4Y2VlZGVkXCJcbik7XG52YXIgTWF4Qm9keUxlbmd0aEV4Y2VlZGVkRXJyb3IgPSBjcmVhdGVFcnJvclR5cGUoXG4gIFwiRVJSX0ZSX01BWF9CT0RZX0xFTkdUSF9FWENFRURFRFwiLFxuICBcIlJlcXVlc3QgYm9keSBsYXJnZXIgdGhhbiBtYXhCb2R5TGVuZ3RoIGxpbWl0XCJcbik7XG52YXIgV3JpdGVBZnRlckVuZEVycm9yID0gY3JlYXRlRXJyb3JUeXBlKFxuICBcIkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EXCIsXG4gIFwid3JpdGUgYWZ0ZXIgZW5kXCJcbik7XG5cbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG52YXIgZGVzdHJveSA9IFdyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95IHx8IG5vb3A7XG5cbi8vIEFuIEhUVFAoUykgcmVxdWVzdCB0aGF0IGNhbiBiZSByZWRpcmVjdGVkXG5mdW5jdGlvbiBSZWRpcmVjdGFibGVSZXF1ZXN0KG9wdGlvbnMsIHJlc3BvbnNlQ2FsbGJhY2spIHtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgcmVxdWVzdFxuICBXcml0YWJsZS5jYWxsKHRoaXMpO1xuICB0aGlzLl9zYW5pdGl6ZU9wdGlvbnMob3B0aW9ucyk7XG4gIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLl9lbmRlZCA9IGZhbHNlO1xuICB0aGlzLl9lbmRpbmcgPSBmYWxzZTtcbiAgdGhpcy5fcmVkaXJlY3RDb3VudCA9IDA7XG4gIHRoaXMuX3JlZGlyZWN0cyA9IFtdO1xuICB0aGlzLl9yZXF1ZXN0Qm9keUxlbmd0aCA9IDA7XG4gIHRoaXMuX3JlcXVlc3RCb2R5QnVmZmVycyA9IFtdO1xuXG4gIC8vIEF0dGFjaCBhIGNhbGxiYWNrIGlmIHBhc3NlZFxuICBpZiAocmVzcG9uc2VDYWxsYmFjaykge1xuICAgIHRoaXMub24oXCJyZXNwb25zZVwiLCByZXNwb25zZUNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFJlYWN0IHRvIHJlc3BvbnNlcyBvZiBuYXRpdmUgcmVxdWVzdHNcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLl9vbk5hdGl2ZVJlc3BvbnNlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgc2VsZi5fcHJvY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfTtcblxuICAvLyBQZXJmb3JtIHRoZSBmaXJzdCByZXF1ZXN0XG4gIHRoaXMuX3BlcmZvcm1SZXF1ZXN0KCk7XG59XG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoV3JpdGFibGUucHJvdG90eXBlKTtcblxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIGRlc3Ryb3lSZXF1ZXN0KHRoaXMuX2N1cnJlbnRSZXF1ZXN0KTtcbiAgdGhpcy5fY3VycmVudFJlcXVlc3QuYWJvcnQoKTtcbiAgdGhpcy5lbWl0KFwiYWJvcnRcIik7XG59O1xuXG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gIGRlc3Ryb3lSZXF1ZXN0KHRoaXMuX2N1cnJlbnRSZXF1ZXN0LCBlcnJvcik7XG4gIGRlc3Ryb3kuY2FsbCh0aGlzLCBlcnJvcik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gV3JpdGVzIGJ1ZmZlcmVkIGRhdGEgdG8gdGhlIGN1cnJlbnQgbmF0aXZlIHJlcXVlc3RcblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAvLyBXcml0aW5nIGlzIG5vdCBhbGxvd2VkIGlmIGVuZCBoYXMgYmVlbiBjYWxsZWRcbiAgaWYgKHRoaXMuX2VuZGluZykge1xuICAgIHRocm93IG5ldyBXcml0ZUFmdGVyRW5kRXJyb3IoKTtcbiAgfVxuXG4gIC8vIFZhbGlkYXRlIGlucHV0IGFuZCBzaGlmdCBwYXJhbWV0ZXJzIGlmIG5lY2Vzc2FyeVxuICBpZiAoIWlzU3RyaW5nKGRhdGEpICYmICFpc0J1ZmZlcihkYXRhKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJkYXRhIHNob3VsZCBiZSBhIHN0cmluZywgQnVmZmVyIG9yIFVpbnQ4QXJyYXlcIik7XG4gIH1cbiAgaWYgKGlzRnVuY3Rpb24oZW5jb2RpbmcpKSB7XG4gICAgY2FsbGJhY2sgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICAvLyBJZ25vcmUgZW1wdHkgYnVmZmVycywgc2luY2Ugd3JpdGluZyB0aGVtIGRvZXNuJ3QgaW52b2tlIHRoZSBjYWxsYmFja1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzIyMDY2XG4gIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIE9ubHkgd3JpdGUgd2hlbiB3ZSBkb24ndCBleGNlZWQgdGhlIG1heGltdW0gYm9keSBsZW5ndGhcbiAgaWYgKHRoaXMuX3JlcXVlc3RCb2R5TGVuZ3RoICsgZGF0YS5sZW5ndGggPD0gdGhpcy5fb3B0aW9ucy5tYXhCb2R5TGVuZ3RoKSB7XG4gICAgdGhpcy5fcmVxdWVzdEJvZHlMZW5ndGggKz0gZGF0YS5sZW5ndGg7XG4gICAgdGhpcy5fcmVxdWVzdEJvZHlCdWZmZXJzLnB1c2goeyBkYXRhOiBkYXRhLCBlbmNvZGluZzogZW5jb2RpbmcgfSk7XG4gICAgdGhpcy5fY3VycmVudFJlcXVlc3Qud3JpdGUoZGF0YSwgZW5jb2RpbmcsIGNhbGxiYWNrKTtcbiAgfVxuICAvLyBFcnJvciB3aGVuIHdlIGV4Y2VlZCB0aGUgbWF4aW11bSBib2R5IGxlbmd0aFxuICBlbHNlIHtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBuZXcgTWF4Qm9keUxlbmd0aEV4Y2VlZGVkRXJyb3IoKSk7XG4gICAgdGhpcy5hYm9ydCgpO1xuICB9XG59O1xuXG4vLyBFbmRzIHRoZSBjdXJyZW50IG5hdGl2ZSByZXF1ZXN0XG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gIC8vIFNoaWZ0IHBhcmFtZXRlcnMgaWYgbmVjZXNzYXJ5XG4gIGlmIChpc0Z1bmN0aW9uKGRhdGEpKSB7XG4gICAgY2FsbGJhY2sgPSBkYXRhO1xuICAgIGRhdGEgPSBlbmNvZGluZyA9IG51bGw7XG4gIH1cbiAgZWxzZSBpZiAoaXNGdW5jdGlvbihlbmNvZGluZykpIHtcbiAgICBjYWxsYmFjayA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIC8vIFdyaXRlIGRhdGEgaWYgbmVlZGVkIGFuZCBlbmRcbiAgaWYgKCFkYXRhKSB7XG4gICAgdGhpcy5fZW5kZWQgPSB0aGlzLl9lbmRpbmcgPSB0cnVlO1xuICAgIHRoaXMuX2N1cnJlbnRSZXF1ZXN0LmVuZChudWxsLCBudWxsLCBjYWxsYmFjayk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBjdXJyZW50UmVxdWVzdCA9IHRoaXMuX2N1cnJlbnRSZXF1ZXN0O1xuICAgIHRoaXMud3JpdGUoZGF0YSwgZW5jb2RpbmcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuX2VuZGVkID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRSZXF1ZXN0LmVuZChudWxsLCBudWxsLCBjYWxsYmFjayk7XG4gICAgfSk7XG4gICAgdGhpcy5fZW5kaW5nID0gdHJ1ZTtcbiAgfVxufTtcblxuLy8gU2V0cyBhIGhlYWRlciB2YWx1ZSBvbiB0aGUgY3VycmVudCBuYXRpdmUgcmVxdWVzdFxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuc2V0SGVhZGVyID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX29wdGlvbnMuaGVhZGVyc1tuYW1lXSA9IHZhbHVlO1xuICB0aGlzLl9jdXJyZW50UmVxdWVzdC5zZXRIZWFkZXIobmFtZSwgdmFsdWUpO1xufTtcblxuLy8gQ2xlYXJzIGEgaGVhZGVyIHZhbHVlIG9uIHRoZSBjdXJyZW50IG5hdGl2ZSByZXF1ZXN0XG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5yZW1vdmVIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWxldGUgdGhpcy5fb3B0aW9ucy5oZWFkZXJzW25hbWVdO1xuICB0aGlzLl9jdXJyZW50UmVxdWVzdC5yZW1vdmVIZWFkZXIobmFtZSk7XG59O1xuXG4vLyBHbG9iYWwgdGltZW91dCBmb3IgYWxsIHVuZGVybHlpbmcgcmVxdWVzdHNcblJlZGlyZWN0YWJsZVJlcXVlc3QucHJvdG90eXBlLnNldFRpbWVvdXQgPSBmdW5jdGlvbiAobXNlY3MsIGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyBEZXN0cm95cyB0aGUgc29ja2V0IG9uIHRpbWVvdXRcbiAgZnVuY3Rpb24gZGVzdHJveU9uVGltZW91dChzb2NrZXQpIHtcbiAgICBzb2NrZXQuc2V0VGltZW91dChtc2Vjcyk7XG4gICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKFwidGltZW91dFwiLCBzb2NrZXQuZGVzdHJveSk7XG4gICAgc29ja2V0LmFkZExpc3RlbmVyKFwidGltZW91dFwiLCBzb2NrZXQuZGVzdHJveSk7XG4gIH1cblxuICAvLyBTZXRzIHVwIGEgdGltZXIgdG8gdHJpZ2dlciBhIHRpbWVvdXQgZXZlbnRcbiAgZnVuY3Rpb24gc3RhcnRUaW1lcihzb2NrZXQpIHtcbiAgICBpZiAoc2VsZi5fdGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHNlbGYuX3RpbWVvdXQpO1xuICAgIH1cbiAgICBzZWxmLl90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmVtaXQoXCJ0aW1lb3V0XCIpO1xuICAgICAgY2xlYXJUaW1lcigpO1xuICAgIH0sIG1zZWNzKTtcbiAgICBkZXN0cm95T25UaW1lb3V0KHNvY2tldCk7XG4gIH1cblxuICAvLyBTdG9wcyBhIHRpbWVvdXQgZnJvbSB0cmlnZ2VyaW5nXG4gIGZ1bmN0aW9uIGNsZWFyVGltZXIoKSB7XG4gICAgLy8gQ2xlYXIgdGhlIHRpbWVvdXRcbiAgICBpZiAoc2VsZi5fdGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHNlbGYuX3RpbWVvdXQpO1xuICAgICAgc2VsZi5fdGltZW91dCA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gQ2xlYW4gdXAgYWxsIGF0dGFjaGVkIGxpc3RlbmVyc1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoXCJhYm9ydFwiLCBjbGVhclRpbWVyKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIiwgY2xlYXJUaW1lcik7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcInJlc3BvbnNlXCIsIGNsZWFyVGltZXIpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLCBjbGVhclRpbWVyKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoXCJ0aW1lb3V0XCIsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgaWYgKCFzZWxmLnNvY2tldCkge1xuICAgICAgc2VsZi5fY3VycmVudFJlcXVlc3QucmVtb3ZlTGlzdGVuZXIoXCJzb2NrZXRcIiwgc3RhcnRUaW1lcik7XG4gICAgfVxuICB9XG5cbiAgLy8gQXR0YWNoIGNhbGxiYWNrIGlmIHBhc3NlZFxuICBpZiAoY2FsbGJhY2spIHtcbiAgICB0aGlzLm9uKFwidGltZW91dFwiLCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBTdGFydCB0aGUgdGltZXIgaWYgb3Igd2hlbiB0aGUgc29ja2V0IGlzIG9wZW5lZFxuICBpZiAodGhpcy5zb2NrZXQpIHtcbiAgICBzdGFydFRpbWVyKHRoaXMuc29ja2V0KTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLl9jdXJyZW50UmVxdWVzdC5vbmNlKFwic29ja2V0XCIsIHN0YXJ0VGltZXIpO1xuICB9XG5cbiAgLy8gQ2xlYW4gdXAgb24gZXZlbnRzXG4gIHRoaXMub24oXCJzb2NrZXRcIiwgZGVzdHJveU9uVGltZW91dCk7XG4gIHRoaXMub24oXCJhYm9ydFwiLCBjbGVhclRpbWVyKTtcbiAgdGhpcy5vbihcImVycm9yXCIsIGNsZWFyVGltZXIpO1xuICB0aGlzLm9uKFwicmVzcG9uc2VcIiwgY2xlYXJUaW1lcik7XG4gIHRoaXMub24oXCJjbG9zZVwiLCBjbGVhclRpbWVyKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIFByb3h5IGFsbCBvdGhlciBwdWJsaWMgQ2xpZW50UmVxdWVzdCBtZXRob2RzXG5bXG4gIFwiZmx1c2hIZWFkZXJzXCIsIFwiZ2V0SGVhZGVyXCIsXG4gIFwic2V0Tm9EZWxheVwiLCBcInNldFNvY2tldEtlZXBBbGl2ZVwiLFxuXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRSZXF1ZXN0W21ldGhvZF0oYSwgYik7XG4gIH07XG59KTtcblxuLy8gUHJveHkgYWxsIHB1YmxpYyBDbGllbnRSZXF1ZXN0IHByb3BlcnRpZXNcbltcImFib3J0ZWRcIiwgXCJjb25uZWN0aW9uXCIsIFwic29ja2V0XCJdLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZSwgcHJvcGVydHksIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2N1cnJlbnRSZXF1ZXN0W3Byb3BlcnR5XTsgfSxcbiAgfSk7XG59KTtcblxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuX3Nhbml0aXplT3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIC8vIEVuc3VyZSBoZWFkZXJzIGFyZSBhbHdheXMgcHJlc2VudFxuICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgIG9wdGlvbnMuaGVhZGVycyA9IHt9O1xuICB9XG5cbiAgLy8gU2luY2UgaHR0cC5yZXF1ZXN0IHRyZWF0cyBob3N0IGFzIGFuIGFsaWFzIG9mIGhvc3RuYW1lLFxuICAvLyBidXQgdGhlIHVybCBtb2R1bGUgaW50ZXJwcmV0cyBob3N0IGFzIGhvc3RuYW1lIHBsdXMgcG9ydCxcbiAgLy8gZWxpbWluYXRlIHRoZSBob3N0IHByb3BlcnR5IHRvIGF2b2lkIGNvbmZ1c2lvbi5cbiAgaWYgKG9wdGlvbnMuaG9zdCkge1xuICAgIC8vIFVzZSBob3N0bmFtZSBpZiBzZXQsIGJlY2F1c2UgaXQgaGFzIHByZWNlZGVuY2VcbiAgICBpZiAoIW9wdGlvbnMuaG9zdG5hbWUpIHtcbiAgICAgIG9wdGlvbnMuaG9zdG5hbWUgPSBvcHRpb25zLmhvc3Q7XG4gICAgfVxuICAgIGRlbGV0ZSBvcHRpb25zLmhvc3Q7XG4gIH1cblxuICAvLyBDb21wbGV0ZSB0aGUgVVJMIG9iamVjdCB3aGVuIG5lY2Vzc2FyeVxuICBpZiAoIW9wdGlvbnMucGF0aG5hbWUgJiYgb3B0aW9ucy5wYXRoKSB7XG4gICAgdmFyIHNlYXJjaFBvcyA9IG9wdGlvbnMucGF0aC5pbmRleE9mKFwiP1wiKTtcbiAgICBpZiAoc2VhcmNoUG9zIDwgMCkge1xuICAgICAgb3B0aW9ucy5wYXRobmFtZSA9IG9wdGlvbnMucGF0aDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBvcHRpb25zLnBhdGhuYW1lID0gb3B0aW9ucy5wYXRoLnN1YnN0cmluZygwLCBzZWFyY2hQb3MpO1xuICAgICAgb3B0aW9ucy5zZWFyY2ggPSBvcHRpb25zLnBhdGguc3Vic3RyaW5nKHNlYXJjaFBvcyk7XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIEV4ZWN1dGVzIHRoZSBuZXh0IG5hdGl2ZSByZXF1ZXN0IChpbml0aWFsIG9yIHJlZGlyZWN0KVxuUmVkaXJlY3RhYmxlUmVxdWVzdC5wcm90b3R5cGUuX3BlcmZvcm1SZXF1ZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBMb2FkIHRoZSBuYXRpdmUgcHJvdG9jb2xcbiAgdmFyIHByb3RvY29sID0gdGhpcy5fb3B0aW9ucy5wcm90b2NvbDtcbiAgdmFyIG5hdGl2ZVByb3RvY29sID0gdGhpcy5fb3B0aW9ucy5uYXRpdmVQcm90b2NvbHNbcHJvdG9jb2xdO1xuICBpZiAoIW5hdGl2ZVByb3RvY29sKSB7XG4gICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgbmV3IFR5cGVFcnJvcihcIlVuc3VwcG9ydGVkIHByb3RvY29sIFwiICsgcHJvdG9jb2wpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBJZiBzcGVjaWZpZWQsIHVzZSB0aGUgYWdlbnQgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvdG9jb2xcbiAgLy8gKEhUVFAgYW5kIEhUVFBTIHVzZSBkaWZmZXJlbnQgdHlwZXMgb2YgYWdlbnRzKVxuICBpZiAodGhpcy5fb3B0aW9ucy5hZ2VudHMpIHtcbiAgICB2YXIgc2NoZW1lID0gcHJvdG9jb2wuc2xpY2UoMCwgLTEpO1xuICAgIHRoaXMuX29wdGlvbnMuYWdlbnQgPSB0aGlzLl9vcHRpb25zLmFnZW50c1tzY2hlbWVdO1xuICB9XG5cbiAgLy8gQ3JlYXRlIHRoZSBuYXRpdmUgcmVxdWVzdCBhbmQgc2V0IHVwIGl0cyBldmVudCBoYW5kbGVyc1xuICB2YXIgcmVxdWVzdCA9IHRoaXMuX2N1cnJlbnRSZXF1ZXN0ID1cbiAgICAgICAgbmF0aXZlUHJvdG9jb2wucmVxdWVzdCh0aGlzLl9vcHRpb25zLCB0aGlzLl9vbk5hdGl2ZVJlc3BvbnNlKTtcbiAgcmVxdWVzdC5fcmVkaXJlY3RhYmxlID0gdGhpcztcbiAgZm9yICh2YXIgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgcmVxdWVzdC5vbihldmVudCwgZXZlbnRIYW5kbGVyc1tldmVudF0pO1xuICB9XG5cbiAgLy8gUkZDNzIzMMKnNS4zLjE6IFdoZW4gbWFraW5nIGEgcmVxdWVzdCBkaXJlY3RseSB0byBhbiBvcmlnaW4gc2VydmVyLCBb4oCmXVxuICAvLyBhIGNsaWVudCBNVVNUIHNlbmQgb25seSB0aGUgYWJzb2x1dGUgcGF0aCBb4oCmXSBhcyB0aGUgcmVxdWVzdC10YXJnZXQuXG4gIHRoaXMuX2N1cnJlbnRVcmwgPSAvXlxcLy8udGVzdCh0aGlzLl9vcHRpb25zLnBhdGgpID9cbiAgICB1cmwuZm9ybWF0KHRoaXMuX29wdGlvbnMpIDpcbiAgICAvLyBXaGVuIG1ha2luZyBhIHJlcXVlc3QgdG8gYSBwcm94eSwgW+KApl1cbiAgICAvLyBhIGNsaWVudCBNVVNUIHNlbmQgdGhlIHRhcmdldCBVUkkgaW4gYWJzb2x1dGUtZm9ybSBb4oCmXS5cbiAgICB0aGlzLl9vcHRpb25zLnBhdGg7XG5cbiAgLy8gRW5kIGEgcmVkaXJlY3RlZCByZXF1ZXN0XG4gIC8vIChUaGUgZmlyc3QgcmVxdWVzdCBtdXN0IGJlIGVuZGVkIGV4cGxpY2l0bHkgd2l0aCBSZWRpcmVjdGFibGVSZXF1ZXN0I2VuZClcbiAgaWYgKHRoaXMuX2lzUmVkaXJlY3QpIHtcbiAgICAvLyBXcml0ZSB0aGUgcmVxdWVzdCBlbnRpdHkgYW5kIGVuZFxuICAgIHZhciBpID0gMDtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGJ1ZmZlcnMgPSB0aGlzLl9yZXF1ZXN0Qm9keUJ1ZmZlcnM7XG4gICAgKGZ1bmN0aW9uIHdyaXRlTmV4dChlcnJvcikge1xuICAgICAgLy8gT25seSB3cml0ZSBpZiB0aGlzIHJlcXVlc3QgaGFzIG5vdCBiZWVuIHJlZGlyZWN0ZWQgeWV0XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHJlcXVlc3QgPT09IHNlbGYuX2N1cnJlbnRSZXF1ZXN0KSB7XG4gICAgICAgIC8vIFJlcG9ydCBhbnkgd3JpdGUgZXJyb3JzXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBzZWxmLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV3JpdGUgdGhlIG5leHQgYnVmZmVyIGlmIHRoZXJlIGFyZSBzdGlsbCBsZWZ0XG4gICAgICAgIGVsc2UgaWYgKGkgPCBidWZmZXJzLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBidWZmZXIgPSBidWZmZXJzW2krK107XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICBpZiAoIXJlcXVlc3QuZmluaXNoZWQpIHtcbiAgICAgICAgICAgIHJlcXVlc3Qud3JpdGUoYnVmZmVyLmRhdGEsIGJ1ZmZlci5lbmNvZGluZywgd3JpdGVOZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5kIHRoZSByZXF1ZXN0IGlmIGBlbmRgIGhhcyBiZWVuIGNhbGxlZCBvbiB1c1xuICAgICAgICBlbHNlIGlmIChzZWxmLl9lbmRlZCkge1xuICAgICAgICAgIHJlcXVlc3QuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KCkpO1xuICB9XG59O1xuXG4vLyBQcm9jZXNzZXMgYSByZXNwb25zZSBmcm9tIHRoZSBjdXJyZW50IG5hdGl2ZSByZXF1ZXN0XG5SZWRpcmVjdGFibGVSZXF1ZXN0LnByb3RvdHlwZS5fcHJvY2Vzc1Jlc3BvbnNlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gIC8vIFN0b3JlIHRoZSByZWRpcmVjdGVkIHJlc3BvbnNlXG4gIHZhciBzdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgaWYgKHRoaXMuX29wdGlvbnMudHJhY2tSZWRpcmVjdHMpIHtcbiAgICB0aGlzLl9yZWRpcmVjdHMucHVzaCh7XG4gICAgICB1cmw6IHRoaXMuX2N1cnJlbnRVcmwsXG4gICAgICBoZWFkZXJzOiByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJGQzcyMzHCpzYuNDogVGhlIDN4eCAoUmVkaXJlY3Rpb24pIGNsYXNzIG9mIHN0YXR1cyBjb2RlIGluZGljYXRlc1xuICAvLyB0aGF0IGZ1cnRoZXIgYWN0aW9uIG5lZWRzIHRvIGJlIHRha2VuIGJ5IHRoZSB1c2VyIGFnZW50IGluIG9yZGVyIHRvXG4gIC8vIGZ1bGZpbGwgdGhlIHJlcXVlc3QuIElmIGEgTG9jYXRpb24gaGVhZGVyIGZpZWxkIGlzIHByb3ZpZGVkLFxuICAvLyB0aGUgdXNlciBhZ2VudCBNQVkgYXV0b21hdGljYWxseSByZWRpcmVjdCBpdHMgcmVxdWVzdCB0byB0aGUgVVJJXG4gIC8vIHJlZmVyZW5jZWQgYnkgdGhlIExvY2F0aW9uIGZpZWxkIHZhbHVlLFxuICAvLyBldmVuIGlmIHRoZSBzcGVjaWZpYyBzdGF0dXMgY29kZSBpcyBub3QgdW5kZXJzdG9vZC5cblxuICAvLyBJZiB0aGUgcmVzcG9uc2UgaXMgbm90IGEgcmVkaXJlY3Q7IHJldHVybiBpdCBhcy1pc1xuICB2YXIgbG9jYXRpb24gPSByZXNwb25zZS5oZWFkZXJzLmxvY2F0aW9uO1xuICBpZiAoIWxvY2F0aW9uIHx8IHRoaXMuX29wdGlvbnMuZm9sbG93UmVkaXJlY3RzID09PSBmYWxzZSB8fFxuICAgICAgc3RhdHVzQ29kZSA8IDMwMCB8fCBzdGF0dXNDb2RlID49IDQwMCkge1xuICAgIHJlc3BvbnNlLnJlc3BvbnNlVXJsID0gdGhpcy5fY3VycmVudFVybDtcbiAgICByZXNwb25zZS5yZWRpcmVjdHMgPSB0aGlzLl9yZWRpcmVjdHM7XG4gICAgdGhpcy5lbWl0KFwicmVzcG9uc2VcIiwgcmVzcG9uc2UpO1xuXG4gICAgLy8gQ2xlYW4gdXBcbiAgICB0aGlzLl9yZXF1ZXN0Qm9keUJ1ZmZlcnMgPSBbXTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBUaGUgcmVzcG9uc2UgaXMgYSByZWRpcmVjdCwgc28gYWJvcnQgdGhlIGN1cnJlbnQgcmVxdWVzdFxuICBkZXN0cm95UmVxdWVzdCh0aGlzLl9jdXJyZW50UmVxdWVzdCk7XG4gIC8vIERpc2NhcmQgdGhlIHJlbWFpbmRlciBvZiB0aGUgcmVzcG9uc2UgdG8gYXZvaWQgd2FpdGluZyBmb3IgZGF0YVxuICByZXNwb25zZS5kZXN0cm95KCk7XG5cbiAgLy8gUkZDNzIzMcKnNi40OiBBIGNsaWVudCBTSE9VTEQgZGV0ZWN0IGFuZCBpbnRlcnZlbmVcbiAgLy8gaW4gY3ljbGljYWwgcmVkaXJlY3Rpb25zIChpLmUuLCBcImluZmluaXRlXCIgcmVkaXJlY3Rpb24gbG9vcHMpLlxuICBpZiAoKyt0aGlzLl9yZWRpcmVjdENvdW50ID4gdGhpcy5fb3B0aW9ucy5tYXhSZWRpcmVjdHMpIHtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBuZXcgVG9vTWFueVJlZGlyZWN0c0Vycm9yKCkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFN0b3JlIHRoZSByZXF1ZXN0IGhlYWRlcnMgaWYgYXBwbGljYWJsZVxuICB2YXIgcmVxdWVzdEhlYWRlcnM7XG4gIHZhciBiZWZvcmVSZWRpcmVjdCA9IHRoaXMuX29wdGlvbnMuYmVmb3JlUmVkaXJlY3Q7XG4gIGlmIChiZWZvcmVSZWRpcmVjdCkge1xuICAgIHJlcXVlc3RIZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAvLyBUaGUgSG9zdCBoZWFkZXIgd2FzIHNldCBieSBuYXRpdmVQcm90b2NvbC5yZXF1ZXN0XG4gICAgICBIb3N0OiByZXNwb25zZS5yZXEuZ2V0SGVhZGVyKFwiaG9zdFwiKSxcbiAgICB9LCB0aGlzLl9vcHRpb25zLmhlYWRlcnMpO1xuICB9XG5cbiAgLy8gUkZDNzIzMcKnNi40OiBBdXRvbWF0aWMgcmVkaXJlY3Rpb24gbmVlZHMgdG8gZG9uZSB3aXRoXG4gIC8vIGNhcmUgZm9yIG1ldGhvZHMgbm90IGtub3duIHRvIGJlIHNhZmUsIFvigKZdXG4gIC8vIFJGQzcyMzHCpzYuNC4y4oCTMzogRm9yIGhpc3RvcmljYWwgcmVhc29ucywgYSB1c2VyIGFnZW50IE1BWSBjaGFuZ2VcbiAgLy8gdGhlIHJlcXVlc3QgbWV0aG9kIGZyb20gUE9TVCB0byBHRVQgZm9yIHRoZSBzdWJzZXF1ZW50IHJlcXVlc3QuXG4gIHZhciBtZXRob2QgPSB0aGlzLl9vcHRpb25zLm1ldGhvZDtcbiAgaWYgKChzdGF0dXNDb2RlID09PSAzMDEgfHwgc3RhdHVzQ29kZSA9PT0gMzAyKSAmJiB0aGlzLl9vcHRpb25zLm1ldGhvZCA9PT0gXCJQT1NUXCIgfHxcbiAgICAgIC8vIFJGQzcyMzHCpzYuNC40OiBUaGUgMzAzIChTZWUgT3RoZXIpIHN0YXR1cyBjb2RlIGluZGljYXRlcyB0aGF0XG4gICAgICAvLyB0aGUgc2VydmVyIGlzIHJlZGlyZWN0aW5nIHRoZSB1c2VyIGFnZW50IHRvIGEgZGlmZmVyZW50IHJlc291cmNlIFvigKZdXG4gICAgICAvLyBBIHVzZXIgYWdlbnQgY2FuIHBlcmZvcm0gYSByZXRyaWV2YWwgcmVxdWVzdCB0YXJnZXRpbmcgdGhhdCBVUklcbiAgICAgIC8vIChhIEdFVCBvciBIRUFEIHJlcXVlc3QgaWYgdXNpbmcgSFRUUCkgW+KApl1cbiAgICAgIChzdGF0dXNDb2RlID09PSAzMDMpICYmICEvXig/OkdFVHxIRUFEKSQvLnRlc3QodGhpcy5fb3B0aW9ucy5tZXRob2QpKSB7XG4gICAgdGhpcy5fb3B0aW9ucy5tZXRob2QgPSBcIkdFVFwiO1xuICAgIC8vIERyb3AgYSBwb3NzaWJsZSBlbnRpdHkgYW5kIGhlYWRlcnMgcmVsYXRlZCB0byBpdFxuICAgIHRoaXMuX3JlcXVlc3RCb2R5QnVmZmVycyA9IFtdO1xuICAgIHJlbW92ZU1hdGNoaW5nSGVhZGVycygvXmNvbnRlbnQtL2ksIHRoaXMuX29wdGlvbnMuaGVhZGVycyk7XG4gIH1cblxuICAvLyBEcm9wIHRoZSBIb3N0IGhlYWRlciwgYXMgdGhlIHJlZGlyZWN0IG1pZ2h0IGxlYWQgdG8gYSBkaWZmZXJlbnQgaG9zdFxuICB2YXIgY3VycmVudEhvc3RIZWFkZXIgPSByZW1vdmVNYXRjaGluZ0hlYWRlcnMoL15ob3N0JC9pLCB0aGlzLl9vcHRpb25zLmhlYWRlcnMpO1xuXG4gIC8vIElmIHRoZSByZWRpcmVjdCBpcyByZWxhdGl2ZSwgY2Fycnkgb3ZlciB0aGUgaG9zdCBvZiB0aGUgbGFzdCByZXF1ZXN0XG4gIHZhciBjdXJyZW50VXJsUGFydHMgPSB1cmwucGFyc2UodGhpcy5fY3VycmVudFVybCk7XG4gIHZhciBjdXJyZW50SG9zdCA9IGN1cnJlbnRIb3N0SGVhZGVyIHx8IGN1cnJlbnRVcmxQYXJ0cy5ob3N0O1xuICB2YXIgY3VycmVudFVybCA9IC9eXFx3KzovLnRlc3QobG9jYXRpb24pID8gdGhpcy5fY3VycmVudFVybCA6XG4gICAgdXJsLmZvcm1hdChPYmplY3QuYXNzaWduKGN1cnJlbnRVcmxQYXJ0cywgeyBob3N0OiBjdXJyZW50SG9zdCB9KSk7XG5cbiAgLy8gRGV0ZXJtaW5lIHRoZSBVUkwgb2YgdGhlIHJlZGlyZWN0aW9uXG4gIHZhciByZWRpcmVjdFVybDtcbiAgdHJ5IHtcbiAgICByZWRpcmVjdFVybCA9IHVybC5yZXNvbHZlKGN1cnJlbnRVcmwsIGxvY2F0aW9uKTtcbiAgfVxuICBjYXRjaCAoY2F1c2UpIHtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBuZXcgUmVkaXJlY3Rpb25FcnJvcih7IGNhdXNlOiBjYXVzZSB9KSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gQ3JlYXRlIHRoZSByZWRpcmVjdGVkIHJlcXVlc3RcbiAgZGVidWcoXCJyZWRpcmVjdGluZyB0b1wiLCByZWRpcmVjdFVybCk7XG4gIHRoaXMuX2lzUmVkaXJlY3QgPSB0cnVlO1xuICB2YXIgcmVkaXJlY3RVcmxQYXJ0cyA9IHVybC5wYXJzZShyZWRpcmVjdFVybCk7XG4gIE9iamVjdC5hc3NpZ24odGhpcy5fb3B0aW9ucywgcmVkaXJlY3RVcmxQYXJ0cyk7XG5cbiAgLy8gRHJvcCBjb25maWRlbnRpYWwgaGVhZGVycyB3aGVuIHJlZGlyZWN0aW5nIHRvIGEgbGVzcyBzZWN1cmUgcHJvdG9jb2xcbiAgLy8gb3IgdG8gYSBkaWZmZXJlbnQgZG9tYWluIHRoYXQgaXMgbm90IGEgc3VwZXJkb21haW5cbiAgaWYgKHJlZGlyZWN0VXJsUGFydHMucHJvdG9jb2wgIT09IGN1cnJlbnRVcmxQYXJ0cy5wcm90b2NvbCAmJlxuICAgICByZWRpcmVjdFVybFBhcnRzLnByb3RvY29sICE9PSBcImh0dHBzOlwiIHx8XG4gICAgIHJlZGlyZWN0VXJsUGFydHMuaG9zdCAhPT0gY3VycmVudEhvc3QgJiZcbiAgICAgIWlzU3ViZG9tYWluKHJlZGlyZWN0VXJsUGFydHMuaG9zdCwgY3VycmVudEhvc3QpKSB7XG4gICAgcmVtb3ZlTWF0Y2hpbmdIZWFkZXJzKC9eKD86YXV0aG9yaXphdGlvbnxjb29raWUpJC9pLCB0aGlzLl9vcHRpb25zLmhlYWRlcnMpO1xuICB9XG5cbiAgLy8gRXZhbHVhdGUgdGhlIGJlZm9yZVJlZGlyZWN0IGNhbGxiYWNrXG4gIGlmIChpc0Z1bmN0aW9uKGJlZm9yZVJlZGlyZWN0KSkge1xuICAgIHZhciByZXNwb25zZURldGFpbHMgPSB7XG4gICAgICBoZWFkZXJzOiByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSxcbiAgICB9O1xuICAgIHZhciByZXF1ZXN0RGV0YWlscyA9IHtcbiAgICAgIHVybDogY3VycmVudFVybCxcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgaGVhZGVyczogcmVxdWVzdEhlYWRlcnMsXG4gICAgfTtcbiAgICB0cnkge1xuICAgICAgYmVmb3JlUmVkaXJlY3QodGhpcy5fb3B0aW9ucywgcmVzcG9uc2VEZXRhaWxzLCByZXF1ZXN0RGV0YWlscyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3Nhbml0aXplT3B0aW9ucyh0aGlzLl9vcHRpb25zKTtcbiAgfVxuXG4gIC8vIFBlcmZvcm0gdGhlIHJlZGlyZWN0ZWQgcmVxdWVzdFxuICB0cnkge1xuICAgIHRoaXMuX3BlcmZvcm1SZXF1ZXN0KCk7XG4gIH1cbiAgY2F0Y2ggKGNhdXNlKSB7XG4gICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgbmV3IFJlZGlyZWN0aW9uRXJyb3IoeyBjYXVzZTogY2F1c2UgfSkpO1xuICB9XG59O1xuXG4vLyBXcmFwcyB0aGUga2V5L3ZhbHVlIG9iamVjdCBvZiBwcm90b2NvbHMgd2l0aCByZWRpcmVjdCBmdW5jdGlvbmFsaXR5XG5mdW5jdGlvbiB3cmFwKHByb3RvY29scykge1xuICAvLyBEZWZhdWx0IHNldHRpbmdzXG4gIHZhciBleHBvcnRzID0ge1xuICAgIG1heFJlZGlyZWN0czogMjEsXG4gICAgbWF4Qm9keUxlbmd0aDogMTAgKiAxMDI0ICogMTAyNCxcbiAgfTtcblxuICAvLyBXcmFwIGVhY2ggcHJvdG9jb2xcbiAgdmFyIG5hdGl2ZVByb3RvY29scyA9IHt9O1xuICBPYmplY3Qua2V5cyhwcm90b2NvbHMpLmZvckVhY2goZnVuY3Rpb24gKHNjaGVtZSkge1xuICAgIHZhciBwcm90b2NvbCA9IHNjaGVtZSArIFwiOlwiO1xuICAgIHZhciBuYXRpdmVQcm90b2NvbCA9IG5hdGl2ZVByb3RvY29sc1twcm90b2NvbF0gPSBwcm90b2NvbHNbc2NoZW1lXTtcbiAgICB2YXIgd3JhcHBlZFByb3RvY29sID0gZXhwb3J0c1tzY2hlbWVdID0gT2JqZWN0LmNyZWF0ZShuYXRpdmVQcm90b2NvbCk7XG5cbiAgICAvLyBFeGVjdXRlcyBhIHJlcXVlc3QsIGZvbGxvd2luZyByZWRpcmVjdHNcbiAgICBmdW5jdGlvbiByZXF1ZXN0KGlucHV0LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgLy8gUGFyc2UgcGFyYW1ldGVyc1xuICAgICAgaWYgKGlzU3RyaW5nKGlucHV0KSkge1xuICAgICAgICB2YXIgcGFyc2VkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHBhcnNlZCA9IHVybFRvT3B0aW9ucyhuZXcgVVJMKGlucHV0KSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgcGFyc2VkID0gdXJsLnBhcnNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzU3RyaW5nKHBhcnNlZC5wcm90b2NvbCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFVybEVycm9yKHsgaW5wdXQgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQgPSBwYXJzZWQ7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChVUkwgJiYgKGlucHV0IGluc3RhbmNlb2YgVVJMKSkge1xuICAgICAgICBpbnB1dCA9IHVybFRvT3B0aW9ucyhpbnB1dCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gaW5wdXQ7XG4gICAgICAgIGlucHV0ID0geyBwcm90b2NvbDogcHJvdG9jb2wgfTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCBkZWZhdWx0c1xuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBtYXhSZWRpcmVjdHM6IGV4cG9ydHMubWF4UmVkaXJlY3RzLFxuICAgICAgICBtYXhCb2R5TGVuZ3RoOiBleHBvcnRzLm1heEJvZHlMZW5ndGgsXG4gICAgICB9LCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLm5hdGl2ZVByb3RvY29scyA9IG5hdGl2ZVByb3RvY29scztcbiAgICAgIGlmICghaXNTdHJpbmcob3B0aW9ucy5ob3N0KSAmJiAhaXNTdHJpbmcob3B0aW9ucy5ob3N0bmFtZSkpIHtcbiAgICAgICAgb3B0aW9ucy5ob3N0bmFtZSA9IFwiOjoxXCI7XG4gICAgICB9XG5cbiAgICAgIGFzc2VydC5lcXVhbChvcHRpb25zLnByb3RvY29sLCBwcm90b2NvbCwgXCJwcm90b2NvbCBtaXNtYXRjaFwiKTtcbiAgICAgIGRlYnVnKFwib3B0aW9uc1wiLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBuZXcgUmVkaXJlY3RhYmxlUmVxdWVzdChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLy8gRXhlY3V0ZXMgYSBHRVQgcmVxdWVzdCwgZm9sbG93aW5nIHJlZGlyZWN0c1xuICAgIGZ1bmN0aW9uIGdldChpbnB1dCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgIHZhciB3cmFwcGVkUmVxdWVzdCA9IHdyYXBwZWRQcm90b2NvbC5yZXF1ZXN0KGlucHV0LCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICB3cmFwcGVkUmVxdWVzdC5lbmQoKTtcbiAgICAgIHJldHVybiB3cmFwcGVkUmVxdWVzdDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgdGhlIHByb3BlcnRpZXMgb24gdGhlIHdyYXBwZWQgcHJvdG9jb2xcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3cmFwcGVkUHJvdG9jb2wsIHtcbiAgICAgIHJlcXVlc3Q6IHsgdmFsdWU6IHJlcXVlc3QsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSxcbiAgICAgIGdldDogeyB2YWx1ZTogZ2V0LCBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gZXhwb3J0cztcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIG5vb3AoKSB7IC8qIGVtcHR5ICovIH1cblxuLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9tYXN0ZXIvbGliL2ludGVybmFsL3VybC5qc1xuZnVuY3Rpb24gdXJsVG9PcHRpb25zKHVybE9iamVjdCkge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBwcm90b2NvbDogdXJsT2JqZWN0LnByb3RvY29sLFxuICAgIGhvc3RuYW1lOiB1cmxPYmplY3QuaG9zdG5hbWUuc3RhcnRzV2l0aChcIltcIikgP1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHVybE9iamVjdC5ob3N0bmFtZS5zbGljZSgxLCAtMSkgOlxuICAgICAgdXJsT2JqZWN0Lmhvc3RuYW1lLFxuICAgIGhhc2g6IHVybE9iamVjdC5oYXNoLFxuICAgIHNlYXJjaDogdXJsT2JqZWN0LnNlYXJjaCxcbiAgICBwYXRobmFtZTogdXJsT2JqZWN0LnBhdGhuYW1lLFxuICAgIHBhdGg6IHVybE9iamVjdC5wYXRobmFtZSArIHVybE9iamVjdC5zZWFyY2gsXG4gICAgaHJlZjogdXJsT2JqZWN0LmhyZWYsXG4gIH07XG4gIGlmICh1cmxPYmplY3QucG9ydCAhPT0gXCJcIikge1xuICAgIG9wdGlvbnMucG9ydCA9IE51bWJlcih1cmxPYmplY3QucG9ydCk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU1hdGNoaW5nSGVhZGVycyhyZWdleCwgaGVhZGVycykge1xuICB2YXIgbGFzdFZhbHVlO1xuICBmb3IgKHZhciBoZWFkZXIgaW4gaGVhZGVycykge1xuICAgIGlmIChyZWdleC50ZXN0KGhlYWRlcikpIHtcbiAgICAgIGxhc3RWYWx1ZSA9IGhlYWRlcnNbaGVhZGVyXTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW2hlYWRlcl07XG4gICAgfVxuICB9XG4gIHJldHVybiAobGFzdFZhbHVlID09PSBudWxsIHx8IHR5cGVvZiBsYXN0VmFsdWUgPT09IFwidW5kZWZpbmVkXCIpID9cbiAgICB1bmRlZmluZWQgOiBTdHJpbmcobGFzdFZhbHVlKS50cmltKCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yVHlwZShjb2RlLCBtZXNzYWdlLCBiYXNlQ2xhc3MpIHtcbiAgLy8gQ3JlYXRlIGNvbnN0cnVjdG9yXG4gIGZ1bmN0aW9uIEN1c3RvbUVycm9yKHByb3BlcnRpZXMpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHByb3BlcnRpZXMgfHwge30pO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5tZXNzYWdlID0gdGhpcy5jYXVzZSA/IG1lc3NhZ2UgKyBcIjogXCIgKyB0aGlzLmNhdXNlLm1lc3NhZ2UgOiBtZXNzYWdlO1xuICB9XG5cbiAgLy8gQXR0YWNoIGNvbnN0cnVjdG9yIGFuZCBzZXQgZGVmYXVsdCBwcm9wZXJ0aWVzXG4gIEN1c3RvbUVycm9yLnByb3RvdHlwZSA9IG5ldyAoYmFzZUNsYXNzIHx8IEVycm9yKSgpO1xuICBDdXN0b21FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdXN0b21FcnJvcjtcbiAgQ3VzdG9tRXJyb3IucHJvdG90eXBlLm5hbWUgPSBcIkVycm9yIFtcIiArIGNvZGUgKyBcIl1cIjtcbiAgcmV0dXJuIEN1c3RvbUVycm9yO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95UmVxdWVzdChyZXF1ZXN0LCBlcnJvcikge1xuICBmb3IgKHZhciBldmVudCBvZiBldmVudHMpIHtcbiAgICByZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBldmVudEhhbmRsZXJzW2V2ZW50XSk7XG4gIH1cbiAgcmVxdWVzdC5vbihcImVycm9yXCIsIG5vb3ApO1xuICByZXF1ZXN0LmRlc3Ryb3koZXJyb3IpO1xufVxuXG5mdW5jdGlvbiBpc1N1YmRvbWFpbihzdWJkb21haW4sIGRvbWFpbikge1xuICBhc3NlcnQoaXNTdHJpbmcoc3ViZG9tYWluKSAmJiBpc1N0cmluZyhkb21haW4pKTtcbiAgdmFyIGRvdCA9IHN1YmRvbWFpbi5sZW5ndGggLSBkb21haW4ubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGRvdCA+IDAgJiYgc3ViZG9tYWluW2RvdF0gPT09IFwiLlwiICYmIHN1YmRvbWFpbi5lbmRzV2l0aChkb21haW4pO1xufVxuXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nO1xufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiAoXCJsZW5ndGhcIiBpbiB2YWx1ZSk7XG59XG5cbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gd3JhcCh7IGh0dHA6IGh0dHAsIGh0dHBzOiBodHRwcyB9KTtcbm1vZHVsZS5leHBvcnRzLndyYXAgPSB3cmFwO1xuIiwidmFyIGRlYnVnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCFkZWJ1Zykge1xuICAgIHRyeSB7XG4gICAgICAvKiBlc2xpbnQgZ2xvYmFsLXJlcXVpcmU6IG9mZiAqL1xuICAgICAgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJmb2xsb3ctcmVkaXJlY3RzXCIpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgLyogKi8gfVxuICAgIGlmICh0eXBlb2YgZGVidWcgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZGVidWcgPSBmdW5jdGlvbiAoKSB7IC8qICovIH07XG4gICAgfVxuICB9XG4gIGRlYnVnLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwidmVyc2lvblwiOiBcIjAuMjcuMlwiXG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xudmFyIGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcbnZhciBodHRwRm9sbG93ID0gcmVxdWlyZSgnZm9sbG93LXJlZGlyZWN0cycpLmh0dHA7XG52YXIgaHR0cHNGb2xsb3cgPSByZXF1aXJlKCdmb2xsb3ctcmVkaXJlY3RzJykuaHR0cHM7XG52YXIgdXJsID0gcmVxdWlyZSgndXJsJyk7XG52YXIgemxpYiA9IHJlcXVpcmUoJ3psaWInKTtcbnZhciBWRVJTSU9OID0gcmVxdWlyZSgnLi8uLi9lbnYvZGF0YScpLnZlcnNpb247XG52YXIgdHJhbnNpdGlvbmFsRGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwnKTtcbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG52YXIgQ2FuY2VsZWRFcnJvciA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yJyk7XG5cbnZhciBpc0h0dHBzID0gL2h0dHBzOj8vO1xuXG52YXIgc3VwcG9ydGVkUHJvdG9jb2xzID0gWyAnaHR0cDonLCAnaHR0cHM6JywgJ2ZpbGU6JyBdO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge2h0dHAuQ2xpZW50UmVxdWVzdEFyZ3N9IG9wdGlvbnNcbiAqIEBwYXJhbSB7QXhpb3NQcm94eUNvbmZpZ30gcHJveHlcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvblxuICovXG5mdW5jdGlvbiBzZXRQcm94eShvcHRpb25zLCBwcm94eSwgbG9jYXRpb24pIHtcbiAgb3B0aW9ucy5ob3N0bmFtZSA9IHByb3h5Lmhvc3Q7XG4gIG9wdGlvbnMuaG9zdCA9IHByb3h5Lmhvc3Q7XG4gIG9wdGlvbnMucG9ydCA9IHByb3h5LnBvcnQ7XG4gIG9wdGlvbnMucGF0aCA9IGxvY2F0aW9uO1xuXG4gIC8vIEJhc2ljIHByb3h5IGF1dGhvcml6YXRpb25cbiAgaWYgKHByb3h5LmF1dGgpIHtcbiAgICB2YXIgYmFzZTY0ID0gQnVmZmVyLmZyb20ocHJveHkuYXV0aC51c2VybmFtZSArICc6JyArIHByb3h5LmF1dGgucGFzc3dvcmQsICd1dGY4JykudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIG9wdGlvbnMuaGVhZGVyc1snUHJveHktQXV0aG9yaXphdGlvbiddID0gJ0Jhc2ljICcgKyBiYXNlNjQ7XG4gIH1cblxuICAvLyBJZiBhIHByb3h5IGlzIHVzZWQsIGFueSByZWRpcmVjdHMgbXVzdCBhbHNvIHBhc3MgdGhyb3VnaCB0aGUgcHJveHlcbiAgb3B0aW9ucy5iZWZvcmVSZWRpcmVjdCA9IGZ1bmN0aW9uIGJlZm9yZVJlZGlyZWN0KHJlZGlyZWN0aW9uKSB7XG4gICAgcmVkaXJlY3Rpb24uaGVhZGVycy5ob3N0ID0gcmVkaXJlY3Rpb24uaG9zdDtcbiAgICBzZXRQcm94eShyZWRpcmVjdGlvbiwgcHJveHksIHJlZGlyZWN0aW9uLmhyZWYpO1xuICB9O1xufVxuXG4vKmVzbGludCBjb25zaXN0ZW50LXJldHVybjowKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaHR0cEFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaEh0dHBSZXF1ZXN0KHJlc29sdmVQcm9taXNlLCByZWplY3RQcm9taXNlKSB7XG4gICAgdmFyIG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciByZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgZG9uZSgpO1xuICAgICAgcmVzb2x2ZVByb21pc2UodmFsdWUpO1xuICAgIH07XG4gICAgdmFyIHJlamVjdGVkID0gZmFsc2U7XG4gICAgdmFyIHJlamVjdCA9IGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkge1xuICAgICAgZG9uZSgpO1xuICAgICAgcmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgcmVqZWN0UHJvbWlzZSh2YWx1ZSk7XG4gICAgfTtcbiAgICB2YXIgZGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciBoZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgdmFyIGhlYWRlck5hbWVzID0ge307XG5cbiAgICBPYmplY3Qua2V5cyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIHN0b3JlTG93ZXJOYW1lKG5hbWUpIHtcbiAgICAgIGhlYWRlck5hbWVzW25hbWUudG9Mb3dlckNhc2UoKV0gPSBuYW1lO1xuICAgIH0pO1xuXG4gICAgLy8gU2V0IFVzZXItQWdlbnQgKHJlcXVpcmVkIGJ5IHNvbWUgc2VydmVycylcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy82OVxuICAgIGlmICgndXNlci1hZ2VudCcgaW4gaGVhZGVyTmFtZXMpIHtcbiAgICAgIC8vIFVzZXItQWdlbnQgaXMgc3BlY2lmaWVkOyBoYW5kbGUgY2FzZSB3aGVyZSBubyBVQSBoZWFkZXIgaXMgZGVzaXJlZFxuICAgICAgaWYgKCFoZWFkZXJzW2hlYWRlck5hbWVzWyd1c2VyLWFnZW50J11dKSB7XG4gICAgICAgIGRlbGV0ZSBoZWFkZXJzW2hlYWRlck5hbWVzWyd1c2VyLWFnZW50J11dO1xuICAgICAgfVxuICAgICAgLy8gT3RoZXJ3aXNlLCB1c2Ugc3BlY2lmaWVkIHZhbHVlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9ubHkgc2V0IGhlYWRlciBpZiBpdCBoYXNuJ3QgYmVlbiBzZXQgaW4gY29uZmlnXG4gICAgICBoZWFkZXJzWydVc2VyLUFnZW50J10gPSAnYXhpb3MvJyArIFZFUlNJT047XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydCBmb3IgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZm9ybS1kYXRhIGFwaVxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpICYmIHV0aWxzLmlzRnVuY3Rpb24oZGF0YS5nZXRIZWFkZXJzKSkge1xuICAgICAgT2JqZWN0LmFzc2lnbihoZWFkZXJzLCBkYXRhLmdldEhlYWRlcnMoKSk7XG4gICAgfSBlbHNlIGlmIChkYXRhICYmICF1dGlscy5pc1N0cmVhbShkYXRhKSkge1xuICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICAvLyBOb3RoaW5nIHRvIGRvLi4uXG4gICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKG5ldyBVaW50OEFycmF5KGRhdGEpKTtcbiAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsICd1dGYtOCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgICAnRGF0YSBhZnRlciB0cmFuc2Zvcm1hdGlvbiBtdXN0IGJlIGEgc3RyaW5nLCBhbiBBcnJheUJ1ZmZlciwgYSBCdWZmZXIsIG9yIGEgU3RyZWFtJyxcbiAgICAgICAgICBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCxcbiAgICAgICAgICBjb25maWdcbiAgICAgICAgKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcubWF4Qm9keUxlbmd0aCA+IC0xICYmIGRhdGEubGVuZ3RoID4gY29uZmlnLm1heEJvZHlMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgICAnUmVxdWVzdCBib2R5IGxhcmdlciB0aGFuIG1heEJvZHlMZW5ndGggbGltaXQnLFxuICAgICAgICAgIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULFxuICAgICAgICAgIGNvbmZpZ1xuICAgICAgICApKTtcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIENvbnRlbnQtTGVuZ3RoIGhlYWRlciBpZiBkYXRhIGV4aXN0c1xuICAgICAgaWYgKCFoZWFkZXJOYW1lc1snY29udGVudC1sZW5ndGgnXSkge1xuICAgICAgICBoZWFkZXJzWydDb250ZW50LUxlbmd0aCddID0gZGF0YS5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIHZhciBhdXRoID0gdW5kZWZpbmVkO1xuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIGF1dGggPSB1c2VybmFtZSArICc6JyArIHBhc3N3b3JkO1xuICAgIH1cblxuICAgIC8vIFBhcnNlIHVybFxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHZhciBwYXJzZWQgPSB1cmwucGFyc2UoZnVsbFBhdGgpO1xuICAgIHZhciBwcm90b2NvbCA9IHBhcnNlZC5wcm90b2NvbCB8fCBzdXBwb3J0ZWRQcm90b2NvbHNbMF07XG5cbiAgICBpZiAoc3VwcG9ydGVkUHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsXG4gICAgICAgIGNvbmZpZ1xuICAgICAgKSk7XG4gICAgfVxuXG4gICAgaWYgKCFhdXRoICYmIHBhcnNlZC5hdXRoKSB7XG4gICAgICB2YXIgdXJsQXV0aCA9IHBhcnNlZC5hdXRoLnNwbGl0KCc6Jyk7XG4gICAgICB2YXIgdXJsVXNlcm5hbWUgPSB1cmxBdXRoWzBdIHx8ICcnO1xuICAgICAgdmFyIHVybFBhc3N3b3JkID0gdXJsQXV0aFsxXSB8fCAnJztcbiAgICAgIGF1dGggPSB1cmxVc2VybmFtZSArICc6JyArIHVybFBhc3N3b3JkO1xuICAgIH1cblxuICAgIGlmIChhdXRoICYmIGhlYWRlck5hbWVzLmF1dGhvcml6YXRpb24pIHtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW2hlYWRlck5hbWVzLmF1dGhvcml6YXRpb25dO1xuICAgIH1cblxuICAgIHZhciBpc0h0dHBzUmVxdWVzdCA9IGlzSHR0cHMudGVzdChwcm90b2NvbCk7XG4gICAgdmFyIGFnZW50ID0gaXNIdHRwc1JlcXVlc3QgPyBjb25maWcuaHR0cHNBZ2VudCA6IGNvbmZpZy5odHRwQWdlbnQ7XG5cbiAgICB0cnkge1xuICAgICAgYnVpbGRVUkwocGFyc2VkLnBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdmFyIGN1c3RvbUVyciA9IG5ldyBFcnJvcihlcnIubWVzc2FnZSk7XG4gICAgICBjdXN0b21FcnIuY29uZmlnID0gY29uZmlnO1xuICAgICAgY3VzdG9tRXJyLnVybCA9IGNvbmZpZy51cmw7XG4gICAgICBjdXN0b21FcnIuZXhpc3RzID0gdHJ1ZTtcbiAgICAgIHJlamVjdChjdXN0b21FcnIpO1xuICAgIH1cblxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgcGF0aDogYnVpbGRVUkwocGFyc2VkLnBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpLFxuICAgICAgbWV0aG9kOiBjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgYWdlbnQ6IGFnZW50LFxuICAgICAgYWdlbnRzOiB7IGh0dHA6IGNvbmZpZy5odHRwQWdlbnQsIGh0dHBzOiBjb25maWcuaHR0cHNBZ2VudCB9LFxuICAgICAgYXV0aDogYXV0aFxuICAgIH07XG5cbiAgICBpZiAoY29uZmlnLnNvY2tldFBhdGgpIHtcbiAgICAgIG9wdGlvbnMuc29ja2V0UGF0aCA9IGNvbmZpZy5zb2NrZXRQYXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLmhvc3RuYW1lID0gcGFyc2VkLmhvc3RuYW1lO1xuICAgICAgb3B0aW9ucy5wb3J0ID0gcGFyc2VkLnBvcnQ7XG4gICAgfVxuXG4gICAgdmFyIHByb3h5ID0gY29uZmlnLnByb3h5O1xuICAgIGlmICghcHJveHkgJiYgcHJveHkgIT09IGZhbHNlKSB7XG4gICAgICB2YXIgcHJveHlFbnYgPSBwcm90b2NvbC5zbGljZSgwLCAtMSkgKyAnX3Byb3h5JztcbiAgICAgIHZhciBwcm94eVVybCA9IHByb2Nlc3MuZW52W3Byb3h5RW52XSB8fCBwcm9jZXNzLmVudltwcm94eUVudi50b1VwcGVyQ2FzZSgpXTtcbiAgICAgIGlmIChwcm94eVVybCkge1xuICAgICAgICB2YXIgcGFyc2VkUHJveHlVcmwgPSB1cmwucGFyc2UocHJveHlVcmwpO1xuICAgICAgICB2YXIgbm9Qcm94eUVudiA9IHByb2Nlc3MuZW52Lm5vX3Byb3h5IHx8IHByb2Nlc3MuZW52Lk5PX1BST1hZO1xuICAgICAgICB2YXIgc2hvdWxkUHJveHkgPSB0cnVlO1xuXG4gICAgICAgIGlmIChub1Byb3h5RW52KSB7XG4gICAgICAgICAgdmFyIG5vUHJveHkgPSBub1Byb3h5RW52LnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIHRyaW0ocykge1xuICAgICAgICAgICAgcmV0dXJuIHMudHJpbSgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc2hvdWxkUHJveHkgPSAhbm9Qcm94eS5zb21lKGZ1bmN0aW9uIHByb3h5TWF0Y2gocHJveHlFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoIXByb3h5RWxlbWVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJveHlFbGVtZW50ID09PSAnKicpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJveHlFbGVtZW50WzBdID09PSAnLicgJiZcbiAgICAgICAgICAgICAgICBwYXJzZWQuaG9zdG5hbWUuc3Vic3RyKHBhcnNlZC5ob3N0bmFtZS5sZW5ndGggLSBwcm94eUVsZW1lbnQubGVuZ3RoKSA9PT0gcHJveHlFbGVtZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkLmhvc3RuYW1lID09PSBwcm94eUVsZW1lbnQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdWxkUHJveHkpIHtcbiAgICAgICAgICBwcm94eSA9IHtcbiAgICAgICAgICAgIGhvc3Q6IHBhcnNlZFByb3h5VXJsLmhvc3RuYW1lLFxuICAgICAgICAgICAgcG9ydDogcGFyc2VkUHJveHlVcmwucG9ydCxcbiAgICAgICAgICAgIHByb3RvY29sOiBwYXJzZWRQcm94eVVybC5wcm90b2NvbFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAocGFyc2VkUHJveHlVcmwuYXV0aCkge1xuICAgICAgICAgICAgdmFyIHByb3h5VXJsQXV0aCA9IHBhcnNlZFByb3h5VXJsLmF1dGguc3BsaXQoJzonKTtcbiAgICAgICAgICAgIHByb3h5LmF1dGggPSB7XG4gICAgICAgICAgICAgIHVzZXJuYW1lOiBwcm94eVVybEF1dGhbMF0sXG4gICAgICAgICAgICAgIHBhc3N3b3JkOiBwcm94eVVybEF1dGhbMV1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByb3h5KSB7XG4gICAgICBvcHRpb25zLmhlYWRlcnMuaG9zdCA9IHBhcnNlZC5ob3N0bmFtZSArIChwYXJzZWQucG9ydCA/ICc6JyArIHBhcnNlZC5wb3J0IDogJycpO1xuICAgICAgc2V0UHJveHkob3B0aW9ucywgcHJveHksIHByb3RvY29sICsgJy8vJyArIHBhcnNlZC5ob3N0bmFtZSArIChwYXJzZWQucG9ydCA/ICc6JyArIHBhcnNlZC5wb3J0IDogJycpICsgb3B0aW9ucy5wYXRoKTtcbiAgICB9XG5cbiAgICB2YXIgdHJhbnNwb3J0O1xuICAgIHZhciBpc0h0dHBzUHJveHkgPSBpc0h0dHBzUmVxdWVzdCAmJiAocHJveHkgPyBpc0h0dHBzLnRlc3QocHJveHkucHJvdG9jb2wpIDogdHJ1ZSk7XG4gICAgaWYgKGNvbmZpZy50cmFuc3BvcnQpIHtcbiAgICAgIHRyYW5zcG9ydCA9IGNvbmZpZy50cmFuc3BvcnQ7XG4gICAgfSBlbHNlIGlmIChjb25maWcubWF4UmVkaXJlY3RzID09PSAwKSB7XG4gICAgICB0cmFuc3BvcnQgPSBpc0h0dHBzUHJveHkgPyBodHRwcyA6IGh0dHA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjb25maWcubWF4UmVkaXJlY3RzKSB7XG4gICAgICAgIG9wdGlvbnMubWF4UmVkaXJlY3RzID0gY29uZmlnLm1heFJlZGlyZWN0cztcbiAgICAgIH1cbiAgICAgIGlmIChjb25maWcuYmVmb3JlUmVkaXJlY3QpIHtcbiAgICAgICAgb3B0aW9ucy5iZWZvcmVSZWRpcmVjdCA9IGNvbmZpZy5iZWZvcmVSZWRpcmVjdDtcbiAgICAgIH1cbiAgICAgIHRyYW5zcG9ydCA9IGlzSHR0cHNQcm94eSA/IGh0dHBzRm9sbG93IDogaHR0cEZvbGxvdztcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLm1heEJvZHlMZW5ndGggPiAtMSkge1xuICAgICAgb3B0aW9ucy5tYXhCb2R5TGVuZ3RoID0gY29uZmlnLm1heEJvZHlMZW5ndGg7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5pbnNlY3VyZUhUVFBQYXJzZXIpIHtcbiAgICAgIG9wdGlvbnMuaW5zZWN1cmVIVFRQUGFyc2VyID0gY29uZmlnLmluc2VjdXJlSFRUUFBhcnNlcjtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgdGhlIHJlcXVlc3RcbiAgICB2YXIgcmVxID0gdHJhbnNwb3J0LnJlcXVlc3Qob3B0aW9ucywgZnVuY3Rpb24gaGFuZGxlUmVzcG9uc2UocmVzKSB7XG4gICAgICBpZiAocmVxLmFib3J0ZWQpIHJldHVybjtcblxuICAgICAgLy8gdW5jb21wcmVzcyB0aGUgcmVzcG9uc2UgYm9keSB0cmFuc3BhcmVudGx5IGlmIHJlcXVpcmVkXG4gICAgICB2YXIgc3RyZWFtID0gcmVzO1xuXG4gICAgICAvLyByZXR1cm4gdGhlIGxhc3QgcmVxdWVzdCBpbiBjYXNlIG9mIHJlZGlyZWN0c1xuICAgICAgdmFyIGxhc3RSZXF1ZXN0ID0gcmVzLnJlcSB8fCByZXE7XG5cblxuICAgICAgLy8gaWYgbm8gY29udGVudCwgaXMgSEVBRCByZXF1ZXN0IG9yIGRlY29tcHJlc3MgZGlzYWJsZWQgd2Ugc2hvdWxkIG5vdCBkZWNvbXByZXNzXG4gICAgICBpZiAocmVzLnN0YXR1c0NvZGUgIT09IDIwNCAmJiBsYXN0UmVxdWVzdC5tZXRob2QgIT09ICdIRUFEJyAmJiBjb25maWcuZGVjb21wcmVzcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgc3dpdGNoIChyZXMuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddKSB7XG4gICAgICAgIC8qZXNsaW50IGRlZmF1bHQtY2FzZTowKi9cbiAgICAgICAgY2FzZSAnZ3ppcCc6XG4gICAgICAgIGNhc2UgJ2NvbXByZXNzJzpcbiAgICAgICAgY2FzZSAnZGVmbGF0ZSc6XG4gICAgICAgIC8vIGFkZCB0aGUgdW56aXBwZXIgdG8gdGhlIGJvZHkgc3RyZWFtIHByb2Nlc3NpbmcgcGlwZWxpbmVcbiAgICAgICAgICBzdHJlYW0gPSBzdHJlYW0ucGlwZSh6bGliLmNyZWF0ZVVuemlwKCkpO1xuXG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjb250ZW50LWVuY29kaW5nIGluIG9yZGVyIHRvIG5vdCBjb25mdXNlIGRvd25zdHJlYW0gb3BlcmF0aW9uc1xuICAgICAgICAgIGRlbGV0ZSByZXMuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgc3RhdHVzOiByZXMuc3RhdHVzQ29kZSxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzLnN0YXR1c01lc3NhZ2UsXG4gICAgICAgIGhlYWRlcnM6IHJlcy5oZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogbGFzdFJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlID09PSAnc3RyZWFtJykge1xuICAgICAgICByZXNwb25zZS5kYXRhID0gc3RyZWFtO1xuICAgICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzcG9uc2VCdWZmZXIgPSBbXTtcbiAgICAgICAgdmFyIHRvdGFsUmVzcG9uc2VCeXRlcyA9IDA7XG4gICAgICAgIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIGhhbmRsZVN0cmVhbURhdGEoY2h1bmspIHtcbiAgICAgICAgICByZXNwb25zZUJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgICAgICB0b3RhbFJlc3BvbnNlQnl0ZXMgKz0gY2h1bmsubGVuZ3RoO1xuXG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBjb250ZW50IGxlbmd0aCBpcyBub3Qgb3ZlciB0aGUgbWF4Q29udGVudExlbmd0aCBpZiBzcGVjaWZpZWRcbiAgICAgICAgICBpZiAoY29uZmlnLm1heENvbnRlbnRMZW5ndGggPiAtMSAmJiB0b3RhbFJlc3BvbnNlQnl0ZXMgPiBjb25maWcubWF4Q29udGVudExlbmd0aCkge1xuICAgICAgICAgICAgLy8gc3RyZWFtLmRlc3RveSgpIGVtaXQgYWJvcnRlZCBldmVudCBiZWZvcmUgY2FsbGluZyByZWplY3QoKSBvbiBOb2RlLmpzIHYxNlxuICAgICAgICAgICAgcmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignbWF4Q29udGVudExlbmd0aCBzaXplIG9mICcgKyBjb25maWcubWF4Q29udGVudExlbmd0aCArICcgZXhjZWVkZWQnLFxuICAgICAgICAgICAgICBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0UsIGNvbmZpZywgbGFzdFJlcXVlc3QpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0cmVhbS5vbignYWJvcnRlZCcsIGZ1bmN0aW9uIGhhbmRsZXJTdHJlYW1BYm9ydGVkKCkge1xuICAgICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgICAgICdtYXhDb250ZW50TGVuZ3RoIHNpemUgb2YgJyArIGNvbmZpZy5tYXhDb250ZW50TGVuZ3RoICsgJyBleGNlZWRlZCcsXG4gICAgICAgICAgICBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0UsXG4gICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgICBsYXN0UmVxdWVzdFxuICAgICAgICAgICkpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24gaGFuZGxlU3RyZWFtRXJyb3IoZXJyKSB7XG4gICAgICAgICAgaWYgKHJlcS5hYm9ydGVkKSByZXR1cm47XG4gICAgICAgICAgcmVqZWN0KEF4aW9zRXJyb3IuZnJvbShlcnIsIG51bGwsIGNvbmZpZywgbGFzdFJlcXVlc3QpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiBoYW5kbGVTdHJlYW1FbmQoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZURhdGEgPSByZXNwb25zZUJ1ZmZlci5sZW5ndGggPT09IDEgPyByZXNwb25zZUJ1ZmZlclswXSA6IEJ1ZmZlci5jb25jYXQocmVzcG9uc2VCdWZmZXIpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdhcnJheWJ1ZmZlcicpIHtcbiAgICAgICAgICAgICAgcmVzcG9uc2VEYXRhID0gcmVzcG9uc2VEYXRhLnRvU3RyaW5nKGNvbmZpZy5yZXNwb25zZUVuY29kaW5nKTtcbiAgICAgICAgICAgICAgaWYgKCFjb25maWcucmVzcG9uc2VFbmNvZGluZyB8fCBjb25maWcucmVzcG9uc2VFbmNvZGluZyA9PT0gJ3V0ZjgnKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VEYXRhID0gdXRpbHMuc3RyaXBCT00ocmVzcG9uc2VEYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IHJlc3BvbnNlRGF0YTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChBeGlvc0Vycm9yLmZyb20oZXJyLCBudWxsLCBjb25maWcsIHJlc3BvbnNlLnJlcXVlc3QsIHJlc3BvbnNlKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBIYW5kbGUgZXJyb3JzXG4gICAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RFcnJvcihlcnIpIHtcbiAgICAgIC8vIEB0b2RvIHJlbW92ZVxuICAgICAgLy8gaWYgKHJlcS5hYm9ydGVkICYmIGVyci5jb2RlICE9PSBBeGlvc0Vycm9yLkVSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMpIHJldHVybjtcbiAgICAgIHJlamVjdChBeGlvc0Vycm9yLmZyb20oZXJyLCBudWxsLCBjb25maWcsIHJlcSkpO1xuICAgIH0pO1xuXG4gICAgLy8gc2V0IHRjcCBrZWVwIGFsaXZlIHRvIHByZXZlbnQgZHJvcCBjb25uZWN0aW9uIGJ5IHBlZXJcbiAgICByZXEub24oJ3NvY2tldCcsIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RTb2NrZXQoc29ja2V0KSB7XG4gICAgICAvLyBkZWZhdWx0IGludGVydmFsIG9mIHNlbmRpbmcgYWNrIHBhY2tldCBpcyAxIG1pbnV0ZVxuICAgICAgc29ja2V0LnNldEtlZXBBbGl2ZSh0cnVlLCAxMDAwICogNjApO1xuICAgIH0pO1xuXG4gICAgLy8gSGFuZGxlIHJlcXVlc3QgdGltZW91dFxuICAgIGlmIChjb25maWcudGltZW91dCkge1xuICAgICAgLy8gVGhpcyBpcyBmb3JjaW5nIGEgaW50IHRpbWVvdXQgdG8gYXZvaWQgcHJvYmxlbXMgaWYgdGhlIGByZXFgIGludGVyZmFjZSBkb2Vzbid0IGhhbmRsZSBvdGhlciB0eXBlcy5cbiAgICAgIHZhciB0aW1lb3V0ID0gcGFyc2VJbnQoY29uZmlnLnRpbWVvdXQsIDEwKTtcblxuICAgICAgaWYgKGlzTmFOKHRpbWVvdXQpKSB7XG4gICAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgICAnZXJyb3IgdHJ5aW5nIHRvIHBhcnNlIGBjb25maWcudGltZW91dGAgdG8gaW50JyxcbiAgICAgICAgICBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFLFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZXFcbiAgICAgICAgKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTb21ldGltZSwgdGhlIHJlc3BvbnNlIHdpbGwgYmUgdmVyeSBzbG93LCBhbmQgZG9lcyBub3QgcmVzcG9uZCwgdGhlIGNvbm5lY3QgZXZlbnQgd2lsbCBiZSBibG9jayBieSBldmVudCBsb29wIHN5c3RlbS5cbiAgICAgIC8vIEFuZCB0aW1lciBjYWxsYmFjayB3aWxsIGJlIGZpcmVkLCBhbmQgYWJvcnQoKSB3aWxsIGJlIGludm9rZWQgYmVmb3JlIGNvbm5lY3Rpb24sIHRoZW4gZ2V0IFwic29ja2V0IGhhbmcgdXBcIiBhbmQgY29kZSBFQ09OTlJFU0VULlxuICAgICAgLy8gQXQgdGhpcyB0aW1lLCBpZiB3ZSBoYXZlIGEgbGFyZ2UgbnVtYmVyIG9mIHJlcXVlc3QsIG5vZGVqcyB3aWxsIGhhbmcgdXAgc29tZSBzb2NrZXQgb24gYmFja2dyb3VuZC4gYW5kIHRoZSBudW1iZXIgd2lsbCB1cCBhbmQgdXAuXG4gICAgICAvLyBBbmQgdGhlbiB0aGVzZSBzb2NrZXQgd2hpY2ggYmUgaGFuZyB1cCB3aWxsIGRldm9yaW5nIENQVSBsaXR0bGUgYnkgbGl0dGxlLlxuICAgICAgLy8gQ2xpZW50UmVxdWVzdC5zZXRUaW1lb3V0IHdpbGwgYmUgZmlyZWQgb24gdGhlIHNwZWNpZnkgbWlsbGlzZWNvbmRzLCBhbmQgY2FuIG1ha2Ugc3VyZSB0aGF0IGFib3J0KCkgd2lsbCBiZSBmaXJlZCBhZnRlciBjb25uZWN0LlxuICAgICAgcmVxLnNldFRpbWVvdXQodGltZW91dCwgZnVuY3Rpb24gaGFuZGxlUmVxdWVzdFRpbWVvdXQoKSB7XG4gICAgICAgIHJlcS5hYm9ydCgpO1xuICAgICAgICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICAgICd0aW1lb3V0IG9mICcgKyB0aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyxcbiAgICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIHJlcVxuICAgICAgICApKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBmdW5jdGlvbihjYW5jZWwpIHtcbiAgICAgICAgaWYgKHJlcS5hYm9ydGVkKSByZXR1cm47XG5cbiAgICAgICAgcmVxLmFib3J0KCk7XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IChjYW5jZWwgJiYgY2FuY2VsLnR5cGUpID8gbmV3IENhbmNlbGVkRXJyb3IoKSA6IGNhbmNlbCk7XG4gICAgICB9O1xuXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4gJiYgY29uZmlnLmNhbmNlbFRva2VuLnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IGNvbmZpZy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICBpZiAodXRpbHMuaXNTdHJlYW0oZGF0YSkpIHtcbiAgICAgIGRhdGEub24oJ2Vycm9yJywgZnVuY3Rpb24gaGFuZGxlU3RyZWFtRXJyb3IoZXJyKSB7XG4gICAgICAgIHJlamVjdChBeGlvc0Vycm9yLmZyb20oZXJyLCBjb25maWcsIG51bGwsIHJlcSkpO1xuICAgICAgfSkucGlwZShyZXEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXEuZW5kKGRhdGEpO1xuICAgIH1cbiAgfSk7XG59O1xuIiwidmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuU3RyZWFtO1xudmFyIERlbGF5ZWRTdHJlYW0gPSByZXF1aXJlKCdkZWxheWVkLXN0cmVhbScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbWJpbmVkU3RyZWFtO1xuZnVuY3Rpb24gQ29tYmluZWRTdHJlYW0oKSB7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG4gIHRoaXMuZGF0YVNpemUgPSAwO1xuICB0aGlzLm1heERhdGFTaXplID0gMiAqIDEwMjQgKiAxMDI0O1xuICB0aGlzLnBhdXNlU3RyZWFtcyA9IHRydWU7XG5cbiAgdGhpcy5fcmVsZWFzZWQgPSBmYWxzZTtcbiAgdGhpcy5fc3RyZWFtcyA9IFtdO1xuICB0aGlzLl9jdXJyZW50U3RyZWFtID0gbnVsbDtcbiAgdGhpcy5faW5zaWRlTG9vcCA9IGZhbHNlO1xuICB0aGlzLl9wZW5kaW5nTmV4dCA9IGZhbHNlO1xufVxudXRpbC5pbmhlcml0cyhDb21iaW5lZFN0cmVhbSwgU3RyZWFtKTtcblxuQ29tYmluZWRTdHJlYW0uY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICB2YXIgY29tYmluZWRTdHJlYW0gPSBuZXcgdGhpcygpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBmb3IgKHZhciBvcHRpb24gaW4gb3B0aW9ucykge1xuICAgIGNvbWJpbmVkU3RyZWFtW29wdGlvbl0gPSBvcHRpb25zW29wdGlvbl07XG4gIH1cblxuICByZXR1cm4gY29tYmluZWRTdHJlYW07XG59O1xuXG5Db21iaW5lZFN0cmVhbS5pc1N0cmVhbUxpa2UgPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgcmV0dXJuICh0eXBlb2Ygc3RyZWFtICE9PSAnZnVuY3Rpb24nKVxuICAgICYmICh0eXBlb2Ygc3RyZWFtICE9PSAnc3RyaW5nJylcbiAgICAmJiAodHlwZW9mIHN0cmVhbSAhPT0gJ2Jvb2xlYW4nKVxuICAgICYmICh0eXBlb2Ygc3RyZWFtICE9PSAnbnVtYmVyJylcbiAgICAmJiAoIUJ1ZmZlci5pc0J1ZmZlcihzdHJlYW0pKTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgdmFyIGlzU3RyZWFtTGlrZSA9IENvbWJpbmVkU3RyZWFtLmlzU3RyZWFtTGlrZShzdHJlYW0pO1xuXG4gIGlmIChpc1N0cmVhbUxpa2UpIHtcbiAgICBpZiAoIShzdHJlYW0gaW5zdGFuY2VvZiBEZWxheWVkU3RyZWFtKSkge1xuICAgICAgdmFyIG5ld1N0cmVhbSA9IERlbGF5ZWRTdHJlYW0uY3JlYXRlKHN0cmVhbSwge1xuICAgICAgICBtYXhEYXRhU2l6ZTogSW5maW5pdHksXG4gICAgICAgIHBhdXNlU3RyZWFtOiB0aGlzLnBhdXNlU3RyZWFtcyxcbiAgICAgIH0pO1xuICAgICAgc3RyZWFtLm9uKCdkYXRhJywgdGhpcy5fY2hlY2tEYXRhU2l6ZS5iaW5kKHRoaXMpKTtcbiAgICAgIHN0cmVhbSA9IG5ld1N0cmVhbTtcbiAgICB9XG5cbiAgICB0aGlzLl9oYW5kbGVFcnJvcnMoc3RyZWFtKTtcblxuICAgIGlmICh0aGlzLnBhdXNlU3RyZWFtcykge1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5fc3RyZWFtcy5wdXNoKHN0cmVhbSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XG4gIFN0cmVhbS5wcm90b3R5cGUucGlwZS5jYWxsKHRoaXMsIGRlc3QsIG9wdGlvbnMpO1xuICB0aGlzLnJlc3VtZSgpO1xuICByZXR1cm4gZGVzdDtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5fZ2V0TmV4dCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jdXJyZW50U3RyZWFtID0gbnVsbDtcblxuICBpZiAodGhpcy5faW5zaWRlTG9vcCkge1xuICAgIHRoaXMuX3BlbmRpbmdOZXh0ID0gdHJ1ZTtcbiAgICByZXR1cm47IC8vIGRlZmVyIGNhbGxcbiAgfVxuXG4gIHRoaXMuX2luc2lkZUxvb3AgPSB0cnVlO1xuICB0cnkge1xuICAgIGRvIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdOZXh0ID0gZmFsc2U7XG4gICAgICB0aGlzLl9yZWFsR2V0TmV4dCgpO1xuICAgIH0gd2hpbGUgKHRoaXMuX3BlbmRpbmdOZXh0KTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0aGlzLl9pbnNpZGVMb29wID0gZmFsc2U7XG4gIH1cbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5fcmVhbEdldE5leHQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0cmVhbSA9IHRoaXMuX3N0cmVhbXMuc2hpZnQoKTtcblxuXG4gIGlmICh0eXBlb2Ygc3RyZWFtID09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhpcy5lbmQoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIHN0cmVhbSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuX3BpcGVOZXh0KHN0cmVhbSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGdldFN0cmVhbSA9IHN0cmVhbTtcbiAgZ2V0U3RyZWFtKGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBpc1N0cmVhbUxpa2UgPSBDb21iaW5lZFN0cmVhbS5pc1N0cmVhbUxpa2Uoc3RyZWFtKTtcbiAgICBpZiAoaXNTdHJlYW1MaWtlKSB7XG4gICAgICBzdHJlYW0ub24oJ2RhdGEnLCB0aGlzLl9jaGVja0RhdGFTaXplLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5faGFuZGxlRXJyb3JzKHN0cmVhbSk7XG4gICAgfVxuXG4gICAgdGhpcy5fcGlwZU5leHQoc3RyZWFtKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5fcGlwZU5leHQgPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgdGhpcy5fY3VycmVudFN0cmVhbSA9IHN0cmVhbTtcblxuICB2YXIgaXNTdHJlYW1MaWtlID0gQ29tYmluZWRTdHJlYW0uaXNTdHJlYW1MaWtlKHN0cmVhbSk7XG4gIGlmIChpc1N0cmVhbUxpa2UpIHtcbiAgICBzdHJlYW0ub24oJ2VuZCcsIHRoaXMuX2dldE5leHQuYmluZCh0aGlzKSk7XG4gICAgc3RyZWFtLnBpcGUodGhpcywge2VuZDogZmFsc2V9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdmFsdWUgPSBzdHJlYW07XG4gIHRoaXMud3JpdGUodmFsdWUpO1xuICB0aGlzLl9nZXROZXh0KCk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX2hhbmRsZUVycm9ycyA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbihlcnIpIHtcbiAgICBzZWxmLl9lbWl0RXJyb3IoZXJyKTtcbiAgfSk7XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gIHRoaXMuZW1pdCgnZGF0YScsIGRhdGEpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5wYXVzZVN0cmVhbXMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZih0aGlzLnBhdXNlU3RyZWFtcyAmJiB0aGlzLl9jdXJyZW50U3RyZWFtICYmIHR5cGVvZih0aGlzLl9jdXJyZW50U3RyZWFtLnBhdXNlKSA9PSAnZnVuY3Rpb24nKSB0aGlzLl9jdXJyZW50U3RyZWFtLnBhdXNlKCk7XG4gIHRoaXMuZW1pdCgncGF1c2UnKTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLl9yZWxlYXNlZCkge1xuICAgIHRoaXMuX3JlbGVhc2VkID0gdHJ1ZTtcbiAgICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLl9nZXROZXh0KCk7XG4gIH1cblxuICBpZih0aGlzLnBhdXNlU3RyZWFtcyAmJiB0aGlzLl9jdXJyZW50U3RyZWFtICYmIHR5cGVvZih0aGlzLl9jdXJyZW50U3RyZWFtLnJlc3VtZSkgPT0gJ2Z1bmN0aW9uJykgdGhpcy5fY3VycmVudFN0cmVhbS5yZXN1bWUoKTtcbiAgdGhpcy5lbWl0KCdyZXN1bWUnKTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fcmVzZXQoKTtcbiAgdGhpcy5lbWl0KCdlbmQnKTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3Jlc2V0KCk7XG4gIHRoaXMuZW1pdCgnY2xvc2UnKTtcbn07XG5cbkNvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5fcmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICB0aGlzLl9zdHJlYW1zID0gW107XG4gIHRoaXMuX2N1cnJlbnRTdHJlYW0gPSBudWxsO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl9jaGVja0RhdGFTaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3VwZGF0ZURhdGFTaXplKCk7XG4gIGlmICh0aGlzLmRhdGFTaXplIDw9IHRoaXMubWF4RGF0YVNpemUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbWVzc2FnZSA9XG4gICAgJ0RlbGF5ZWRTdHJlYW0jbWF4RGF0YVNpemUgb2YgJyArIHRoaXMubWF4RGF0YVNpemUgKyAnIGJ5dGVzIGV4Y2VlZGVkLic7XG4gIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IobWVzc2FnZSkpO1xufTtcblxuQ29tYmluZWRTdHJlYW0ucHJvdG90eXBlLl91cGRhdGVEYXRhU2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRhdGFTaXplID0gMDtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuX3N0cmVhbXMuZm9yRWFjaChmdW5jdGlvbihzdHJlYW0pIHtcbiAgICBpZiAoIXN0cmVhbS5kYXRhU2l6ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlbGYuZGF0YVNpemUgKz0gc3RyZWFtLmRhdGFTaXplO1xuICB9KTtcblxuICBpZiAodGhpcy5fY3VycmVudFN0cmVhbSAmJiB0aGlzLl9jdXJyZW50U3RyZWFtLmRhdGFTaXplKSB7XG4gICAgdGhpcy5kYXRhU2l6ZSArPSB0aGlzLl9jdXJyZW50U3RyZWFtLmRhdGFTaXplO1xuICB9XG59O1xuXG5Db21iaW5lZFN0cmVhbS5wcm90b3R5cGUuX2VtaXRFcnJvciA9IGZ1bmN0aW9uKGVycikge1xuICB0aGlzLl9yZXNldCgpO1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn07XG4iLCJ2YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuU3RyZWFtO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGVsYXllZFN0cmVhbTtcbmZ1bmN0aW9uIERlbGF5ZWRTdHJlYW0oKSB7XG4gIHRoaXMuc291cmNlID0gbnVsbDtcbiAgdGhpcy5kYXRhU2l6ZSA9IDA7XG4gIHRoaXMubWF4RGF0YVNpemUgPSAxMDI0ICogMTAyNDtcbiAgdGhpcy5wYXVzZVN0cmVhbSA9IHRydWU7XG5cbiAgdGhpcy5fbWF4RGF0YVNpemVFeGNlZWRlZCA9IGZhbHNlO1xuICB0aGlzLl9yZWxlYXNlZCA9IGZhbHNlO1xuICB0aGlzLl9idWZmZXJlZEV2ZW50cyA9IFtdO1xufVxudXRpbC5pbmhlcml0cyhEZWxheWVkU3RyZWFtLCBTdHJlYW0pO1xuXG5EZWxheWVkU3RyZWFtLmNyZWF0ZSA9IGZ1bmN0aW9uKHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZGVsYXllZFN0cmVhbSA9IG5ldyB0aGlzKCk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgZGVsYXllZFN0cmVhbVtvcHRpb25dID0gb3B0aW9uc1tvcHRpb25dO1xuICB9XG5cbiAgZGVsYXllZFN0cmVhbS5zb3VyY2UgPSBzb3VyY2U7XG5cbiAgdmFyIHJlYWxFbWl0ID0gc291cmNlLmVtaXQ7XG4gIHNvdXJjZS5lbWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgZGVsYXllZFN0cmVhbS5faGFuZGxlRW1pdChhcmd1bWVudHMpO1xuICAgIHJldHVybiByZWFsRW1pdC5hcHBseShzb3VyY2UsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIGZ1bmN0aW9uKCkge30pO1xuICBpZiAoZGVsYXllZFN0cmVhbS5wYXVzZVN0cmVhbSkge1xuICAgIHNvdXJjZS5wYXVzZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlbGF5ZWRTdHJlYW07XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRGVsYXllZFN0cmVhbS5wcm90b3R5cGUsICdyZWFkYWJsZScsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5yZWFkYWJsZTtcbiAgfVxufSk7XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNvdXJjZS5zZXRFbmNvZGluZy5hcHBseSh0aGlzLnNvdXJjZSwgYXJndW1lbnRzKTtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuX3JlbGVhc2VkKSB7XG4gICAgdGhpcy5yZWxlYXNlKCk7XG4gIH1cblxuICB0aGlzLnNvdXJjZS5yZXN1bWUoKTtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc291cmNlLnBhdXNlKCk7XG59O1xuXG5EZWxheWVkU3RyZWFtLnByb3RvdHlwZS5yZWxlYXNlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3JlbGVhc2VkID0gdHJ1ZTtcblxuICB0aGlzLl9idWZmZXJlZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIH0uYmluZCh0aGlzKSk7XG4gIHRoaXMuX2J1ZmZlcmVkRXZlbnRzID0gW107XG59O1xuXG5EZWxheWVkU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oKSB7XG4gIHZhciByID0gU3RyZWFtLnByb3RvdHlwZS5waXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIHRoaXMucmVzdW1lKCk7XG4gIHJldHVybiByO1xufTtcblxuRGVsYXllZFN0cmVhbS5wcm90b3R5cGUuX2hhbmRsZUVtaXQgPSBmdW5jdGlvbihhcmdzKSB7XG4gIGlmICh0aGlzLl9yZWxlYXNlZCkge1xuICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoYXJnc1swXSA9PT0gJ2RhdGEnKSB7XG4gICAgdGhpcy5kYXRhU2l6ZSArPSBhcmdzWzFdLmxlbmd0aDtcbiAgICB0aGlzLl9jaGVja0lmTWF4RGF0YVNpemVFeGNlZWRlZCgpO1xuICB9XG5cbiAgdGhpcy5fYnVmZmVyZWRFdmVudHMucHVzaChhcmdzKTtcbn07XG5cbkRlbGF5ZWRTdHJlYW0ucHJvdG90eXBlLl9jaGVja0lmTWF4RGF0YVNpemVFeGNlZWRlZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fbWF4RGF0YVNpemVFeGNlZWRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLmRhdGFTaXplIDw9IHRoaXMubWF4RGF0YVNpemUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9tYXhEYXRhU2l6ZUV4Y2VlZGVkID0gdHJ1ZTtcbiAgdmFyIG1lc3NhZ2UgPVxuICAgICdEZWxheWVkU3RyZWFtI21heERhdGFTaXplIG9mICcgKyB0aGlzLm1heERhdGFTaXplICsgJyBieXRlcyBleGNlZWRlZC4nXG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IobWVzc2FnZSkpO1xufTtcbiIsIi8qIVxuICogbWltZS10eXBlc1xuICogQ29weXJpZ2h0KGMpIDIwMTQgSm9uYXRoYW4gT25nXG4gKiBDb3B5cmlnaHQoYykgMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIGRiID0gcmVxdWlyZSgnbWltZS1kYicpXG52YXIgZXh0bmFtZSA9IHJlcXVpcmUoJ3BhdGgnKS5leHRuYW1lXG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEVYVFJBQ1RfVFlQRV9SRUdFWFAgPSAvXlxccyooW147XFxzXSopKD86O3xcXHN8JCkvXG52YXIgVEVYVF9UWVBFX1JFR0VYUCA9IC9edGV4dFxcLy9pXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5jaGFyc2V0ID0gY2hhcnNldFxuZXhwb3J0cy5jaGFyc2V0cyA9IHsgbG9va3VwOiBjaGFyc2V0IH1cbmV4cG9ydHMuY29udGVudFR5cGUgPSBjb250ZW50VHlwZVxuZXhwb3J0cy5leHRlbnNpb24gPSBleHRlbnNpb25cbmV4cG9ydHMuZXh0ZW5zaW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbClcbmV4cG9ydHMubG9va3VwID0gbG9va3VwXG5leHBvcnRzLnR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4vLyBQb3B1bGF0ZSB0aGUgZXh0ZW5zaW9ucy90eXBlcyBtYXBzXG5wb3B1bGF0ZU1hcHMoZXhwb3J0cy5leHRlbnNpb25zLCBleHBvcnRzLnR5cGVzKVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBjaGFyc2V0IGZvciBhIE1JTUUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gY2hhcnNldCAodHlwZSkge1xuICBpZiAoIXR5cGUgfHwgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBUT0RPOiB1c2UgbWVkaWEtdHlwZXJcbiAgdmFyIG1hdGNoID0gRVhUUkFDVF9UWVBFX1JFR0VYUC5leGVjKHR5cGUpXG4gIHZhciBtaW1lID0gbWF0Y2ggJiYgZGJbbWF0Y2hbMV0udG9Mb3dlckNhc2UoKV1cblxuICBpZiAobWltZSAmJiBtaW1lLmNoYXJzZXQpIHtcbiAgICByZXR1cm4gbWltZS5jaGFyc2V0XG4gIH1cblxuICAvLyBkZWZhdWx0IHRleHQvKiB0byB1dGYtOFxuICBpZiAobWF0Y2ggJiYgVEVYVF9UWVBFX1JFR0VYUC50ZXN0KG1hdGNoWzFdKSkge1xuICAgIHJldHVybiAnVVRGLTgnXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBmdWxsIENvbnRlbnQtVHlwZSBoZWFkZXIgZ2l2ZW4gYSBNSU1FIHR5cGUgb3IgZXh0ZW5zaW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGNvbnRlbnRUeXBlIChzdHIpIHtcbiAgLy8gVE9ETzogc2hvdWxkIHRoaXMgZXZlbiBiZSBpbiB0aGlzIG1vZHVsZT9cbiAgaWYgKCFzdHIgfHwgdHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHZhciBtaW1lID0gc3RyLmluZGV4T2YoJy8nKSA9PT0gLTFcbiAgICA/IGV4cG9ydHMubG9va3VwKHN0cilcbiAgICA6IHN0clxuXG4gIGlmICghbWltZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gVE9ETzogdXNlIGNvbnRlbnQtdHlwZSBvciBvdGhlciBtb2R1bGVcbiAgaWYgKG1pbWUuaW5kZXhPZignY2hhcnNldCcpID09PSAtMSkge1xuICAgIHZhciBjaGFyc2V0ID0gZXhwb3J0cy5jaGFyc2V0KG1pbWUpXG4gICAgaWYgKGNoYXJzZXQpIG1pbWUgKz0gJzsgY2hhcnNldD0nICsgY2hhcnNldC50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICByZXR1cm4gbWltZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBleHRlbnNpb24gZm9yIGEgTUlNRSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBleHRlbnNpb24gKHR5cGUpIHtcbiAgaWYgKCF0eXBlIHx8IHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gVE9ETzogdXNlIG1lZGlhLXR5cGVyXG4gIHZhciBtYXRjaCA9IEVYVFJBQ1RfVFlQRV9SRUdFWFAuZXhlYyh0eXBlKVxuXG4gIC8vIGdldCBleHRlbnNpb25zXG4gIHZhciBleHRzID0gbWF0Y2ggJiYgZXhwb3J0cy5leHRlbnNpb25zW21hdGNoWzFdLnRvTG93ZXJDYXNlKCldXG5cbiAgaWYgKCFleHRzIHx8ICFleHRzLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIGV4dHNbMF1cbn1cblxuLyoqXG4gKiBMb29rdXAgdGhlIE1JTUUgdHlwZSBmb3IgYSBmaWxlIHBhdGgvZXh0ZW5zaW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBsb29rdXAgKHBhdGgpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gZ2V0IHRoZSBleHRlbnNpb24gKFwiZXh0XCIgb3IgXCIuZXh0XCIgb3IgZnVsbCBwYXRoKVxuICB2YXIgZXh0ZW5zaW9uID0gZXh0bmFtZSgneC4nICsgcGF0aClcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5zdWJzdHIoMSlcblxuICBpZiAoIWV4dGVuc2lvbikge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMudHlwZXNbZXh0ZW5zaW9uXSB8fCBmYWxzZVxufVxuXG4vKipcbiAqIFBvcHVsYXRlIHRoZSBleHRlbnNpb25zIGFuZCB0eXBlcyBtYXBzLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb3B1bGF0ZU1hcHMgKGV4dGVuc2lvbnMsIHR5cGVzKSB7XG4gIC8vIHNvdXJjZSBwcmVmZXJlbmNlIChsZWFzdCAtPiBtb3N0KVxuICB2YXIgcHJlZmVyZW5jZSA9IFsnbmdpbngnLCAnYXBhY2hlJywgdW5kZWZpbmVkLCAnaWFuYSddXG5cbiAgT2JqZWN0LmtleXMoZGIpLmZvckVhY2goZnVuY3Rpb24gZm9yRWFjaE1pbWVUeXBlICh0eXBlKSB7XG4gICAgdmFyIG1pbWUgPSBkYlt0eXBlXVxuICAgIHZhciBleHRzID0gbWltZS5leHRlbnNpb25zXG5cbiAgICBpZiAoIWV4dHMgfHwgIWV4dHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBtaW1lIC0+IGV4dGVuc2lvbnNcbiAgICBleHRlbnNpb25zW3R5cGVdID0gZXh0c1xuXG4gICAgLy8gZXh0ZW5zaW9uIC0+IG1pbWVcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBleHRlbnNpb24gPSBleHRzW2ldXG5cbiAgICAgIGlmICh0eXBlc1tleHRlbnNpb25dKSB7XG4gICAgICAgIHZhciBmcm9tID0gcHJlZmVyZW5jZS5pbmRleE9mKGRiW3R5cGVzW2V4dGVuc2lvbl1dLnNvdXJjZSlcbiAgICAgICAgdmFyIHRvID0gcHJlZmVyZW5jZS5pbmRleE9mKG1pbWUuc291cmNlKVxuXG4gICAgICAgIGlmICh0eXBlc1tleHRlbnNpb25dICE9PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyAmJlxuICAgICAgICAgIChmcm9tID4gdG8gfHwgKGZyb20gPT09IHRvICYmIHR5cGVzW2V4dGVuc2lvbl0uc3Vic3RyKDAsIDEyKSA9PT0gJ2FwcGxpY2F0aW9uLycpKSkge1xuICAgICAgICAgIC8vIHNraXAgdGhlIHJlbWFwcGluZ1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gc2V0IHRoZSBleHRlbnNpb24gLT4gbWltZVxuICAgICAgdHlwZXNbZXh0ZW5zaW9uXSA9IHR5cGVcbiAgICB9XG4gIH0pXG59XG4iLCIvKiFcbiAqIG1pbWUtZGJcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTUtMjAyMiBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGIuanNvbicpXG4iLCJ2YXIgZGVmZXIgPSByZXF1aXJlKCcuL2RlZmVyLmpzJyk7XG5cbi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBhc3luYztcblxuLyoqXG4gKiBSdW5zIHByb3ZpZGVkIGNhbGxiYWNrIGFzeW5jaHJvbm91c2x5XG4gKiBldmVuIGlmIGNhbGxiYWNrIGl0c2VsZiBpcyBub3RcbiAqXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gaW52b2tlXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IC0gYXVnbWVudGVkIGNhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIGFzeW5jKGNhbGxiYWNrKVxue1xuICB2YXIgaXNBc3luYyA9IGZhbHNlO1xuXG4gIC8vIGNoZWNrIGlmIGFzeW5jIGhhcHBlbmVkXG4gIGRlZmVyKGZ1bmN0aW9uKCkgeyBpc0FzeW5jID0gdHJ1ZTsgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGFzeW5jX2NhbGxiYWNrKGVyciwgcmVzdWx0KVxuICB7XG4gICAgaWYgKGlzQXN5bmMpXG4gICAge1xuICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHQpO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgZGVmZXIoZnVuY3Rpb24gbmV4dFRpY2tfY2FsbGJhY2soKVxuICAgICAge1xuICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGRlZmVyO1xuXG4vKipcbiAqIFJ1bnMgcHJvdmlkZWQgZnVuY3Rpb24gb24gbmV4dCBpdGVyYXRpb24gb2YgdGhlIGV2ZW50IGxvb3BcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiAtIGZ1bmN0aW9uIHRvIHJ1blxuICovXG5mdW5jdGlvbiBkZWZlcihmbilcbntcbiAgdmFyIG5leHRUaWNrID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PSAnZnVuY3Rpb24nXG4gICAgPyBzZXRJbW1lZGlhdGVcbiAgICA6IChcbiAgICAgIHR5cGVvZiBwcm9jZXNzID09ICdvYmplY3QnICYmIHR5cGVvZiBwcm9jZXNzLm5leHRUaWNrID09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvY2Vzcy5uZXh0VGlja1xuICAgICAgOiBudWxsXG4gICAgKTtcblxuICBpZiAobmV4dFRpY2spXG4gIHtcbiAgICBuZXh0VGljayhmbik7XG4gIH1cbiAgZWxzZVxuICB7XG4gICAgc2V0VGltZW91dChmbiwgMCk7XG4gIH1cbn1cbiIsIi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBhYm9ydDtcblxuLyoqXG4gKiBBYm9ydHMgbGVmdG92ZXIgYWN0aXZlIGpvYnNcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgLSBjdXJyZW50IHN0YXRlIG9iamVjdFxuICovXG5mdW5jdGlvbiBhYm9ydChzdGF0ZSlcbntcbiAgT2JqZWN0LmtleXMoc3RhdGUuam9icykuZm9yRWFjaChjbGVhbi5iaW5kKHN0YXRlKSk7XG5cbiAgLy8gcmVzZXQgbGVmdG92ZXIgam9ic1xuICBzdGF0ZS5qb2JzID0ge307XG59XG5cbi8qKlxuICogQ2xlYW5zIHVwIGxlZnRvdmVyIGpvYiBieSBpbnZva2luZyBhYm9ydCBmdW5jdGlvbiBmb3IgdGhlIHByb3ZpZGVkIGpvYiBpZFxuICpcbiAqIEB0aGlzICBzdGF0ZVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBrZXkgLSBqb2IgaWQgdG8gYWJvcnRcbiAqL1xuZnVuY3Rpb24gY2xlYW4oa2V5KVxue1xuICBpZiAodHlwZW9mIHRoaXMuam9ic1trZXldID09ICdmdW5jdGlvbicpXG4gIHtcbiAgICB0aGlzLmpvYnNba2V5XSgpO1xuICB9XG59XG4iLCJ2YXIgYXN5bmMgPSByZXF1aXJlKCcuL2FzeW5jLmpzJylcbiAgLCBhYm9ydCA9IHJlcXVpcmUoJy4vYWJvcnQuanMnKVxuICA7XG5cbi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBpdGVyYXRlO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgZWFjaCBqb2Igb2JqZWN0XG4gKlxuICogQHBhcmFtIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gaXRlcmF0b3IgLSBpdGVyYXRvciB0byBydW5cbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIGN1cnJlbnQgam9iIHN0YXR1c1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBpbnZva2VkIHdoZW4gYWxsIGVsZW1lbnRzIHByb2Nlc3NlZFxuICovXG5mdW5jdGlvbiBpdGVyYXRlKGxpc3QsIGl0ZXJhdG9yLCBzdGF0ZSwgY2FsbGJhY2spXG57XG4gIC8vIHN0b3JlIGN1cnJlbnQgaW5kZXhcbiAgdmFyIGtleSA9IHN0YXRlWydrZXllZExpc3QnXSA/IHN0YXRlWydrZXllZExpc3QnXVtzdGF0ZS5pbmRleF0gOiBzdGF0ZS5pbmRleDtcblxuICBzdGF0ZS5qb2JzW2tleV0gPSBydW5Kb2IoaXRlcmF0b3IsIGtleSwgbGlzdFtrZXldLCBmdW5jdGlvbihlcnJvciwgb3V0cHV0KVxuICB7XG4gICAgLy8gZG9uJ3QgcmVwZWF0IHlvdXJzZWxmXG4gICAgLy8gc2tpcCBzZWNvbmRhcnkgY2FsbGJhY2tzXG4gICAgaWYgKCEoa2V5IGluIHN0YXRlLmpvYnMpKVxuICAgIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBjbGVhbiB1cCBqb2JzXG4gICAgZGVsZXRlIHN0YXRlLmpvYnNba2V5XTtcblxuICAgIGlmIChlcnJvcilcbiAgICB7XG4gICAgICAvLyBkb24ndCBwcm9jZXNzIHJlc3Qgb2YgdGhlIHJlc3VsdHNcbiAgICAgIC8vIHN0b3Agc3RpbGwgYWN0aXZlIGpvYnNcbiAgICAgIC8vIGFuZCByZXNldCB0aGUgbGlzdFxuICAgICAgYWJvcnQoc3RhdGUpO1xuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgc3RhdGUucmVzdWx0c1trZXldID0gb3V0cHV0O1xuICAgIH1cblxuICAgIC8vIHJldHVybiBzYWx2YWdlZCByZXN1bHRzXG4gICAgY2FsbGJhY2soZXJyb3IsIHN0YXRlLnJlc3VsdHMpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSdW5zIGl0ZXJhdG9yIG92ZXIgcHJvdmlkZWQgam9iIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGl0ZXJhdG9yIC0gaXRlcmF0b3IgdG8gaW52b2tlXG4gKiBAcGFyYW0gICB7c3RyaW5nfG51bWJlcn0ga2V5IC0ga2V5L2luZGV4IG9mIHRoZSBlbGVtZW50IGluIHRoZSBsaXN0IG9mIGpvYnNcbiAqIEBwYXJhbSAgIHttaXhlZH0gaXRlbSAtIGpvYiBkZXNjcmlwdGlvblxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgYWZ0ZXIgaXRlcmF0b3IgaXMgZG9uZSB3aXRoIHRoZSBqb2JcbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxtaXhlZH0gLSBqb2IgYWJvcnQgZnVuY3Rpb24gb3Igc29tZXRoaW5nIGVsc2VcbiAqL1xuZnVuY3Rpb24gcnVuSm9iKGl0ZXJhdG9yLCBrZXksIGl0ZW0sIGNhbGxiYWNrKVxue1xuICB2YXIgYWJvcnRlcjtcblxuICAvLyBhbGxvdyBzaG9ydGN1dCBpZiBpdGVyYXRvciBleHBlY3RzIG9ubHkgdHdvIGFyZ3VtZW50c1xuICBpZiAoaXRlcmF0b3IubGVuZ3RoID09IDIpXG4gIHtcbiAgICBhYm9ydGVyID0gaXRlcmF0b3IoaXRlbSwgYXN5bmMoY2FsbGJhY2spKTtcbiAgfVxuICAvLyBvdGhlcndpc2UgZ28gd2l0aCBmdWxsIHRocmVlIGFyZ3VtZW50c1xuICBlbHNlXG4gIHtcbiAgICBhYm9ydGVyID0gaXRlcmF0b3IoaXRlbSwga2V5LCBhc3luYyhjYWxsYmFjaykpO1xuICB9XG5cbiAgcmV0dXJuIGFib3J0ZXI7XG59XG4iLCIvLyBBUElcbm1vZHVsZS5leHBvcnRzID0gc3RhdGU7XG5cbi8qKlxuICogQ3JlYXRlcyBpbml0aWFsIHN0YXRlIG9iamVjdFxuICogZm9yIGl0ZXJhdGlvbiBvdmVyIGxpc3RcbiAqXG4gKiBAcGFyYW0gICB7YXJyYXl8b2JqZWN0fSBsaXN0IC0gbGlzdCB0byBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSAgIHtmdW5jdGlvbnxudWxsfSBzb3J0TWV0aG9kIC0gZnVuY3Rpb24gdG8gdXNlIGZvciBrZXlzIHNvcnQsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBgbnVsbGAgdG8ga2VlcCB0aGVtIGFzIGlzXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIGluaXRpYWwgc3RhdGUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHN0YXRlKGxpc3QsIHNvcnRNZXRob2QpXG57XG4gIHZhciBpc05hbWVkTGlzdCA9ICFBcnJheS5pc0FycmF5KGxpc3QpXG4gICAgLCBpbml0U3RhdGUgPVxuICAgIHtcbiAgICAgIGluZGV4ICAgIDogMCxcbiAgICAgIGtleWVkTGlzdDogaXNOYW1lZExpc3QgfHwgc29ydE1ldGhvZCA/IE9iamVjdC5rZXlzKGxpc3QpIDogbnVsbCxcbiAgICAgIGpvYnMgICAgIDoge30sXG4gICAgICByZXN1bHRzICA6IGlzTmFtZWRMaXN0ID8ge30gOiBbXSxcbiAgICAgIHNpemUgICAgIDogaXNOYW1lZExpc3QgPyBPYmplY3Qua2V5cyhsaXN0KS5sZW5ndGggOiBsaXN0Lmxlbmd0aFxuICAgIH1cbiAgICA7XG5cbiAgaWYgKHNvcnRNZXRob2QpXG4gIHtcbiAgICAvLyBzb3J0IGFycmF5IGtleXMgYmFzZWQgb24gaXQncyB2YWx1ZXNcbiAgICAvLyBzb3J0IG9iamVjdCdzIGtleXMganVzdCBvbiBvd24gbWVyaXRcbiAgICBpbml0U3RhdGUua2V5ZWRMaXN0LnNvcnQoaXNOYW1lZExpc3QgPyBzb3J0TWV0aG9kIDogZnVuY3Rpb24oYSwgYilcbiAgICB7XG4gICAgICByZXR1cm4gc29ydE1ldGhvZChsaXN0W2FdLCBsaXN0W2JdKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBpbml0U3RhdGU7XG59XG4iLCJ2YXIgYWJvcnQgPSByZXF1aXJlKCcuL2Fib3J0LmpzJylcbiAgLCBhc3luYyA9IHJlcXVpcmUoJy4vYXN5bmMuanMnKVxuICA7XG5cbi8vIEFQSVxubW9kdWxlLmV4cG9ydHMgPSB0ZXJtaW5hdG9yO1xuXG4vKipcbiAqIFRlcm1pbmF0ZXMgam9icyBpbiB0aGUgYXR0YWNoZWQgc3RhdGUgY29udGV4dFxuICpcbiAqIEB0aGlzICBBc3luY0tpdFN0YXRlI1xuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmaW5hbCBjYWxsYmFjayB0byBpbnZva2UgYWZ0ZXIgdGVybWluYXRpb25cbiAqL1xuZnVuY3Rpb24gdGVybWluYXRvcihjYWxsYmFjaylcbntcbiAgaWYgKCFPYmplY3Qua2V5cyh0aGlzLmpvYnMpLmxlbmd0aClcbiAge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGZhc3QgZm9yd2FyZCBpdGVyYXRpb24gaW5kZXhcbiAgdGhpcy5pbmRleCA9IHRoaXMuc2l6ZTtcblxuICAvLyBhYm9ydCBqb2JzXG4gIGFib3J0KHRoaXMpO1xuXG4gIC8vIHNlbmQgYmFjayByZXN1bHRzIHdlIGhhdmUgc28gZmFyXG4gIGFzeW5jKGNhbGxiYWNrKShudWxsLCB0aGlzLnJlc3VsdHMpO1xufVxuIiwidmFyIGl0ZXJhdGUgICAgPSByZXF1aXJlKCcuL2xpYi9pdGVyYXRlLmpzJylcbiAgLCBpbml0U3RhdGUgID0gcmVxdWlyZSgnLi9saWIvc3RhdGUuanMnKVxuICAsIHRlcm1pbmF0b3IgPSByZXF1aXJlKCcuL2xpYi90ZXJtaW5hdG9yLmpzJylcbiAgO1xuXG4vLyBQdWJsaWMgQVBJXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmFsbGVsO1xuXG4vKipcbiAqIFJ1bnMgaXRlcmF0b3Igb3ZlciBwcm92aWRlZCBhcnJheSBlbGVtZW50cyBpbiBwYXJhbGxlbFxuICpcbiAqIEBwYXJhbSAgIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBpdGVyYXRvciAtIGl0ZXJhdG9yIHRvIHJ1blxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgd2hlbiBhbGwgZWxlbWVudHMgcHJvY2Vzc2VkXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IC0gam9icyB0ZXJtaW5hdG9yXG4gKi9cbmZ1bmN0aW9uIHBhcmFsbGVsKGxpc3QsIGl0ZXJhdG9yLCBjYWxsYmFjaylcbntcbiAgdmFyIHN0YXRlID0gaW5pdFN0YXRlKGxpc3QpO1xuXG4gIHdoaWxlIChzdGF0ZS5pbmRleCA8IChzdGF0ZVsna2V5ZWRMaXN0J10gfHwgbGlzdCkubGVuZ3RoKVxuICB7XG4gICAgaXRlcmF0ZShsaXN0LCBpdGVyYXRvciwgc3RhdGUsIGZ1bmN0aW9uKGVycm9yLCByZXN1bHQpXG4gICAge1xuICAgICAgaWYgKGVycm9yKVxuICAgICAge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBsb29rcyBsaWtlIGl0J3MgdGhlIGxhc3Qgb25lXG4gICAgICBpZiAoT2JqZWN0LmtleXMoc3RhdGUuam9icykubGVuZ3RoID09PSAwKVxuICAgICAge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBzdGF0ZS5yZXN1bHRzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RhdGUuaW5kZXgrKztcbiAgfVxuXG4gIHJldHVybiB0ZXJtaW5hdG9yLmJpbmQoc3RhdGUsIGNhbGxiYWNrKTtcbn1cbiIsInZhciBpdGVyYXRlICAgID0gcmVxdWlyZSgnLi9saWIvaXRlcmF0ZS5qcycpXG4gICwgaW5pdFN0YXRlICA9IHJlcXVpcmUoJy4vbGliL3N0YXRlLmpzJylcbiAgLCB0ZXJtaW5hdG9yID0gcmVxdWlyZSgnLi9saWIvdGVybWluYXRvci5qcycpXG4gIDtcblxuLy8gUHVibGljIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBzZXJpYWxPcmRlcmVkO1xuLy8gc29ydGluZyBoZWxwZXJzXG5tb2R1bGUuZXhwb3J0cy5hc2NlbmRpbmcgID0gYXNjZW5kaW5nO1xubW9kdWxlLmV4cG9ydHMuZGVzY2VuZGluZyA9IGRlc2NlbmRpbmc7XG5cbi8qKlxuICogUnVucyBpdGVyYXRvciBvdmVyIHByb3ZpZGVkIHNvcnRlZCBhcnJheSBlbGVtZW50cyBpbiBzZXJpZXNcbiAqXG4gKiBAcGFyYW0gICB7YXJyYXl8b2JqZWN0fSBsaXN0IC0gYXJyYXkgb3Igb2JqZWN0IChuYW1lZCBsaXN0KSB0byBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSAgIHtmdW5jdGlvbn0gaXRlcmF0b3IgLSBpdGVyYXRvciB0byBydW5cbiAqIEBwYXJhbSAgIHtmdW5jdGlvbn0gc29ydE1ldGhvZCAtIGN1c3RvbSBzb3J0IGZ1bmN0aW9uXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gaW52b2tlZCB3aGVuIGFsbCBlbGVtZW50cyBwcm9jZXNzZWRcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gLSBqb2JzIHRlcm1pbmF0b3JcbiAqL1xuZnVuY3Rpb24gc2VyaWFsT3JkZXJlZChsaXN0LCBpdGVyYXRvciwgc29ydE1ldGhvZCwgY2FsbGJhY2spXG57XG4gIHZhciBzdGF0ZSA9IGluaXRTdGF0ZShsaXN0LCBzb3J0TWV0aG9kKTtcblxuICBpdGVyYXRlKGxpc3QsIGl0ZXJhdG9yLCBzdGF0ZSwgZnVuY3Rpb24gaXRlcmF0b3JIYW5kbGVyKGVycm9yLCByZXN1bHQpXG4gIHtcbiAgICBpZiAoZXJyb3IpXG4gICAge1xuICAgICAgY2FsbGJhY2soZXJyb3IsIHJlc3VsdCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhdGUuaW5kZXgrKztcblxuICAgIC8vIGFyZSB3ZSB0aGVyZSB5ZXQ/XG4gICAgaWYgKHN0YXRlLmluZGV4IDwgKHN0YXRlWydrZXllZExpc3QnXSB8fCBsaXN0KS5sZW5ndGgpXG4gICAge1xuICAgICAgaXRlcmF0ZShsaXN0LCBpdGVyYXRvciwgc3RhdGUsIGl0ZXJhdG9ySGFuZGxlcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZG9uZSBoZXJlXG4gICAgY2FsbGJhY2sobnVsbCwgc3RhdGUucmVzdWx0cyk7XG4gIH0pO1xuXG4gIHJldHVybiB0ZXJtaW5hdG9yLmJpbmQoc3RhdGUsIGNhbGxiYWNrKTtcbn1cblxuLypcbiAqIC0tIFNvcnQgbWV0aG9kc1xuICovXG5cbi8qKlxuICogc29ydCBoZWxwZXIgdG8gc29ydCBhcnJheSBlbGVtZW50cyBpbiBhc2NlbmRpbmcgb3JkZXJcbiAqXG4gKiBAcGFyYW0gICB7bWl4ZWR9IGEgLSBhbiBpdGVtIHRvIGNvbXBhcmVcbiAqIEBwYXJhbSAgIHttaXhlZH0gYiAtIGFuIGl0ZW0gdG8gY29tcGFyZVxuICogQHJldHVybnMge251bWJlcn0gLSBjb21wYXJpc29uIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc2NlbmRpbmcoYSwgYilcbntcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiAwO1xufVxuXG4vKipcbiAqIHNvcnQgaGVscGVyIHRvIHNvcnQgYXJyYXkgZWxlbWVudHMgaW4gZGVzY2VuZGluZyBvcmRlclxuICpcbiAqIEBwYXJhbSAgIHttaXhlZH0gYSAtIGFuIGl0ZW0gdG8gY29tcGFyZVxuICogQHBhcmFtICAge21peGVkfSBiIC0gYW4gaXRlbSB0byBjb21wYXJlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtIGNvbXBhcmlzb24gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGRlc2NlbmRpbmcoYSwgYilcbntcbiAgcmV0dXJuIC0xICogYXNjZW5kaW5nKGEsIGIpO1xufVxuIiwidmFyIHNlcmlhbE9yZGVyZWQgPSByZXF1aXJlKCcuL3NlcmlhbE9yZGVyZWQuanMnKTtcblxuLy8gUHVibGljIEFQSVxubW9kdWxlLmV4cG9ydHMgPSBzZXJpYWw7XG5cbi8qKlxuICogUnVucyBpdGVyYXRvciBvdmVyIHByb3ZpZGVkIGFycmF5IGVsZW1lbnRzIGluIHNlcmllc1xuICpcbiAqIEBwYXJhbSAgIHthcnJheXxvYmplY3R9IGxpc3QgLSBhcnJheSBvciBvYmplY3QgKG5hbWVkIGxpc3QpIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBpdGVyYXRvciAtIGl0ZXJhdG9yIHRvIHJ1blxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGludm9rZWQgd2hlbiBhbGwgZWxlbWVudHMgcHJvY2Vzc2VkXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IC0gam9icyB0ZXJtaW5hdG9yXG4gKi9cbmZ1bmN0aW9uIHNlcmlhbChsaXN0LCBpdGVyYXRvciwgY2FsbGJhY2spXG57XG4gIHJldHVybiBzZXJpYWxPcmRlcmVkKGxpc3QsIGl0ZXJhdG9yLCBudWxsLCBjYWxsYmFjayk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9XG57XG4gIHBhcmFsbGVsICAgICAgOiByZXF1aXJlKCcuL3BhcmFsbGVsLmpzJyksXG4gIHNlcmlhbCAgICAgICAgOiByZXF1aXJlKCcuL3NlcmlhbC5qcycpLFxuICBzZXJpYWxPcmRlcmVkIDogcmVxdWlyZSgnLi9zZXJpYWxPcmRlcmVkLmpzJylcbn07XG4iLCIvLyBwb3B1bGF0ZXMgbWlzc2luZyB2YWx1ZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZHN0LCBzcmMpIHtcblxuICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goZnVuY3Rpb24ocHJvcClcbiAge1xuICAgIGRzdFtwcm9wXSA9IGRzdFtwcm9wXSB8fCBzcmNbcHJvcF07XG4gIH0pO1xuXG4gIHJldHVybiBkc3Q7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG52YXIgdHJhbnNpdGlvbmFsRGVmYXVsdHMgPSByZXF1aXJlKCcuL3RyYW5zaXRpb25hbCcpO1xudmFyIHRvRm9ybURhdGEgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3RvRm9ybURhdGEnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICB2YXIgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG4gICAgdmFyIGNvbnRlbnRUeXBlID0gaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXTtcblxuICAgIHZhciBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgKGlzT2JqZWN0UGF5bG9hZCAmJiBjb250ZW50VHlwZSA9PT0gJ211bHRpcGFydC9mb3JtLWRhdGEnKSkge1xuICAgICAgdmFyIF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuICAgICAgcmV0dXJuIHRvRm9ybURhdGEoaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSwgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdFBheWxvYWQgfHwgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9qc29uJykge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiByZXF1aXJlKCcuL2Vudi9Gb3JtRGF0YScpXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbCcpO1xudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciBDYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3InKTtcbnZhciBwYXJzZVByb3RvY29sID0gcmVxdWlyZSgnLi4vaGVscGVycy9wYXJzZVByb3RvY29sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICB2YXIgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB2YXIgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkgJiYgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8ICByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgKGNhbmNlbCAmJiBjYW5jZWwudHlwZSkgPyBuZXcgQ2FuY2VsZWRFcnJvcigpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKGZ1bGxQYXRoKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBbICdodHRwJywgJ2h0dHBzJywgJ2ZpbGUnIF0uaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzdHJpY3Rcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZm9ybS1kYXRhJyk7XG4iLCJ2YXIgQ29tYmluZWRTdHJlYW0gPSByZXF1aXJlKCdjb21iaW5lZC1zdHJlYW0nKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbnZhciBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG52YXIgcGFyc2VVcmwgPSByZXF1aXJlKCd1cmwnKS5wYXJzZTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuU3RyZWFtO1xudmFyIG1pbWUgPSByZXF1aXJlKCdtaW1lLXR5cGVzJyk7XG52YXIgYXN5bmNraXQgPSByZXF1aXJlKCdhc3luY2tpdCcpO1xudmFyIHBvcHVsYXRlID0gcmVxdWlyZSgnLi9wb3B1bGF0ZS5qcycpO1xuXG4vLyBQdWJsaWMgQVBJXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1EYXRhO1xuXG4vLyBtYWtlIGl0IGEgU3RyZWFtXG51dGlsLmluaGVyaXRzKEZvcm1EYXRhLCBDb21iaW5lZFN0cmVhbSk7XG5cbi8qKlxuICogQ3JlYXRlIHJlYWRhYmxlIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiIHN0cmVhbXMuXG4gKiBDYW4gYmUgdXNlZCB0byBzdWJtaXQgZm9ybXNcbiAqIGFuZCBmaWxlIHVwbG9hZHMgdG8gb3RoZXIgd2ViIGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUHJvcGVydGllcyB0byBiZSBhZGRlZC9vdmVycmlkZW4gZm9yIEZvcm1EYXRhIGFuZCBDb21iaW5lZFN0cmVhbVxuICovXG5mdW5jdGlvbiBGb3JtRGF0YShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBGb3JtRGF0YSkpIHtcbiAgICByZXR1cm4gbmV3IEZvcm1EYXRhKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5fb3ZlcmhlYWRMZW5ndGggPSAwO1xuICB0aGlzLl92YWx1ZUxlbmd0aCA9IDA7XG4gIHRoaXMuX3ZhbHVlc1RvTWVhc3VyZSA9IFtdO1xuXG4gIENvbWJpbmVkU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgdGhpc1tvcHRpb25dID0gb3B0aW9uc1tvcHRpb25dO1xuICB9XG59XG5cbkZvcm1EYXRhLkxJTkVfQlJFQUsgPSAnXFxyXFxuJztcbkZvcm1EYXRhLkRFRkFVTFRfQ09OVEVOVF9UWVBFID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihmaWVsZCwgdmFsdWUsIG9wdGlvbnMpIHtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBhbGxvdyBmaWxlbmFtZSBhcyBzaW5nbGUgb3B0aW9uXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PSAnc3RyaW5nJykge1xuICAgIG9wdGlvbnMgPSB7ZmlsZW5hbWU6IG9wdGlvbnN9O1xuICB9XG5cbiAgdmFyIGFwcGVuZCA9IENvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5hcHBlbmQuYmluZCh0aGlzKTtcblxuICAvLyBhbGwgdGhhdCBzdHJlYW15IGJ1c2luZXNzIGNhbid0IGhhbmRsZSBudW1iZXJzXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICB2YWx1ZSA9ICcnICsgdmFsdWU7XG4gIH1cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmVsaXhnZS9ub2RlLWZvcm0tZGF0YS9pc3N1ZXMvMzhcbiAgaWYgKHV0aWwuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBQbGVhc2UgY29udmVydCB5b3VyIGFycmF5IGludG8gc3RyaW5nXG4gICAgLy8gdGhlIHdheSB3ZWIgc2VydmVyIGV4cGVjdHMgaXRcbiAgICB0aGlzLl9lcnJvcihuZXcgRXJyb3IoJ0FycmF5cyBhcmUgbm90IHN1cHBvcnRlZC4nKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGhlYWRlciA9IHRoaXMuX211bHRpUGFydEhlYWRlcihmaWVsZCwgdmFsdWUsIG9wdGlvbnMpO1xuICB2YXIgZm9vdGVyID0gdGhpcy5fbXVsdGlQYXJ0Rm9vdGVyKCk7XG5cbiAgYXBwZW5kKGhlYWRlcik7XG4gIGFwcGVuZCh2YWx1ZSk7XG4gIGFwcGVuZChmb290ZXIpO1xuXG4gIC8vIHBhc3MgYWxvbmcgb3B0aW9ucy5rbm93bkxlbmd0aFxuICB0aGlzLl90cmFja0xlbmd0aChoZWFkZXIsIHZhbHVlLCBvcHRpb25zKTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fdHJhY2tMZW5ndGggPSBmdW5jdGlvbihoZWFkZXIsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB2YWx1ZUxlbmd0aCA9IDA7XG5cbiAgLy8gdXNlZCB3LyBnZXRMZW5ndGhTeW5jKCksIHdoZW4gbGVuZ3RoIGlzIGtub3duLlxuICAvLyBlLmcuIGZvciBzdHJlYW1pbmcgZGlyZWN0bHkgZnJvbSBhIHJlbW90ZSBzZXJ2ZXIsXG4gIC8vIHcvIGEga25vd24gZmlsZSBhIHNpemUsIGFuZCBub3Qgd2FudGluZyB0byB3YWl0IGZvclxuICAvLyBpbmNvbWluZyBmaWxlIHRvIGZpbmlzaCB0byBnZXQgaXRzIHNpemUuXG4gIGlmIChvcHRpb25zLmtub3duTGVuZ3RoICE9IG51bGwpIHtcbiAgICB2YWx1ZUxlbmd0aCArPSArb3B0aW9ucy5rbm93bkxlbmd0aDtcbiAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhbHVlTGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUpO1xuICB9XG5cbiAgdGhpcy5fdmFsdWVMZW5ndGggKz0gdmFsdWVMZW5ndGg7XG5cbiAgLy8gQGNoZWNrIHdoeSBhZGQgQ1JMRj8gZG9lcyB0aGlzIGFjY291bnQgZm9yIGN1c3RvbS9tdWx0aXBsZSBDUkxGcz9cbiAgdGhpcy5fb3ZlcmhlYWRMZW5ndGggKz1cbiAgICBCdWZmZXIuYnl0ZUxlbmd0aChoZWFkZXIpICtcbiAgICBGb3JtRGF0YS5MSU5FX0JSRUFLLmxlbmd0aDtcblxuICAvLyBlbXB0eSBvciBlaXRoZXIgZG9lc24ndCBoYXZlIHBhdGggb3Igbm90IGFuIGh0dHAgcmVzcG9uc2Ugb3Igbm90IGEgc3RyZWFtXG4gIGlmICghdmFsdWUgfHwgKCAhdmFsdWUucGF0aCAmJiAhKHZhbHVlLnJlYWRhYmxlICYmIHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwVmVyc2lvbicpKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgU3RyZWFtKSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBubyBuZWVkIHRvIGJvdGhlciB3aXRoIHRoZSBsZW5ndGhcbiAgaWYgKCFvcHRpb25zLmtub3duTGVuZ3RoKSB7XG4gICAgdGhpcy5fdmFsdWVzVG9NZWFzdXJlLnB1c2godmFsdWUpO1xuICB9XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2xlbmd0aFJldHJpZXZlciA9IGZ1bmN0aW9uKHZhbHVlLCBjYWxsYmFjaykge1xuXG4gIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnZmQnKSkge1xuXG4gICAgLy8gdGFrZSByZWFkIHJhbmdlIGludG8gYSBhY2NvdW50XG4gICAgLy8gYGVuZGAgPSBJbmZpbml0eSDigJM+IHJlYWQgZmlsZSB0aWxsIHRoZSBlbmRcbiAgICAvL1xuICAgIC8vIFRPRE86IExvb2tzIGxpa2UgdGhlcmUgaXMgYnVnIGluIE5vZGUgZnMuY3JlYXRlUmVhZFN0cmVhbVxuICAgIC8vIGl0IGRvZXNuJ3QgcmVzcGVjdCBgZW5kYCBvcHRpb25zIHdpdGhvdXQgYHN0YXJ0YCBvcHRpb25zXG4gICAgLy8gRml4IGl0IHdoZW4gbm9kZSBmaXhlcyBpdC5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzc4MTlcbiAgICBpZiAodmFsdWUuZW5kICE9IHVuZGVmaW5lZCAmJiB2YWx1ZS5lbmQgIT0gSW5maW5pdHkgJiYgdmFsdWUuc3RhcnQgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgIC8vIHdoZW4gZW5kIHNwZWNpZmllZFxuICAgICAgLy8gbm8gbmVlZCB0byBjYWxjdWxhdGUgcmFuZ2VcbiAgICAgIC8vIGluY2x1c2l2ZSwgc3RhcnRzIHdpdGggMFxuICAgICAgY2FsbGJhY2sobnVsbCwgdmFsdWUuZW5kICsgMSAtICh2YWx1ZS5zdGFydCA/IHZhbHVlLnN0YXJ0IDogMCkpO1xuXG4gICAgLy8gbm90IHRoYXQgZmFzdCBzbm9vcHlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc3RpbGwgbmVlZCB0byBmZXRjaCBmaWxlIHNpemUgZnJvbSBmc1xuICAgICAgZnMuc3RhdCh2YWx1ZS5wYXRoLCBmdW5jdGlvbihlcnIsIHN0YXQpIHtcblxuICAgICAgICB2YXIgZmlsZVNpemU7XG5cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGZpbmFsIHNpemUgYmFzZWQgb24gdGhlIHJhbmdlIG9wdGlvbnNcbiAgICAgICAgZmlsZVNpemUgPSBzdGF0LnNpemUgLSAodmFsdWUuc3RhcnQgPyB2YWx1ZS5zdGFydCA6IDApO1xuICAgICAgICBjYWxsYmFjayhudWxsLCBmaWxlU2l6ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgLy8gb3IgaHR0cCByZXNwb25zZVxuICB9IGVsc2UgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwVmVyc2lvbicpKSB7XG4gICAgY2FsbGJhY2sobnVsbCwgK3ZhbHVlLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10pO1xuXG4gIC8vIG9yIHJlcXVlc3Qgc3RyZWFtIGh0dHA6Ly9naXRodWIuY29tL21pa2VhbC9yZXF1ZXN0XG4gIH0gZWxzZSBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2h0dHBNb2R1bGUnKSkge1xuICAgIC8vIHdhaXQgdGlsbCByZXNwb25zZSBjb21lIGJhY2tcbiAgICB2YWx1ZS5vbigncmVzcG9uc2UnLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgdmFsdWUucGF1c2UoKTtcbiAgICAgIGNhbGxiYWNrKG51bGwsICtyZXNwb25zZS5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddKTtcbiAgICB9KTtcbiAgICB2YWx1ZS5yZXN1bWUoKTtcblxuICAvLyBzb21ldGhpbmcgZWxzZVxuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrKCdVbmtub3duIHN0cmVhbScpO1xuICB9XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX211bHRpUGFydEhlYWRlciA9IGZ1bmN0aW9uKGZpZWxkLCB2YWx1ZSwgb3B0aW9ucykge1xuICAvLyBjdXN0b20gaGVhZGVyIHNwZWNpZmllZCAoYXMgc3RyaW5nKT9cbiAgLy8gaXQgYmVjb21lcyByZXNwb25zaWJsZSBmb3IgYm91bmRhcnlcbiAgLy8gKGUuZy4gdG8gaGFuZGxlIGV4dHJhIENSTEZzIG9uIC5ORVQgc2VydmVycylcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmhlYWRlciA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBvcHRpb25zLmhlYWRlcjtcbiAgfVxuXG4gIHZhciBjb250ZW50RGlzcG9zaXRpb24gPSB0aGlzLl9nZXRDb250ZW50RGlzcG9zaXRpb24odmFsdWUsIG9wdGlvbnMpO1xuICB2YXIgY29udGVudFR5cGUgPSB0aGlzLl9nZXRDb250ZW50VHlwZSh2YWx1ZSwgb3B0aW9ucyk7XG5cbiAgdmFyIGNvbnRlbnRzID0gJyc7XG4gIHZhciBoZWFkZXJzICA9IHtcbiAgICAvLyBhZGQgY3VzdG9tIGRpc3Bvc2l0aW9uIGFzIHRoaXJkIGVsZW1lbnQgb3Iga2VlcCBpdCB0d28gZWxlbWVudHMgaWYgbm90XG4gICAgJ0NvbnRlbnQtRGlzcG9zaXRpb24nOiBbJ2Zvcm0tZGF0YScsICduYW1lPVwiJyArIGZpZWxkICsgJ1wiJ10uY29uY2F0KGNvbnRlbnREaXNwb3NpdGlvbiB8fCBbXSksXG4gICAgLy8gaWYgbm8gY29udGVudCB0eXBlLiBhbGxvdyBpdCB0byBiZSBlbXB0eSBhcnJheVxuICAgICdDb250ZW50LVR5cGUnOiBbXS5jb25jYXQoY29udGVudFR5cGUgfHwgW10pXG4gIH07XG5cbiAgLy8gYWxsb3cgY3VzdG9tIGhlYWRlcnMuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5oZWFkZXIgPT0gJ29iamVjdCcpIHtcbiAgICBwb3B1bGF0ZShoZWFkZXJzLCBvcHRpb25zLmhlYWRlcik7XG4gIH1cblxuICB2YXIgaGVhZGVyO1xuICBmb3IgKHZhciBwcm9wIGluIGhlYWRlcnMpIHtcbiAgICBpZiAoIWhlYWRlcnMuaGFzT3duUHJvcGVydHkocHJvcCkpIGNvbnRpbnVlO1xuICAgIGhlYWRlciA9IGhlYWRlcnNbcHJvcF07XG5cbiAgICAvLyBza2lwIG51bGxpc2ggaGVhZGVycy5cbiAgICBpZiAoaGVhZGVyID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYWxsIGhlYWRlcnMgdG8gYXJyYXlzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIgPSBbaGVhZGVyXTtcbiAgICB9XG5cbiAgICAvLyBhZGQgbm9uLWVtcHR5IGhlYWRlcnMuXG4gICAgaWYgKGhlYWRlci5sZW5ndGgpIHtcbiAgICAgIGNvbnRlbnRzICs9IHByb3AgKyAnOiAnICsgaGVhZGVyLmpvaW4oJzsgJykgKyBGb3JtRGF0YS5MSU5FX0JSRUFLO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnLS0nICsgdGhpcy5nZXRCb3VuZGFyeSgpICsgRm9ybURhdGEuTElORV9CUkVBSyArIGNvbnRlbnRzICsgRm9ybURhdGEuTElORV9CUkVBSztcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fZ2V0Q29udGVudERpc3Bvc2l0aW9uID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpIHtcblxuICB2YXIgZmlsZW5hbWVcbiAgICAsIGNvbnRlbnREaXNwb3NpdGlvblxuICAgIDtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsZXBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gY3VzdG9tIGZpbGVwYXRoIGZvciByZWxhdGl2ZSBwYXRoc1xuICAgIGZpbGVuYW1lID0gcGF0aC5ub3JtYWxpemUob3B0aW9ucy5maWxlcGF0aCkucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMuZmlsZW5hbWUgfHwgdmFsdWUubmFtZSB8fCB2YWx1ZS5wYXRoKSB7XG4gICAgLy8gY3VzdG9tIGZpbGVuYW1lIHRha2UgcHJlY2VkZW5jZVxuICAgIC8vIGZvcm1pZGFibGUgYW5kIHRoZSBicm93c2VyIGFkZCBhIG5hbWUgcHJvcGVydHlcbiAgICAvLyBmcy0gYW5kIHJlcXVlc3QtIHN0cmVhbXMgaGF2ZSBwYXRoIHByb3BlcnR5XG4gICAgZmlsZW5hbWUgPSBwYXRoLmJhc2VuYW1lKG9wdGlvbnMuZmlsZW5hbWUgfHwgdmFsdWUubmFtZSB8fCB2YWx1ZS5wYXRoKTtcbiAgfSBlbHNlIGlmICh2YWx1ZS5yZWFkYWJsZSAmJiB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnaHR0cFZlcnNpb24nKSkge1xuICAgIC8vIG9yIHRyeSBodHRwIHJlc3BvbnNlXG4gICAgZmlsZW5hbWUgPSBwYXRoLmJhc2VuYW1lKHZhbHVlLmNsaWVudC5faHR0cE1lc3NhZ2UucGF0aCB8fCAnJyk7XG4gIH1cblxuICBpZiAoZmlsZW5hbWUpIHtcbiAgICBjb250ZW50RGlzcG9zaXRpb24gPSAnZmlsZW5hbWU9XCInICsgZmlsZW5hbWUgKyAnXCInO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRlbnREaXNwb3NpdGlvbjtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fZ2V0Q29udGVudFR5cGUgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykge1xuXG4gIC8vIHVzZSBjdXN0b20gY29udGVudC10eXBlIGFib3ZlIGFsbFxuICB2YXIgY29udGVudFR5cGUgPSBvcHRpb25zLmNvbnRlbnRUeXBlO1xuXG4gIC8vIG9yIHRyeSBgbmFtZWAgZnJvbSBmb3JtaWRhYmxlLCBicm93c2VyXG4gIGlmICghY29udGVudFR5cGUgJiYgdmFsdWUubmFtZSkge1xuICAgIGNvbnRlbnRUeXBlID0gbWltZS5sb29rdXAodmFsdWUubmFtZSk7XG4gIH1cblxuICAvLyBvciB0cnkgYHBhdGhgIGZyb20gZnMtLCByZXF1ZXN0LSBzdHJlYW1zXG4gIGlmICghY29udGVudFR5cGUgJiYgdmFsdWUucGF0aCkge1xuICAgIGNvbnRlbnRUeXBlID0gbWltZS5sb29rdXAodmFsdWUucGF0aCk7XG4gIH1cblxuICAvLyBvciBpZiBpdCdzIGh0dHAtcmVwb25zZVxuICBpZiAoIWNvbnRlbnRUeXBlICYmIHZhbHVlLnJlYWRhYmxlICYmIHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwVmVyc2lvbicpKSB7XG4gICAgY29udGVudFR5cGUgPSB2YWx1ZS5oZWFkZXJzWydjb250ZW50LXR5cGUnXTtcbiAgfVxuXG4gIC8vIG9yIGd1ZXNzIGl0IGZyb20gdGhlIGZpbGVwYXRoIG9yIGZpbGVuYW1lXG4gIGlmICghY29udGVudFR5cGUgJiYgKG9wdGlvbnMuZmlsZXBhdGggfHwgb3B0aW9ucy5maWxlbmFtZSkpIHtcbiAgICBjb250ZW50VHlwZSA9IG1pbWUubG9va3VwKG9wdGlvbnMuZmlsZXBhdGggfHwgb3B0aW9ucy5maWxlbmFtZSk7XG4gIH1cblxuICAvLyBmYWxsYmFjayB0byB0aGUgZGVmYXVsdCBjb250ZW50IHR5cGUgaWYgYHZhbHVlYCBpcyBub3Qgc2ltcGxlIHZhbHVlXG4gIGlmICghY29udGVudFR5cGUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgY29udGVudFR5cGUgPSBGb3JtRGF0YS5ERUZBVUxUX0NPTlRFTlRfVFlQRTtcbiAgfVxuXG4gIHJldHVybiBjb250ZW50VHlwZTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fbXVsdGlQYXJ0Rm9vdGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBmdW5jdGlvbihuZXh0KSB7XG4gICAgdmFyIGZvb3RlciA9IEZvcm1EYXRhLkxJTkVfQlJFQUs7XG5cbiAgICB2YXIgbGFzdFBhcnQgPSAodGhpcy5fc3RyZWFtcy5sZW5ndGggPT09IDApO1xuICAgIGlmIChsYXN0UGFydCkge1xuICAgICAgZm9vdGVyICs9IHRoaXMuX2xhc3RCb3VuZGFyeSgpO1xuICAgIH1cblxuICAgIG5leHQoZm9vdGVyKTtcbiAgfS5iaW5kKHRoaXMpO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9sYXN0Qm91bmRhcnkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICctLScgKyB0aGlzLmdldEJvdW5kYXJ5KCkgKyAnLS0nICsgRm9ybURhdGEuTElORV9CUkVBSztcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5nZXRIZWFkZXJzID0gZnVuY3Rpb24odXNlckhlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcjtcbiAgdmFyIGZvcm1IZWFkZXJzID0ge1xuICAgICdjb250ZW50LXR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9JyArIHRoaXMuZ2V0Qm91bmRhcnkoKVxuICB9O1xuXG4gIGZvciAoaGVhZGVyIGluIHVzZXJIZWFkZXJzKSB7XG4gICAgaWYgKHVzZXJIZWFkZXJzLmhhc093blByb3BlcnR5KGhlYWRlcikpIHtcbiAgICAgIGZvcm1IZWFkZXJzW2hlYWRlci50b0xvd2VyQ2FzZSgpXSA9IHVzZXJIZWFkZXJzW2hlYWRlcl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvcm1IZWFkZXJzO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLnNldEJvdW5kYXJ5ID0gZnVuY3Rpb24oYm91bmRhcnkpIHtcbiAgdGhpcy5fYm91bmRhcnkgPSBib3VuZGFyeTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5nZXRCb3VuZGFyeSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuX2JvdW5kYXJ5KSB7XG4gICAgdGhpcy5fZ2VuZXJhdGVCb3VuZGFyeSgpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2JvdW5kYXJ5O1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZGF0YUJ1ZmZlciA9IG5ldyBCdWZmZXIuYWxsb2MoIDAgKTtcbiAgdmFyIGJvdW5kYXJ5ID0gdGhpcy5nZXRCb3VuZGFyeSgpO1xuXG4gIC8vIENyZWF0ZSB0aGUgZm9ybSBjb250ZW50LiBBZGQgTGluZSBicmVha3MgdG8gdGhlIGVuZCBvZiBkYXRhLlxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fc3RyZWFtcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fc3RyZWFtc1tpXSAhPT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAvLyBBZGQgY29udGVudCB0byB0aGUgYnVmZmVyLlxuICAgICAgaWYoQnVmZmVyLmlzQnVmZmVyKHRoaXMuX3N0cmVhbXNbaV0pKSB7XG4gICAgICAgIGRhdGFCdWZmZXIgPSBCdWZmZXIuY29uY2F0KCBbZGF0YUJ1ZmZlciwgdGhpcy5fc3RyZWFtc1tpXV0pO1xuICAgICAgfWVsc2Uge1xuICAgICAgICBkYXRhQnVmZmVyID0gQnVmZmVyLmNvbmNhdCggW2RhdGFCdWZmZXIsIEJ1ZmZlci5mcm9tKHRoaXMuX3N0cmVhbXNbaV0pXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBicmVhayBhZnRlciBjb250ZW50LlxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9zdHJlYW1zW2ldICE9PSAnc3RyaW5nJyB8fCB0aGlzLl9zdHJlYW1zW2ldLnN1YnN0cmluZyggMiwgYm91bmRhcnkubGVuZ3RoICsgMiApICE9PSBib3VuZGFyeSkge1xuICAgICAgICBkYXRhQnVmZmVyID0gQnVmZmVyLmNvbmNhdCggW2RhdGFCdWZmZXIsIEJ1ZmZlci5mcm9tKEZvcm1EYXRhLkxJTkVfQlJFQUspXSApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCB0aGUgZm9vdGVyIGFuZCByZXR1cm4gdGhlIEJ1ZmZlciBvYmplY3QuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KCBbZGF0YUJ1ZmZlciwgQnVmZmVyLmZyb20odGhpcy5fbGFzdEJvdW5kYXJ5KCkpXSApO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9nZW5lcmF0ZUJvdW5kYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRoaXMgZ2VuZXJhdGVzIGEgNTAgY2hhcmFjdGVyIGJvdW5kYXJ5IHNpbWlsYXIgdG8gdGhvc2UgdXNlZCBieSBGaXJlZm94LlxuICAvLyBUaGV5IGFyZSBvcHRpbWl6ZWQgZm9yIGJveWVyLW1vb3JlIHBhcnNpbmcuXG4gIHZhciBib3VuZGFyeSA9ICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgIGJvdW5kYXJ5ICs9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKS50b1N0cmluZygxNik7XG4gIH1cblxuICB0aGlzLl9ib3VuZGFyeSA9IGJvdW5kYXJ5O1xufTtcblxuLy8gTm90ZTogZ2V0TGVuZ3RoU3luYyBET0VTTidUIGNhbGN1bGF0ZSBzdHJlYW1zIGxlbmd0aFxuLy8gQXMgd29ya2Fyb3VuZCBvbmUgY2FuIGNhbGN1bGF0ZSBmaWxlIHNpemUgbWFudWFsbHlcbi8vIGFuZCBhZGQgaXQgYXMga25vd25MZW5ndGggb3B0aW9uXG5Gb3JtRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoU3luYyA9IGZ1bmN0aW9uKCkge1xuICB2YXIga25vd25MZW5ndGggPSB0aGlzLl9vdmVyaGVhZExlbmd0aCArIHRoaXMuX3ZhbHVlTGVuZ3RoO1xuXG4gIC8vIERvbid0IGdldCBjb25mdXNlZCwgdGhlcmUgYXJlIDMgXCJpbnRlcm5hbFwiIHN0cmVhbXMgZm9yIGVhY2gga2V5dmFsIHBhaXJcbiAgLy8gc28gaXQgYmFzaWNhbGx5IGNoZWNrcyBpZiB0aGVyZSBpcyBhbnkgdmFsdWUgYWRkZWQgdG8gdGhlIGZvcm1cbiAgaWYgKHRoaXMuX3N0cmVhbXMubGVuZ3RoKSB7XG4gICAga25vd25MZW5ndGggKz0gdGhpcy5fbGFzdEJvdW5kYXJ5KCkubGVuZ3RoO1xuICB9XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGEvaXNzdWVzLzQwXG4gIGlmICghdGhpcy5oYXNLbm93bkxlbmd0aCgpKSB7XG4gICAgLy8gU29tZSBhc3luYyBsZW5ndGggcmV0cmlldmVycyBhcmUgcHJlc2VudFxuICAgIC8vIHRoZXJlZm9yZSBzeW5jaHJvbm91cyBsZW5ndGggY2FsY3VsYXRpb24gaXMgZmFsc2UuXG4gICAgLy8gUGxlYXNlIHVzZSBnZXRMZW5ndGgoY2FsbGJhY2spIHRvIGdldCBwcm9wZXIgbGVuZ3RoXG4gICAgdGhpcy5fZXJyb3IobmV3IEVycm9yKCdDYW5ub3QgY2FsY3VsYXRlIHByb3BlciBsZW5ndGggaW4gc3luY2hyb25vdXMgd2F5LicpKTtcbiAgfVxuXG4gIHJldHVybiBrbm93bkxlbmd0aDtcbn07XG5cbi8vIFB1YmxpYyBBUEkgdG8gY2hlY2sgaWYgbGVuZ3RoIG9mIGFkZGVkIHZhbHVlcyBpcyBrbm93blxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGEvaXNzdWVzLzE5NlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGEvaXNzdWVzLzI2MlxuRm9ybURhdGEucHJvdG90eXBlLmhhc0tub3duTGVuZ3RoID0gZnVuY3Rpb24oKSB7XG4gIHZhciBoYXNLbm93bkxlbmd0aCA9IHRydWU7XG5cbiAgaWYgKHRoaXMuX3ZhbHVlc1RvTWVhc3VyZS5sZW5ndGgpIHtcbiAgICBoYXNLbm93bkxlbmd0aCA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGhhc0tub3duTGVuZ3RoO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uKGNiKSB7XG4gIHZhciBrbm93bkxlbmd0aCA9IHRoaXMuX292ZXJoZWFkTGVuZ3RoICsgdGhpcy5fdmFsdWVMZW5ndGg7XG5cbiAgaWYgKHRoaXMuX3N0cmVhbXMubGVuZ3RoKSB7XG4gICAga25vd25MZW5ndGggKz0gdGhpcy5fbGFzdEJvdW5kYXJ5KCkubGVuZ3RoO1xuICB9XG5cbiAgaWYgKCF0aGlzLl92YWx1ZXNUb01lYXN1cmUubGVuZ3RoKSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhjYi5iaW5kKHRoaXMsIG51bGwsIGtub3duTGVuZ3RoKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYXN5bmNraXQucGFyYWxsZWwodGhpcy5fdmFsdWVzVG9NZWFzdXJlLCB0aGlzLl9sZW5ndGhSZXRyaWV2ZXIsIGZ1bmN0aW9uKGVyciwgdmFsdWVzKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2IoZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbihsZW5ndGgpIHtcbiAgICAgIGtub3duTGVuZ3RoICs9IGxlbmd0aDtcbiAgICB9KTtcblxuICAgIGNiKG51bGwsIGtub3duTGVuZ3RoKTtcbiAgfSk7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuc3VibWl0ID0gZnVuY3Rpb24ocGFyYW1zLCBjYikge1xuICB2YXIgcmVxdWVzdFxuICAgICwgb3B0aW9uc1xuICAgICwgZGVmYXVsdHMgPSB7bWV0aG9kOiAncG9zdCd9XG4gICAgO1xuXG4gIC8vIHBhcnNlIHByb3ZpZGVkIHVybCBpZiBpdCdzIHN0cmluZ1xuICAvLyBvciB0cmVhdCBpdCBhcyBvcHRpb25zIG9iamVjdFxuICBpZiAodHlwZW9mIHBhcmFtcyA9PSAnc3RyaW5nJykge1xuXG4gICAgcGFyYW1zID0gcGFyc2VVcmwocGFyYW1zKTtcbiAgICBvcHRpb25zID0gcG9wdWxhdGUoe1xuICAgICAgcG9ydDogcGFyYW1zLnBvcnQsXG4gICAgICBwYXRoOiBwYXJhbXMucGF0aG5hbWUsXG4gICAgICBob3N0OiBwYXJhbXMuaG9zdG5hbWUsXG4gICAgICBwcm90b2NvbDogcGFyYW1zLnByb3RvY29sXG4gICAgfSwgZGVmYXVsdHMpO1xuXG4gIC8vIHVzZSBjdXN0b20gcGFyYW1zXG4gIH0gZWxzZSB7XG5cbiAgICBvcHRpb25zID0gcG9wdWxhdGUocGFyYW1zLCBkZWZhdWx0cyk7XG4gICAgLy8gaWYgbm8gcG9ydCBwcm92aWRlZCB1c2UgZGVmYXVsdCBvbmVcbiAgICBpZiAoIW9wdGlvbnMucG9ydCkge1xuICAgICAgb3B0aW9ucy5wb3J0ID0gb3B0aW9ucy5wcm90b2NvbCA9PSAnaHR0cHM6JyA/IDQ0MyA6IDgwO1xuICAgIH1cbiAgfVxuXG4gIC8vIHB1dCB0aGF0IGdvb2QgY29kZSBpbiBnZXRIZWFkZXJzIHRvIHNvbWUgdXNlXG4gIG9wdGlvbnMuaGVhZGVycyA9IHRoaXMuZ2V0SGVhZGVycyhwYXJhbXMuaGVhZGVycyk7XG5cbiAgLy8gaHR0cHMgaWYgc3BlY2lmaWVkLCBmYWxsYmFjayB0byBodHRwIGluIGFueSBvdGhlciBjYXNlXG4gIGlmIChvcHRpb25zLnByb3RvY29sID09ICdodHRwczonKSB7XG4gICAgcmVxdWVzdCA9IGh0dHBzLnJlcXVlc3Qob3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmVxdWVzdCA9IGh0dHAucmVxdWVzdChvcHRpb25zKTtcbiAgfVxuXG4gIC8vIGdldCBjb250ZW50IGxlbmd0aCBhbmQgZmlyZSBhd2F5XG4gIHRoaXMuZ2V0TGVuZ3RoKGZ1bmN0aW9uKGVyciwgbGVuZ3RoKSB7XG4gICAgaWYgKGVyciAmJiBlcnIgIT09ICdVbmtub3duIHN0cmVhbScpIHtcbiAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWRkIGNvbnRlbnQgbGVuZ3RoXG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgcmVxdWVzdC5zZXRIZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoJywgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICB0aGlzLnBpcGUocmVxdWVzdCk7XG4gICAgaWYgKGNiKSB7XG4gICAgICB2YXIgb25SZXNwb25zZTtcblxuICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKGVycm9yLCByZXNwb25jZSkge1xuICAgICAgICByZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGNhbGxiYWNrKTtcbiAgICAgICAgcmVxdWVzdC5yZW1vdmVMaXN0ZW5lcigncmVzcG9uc2UnLCBvblJlc3BvbnNlKTtcblxuICAgICAgICByZXR1cm4gY2IuY2FsbCh0aGlzLCBlcnJvciwgcmVzcG9uY2UpO1xuICAgICAgfTtcblxuICAgICAgb25SZXNwb25zZSA9IGNhbGxiYWNrLmJpbmQodGhpcywgbnVsbCk7XG5cbiAgICAgIHJlcXVlc3Qub24oJ2Vycm9yJywgY2FsbGJhY2spO1xuICAgICAgcmVxdWVzdC5vbigncmVzcG9uc2UnLCBvblJlc3BvbnNlKTtcbiAgICB9XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgcmV0dXJuIHJlcXVlc3Q7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24oZXJyKSB7XG4gIGlmICghdGhpcy5lcnJvcikge1xuICAgIHRoaXMuZXJyb3IgPSBlcnI7XG4gICAgdGhpcy5wYXVzZSgpO1xuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAnW29iamVjdCBGb3JtRGF0YV0nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb250ZXh0LCBkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgQ2FuY2VsZWRFcnJvciA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbWVyZ2VNYXAgPSB7XG4gICAgJ3VybCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ21ldGhvZCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2RhdGEnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdiYXNlVVJMJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVxdWVzdCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlc3BvbnNlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncGFyYW1zU2VyaWFsaXplcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0TWVzc2FnZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3dpdGhDcmVkZW50aWFscyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2FkYXB0ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZVR5cGUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmQ29va2llTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25VcGxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uRG93bmxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2RlY29tcHJlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Qm9keUxlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2JlZm9yZVJlZGlyZWN0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNwb3J0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cEFnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cHNBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2NhbmNlbFRva2VuJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnc29ja2V0UGF0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlRW5jb2RpbmcnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd2YWxpZGF0ZVN0YXR1cyc6IG1lcmdlRGlyZWN0S2V5c1xuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoY29uZmlnMSkuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICB2YXIgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIHZhciBjb25maWdWYWx1ZSA9IG1lcmdlKHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBWRVJTSU9OID0gcmVxdWlyZSgnLi4vZW52L2RhdGEnKS52ZXJzaW9uO1xudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcblxudmFyIHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUsIGkpIHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbnZhciBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG9wdCwgb3B0cykge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICB9XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgdmFyIG9wdCA9IGtleXNbaV07XG4gICAgdmFyIHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2VydE9wdGlvbnM6IGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnM6IHZhbGlkYXRvcnNcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4vYnVpbGRGdWxsUGF0aCcpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWw7XG5cbiAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICBoZWFkZXJzOiBpc0Zvcm0gPyB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICAgICAgICB9IDoge30sXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvcicpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuYXhpb3MuVkVSU0lPTiA9IHJlcXVpcmUoJy4vZW52L2RhdGEnKS52ZXJzaW9uO1xuYXhpb3MudG9Gb3JtRGF0YSA9IHJlcXVpcmUoJy4vaGVscGVycy90b0Zvcm1EYXRhJyk7XG5cbi8vIEV4cG9zZSBBeGlvc0Vycm9yIGNsYXNzXG5heGlvcy5BeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vbGliL2NvcmUvQXhpb3NFcnJvcicpO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbGVkRXJyb3IgPSByZXF1aXJlKCcuL0NhbmNlbGVkRXJyb3InKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuXG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuKGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgdmFyIGk7XG4gICAgdmFyIGwgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICB9XG4gICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuID0gZnVuY3Rpb24ob25mdWxmaWxsZWQpIHtcbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59O1xuIiwiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5cclxuY29uc3QgYXhpb3NDbGllbnQgPSBheGlvcy5jcmVhdGUoe1xyXG4gICAgdGltZW91dDogMTIwMDAwLFxyXG4gICAgLy8gd2l0aENyZWRlbnRpYWxzOiB0cnVlLFxyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04J1xyXG4gICAgfVxyXG59KVxyXG5cclxuZXhwb3J0IHsgYXhpb3NDbGllbnQgYXMgYXhpb3MgfVxyXG5cclxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuZGF5anM9ZSgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PTFlMyxlPTZlNCxuPTM2ZTUscj1cIm1pbGxpc2Vjb25kXCIsaT1cInNlY29uZFwiLHM9XCJtaW51dGVcIix1PVwiaG91clwiLGE9XCJkYXlcIixvPVwid2Vla1wiLGM9XCJtb250aFwiLGY9XCJxdWFydGVyXCIsaD1cInllYXJcIixkPVwiZGF0ZVwiLGw9XCJJbnZhbGlkIERhdGVcIiwkPS9eKFxcZHs0fSlbLS9dPyhcXGR7MSwyfSk/Wy0vXT8oXFxkezAsMn0pW1R0XFxzXSooXFxkezEsMn0pPzo/KFxcZHsxLDJ9KT86PyhcXGR7MSwyfSk/Wy46XT8oXFxkKyk/JC8seT0vXFxbKFteXFxdXSspXXxZezEsNH18TXsxLDR9fER7MSwyfXxkezEsNH18SHsxLDJ9fGh7MSwyfXxhfEF8bXsxLDJ9fHN7MSwyfXxaezEsMn18U1NTL2csTT17bmFtZTpcImVuXCIsd2Vla2RheXM6XCJTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheVwiLnNwbGl0KFwiX1wiKSxtb250aHM6XCJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG9yZGluYWw6ZnVuY3Rpb24odCl7dmFyIGU9W1widGhcIixcInN0XCIsXCJuZFwiLFwicmRcIl0sbj10JTEwMDtyZXR1cm5cIltcIit0KyhlWyhuLTIwKSUxMF18fGVbbl18fGVbMF0pK1wiXVwifX0sbT1mdW5jdGlvbih0LGUsbil7dmFyIHI9U3RyaW5nKHQpO3JldHVybiFyfHxyLmxlbmd0aD49ZT90OlwiXCIrQXJyYXkoZSsxLXIubGVuZ3RoKS5qb2luKG4pK3R9LHY9e3M6bSx6OmZ1bmN0aW9uKHQpe3ZhciBlPS10LnV0Y09mZnNldCgpLG49TWF0aC5hYnMoZSkscj1NYXRoLmZsb29yKG4vNjApLGk9biU2MDtyZXR1cm4oZTw9MD9cIitcIjpcIi1cIikrbShyLDIsXCIwXCIpK1wiOlwiK20oaSwyLFwiMFwiKX0sbTpmdW5jdGlvbiB0KGUsbil7aWYoZS5kYXRlKCk8bi5kYXRlKCkpcmV0dXJuLXQobixlKTt2YXIgcj0xMioobi55ZWFyKCktZS55ZWFyKCkpKyhuLm1vbnRoKCktZS5tb250aCgpKSxpPWUuY2xvbmUoKS5hZGQocixjKSxzPW4taTwwLHU9ZS5jbG9uZSgpLmFkZChyKyhzPy0xOjEpLGMpO3JldHVybisoLShyKyhuLWkpLyhzP2ktdTp1LWkpKXx8MCl9LGE6ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MD9NYXRoLmNlaWwodCl8fDA6TWF0aC5mbG9vcih0KX0scDpmdW5jdGlvbih0KXtyZXR1cm57TTpjLHk6aCx3Om8sZDphLEQ6ZCxoOnUsbTpzLHM6aSxtczpyLFE6Zn1bdF18fFN0cmluZyh0fHxcIlwiKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL3MkLyxcIlwiKX0sdTpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dH19LGc9XCJlblwiLEQ9e307RFtnXT1NO3ZhciBwPVwiJGlzRGF5anNPYmplY3RcIixTPWZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgX3x8ISghdHx8IXRbcF0pfSx3PWZ1bmN0aW9uIHQoZSxuLHIpe3ZhciBpO2lmKCFlKXJldHVybiBnO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXt2YXIgcz1lLnRvTG93ZXJDYXNlKCk7RFtzXSYmKGk9cyksbiYmKERbc109bixpPXMpO3ZhciB1PWUuc3BsaXQoXCItXCIpO2lmKCFpJiZ1Lmxlbmd0aD4xKXJldHVybiB0KHVbMF0pfWVsc2V7dmFyIGE9ZS5uYW1lO0RbYV09ZSxpPWF9cmV0dXJuIXImJmkmJihnPWkpLGl8fCFyJiZnfSxPPWZ1bmN0aW9uKHQsZSl7aWYoUyh0KSlyZXR1cm4gdC5jbG9uZSgpO3ZhciBuPVwib2JqZWN0XCI9PXR5cGVvZiBlP2U6e307cmV0dXJuIG4uZGF0ZT10LG4uYXJncz1hcmd1bWVudHMsbmV3IF8obil9LGI9djtiLmw9dyxiLmk9UyxiLnc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gTyh0LHtsb2NhbGU6ZS4kTCx1dGM6ZS4kdSx4OmUuJHgsJG9mZnNldDplLiRvZmZzZXR9KX07dmFyIF89ZnVuY3Rpb24oKXtmdW5jdGlvbiBNKHQpe3RoaXMuJEw9dyh0LmxvY2FsZSxudWxsLCEwKSx0aGlzLnBhcnNlKHQpLHRoaXMuJHg9dGhpcy4keHx8dC54fHx7fSx0aGlzW3BdPSEwfXZhciBtPU0ucHJvdG90eXBlO3JldHVybiBtLnBhcnNlPWZ1bmN0aW9uKHQpe3RoaXMuJGQ9ZnVuY3Rpb24odCl7dmFyIGU9dC5kYXRlLG49dC51dGM7aWYobnVsbD09PWUpcmV0dXJuIG5ldyBEYXRlKE5hTik7aWYoYi51KGUpKXJldHVybiBuZXcgRGF0ZTtpZihlIGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gbmV3IERhdGUoZSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJiEvWiQvaS50ZXN0KGUpKXt2YXIgcj1lLm1hdGNoKCQpO2lmKHIpe3ZhciBpPXJbMl0tMXx8MCxzPShyWzddfHxcIjBcIikuc3Vic3RyaW5nKDAsMyk7cmV0dXJuIG4/bmV3IERhdGUoRGF0ZS5VVEMoclsxXSxpLHJbM118fDEscls0XXx8MCxyWzVdfHwwLHJbNl18fDAscykpOm5ldyBEYXRlKHJbMV0saSxyWzNdfHwxLHJbNF18fDAscls1XXx8MCxyWzZdfHwwLHMpfX1yZXR1cm4gbmV3IERhdGUoZSl9KHQpLHRoaXMuaW5pdCgpfSxtLmluaXQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRkO3RoaXMuJHk9dC5nZXRGdWxsWWVhcigpLHRoaXMuJE09dC5nZXRNb250aCgpLHRoaXMuJEQ9dC5nZXREYXRlKCksdGhpcy4kVz10LmdldERheSgpLHRoaXMuJEg9dC5nZXRIb3VycygpLHRoaXMuJG09dC5nZXRNaW51dGVzKCksdGhpcy4kcz10LmdldFNlY29uZHMoKSx0aGlzLiRtcz10LmdldE1pbGxpc2Vjb25kcygpfSxtLiR1dGlscz1mdW5jdGlvbigpe3JldHVybiBifSxtLmlzVmFsaWQ9ZnVuY3Rpb24oKXtyZXR1cm4hKHRoaXMuJGQudG9TdHJpbmcoKT09PWwpfSxtLmlzU2FtZT1mdW5jdGlvbih0LGUpe3ZhciBuPU8odCk7cmV0dXJuIHRoaXMuc3RhcnRPZihlKTw9biYmbjw9dGhpcy5lbmRPZihlKX0sbS5pc0FmdGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE8odCk8dGhpcy5zdGFydE9mKGUpfSxtLmlzQmVmb3JlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZW5kT2YoZSk8Tyh0KX0sbS4kZz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIGIudSh0KT90aGlzW2VdOnRoaXMuc2V0KG4sdCl9LG0udW5peD1mdW5jdGlvbigpe3JldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpLzFlMyl9LG0udmFsdWVPZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLmdldFRpbWUoKX0sbS5zdGFydE9mPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcyxyPSEhYi51KGUpfHxlLGY9Yi5wKHQpLGw9ZnVuY3Rpb24odCxlKXt2YXIgaT1iLncobi4kdT9EYXRlLlVUQyhuLiR5LGUsdCk6bmV3IERhdGUobi4keSxlLHQpLG4pO3JldHVybiByP2k6aS5lbmRPZihhKX0sJD1mdW5jdGlvbih0LGUpe3JldHVybiBiLncobi50b0RhdGUoKVt0XS5hcHBseShuLnRvRGF0ZShcInNcIiksKHI/WzAsMCwwLDBdOlsyMyw1OSw1OSw5OTldKS5zbGljZShlKSksbil9LHk9dGhpcy4kVyxNPXRoaXMuJE0sbT10aGlzLiRELHY9XCJzZXRcIisodGhpcy4kdT9cIlVUQ1wiOlwiXCIpO3N3aXRjaChmKXtjYXNlIGg6cmV0dXJuIHI/bCgxLDApOmwoMzEsMTEpO2Nhc2UgYzpyZXR1cm4gcj9sKDEsTSk6bCgwLE0rMSk7Y2FzZSBvOnZhciBnPXRoaXMuJGxvY2FsZSgpLndlZWtTdGFydHx8MCxEPSh5PGc/eSs3OnkpLWc7cmV0dXJuIGwocj9tLUQ6bSsoNi1EKSxNKTtjYXNlIGE6Y2FzZSBkOnJldHVybiAkKHYrXCJIb3Vyc1wiLDApO2Nhc2UgdTpyZXR1cm4gJCh2K1wiTWludXRlc1wiLDEpO2Nhc2UgczpyZXR1cm4gJCh2K1wiU2Vjb25kc1wiLDIpO2Nhc2UgaTpyZXR1cm4gJCh2K1wiTWlsbGlzZWNvbmRzXCIsMyk7ZGVmYXVsdDpyZXR1cm4gdGhpcy5jbG9uZSgpfX0sbS5lbmRPZj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5zdGFydE9mKHQsITEpfSxtLiRzZXQ9ZnVuY3Rpb24odCxlKXt2YXIgbixvPWIucCh0KSxmPVwic2V0XCIrKHRoaXMuJHU/XCJVVENcIjpcIlwiKSxsPShuPXt9LG5bYV09ZitcIkRhdGVcIixuW2RdPWYrXCJEYXRlXCIsbltjXT1mK1wiTW9udGhcIixuW2hdPWYrXCJGdWxsWWVhclwiLG5bdV09ZitcIkhvdXJzXCIsbltzXT1mK1wiTWludXRlc1wiLG5baV09ZitcIlNlY29uZHNcIixuW3JdPWYrXCJNaWxsaXNlY29uZHNcIixuKVtvXSwkPW89PT1hP3RoaXMuJEQrKGUtdGhpcy4kVyk6ZTtpZihvPT09Y3x8bz09PWgpe3ZhciB5PXRoaXMuY2xvbmUoKS5zZXQoZCwxKTt5LiRkW2xdKCQpLHkuaW5pdCgpLHRoaXMuJGQ9eS5zZXQoZCxNYXRoLm1pbih0aGlzLiRELHkuZGF5c0luTW9udGgoKSkpLiRkfWVsc2UgbCYmdGhpcy4kZFtsXSgkKTtyZXR1cm4gdGhpcy5pbml0KCksdGhpc30sbS5zZXQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5jbG9uZSgpLiRzZXQodCxlKX0sbS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXNbYi5wKHQpXSgpfSxtLmFkZD1mdW5jdGlvbihyLGYpe3ZhciBkLGw9dGhpcztyPU51bWJlcihyKTt2YXIgJD1iLnAoZikseT1mdW5jdGlvbih0KXt2YXIgZT1PKGwpO3JldHVybiBiLncoZS5kYXRlKGUuZGF0ZSgpK01hdGgucm91bmQodCpyKSksbCl9O2lmKCQ9PT1jKXJldHVybiB0aGlzLnNldChjLHRoaXMuJE0rcik7aWYoJD09PWgpcmV0dXJuIHRoaXMuc2V0KGgsdGhpcy4keStyKTtpZigkPT09YSlyZXR1cm4geSgxKTtpZigkPT09bylyZXR1cm4geSg3KTt2YXIgTT0oZD17fSxkW3NdPWUsZFt1XT1uLGRbaV09dCxkKVskXXx8MSxtPXRoaXMuJGQuZ2V0VGltZSgpK3IqTTtyZXR1cm4gYi53KG0sdGhpcyl9LG0uc3VidHJhY3Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hZGQoLTEqdCxlKX0sbS5mb3JtYXQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXRoaXMuJGxvY2FsZSgpO2lmKCF0aGlzLmlzVmFsaWQoKSlyZXR1cm4gbi5pbnZhbGlkRGF0ZXx8bDt2YXIgcj10fHxcIllZWVktTU0tRERUSEg6bW06c3NaXCIsaT1iLnoodGhpcykscz10aGlzLiRILHU9dGhpcy4kbSxhPXRoaXMuJE0sbz1uLndlZWtkYXlzLGM9bi5tb250aHMsZj1uLm1lcmlkaWVtLGg9ZnVuY3Rpb24odCxuLGkscyl7cmV0dXJuIHQmJih0W25dfHx0KGUscikpfHxpW25dLnNsaWNlKDAscyl9LGQ9ZnVuY3Rpb24odCl7cmV0dXJuIGIucyhzJTEyfHwxMix0LFwiMFwiKX0sJD1mfHxmdW5jdGlvbih0LGUsbil7dmFyIHI9dDwxMj9cIkFNXCI6XCJQTVwiO3JldHVybiBuP3IudG9Mb3dlckNhc2UoKTpyfTtyZXR1cm4gci5yZXBsYWNlKHksKGZ1bmN0aW9uKHQscil7cmV0dXJuIHJ8fGZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlXCJZWVwiOnJldHVybiBTdHJpbmcoZS4keSkuc2xpY2UoLTIpO2Nhc2VcIllZWVlcIjpyZXR1cm4gYi5zKGUuJHksNCxcIjBcIik7Y2FzZVwiTVwiOnJldHVybiBhKzE7Y2FzZVwiTU1cIjpyZXR1cm4gYi5zKGErMSwyLFwiMFwiKTtjYXNlXCJNTU1cIjpyZXR1cm4gaChuLm1vbnRoc1Nob3J0LGEsYywzKTtjYXNlXCJNTU1NXCI6cmV0dXJuIGgoYyxhKTtjYXNlXCJEXCI6cmV0dXJuIGUuJEQ7Y2FzZVwiRERcIjpyZXR1cm4gYi5zKGUuJEQsMixcIjBcIik7Y2FzZVwiZFwiOnJldHVybiBTdHJpbmcoZS4kVyk7Y2FzZVwiZGRcIjpyZXR1cm4gaChuLndlZWtkYXlzTWluLGUuJFcsbywyKTtjYXNlXCJkZGRcIjpyZXR1cm4gaChuLndlZWtkYXlzU2hvcnQsZS4kVyxvLDMpO2Nhc2VcImRkZGRcIjpyZXR1cm4gb1tlLiRXXTtjYXNlXCJIXCI6cmV0dXJuIFN0cmluZyhzKTtjYXNlXCJISFwiOnJldHVybiBiLnMocywyLFwiMFwiKTtjYXNlXCJoXCI6cmV0dXJuIGQoMSk7Y2FzZVwiaGhcIjpyZXR1cm4gZCgyKTtjYXNlXCJhXCI6cmV0dXJuICQocyx1LCEwKTtjYXNlXCJBXCI6cmV0dXJuICQocyx1LCExKTtjYXNlXCJtXCI6cmV0dXJuIFN0cmluZyh1KTtjYXNlXCJtbVwiOnJldHVybiBiLnModSwyLFwiMFwiKTtjYXNlXCJzXCI6cmV0dXJuIFN0cmluZyhlLiRzKTtjYXNlXCJzc1wiOnJldHVybiBiLnMoZS4kcywyLFwiMFwiKTtjYXNlXCJTU1NcIjpyZXR1cm4gYi5zKGUuJG1zLDMsXCIwXCIpO2Nhc2VcIlpcIjpyZXR1cm4gaX1yZXR1cm4gbnVsbH0odCl8fGkucmVwbGFjZShcIjpcIixcIlwiKX0pKX0sbS51dGNPZmZzZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMTUqLU1hdGgucm91bmQodGhpcy4kZC5nZXRUaW1lem9uZU9mZnNldCgpLzE1KX0sbS5kaWZmPWZ1bmN0aW9uKHIsZCxsKXt2YXIgJCx5PXRoaXMsTT1iLnAoZCksbT1PKHIpLHY9KG0udXRjT2Zmc2V0KCktdGhpcy51dGNPZmZzZXQoKSkqZSxnPXRoaXMtbSxEPWZ1bmN0aW9uKCl7cmV0dXJuIGIubSh5LG0pfTtzd2l0Y2goTSl7Y2FzZSBoOiQ9RCgpLzEyO2JyZWFrO2Nhc2UgYzokPUQoKTticmVhaztjYXNlIGY6JD1EKCkvMzticmVhaztjYXNlIG86JD0oZy12KS82MDQ4ZTU7YnJlYWs7Y2FzZSBhOiQ9KGctdikvODY0ZTU7YnJlYWs7Y2FzZSB1OiQ9Zy9uO2JyZWFrO2Nhc2UgczokPWcvZTticmVhaztjYXNlIGk6JD1nL3Q7YnJlYWs7ZGVmYXVsdDokPWd9cmV0dXJuIGw/JDpiLmEoJCl9LG0uZGF5c0luTW9udGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbmRPZihjKS4kRH0sbS4kbG9jYWxlPWZ1bmN0aW9uKCl7cmV0dXJuIERbdGhpcy4kTF19LG0ubG9jYWxlPWZ1bmN0aW9uKHQsZSl7aWYoIXQpcmV0dXJuIHRoaXMuJEw7dmFyIG49dGhpcy5jbG9uZSgpLHI9dyh0LGUsITApO3JldHVybiByJiYobi4kTD1yKSxufSxtLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIGIudyh0aGlzLiRkLHRoaXMpfSxtLnRvRGF0ZT1mdW5jdGlvbigpe3JldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSl9LG0udG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNWYWxpZCgpP3RoaXMudG9JU09TdHJpbmcoKTpudWxsfSxtLnRvSVNPU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQudG9JU09TdHJpbmcoKX0sbS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLnRvVVRDU3RyaW5nKCl9LE19KCksaz1fLnByb3RvdHlwZTtyZXR1cm4gTy5wcm90b3R5cGU9ayxbW1wiJG1zXCIscl0sW1wiJHNcIixpXSxbXCIkbVwiLHNdLFtcIiRIXCIsdV0sW1wiJFdcIixhXSxbXCIkTVwiLGNdLFtcIiR5XCIsaF0sW1wiJERcIixkXV0uZm9yRWFjaCgoZnVuY3Rpb24odCl7a1t0WzFdXT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy4kZyhlLHRbMF0sdFsxXSl9fSkpLE8uZXh0ZW5kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuJGl8fCh0KGUsXyxPKSx0LiRpPSEwKSxPfSxPLmxvY2FsZT13LE8uaXNEYXlqcz1TLE8udW5peD1mdW5jdGlvbih0KXtyZXR1cm4gTygxZTMqdCl9LE8uZW49RFtnXSxPLkxzPUQsTy5wPXt9LE99KSk7IiwiXHJcbmNvbnN0IGluc3RhbGwgPSBmdW5jdGlvbiAoVnVlKSB7XHJcbiAgY29uc3QgQnVzID0gbmV3IFZ1ZSh7XHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgIGVtaXQgKGV2ZW50LCAuLi5hcmdzKSB7XHJcbiAgICAgICAgdGhpcy4kZW1pdChldmVudCwgLi4uYXJncyk7XHJcbiAgICAgIH0sXHJcbiAgICAgIG9uIChldmVudCwgY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLiRvbihldmVudCwgY2FsbGJhY2spO1xyXG4gICAgICB9LFxyXG4gICAgICBvZmYgKGV2ZW50LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuJG9mZihldmVudCwgY2FsbGJhY2spO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgVnVlLnByb3RvdHlwZS4kYnVzID0gQnVzO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgaW5zdGFsbDtcclxuIiwiXHJcbmV4cG9ydCBjb25zdCBjdXJyZW5jeSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgLy8gY29uc29sZS5sb2codmFsdWUpXHJcbiAgaWYodmFsdWUgPT09IDApe1xyXG4gICAgcmV0dXJuIFwiMC4wMFwiXHJcbiAgfVxyXG4gIGxldCB2YWxzPScwJ1xyXG4gIGlmKHZhbHVlICYmIHZhbHVlLnRvU3RyaW5nKCkhPT0nTmFOJyl7XHJcbiAgICAgIHZhbHM9ICh2YWx1ZS8xKS50b0ZpeGVkKDIpLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgJywnKVxyXG4gIH1cclxuICByZXR1cm4gdmFscztcclxufVxyXG4vL+WPlummluS4quWtl+esplxyXG5leHBvcnQgY29uc3QgaW5kZXhGaXJzdCA9IGZ1bmN0aW9uIGluZGV4Rmlyc3QodmFsdWUpe1xyXG4gIGlmKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpe1xyXG4gICAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKDAsMSlcclxuICB9ZWxzZXtcclxuICAgICAgcmV0dXJuICcnXHJcbiAgfVxyXG59XHJcbmV4cG9ydCBjb25zdCB1dWlkID0gZnVuY3Rpb24gdXVpZCgpIHtcclxuICB2YXIgcyA9IFtdO1xyXG4gIHZhciBoZXhEaWdpdHMgPSBcIjAxMjM0NTY3ODlhYmNkZWZcIjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IDM2OyBpKyspIHtcclxuICAgIHNbaV0gPSBoZXhEaWdpdHMuc3Vic3RyKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDB4MTApLCAxKTtcclxuICB9XHJcbiAgc1sxNF0gPSBcIjRcIjsgLy8gYml0cyAxMi0xNSBvZiB0aGUgdGltZV9oaV9hbmRfdmVyc2lvbiBmaWVsZCB0byAwMDEwXHJcbiAgc1sxOV0gPSBoZXhEaWdpdHMuc3Vic3RyKChzWzE5XSAmIDB4MykgfCAweDgsIDEpOyAvLyBiaXRzIDYtNyBvZiB0aGUgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZCB0byAwMVxyXG4gIHNbOF0gPSBzWzEzXSA9IHNbMThdID0gc1syM10gPSBcIi1cIjtcclxuXHJcbiAgdmFyIHV1aWQgPSBzLmpvaW4oXCJcIik7XHJcbiAgcmV0dXJuIHV1aWQ7XHJcbn1cclxuLy/miYvmnLrliqDlr4ZcclxuZXhwb3J0IGNvbnN0IHBob25lRW5jcnkgPSBmdW5jdGlvbihwaG9uZSl7XHJcbiAgdmFyIHRlbCA9IFN0cmluZyhwaG9uZSk7XHJcbiAgdmFyIGRoPXRlbC5zdWJzdHIoMCwzKStcIioqKipcIit0ZWwuc3Vic3RyKDcpO1xyXG4gIHJldHVybiBkaDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHBlb3BsZVNob3cgPSBmdW5jdGlvbihwZW9wbGVBcnIpe1xyXG4gICAgbGV0IHNob3c9JydcclxuICAgIHBlb3BsZUFyci5mb3JFYWNoKChlbCxpbmRleCk9PntcclxuICAgICAgICBzaG93PXNob3crSlNPTi5wYXJzZShlbCkubmFtZSsoaW5kZXg9PT0ocGVvcGxlQXJyLmxlbmd0aC0xKT8nJzonLycpXHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIHNob3c7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgaW5zdGFsbDogZnVuY3Rpb24gKFZ1ZSkge1xyXG4gICAgVnVlLmZpbHRlcignY3VycmVuY3knLCBjdXJyZW5jeSk7XHJcbiAgICBWdWUuZmlsdGVyKCdnZXRVVUlEJywgdXVpZCk7XHJcbiAgICBWdWUuZmlsdGVyKCdwaG9uZUVuY3J5JywgcGhvbmVFbmNyeSk7XHJcbiAgICBWdWUuZmlsdGVyKCdwZW9wbGVTaG93JywgcGVvcGxlU2hvdyk7XHJcbiAgICBWdWUuZmlsdGVyKCdpbmRleEZpcnN0JyxpbmRleEZpcnN0KTtcclxuICB9XHJcbn07XHJcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvZGFzaCA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuOyhmdW5jdGlvbigpIHtcblxuICAvKiogVXNlZCBhcyBhIHNhZmUgcmVmZXJlbmNlIGZvciBgdW5kZWZpbmVkYCBpbiBwcmUtRVM1IGVudmlyb25tZW50cy4gKi9cbiAgdmFyIHVuZGVmaW5lZDtcblxuICAvKiogVXNlZCBhcyB0aGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuICovXG4gIHZhciBWRVJTSU9OID0gJzQuMTcuMjEnO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xuICB2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuICAvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG4gIHZhciBDT1JFX0VSUk9SX1RFWFQgPSAnVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuJyxcbiAgICAgIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJyxcbiAgICAgIElOVkFMSURfVEVNUExfVkFSX0VSUk9SX1RFWFQgPSAnSW52YWxpZCBgdmFyaWFibGVgIG9wdGlvbiBwYXNzZWQgaW50byBgXy50ZW1wbGF0ZWAnO1xuXG4gIC8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbiAgdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbiAgdmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbiAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbiAgdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICB2YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuICAvKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbiAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsXG4gICAgICBERUZBVUxUX1RSVU5DX09NSVNTSU9OID0gJy4uLic7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuICB2YXIgSE9UX0NPVU5UID0gODAwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDIsXG4gICAgICBMQVpZX1dISUxFX0ZMQUcgPSAzO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuICB2YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCxcbiAgICAgIE5BTiA9IDAgLyAwO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG4gIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCA+Pj4gMTtcblxuICAvKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xuICB2YXIgd3JhcEZsYWdzID0gW1xuICAgIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gICAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICAgIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG4gIF07XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJyxcbiAgICAgIHdlYWtTZXRUYWcgPSAnW29iamVjdCBXZWFrU2V0XSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLFxuICAgICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgd2hpdGVzcGFjZS4gKi9cbiAgdmFyIHJlVHJpbVN0YXJ0ID0gL15cXHMrLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhIHNpbmdsZSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci4gKi9cbiAgdmFyIHJlV2hpdGVzcGFjZSA9IC9cXHMvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdyYXAgZGV0YWlsIGNvbW1lbnRzLiAqL1xuICB2YXIgcmVXcmFwQ29tbWVudCA9IC9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sXG4gICAgICByZVdyYXBEZXRhaWxzID0gL1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLFxuICAgICAgcmVTcGxpdERldGFpbHMgPSAvLD8gJiAvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIGNvbXBvc2VkIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gdmFsaWRhdGUgdGhlIGB2YWxpZGF0ZWAgb3B0aW9uIGluIGBfLnRlbXBsYXRlYCB2YXJpYWJsZS5cbiAgICpcbiAgICogRm9yYmlkcyBjaGFyYWN0ZXJzIHdoaWNoIGNvdWxkIHBvdGVudGlhbGx5IGNoYW5nZSB0aGUgbWVhbmluZyBvZiB0aGUgZnVuY3Rpb24gYXJndW1lbnQgZGVmaW5pdGlvbjpcbiAgICogLSBcIigpLFwiIChtb2RpZmljYXRpb24gb2YgZnVuY3Rpb24gcGFyYW1ldGVycylcbiAgICogLSBcIj1cIiAoZGVmYXVsdCB2YWx1ZSlcbiAgICogLSBcIltde31cIiAoZGVzdHJ1Y3R1cmluZyBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzKVxuICAgKiAtIFwiL1wiIChiZWdpbm5pbmcgb2YgYSBjb21tZW50KVxuICAgKiAtIHdoaXRlc3BhY2VcbiAgICovXG4gIHZhciByZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycyA9IC9bKCk9LHt9XFxbXFxdXFwvXFxzXS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaFxuICAgKiBbRVMgdGVtcGxhdGUgZGVsaW1pdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbC1sZXhpY2FsLWNvbXBvbmVudHMpLlxuICAgKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG4gIHZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG4gIHZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG4gIHZhciByZUxhdGluID0gL1tcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx4ZmZcXHUwMTAwLVxcdTAxN2ZdL2c7XG5cbiAgLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVOb01hdGNoID0gLygkXikvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbiAgdmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgICByc0RpbmdiYXRSYW5nZSA9ICdcXFxcdTI3MDAtXFxcXHUyN2JmJyxcbiAgICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICAgIHJzTm9uQ2hhclJhbmdlID0gJ1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZicsXG4gICAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgICAgcnNVcHBlclJhbmdlID0gJ0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZScsXG4gICAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xuICB2YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgICByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICAgIHJzTG93ZXIgPSAnWycgKyByc0xvd2VyUmFuZ2UgKyAnXScsXG4gICAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xuICB2YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc01pc2NVcHBlciA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzT3B0Q29udHJMb3dlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OmR8bGx8bXxyZXxzfHR8dmUpKT8nLFxuICAgICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICAgIHJzT3JkTG93ZXIgPSAnXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pJyxcbiAgICAgIHJzT3JkVXBwZXIgPSAnXFxcXGQqKD86MVNUfDJORHwzUkR8KD8hWzEyM10pXFxcXGRUSCkoPz1cXFxcYnxbYS16X10pJyxcbiAgICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxLFxuICAgICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG4gIHZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3MgZm9yIHN5bWJvbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrc19mb3JfU3ltYm9scykuXG4gICAqL1xuICB2YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xuICB2YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbiAgdmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICAgIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzVXBwZXIgKyAnPycgKyByc01pc2NMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlcixcbiAgICByc1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyLFxuICAgIHJzT3JkVXBwZXIsXG4gICAgcnNPcmRMb3dlcixcbiAgICByc0RpZ2l0cyxcbiAgICByc0Vtb2ppXG4gIF0uam9pbignfCcpLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG4gIHZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbiAgLyoqIFVzZWQgdG8gYXNzaWduIGRlZmF1bHQgYGNvbnRleHRgIG9iamVjdCBwcm9wZXJ0aWVzLiAqL1xuICB2YXIgY29udGV4dFByb3BzID0gW1xuICAgICdBcnJheScsICdCdWZmZXInLCAnRGF0YVZpZXcnLCAnRGF0ZScsICdFcnJvcicsICdGbG9hdDMyQXJyYXknLCAnRmxvYXQ2NEFycmF5JyxcbiAgICAnRnVuY3Rpb24nLCAnSW50OEFycmF5JywgJ0ludDE2QXJyYXknLCAnSW50MzJBcnJheScsICdNYXAnLCAnTWF0aCcsICdPYmplY3QnLFxuICAgICdQcm9taXNlJywgJ1JlZ0V4cCcsICdTZXQnLCAnU3RyaW5nJywgJ1N5bWJvbCcsICdUeXBlRXJyb3InLCAnVWludDhBcnJheScsXG4gICAgJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ1VpbnQxNkFycmF5JywgJ1VpbnQzMkFycmF5JywgJ1dlYWtNYXAnLFxuICAgICdfJywgJ2NsZWFyVGltZW91dCcsICdpc0Zpbml0ZScsICdwYXJzZUludCcsICdzZXRUaW1lb3V0J1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIG1ha2UgdGVtcGxhdGUgc291cmNlVVJMcyBlYXNpZXIgdG8gaWRlbnRpZnkuICovXG4gIHZhciB0ZW1wbGF0ZUNvdW50ZXIgPSAtMTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG4gIHZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xuICB0eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICB0eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbiAgdmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbiAgY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbiAgY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbiAgdmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgICAvLyBMYXRpbi0xIFN1cHBsZW1lbnQgYmxvY2suXG4gICAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICAgJ1xceGM3JzogJ0MnLCAgJ1xceGU3JzogJ2MnLFxuICAgICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAgICdcXHhlOCc6ICdlJywgICdcXHhlOSc6ICdlJywgJ1xceGVhJzogJ2UnLCAnXFx4ZWInOiAnZScsXG4gICAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAgICdcXHhkMSc6ICdOJywgICdcXHhmMSc6ICduJyxcbiAgICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgICAnXFx4ZDknOiAnVScsICAnXFx4ZGEnOiAnVScsICdcXHhkYic6ICdVJywgJ1xceGRjJzogJ1UnLFxuICAgICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICAgJ1xceGM2JzogJ0FlJywgJ1xceGU2JzogJ2FlJyxcbiAgICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAgICdcXHhkZic6ICdzcycsXG4gICAgLy8gTGF0aW4gRXh0ZW5kZWQtQSBibG9jay5cbiAgICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgICAnXFx1MDEwNic6ICdDJywgICdcXHUwMTA4JzogJ0MnLCAnXFx1MDEwYSc6ICdDJywgJ1xcdTAxMGMnOiAnQycsXG4gICAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAgICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgICAnXFx1MDExMic6ICdFJywgICdcXHUwMTE0JzogJ0UnLCAnXFx1MDExNic6ICdFJywgJ1xcdTAxMTgnOiAnRScsICdcXHUwMTFhJzogJ0UnLFxuICAgICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAgICdcXHUwMTFkJzogJ2cnLCAgJ1xcdTAxMWYnOiAnZycsICdcXHUwMTIxJzogJ2cnLCAnXFx1MDEyMyc6ICdnJyxcbiAgICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgICAnXFx1MDEyOSc6ICdpJywgICdcXHUwMTJiJzogJ2knLCAnXFx1MDEyZCc6ICdpJywgJ1xcdTAxMmYnOiAnaScsICdcXHUwMTMxJzogJ2knLFxuICAgICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICAgJ1xcdTAxMzknOiAnTCcsICAnXFx1MDEzYic6ICdMJywgJ1xcdTAxM2QnOiAnTCcsICdcXHUwMTNmJzogJ0wnLCAnXFx1MDE0MSc6ICdMJyxcbiAgICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAgICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgICAnXFx1MDE0NCc6ICduJywgICdcXHUwMTQ2JzogJ24nLCAnXFx1MDE0OCc6ICduJywgJ1xcdTAxNGInOiAnbicsXG4gICAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICAgJ1xcdTAxNTQnOiAnUicsICAnXFx1MDE1Nic6ICdSJywgJ1xcdTAxNTgnOiAnUicsXG4gICAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAgICdcXHUwMTViJzogJ3MnLCAgJ1xcdTAxNWQnOiAncycsICdcXHUwMTVmJzogJ3MnLCAnXFx1MDE2MSc6ICdzJyxcbiAgICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgICAnXFx1MDE2OCc6ICdVJywgICdcXHUwMTZhJzogJ1UnLCAnXFx1MDE2Yyc6ICdVJywgJ1xcdTAxNmUnOiAnVScsICdcXHUwMTcwJzogJ1UnLCAnXFx1MDE3Mic6ICdVJyxcbiAgICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAgICdcXHUwMTc2JzogJ1knLCAgJ1xcdTAxNzcnOiAneScsICdcXHUwMTc4JzogJ1knLFxuICAgICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAgICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAgICdcXHUwMTMyJzogJ0lKJywgJ1xcdTAxMzMnOiAnaWonLFxuICAgICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAgICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG4gIHZhciBodG1sRXNjYXBlcyA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgaHRtbFVuZXNjYXBlcyA9IHtcbiAgICAnJmFtcDsnOiAnJicsXG4gICAgJyZsdDsnOiAnPCcsXG4gICAgJyZndDsnOiAnPicsXG4gICAgJyZxdW90Oyc6ICdcIicsXG4gICAgJyYjMzk7JzogXCInXCJcbiAgfTtcblxuICAvKiogVXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHN0cmluZ0VzY2FwZXMgPSB7XG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgXCInXCI6IFwiJ1wiLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbiAgdmFyIGZyZWVQYXJzZUZsb2F0ID0gcGFyc2VGbG9hdCxcbiAgICAgIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xuICB2YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbiAgdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbiAgdmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuICB2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbiAgLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG4gIHZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgICAgaWYgKHR5cGVzKSB7XG4gICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgIH1cblxuICAgICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9KCkpO1xuXG4gIC8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG4gIHZhciBub2RlSXNBcnJheUJ1ZmZlciA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzQXJyYXlCdWZmZXIsXG4gICAgICBub2RlSXNEYXRlID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNEYXRlLFxuICAgICAgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXAsXG4gICAgICBub2RlSXNSZWdFeHAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1JlZ0V4cCxcbiAgICAgIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0LFxuICAgICAgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUFnZ3JlZ2F0b3JgIGZvciBhcnJheXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5QWdncmVnYXRvcihhcnJheSwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2hSaWdodChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZXZlcnlgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoIXByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXNXaXRoKGFycmF5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2VSaWdodChhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbLS1sZW5ndGhdO1xuICAgIH1cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIHZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBU0NJSSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhbiBBU0NJSSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmZpbmRLZXlgIGFuZCBgXy5maW5kTGFzdEtleWAsXG4gICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmBcbiAgICogdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCBvciBpdHMga2V5LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRLZXkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlSW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2ZXaXRoKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVhbmAgYW5kIGBfLm1lYW5CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZU1lYW4oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiBsZW5ndGggPyAoYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIC8gbGVuZ3RoKSA6IE5BTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCwgd2l0aG91dCBzdXBwb3J0XG4gICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxuICAgKiAgYGNvbGxlY3Rpb25gIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgZWFjaEZ1bmMpIHtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaW5pdEFjY3VtXG4gICAgICAgID8gKGluaXRBY2N1bSA9IGZhbHNlLCB2YWx1ZSlcbiAgICAgICAgOiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydEJ5YCB3aGljaCB1c2VzIGBjb21wYXJlcmAgdG8gZGVmaW5lIHRoZVxuICAgKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gICAqIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmVyIFRoZSBmdW5jdGlvbiB0byBkZWZpbmUgc29ydCBvcmRlci5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU29ydEJ5KGFycmF5LCBjb21wYXJlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICBhcnJheS5zb3J0KGNvbXBhcmVyKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc3VtYCBhbmQgYF8uc3VtQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgcmVzdWx0LFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRlZShhcnJheVtpbmRleF0pO1xuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGN1cnJlbnQgOiAocmVzdWx0ICsgY3VycmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICAgKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvUGFpcnNgIGFuZCBgXy50b1BhaXJzSW5gIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXlcbiAgICogb2Yga2V5LXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRvUGFpcnMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gW2tleSwgb2JqZWN0W2tleV1dO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRyaW1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVHJpbShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nXG4gICAgICA/IHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKVxuICAgICAgOiBzdHJpbmc7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2VcbiAgICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gdHJpbW1lZEVuZEluZGV4KHN0cmluZykge1xuICAgIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiByZVdoaXRlc3BhY2UudGVzdChzdHJpbmcuY2hhckF0KGluZGV4KSkpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICBpZiAoaXRlcmF0ZWVzLmxlbmd0aCkge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkoaXRlcmF0ZWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2VHZXQodmFsdWUsIGl0ZXJhdGVlLmxlbmd0aCA9PT0gMSA/IGl0ZXJhdGVlWzBdIDogaXRlcmF0ZWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWU7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2lkZW50aXR5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgICAqIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleE9mID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICBzZWVuID0gYXJyYXk7XG5cbiAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gYXJyYXkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpIHtcbiAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gICAgICogY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICBzdGFydCArPSBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXBlYXRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhcnJheVNhbXBsZSh2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZVNpemVgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgdmFyIGFycmF5ID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGFycmF5LCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InIHx8IGtleSA9PT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2h1ZmZsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAgICAgKiBwZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb2YgYGFycmF5YCB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgICAgICBpZiAoY29tcHV0ZWQgIT09IG51bGwgJiYgIWlzU3ltYm9sKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5LCByZXRIaWdoZXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gICAgICogd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlXG4gICAgICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGhpZ2ggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgdmFyIHZhbElzTmFOID0gdmFsdWUgIT09IHZhbHVlLFxuICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpLFxuICAgICAgICAgIHZhbElzVW5kZWZpbmVkID0gdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZShhcnJheVttaWRdKSxcbiAgICAgICAgICAgIG90aElzRGVmaW5lZCA9IGNvbXB1dGVkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gY29tcHV0ZWQgPT09IGNvbXB1dGVkLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChjb21wdXRlZCk7XG5cbiAgICAgICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICAgICAgdmFyIHNldExvdyA9IHJldEhpZ2hlc3QgfHwgb3RoSXNSZWZsZXhpdmU7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNVbmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBvdGhJc0RlZmluZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzTnVsbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNOdWxsKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAhb3RoSXNOdWxsICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc1N5bWJvbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3RoSXNOdWxsIHx8IG90aElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0TG93ID0gcmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldExvdykge1xuICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1pbihoaWdoLCBNQVhfQVJSQVlfSU5ERVgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZFVuaXFgIGFuZCBgXy5zb3J0ZWRVbmlxQnlgIHdpdGhvdXRcbiAgICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIGlmICghaW5kZXggfHwgIWVxKGNvbXB1dGVkLCBzZWVuKSkge1xuICAgICAgICAgIHZhciBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9OdW1iZXJgIHdoaWNoIGRvZXNuJ3QgZW5zdXJlIGNvcnJlY3RcbiAgICAgKiBjb252ZXJzaW9ucyBvZiBiaW5hcnksIGhleGFkZWNpbWFsLCBvciBvY3RhbCBzdHJpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgcmV0dXJuICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAgICAgKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgICAgICBpZiAoc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHNlZW4sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHByb3BlcnR5IHBhdGggdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51cGRhdGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHJldHVybiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdXBkYXRlcihiYXNlR2V0KG9iamVjdCwgcGF0aCkpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZHJvcFdoaWxlYCBhbmQgYF8udGFrZVdoaWxlYFxuICAgICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRHJvcF0gU3BlY2lmeSBkcm9wcGluZyBlbGVtZW50cyBpbnN0ZWFkIG9mIHRha2luZyB0aGVtLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgaXNEcm9wLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkgJiZcbiAgICAgICAgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge31cblxuICAgICAgcmV0dXJuIGlzRHJvcFxuICAgICAgICA/IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IDAgOiBpbmRleCksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiBsZW5ndGgpKVxuICAgICAgICA6IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IDApLCAoZnJvbVJpZ2h0ID8gbGVuZ3RoIDogaW5kZXgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgd3JhcHBlclZhbHVlYCB3aGljaCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAgICAgKiBwZXJmb3JtaW5nIGEgc2VxdWVuY2Ugb2YgYWN0aW9ucyBvbiB0aGUgdW53cmFwcGVkIGB2YWx1ZWAsIHdoZXJlIGVhY2hcbiAgICAgKiBzdWNjZXNzaXZlIGFjdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFjdGlvbnMgQWN0aW9ucyB0byBwZXJmb3JtIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdyYXBwZXJWYWx1ZSh2YWx1ZSwgYWN0aW9ucykge1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC52YWx1ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKGFjdGlvbnMsIGZ1bmN0aW9uKHJlc3VsdCwgYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24uZnVuYy5hcHBseShhY3Rpb24udGhpc0FyZywgYXJyYXlQdXNoKFtyZXN1bHRdLCBhY3Rpb24uYXJncykpO1xuICAgICAgfSwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ueG9yYCwgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWG9yKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VVbmlxKGFycmF5c1swXSkgOiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tpbmRleF0sXG4gICAgICAgICAgICBvdGhJbmRleCA9IC0xO1xuXG4gICAgICAgIHdoaWxlICgrK290aEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gYmFzZURpZmZlcmVuY2UocmVzdWx0W2luZGV4XSB8fCBhcnJheSwgYXJyYXlzW290aEluZGV4XSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKHJlc3VsdCwgMSksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uemlwT2JqZWN0YCB3aGljaCBhc3NpZ25zIHZhbHVlcyB1c2luZyBgYXNzaWduRnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25GdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzLCBhc3NpZ25GdW5jKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgdmFsc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGluZGV4IDwgdmFsc0xlbmd0aCA/IHZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGFzc2lnbkZ1bmMocmVzdWx0LCBwcm9wc1tpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhbiBlbXB0eSBhcnJheSBpZiBpdCdzIG5vdCBhbiBhcnJheSBsaWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgYGJhc2VSZXN0YCBhbGlhcyB3aGljaCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBgaWRlbnRpdHlgIGJ5IG1vZHVsZVxuICAgICAqIHJlcGxhY2VtZW50IHBsdWdpbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHZhciBjYXN0UmVzdCA9IGJhc2VSZXN0O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gICAgICByZXR1cm4gKCFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoKSA/IGFycmF5IDogYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgY2xlYXJUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vY2xlYXJUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ8T2JqZWN0fSBpZCBUaGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3Qgb2YgdGhlIHRpbWVyIHRvIGNsZWFyLlxuICAgICAqL1xuICAgIHZhciBjbGVhclRpbWVvdXQgPSBjdHhDbGVhclRpbWVvdXQgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiByb290LmNsZWFyVGltZW91dChpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICBidWZmZXIuY29weShyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gICAgICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG4gICAgICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gICAgICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gICAgICpcbiAgICAgKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICAgICAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAgICAgKiBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgICAgIGxlbmd0aCA9IG9iakNyaXRlcmlhLmxlbmd0aCxcbiAgICAgICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZUFzY2VuZGluZyhvYmpDcml0ZXJpYVtpbmRleF0sIG90aENyaXRlcmlhW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgKiAob3JkZXIgPT0gJ2Rlc2MnID8gLTEgOiAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgICAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgICAgIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMsXG4gICAgICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZWZ0TGVuZ3RoICsgcmFuZ2VMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICAgICAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgICAgIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5ncm91cEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBpbml0aWFsaXplci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLFxuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTtcblxuICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBzZXR0ZXIsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYWNjdW11bGF0b3IpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYW4gaW5zdGFuY2Ugb2YgYEN0b3JgIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgKiB3aGV0aGVyIGl0IHdhcyBpbnZva2VkIGFzIHBhcnQgb2YgYSBgbmV3YCBleHByZXNzaW9uIG9yIGJ5IGBjYWxsYCBvciBgYXBwbHlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDdG9yIFRoZSBjb25zdHJ1Y3RvciB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3RvcihDdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLiBTZWVcbiAgICAgICAgLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1mdW5jdGlvbi1vYmplY3RzLWNhbGwtdGhpc2FyZ3VtZW50LWFyZ3VtZW50c2xpc3RcbiAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgICAgIC8vIE1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBlbmFibGUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gICAgICB2YXIgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICAgICAgPyBbXVxuICAgICAgICAgIDogcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaXRlcmFibGVbaXRlcmF0ZWUgPyBjb2xsZWN0aW9uW2luZGV4XSA6IGluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsb3cgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihmdW5jcykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwcmVyZXEgPSBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1O1xuXG4gICAgICAgIGlmIChmcm9tUmlnaHQpIHtcbiAgICAgICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlcmVxICYmICF3cmFwcGVyICYmIGdldEZ1bmNOYW1lKGZ1bmMpID09ICd3cmFwcGVyJykge1xuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBuZXcgTG9kYXNoV3JhcHBlcihbXSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gd3JhcHBlciA/IGluZGV4IDogbGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGZ1bmMgPSBmdW5jc1tpbmRleF07XG5cbiAgICAgICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoZGF0YSAmJiBpc0xhemlhYmxlKGRhdGFbMF0pICYmXG4gICAgICAgICAgICAgICAgZGF0YVsxXSA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJlxuICAgICAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gd3JhcHBlcltnZXRGdW5jTmFtZShkYXRhWzBdKV0uYXBwbHkod3JhcHBlciwgZGF0YVszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICA/IHdyYXBwZXJbZnVuY05hbWVdKClcbiAgICAgICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gICAgICogIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBXUkFQX0FSWV9GTEFHLFxuICAgICAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycmllZCA9IGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSxcbiAgICAgICAgICBpc0ZsaXAgPSBiaXRtYXNrICYgV1JBUF9GTElQX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDdXJyaWVkKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgICAgICBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgICAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgdmFyIG5ld0hvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHRoaXNBcmcsXG4gICAgICAgICAgICBhcmdzLCBuZXdIb2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkgLSBsZW5ndGhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLFxuICAgICAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgICAgIGlmIChhcmdQb3MpIHtcbiAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmxpcCAmJiBsZW5ndGggPiAxKSB7XG4gICAgICAgICAgYXJncy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3Rvcihmbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmludmVydEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRvSXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludmVydGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmVydGVyKHNldHRlciwgdG9JdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgdG9JdGVyYXRlZShpdGVyYXRlZSksIHt9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSB1c2VkIGZvciBgdW5kZWZpbmVkYCBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXRoT3BlcmF0aW9uKG9wZXJhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgb3RoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9TdHJpbmcob3RoZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb051bWJlcihvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ub3ZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBvdmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU92ZXIoYXJyYXlGdW5jKSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oaXRlcmF0ZWVzKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICB2YXIgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGFycmF5RnVuYyhpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIGBsZW5ndGhgLiBUaGUgYGNoYXJzYCBzdHJpbmdcbiAgICAgKiBpcyB0cnVuY2F0ZWQgaWYgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGV4Y2VlZHMgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIGNoYXJzID0gY2hhcnMgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGJhc2VUb1N0cmluZyhjaGFycyk7XG5cbiAgICAgIHZhciBjaGFyc0xlbmd0aCA9IGNoYXJzLmxlbmd0aDtcbiAgICAgIGlmIChjaGFyc0xlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzTGVuZ3RoID8gYmFzZVJlcGVhdChjaGFycywgbGVuZ3RoKSA6IGNoYXJzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VSZXBlYXQoY2hhcnMsIG5hdGl2ZUNlaWwobGVuZ3RoIC8gc3RyaW5nU2l6ZShjaGFycykpKTtcbiAgICAgIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKVxuICAgICAgICA/IGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHJlc3VsdCksIDAsIGxlbmd0aCkuam9pbignJylcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nXG4gICAgICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksXG4gICAgICAgICAgICBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG5cbiAgICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJhbmdlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAoc3RhcnQgPCBlbmQgPyAxIDogLTEpIDogdG9GaW5pdGUoc3RlcCk7XG4gICAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSByZWxhdGlvbmFsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlbGF0aW9uYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24ob3BlcmF0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICBvdGhlciA9IHRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gICAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlY3VycnkoZnVuYywgYml0bWFzaywgd3JhcEZ1bmMsIHBsYWNlaG9sZGVyLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsXG4gICAgICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IHBhcnRpYWxzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgICAgIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG5cbiAgICAgIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsXG4gICAgICAgIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIGlmIChpc0xhemlhYmxlKGZ1bmMpKSB7XG4gICAgICAgIHNldERhdGEocmVzdWx0LCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhyZXN1bHQsIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLnJvdW5kYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBNYXRoW21ldGhvZE5hbWVdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gMCA6IG5hdGl2ZU1pbih0b0ludGVnZXIocHJlY2lzaW9uKSwgMjkyKTtcbiAgICAgICAgaWYgKHByZWNpc2lvbiAmJiBuYXRpdmVJc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgICAgLy8gU2hpZnQgd2l0aCBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhdm9pZCBmbG9hdGluZy1wb2ludCBpc3N1ZXMuXG4gICAgICAgICAgLy8gU2VlIFtNRE5dKGh0dHBzOi8vbWRuLmlvL3JvdW5kI0V4YW1wbGVzKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHZhciBwYWlyID0gKHRvU3RyaW5nKG51bWJlcikgKyAnZScpLnNwbGl0KCdlJyksXG4gICAgICAgICAgICAgIHZhbHVlID0gZnVuYyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG5cbiAgICAgICAgICBwYWlyID0gKHRvU3RyaW5nKHZhbHVlKSArICdlJykuc3BsaXQoJ2UnKTtcbiAgICAgICAgICByZXR1cm4gKyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy50b1BhaXJzYCBvciBgXy50b1BhaXJzSW5gIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhaXJzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvUGFpcnMoa2V5c0Z1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgICAgICBpZiAodGFnID09IG1hcFRhZykge1xuICAgICAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlVG9QYWlycyhvYmplY3QsIGtleXNGdW5jKG9iamVjdCkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gICAgICogYHRoaXNgIGJpbmRpbmcgYW5kIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogICAgMSAtIGBfLmJpbmRgXG4gICAgICogICAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogICAgNCAtIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBvZiBhIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogICAgOCAtIGBfLmN1cnJ5YFxuICAgICAqICAgMTYgLSBgXy5jdXJyeVJpZ2h0YFxuICAgICAqICAgMzIgLSBgXy5wYXJ0aWFsYFxuICAgICAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogIDEyOCAtIGBfLnJlYXJnYFxuICAgICAqICAyNTYgLSBgXy5hcnlgXG4gICAgICogIDUxMiAtIGBfLmZsaXBgXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICAgICAgYXJpdHkgPSBhcml0eSA9PT0gdW5kZWZpbmVkID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICAgICAgbGVuZ3RoIC09IGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChiaXRtYXNrICYgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpO1xuXG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCxcbiAgICAgICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgICBmdW5jID0gbmV3RGF0YVswXTtcbiAgICAgIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICAgICAgdGhpc0FyZyA9IG5ld0RhdGFbMl07XG4gICAgICBwYXJ0aWFscyA9IG5ld0RhdGFbM107XG4gICAgICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IChpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGgpXG4gICAgICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gICAgICBpZiAoIWFyaXR5ICYmIGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKTtcbiAgICAgIH1cbiAgICAgIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICAgICAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IFdSQVBfQ1VSUllfUklHSFRfRkxBRykge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gICAgICB9IGVsc2UgaWYgKChiaXRtYXNrID09IFdSQVBfUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKFdSQVBfQklORF9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcpKSAmJiAhaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZXR0ZXIgPSBkYXRhID8gYmFzZVNldERhdGEgOiBzZXREYXRhO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKSwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c2AgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25JbmAgdXNlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzXG4gICAgICogb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXNcbiAgICAgKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKG9ialZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzRGVlcGAgdG8gY3VzdG9taXplIGl0cyBgXy5tZXJnZWAgdXNlIHRvIG1lcmdlIHNvdXJjZVxuICAgICAqIG9iamVjdHMgaW50byBkZXN0aW5hdGlvbiBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCB0aHJ1LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgcGFyZW50IG9iamVjdCBvZiBgc3JjVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialZhbHVlKSAmJiBpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgb2JqVmFsdWUpO1xuICAgICAgICBiYXNlTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCB1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9taXRgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uY2xvbmVEZWVwYCB1c2UgdG8gb25seSBjbG9uZSBwbGFpblxuICAgICAqIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bmNsb25lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCB0byBkZWZlciBjbG9uaW5nIHRvIGBfLmNsb25lRGVlcGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tT21pdENsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gICAgICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gICAgICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICAgICAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgICAgIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICAgICAgaWYgKG9ialN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gICAgICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgICAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgICAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQsIGZsYXR0ZW4pLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGdldERhdGEgPSAhbWV0YU1hcCA/IG5vb3AgOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZ1bmNOYW1lKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSAoZnVuYy5uYW1lICsgJycpLFxuICAgICAgICAgIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdF0sXG4gICAgICAgICAgbGVuZ3RoID0gaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIHJlc3VsdCkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLFxuICAgICAgICAgICAgb3RoZXJGdW5jID0gZGF0YS5mdW5jO1xuICAgICAgICBpZiAob3RoZXJGdW5jID09IG51bGwgfHwgb3RoZXJGdW5jID09IGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFyZ3VtZW50IHBsYWNlaG9sZGVyIHZhbHVlIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEhvbGRlcihmdW5jKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gsICdwbGFjZWhvbGRlcicpID8gbG9kYXNoIDogZnVuYztcbiAgICAgIHJldHVybiBvYmplY3QucGxhY2Vob2xkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpdGVyYXRlZVwiIGZ1bmN0aW9uLiBJZiBgXy5pdGVyYXRlZWAgaXMgY3VzdG9taXplZCxcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGN1c3RvbSBtZXRob2QsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBiYXNlSXRlcmF0ZWVgLlxuICAgICAqIElmIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHRoZSBjaG9zZW4gZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIHRoZW0gYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWVdIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiB0aGUgY3JlYXRlZCBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNob3NlbiBmdW5jdGlvbiBvciBpdHMgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEl0ZXJhdGVlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaC5pdGVyYXRlZSB8fCBpdGVyYXRlZTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gaXRlcmF0ZWUgPyBiYXNlSXRlcmF0ZWUgOiByZXN1bHQ7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJlc3VsdChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgICAgIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgICAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgICAgICA6IGRhdGEubWFwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICAgICAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgaWYgKHVubWFza2VkKSB7XG4gICAgICAgIGlmIChpc093bikge1xuICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB3aGlsZSAob2JqZWN0KSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIHZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4gICAgLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuICAgIGlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAgICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgICAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAgICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICAgICAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgICAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZpZXcsIGFwcGx5aW5nIGFueSBgdHJhbnNmb3Jtc2AgdG8gdGhlIGBzdGFydGAgYW5kIGBlbmRgIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtcyBUaGUgdHJhbnNmb3JtYXRpb25zIHRvIGFwcGx5IHRvIHRoZSB2aWV3LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBzdGFydGAgYW5kIGBlbmRgXG4gICAgICogIHBvc2l0aW9ucyBvZiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRWaWV3KHN0YXJ0LCBlbmQsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybXNbaW5kZXhdLFxuICAgICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2Ryb3AnOiAgICAgIHN0YXJ0ICs9IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Ryb3BSaWdodCc6IGVuZCAtPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlJzogICAgICBlbmQgPSBuYXRpdmVNaW4oZW5kLCBzdGFydCArIHNpemUpOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlUmlnaHQnOiBzdGFydCA9IG5hdGl2ZU1heChzdGFydCwgZW5kIC0gc2l6ZSk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyAnc3RhcnQnOiBzdGFydCwgJ2VuZCc6IGVuZCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHdyYXBwZXIgZGV0YWlscyBmcm9tIHRoZSBgc291cmNlYCBib2R5IGNvbW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd3JhcHBlciBkZXRhaWxzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFdyYXBEZXRhaWxzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoID0gc291cmNlLm1hdGNoKHJlV3JhcERldGFpbHMpO1xuICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQocmVTcGxpdERldGFpbHMpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICAgICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gICAgICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgICAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICAgICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgICAgIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICAgICAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgICAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB3cmFwcGVyIGBkZXRhaWxzYCBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgYHNvdXJjZWAgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gaW5zZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHNvdXJjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIGRldGFpbHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBkZXRhaWxzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGRldGFpbHNbbGFzdEluZGV4XSA9IChsZW5ndGggPiAxID8gJyYgJyA6ICcnKSArIGRldGFpbHNbbGFzdEluZGV4XTtcbiAgICAgIGRldGFpbHMgPSBkZXRhaWxzLmpvaW4obGVuZ3RoID4gMiA/ICcsICcgOiAnICcpO1xuICAgICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKHJlV3JhcENvbW1lbnQsICd7XFxuLyogW3dyYXBwZWQgd2l0aCAnICsgZGV0YWlscyArICddICovXFxuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICAgICAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICAgICApIHtcbiAgICAgICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgICAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICAgICAgOiAodmFsdWUgPT09IG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMYXppYWJsZShmdW5jKSB7XG4gICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICBvdGhlciA9IGxvZGFzaFtmdW5jTmFtZV07XG5cbiAgICAgIGlmICh0eXBlb2Ygb3RoZXIgIT0gJ2Z1bmN0aW9uJyB8fCAhKGZ1bmNOYW1lIGluIExhenlXcmFwcGVyLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZ1bmMgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKG90aGVyKTtcbiAgICAgIHJldHVybiAhIWRhdGEgJiYgZnVuYyA9PT0gZGF0YVswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gICAgICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaXMgY2FwYWJsZSBvZiBiZWluZyBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2FibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICB2YXIgaXNNYXNrYWJsZSA9IGNvcmVKc0RhdGEgPyBpc0Z1bmN0aW9uIDogc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICAgICAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICAgICAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gICAgICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gICAgICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gICAgICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWVyZ2VzIHRoZSBmdW5jdGlvbiBtZXRhZGF0YSBvZiBgc291cmNlYCBpbnRvIGBkYXRhYC5cbiAgICAgKlxuICAgICAqIE1lcmdpbmcgbWV0YWRhdGEgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIHdyYXBwZXJzIHVzZWQgdG8gaW52b2tlIGEgZnVuY3Rpb24uXG4gICAgICogVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIG1ldGhvZHMgbGlrZSBgXy5iaW5kYCwgYF8uY3VycnlgLCBhbmQgYF8ucGFydGlhbGBcbiAgICAgKiBtYXkgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIGV4ZWN1dGlvbiBvcmRlci4gTWV0aG9kcyBsaWtlIGBfLmFyeWAgYW5kXG4gICAgICogYF8ucmVhcmdgIG1vZGlmeSBmdW5jdGlvbiBhcmd1bWVudHMsIG1ha2luZyB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcmVcbiAgICAgKiBleGVjdXRlZCBpbXBvcnRhbnQsIHByZXZlbnRpbmcgdGhlIG1lcmdpbmcgb2YgbWV0YWRhdGEuIEhvd2V2ZXIsIHdlIG1ha2VcbiAgICAgKiBhbiBleGNlcHRpb24gZm9yIGEgc2FmZSBjb21iaW5lZCBjYXNlIHdoZXJlIGN1cnJpZWQgZnVuY3Rpb25zIGhhdmUgYF8uYXJ5YFxuICAgICAqIGFuZCBvciBgXy5yZWFyZ2AgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgZGVzdGluYXRpb24gbWV0YWRhdGEuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBzb3VyY2UgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkYXRhYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZURhdGEoZGF0YSwgc291cmNlKSB7XG4gICAgICB2YXIgYml0bWFzayA9IGRhdGFbMV0sXG4gICAgICAgICAgc3JjQml0bWFzayA9IHNvdXJjZVsxXSxcbiAgICAgICAgICBuZXdCaXRtYXNrID0gYml0bWFzayB8IHNyY0JpdG1hc2ssXG4gICAgICAgICAgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgKFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHIHwgV1JBUF9BUllfRkxBRyk7XG5cbiAgICAgIHZhciBpc0NvbWJvID1cbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX1JFQVJHX0ZMQUcpICYmIChkYXRhWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpKSAmJiAoc291cmNlWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpO1xuXG4gICAgICAvLyBFeGl0IGVhcmx5IGlmIG1ldGFkYXRhIGNhbid0IGJlIG1lcmdlZC5cbiAgICAgIGlmICghKGlzQ29tbW9uIHx8IGlzQ29tYm8pKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgdGhpc0FyZ2AgaWYgYXZhaWxhYmxlLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICBkYXRhWzJdID0gc291cmNlWzJdO1xuICAgICAgICAvLyBTZXQgd2hlbiBjdXJyeWluZyBhIGJvdW5kIGZ1bmN0aW9uLlxuICAgICAgICBuZXdCaXRtYXNrIHw9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyA/IDAgOiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUc7XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgYXJndW1lbnRzLlxuICAgICAgdmFyIHZhbHVlID0gc291cmNlWzNdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFscyA9IGRhdGFbM107XG4gICAgICAgIGRhdGFbM10gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzKHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzRdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzRdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzNdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNF07XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgcmlnaHQgYXJndW1lbnRzLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbNV07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcGFydGlhbHMgPSBkYXRhWzVdO1xuICAgICAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzZdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzVdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNl07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcmdQb3NgIGlmIGF2YWlsYWJsZS5cbiAgICAgIHZhbHVlID0gc291cmNlWzddO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRhdGFbN10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyeWAgaWYgaXQncyBzbWFsbGVyLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0FSWV9GTEFHKSB7XG4gICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdID09IG51bGwgPyBzb3VyY2VbOF0gOiBuYXRpdmVNaW4oZGF0YVs4XSwgc291cmNlWzhdKTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyaXR5YCBpZiBvbmUgaXMgbm90IHByb3ZpZGVkLlxuICAgICAgaWYgKGRhdGFbOV0gPT0gbnVsbCkge1xuICAgICAgICBkYXRhWzldID0gc291cmNlWzldO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgZnVuY2AgYW5kIG1lcmdlIGJpdG1hc2tzLlxuICAgICAgZGF0YVswXSA9IHNvdXJjZVswXTtcbiAgICAgIGRhdGFbMV0gPSBuZXdCaXRtYXNrO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAgICAgKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICAgICAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFyZW50IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdGggVGhlIHBhdGggdG8gZ2V0IHRoZSBwYXJlbnQgdmFsdWUgb2YuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBhcmVudCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJlbnQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5sZW5ndGggPCAyID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgYGFycmF5YCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIGZpcnN0IGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBmaXJzdCBlbGVtZW50LCB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBzZWNvbmQgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIHNlY29uZCBlbGVtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byByZW9yZGVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFycmF5IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlcihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oaW5kZXhlcy5sZW5ndGgsIGFyckxlbmd0aCksXG4gICAgICAgICAgb2xkQXJyYXkgPSBjb3B5QXJyYXkoYXJyYXkpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgICAgIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgdGhpcyBmdW5jdGlvbiBiZWNvbWVzIGhvdCwgaS5lLiBpcyBpbnZva2VkIGEgbG90IGluIGEgc2hvcnRcbiAgICAgKiBwZXJpb2Qgb2YgdGltZSwgaXQgd2lsbCB0cmlwIGl0cyBicmVha2VyIGFuZCB0cmFuc2l0aW9uIHRvIGFuIGlkZW50aXR5XG4gICAgICogZnVuY3Rpb24gdG8gYXZvaWQgZ2FyYmFnZSBjb2xsZWN0aW9uIHBhdXNlcyBpbiBWOC4gU2VlXG4gICAgICogW1Y4IGlzc3VlIDIwNzBdKGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzApXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXREYXRhID0gc2hvcnRPdXQoYmFzZVNldERhdGEpO1xuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYHNldFRpbWVvdXRgXShodHRwczovL21kbi5pby9zZXRUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIHNldFRpbWVvdXQgPSBjdHhTZXRUaW1lb3V0IHx8IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICAgIHJldHVybiByb290LnNldFRpbWVvdXQoZnVuYywgd2FpdCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGB3cmFwcGVyYCB0byBtaW1pYyB0aGUgc291cmNlIG9mIGByZWZlcmVuY2VgXG4gICAgICogd2l0aCB3cmFwcGVyIGRldGFpbHMgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIHNvdXJjZSBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVyIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYHdyYXBwZXJgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdyYXBUb1N0cmluZyh3cmFwcGVyLCByZWZlcmVuY2UsIGJpdG1hc2spIHtcbiAgICAgIHZhciBzb3VyY2UgPSAocmVmZXJlbmNlICsgJycpO1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKHdyYXBwZXIsIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgdXBkYXRlV3JhcERldGFpbHMoZ2V0V3JhcERldGFpbHMoc291cmNlKSwgYml0bWFzaykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAgICAgKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gICAgICB2YXIgY291bnQgPSAwLFxuICAgICAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgd2hpY2ggbXV0YXRlcyBhbmQgc2V0cyB0aGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9YXJyYXkubGVuZ3RoXSBUaGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGVTZWxmKGFycmF5LCBzaXplKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgc2l6ZSA9IHNpemUgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHNpemU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IHNpemUpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBiYXNlUmFuZG9tKGluZGV4LCBsYXN0SW5kZXgpLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtyYW5kXTtcblxuICAgICAgICBhcnJheVtyYW5kXSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBhcnJheS5sZW5ndGggPSBzaXplO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIHZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgICAgIH1cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gICAgICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHdyYXBwZXIgYGRldGFpbHNgIGJhc2VkIG9uIGBiaXRtYXNrYCBmbGFncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGV0YWlsc2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV3JhcERldGFpbHMoZGV0YWlscywgYml0bWFzaykge1xuICAgICAgYXJyYXlFYWNoKHdyYXBGbGFncywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICB2YXIgdmFsdWUgPSAnXy4nICsgcGFpclswXTtcbiAgICAgICAgaWYgKChiaXRtYXNrICYgcGFpclsxXSkgJiYgIWFycmF5SW5jbHVkZXMoZGV0YWlscywgdmFsdWUpKSB7XG4gICAgICAgICAgZGV0YWlscy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGV0YWlscy5zb3J0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB3cmFwcGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHdyYXBwZXIgVGhlIHdyYXBwZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHdyYXBwZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNsb25lKHdyYXBwZXIpIHtcbiAgICAgIGlmICh3cmFwcGVyIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVyLl9fd3JhcHBlZF9fLCB3cmFwcGVyLl9fY2hhaW5fXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkod3JhcHBlci5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19pbmRleF9fICA9IHdyYXBwZXIuX19pbmRleF9fO1xuICAgICAgcmVzdWx0Ll9fdmFsdWVzX18gPSB3cmFwcGVyLl9fdmFsdWVzX187XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byBncm91cHMgdGhlIGxlbmd0aCBvZiBgc2l6ZWAuXG4gICAgICogSWYgYGFycmF5YCBjYW4ndCBiZSBzcGxpdCBldmVubHksIHRoZSBmaW5hbCBjaHVuayB3aWxsIGJlIHRoZSByZW1haW5pbmdcbiAgICAgKiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT0xXSBUaGUgbGVuZ3RoIG9mIGVhY2ggY2h1bmtcbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNodW5rcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMik7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsnYycsICdkJ11dXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAzKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InLCAnYyddLCBbJ2QnXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaHVuayhhcnJheSwgc2l6ZSwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc2l6ZSwgZ3VhcmQpIDogc2l6ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzaXplID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSBuYXRpdmVNYXgodG9JbnRlZ2VyKHNpemUpLCAwKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHNpemUgPCAxKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG5hdGl2ZUNlaWwobGVuZ3RoIC8gc2l6ZSkpO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gYmFzZVNsaWNlKGFycmF5LCBpbmRleCwgKGluZGV4ICs9IHNpemUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBmYWxzZXkgdmFsdWVzIHJlbW92ZWQuIFRoZSB2YWx1ZXMgYGZhbHNlYCwgYG51bGxgLFxuICAgICAqIGAwYCwgYFwiXCJgLCBgdW5kZWZpbmVkYCwgYW5kIGBOYU5gIGFyZSBmYWxzZXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY29tcGFjdChbMCwgMSwgZmFsc2UsIDIsICcnLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgY29uY2F0ZW5hdGluZyBgYXJyYXlgIHdpdGggYW55IGFkZGl0aW9uYWwgYXJyYXlzXG4gICAgICogYW5kL29yIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgY29uY2F0ZW5hdGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMV07XG4gICAgICogdmFyIG90aGVyID0gXy5jb25jYXQoYXJyYXksIDIsIFszXSwgW1s0XV0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob3RoZXIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCAtIDEpLFxuICAgICAgICAgIGFycmF5ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBhcmdzW2luZGV4IC0gMV0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UHVzaChpc0FycmF5KGFycmF5KSA/IGNvcHlBcnJheShhcnJheSkgOiBbYXJyYXldLCBiYXNlRmxhdHRlbihhcmdzLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBgYXJyYXlgIHZhbHVlcyBub3QgaW5jbHVkZWQgaW4gdGhlIG90aGVyIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy53aXRob3V0LCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2UoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbEJ5YCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kaWZmZXJlbmNlQnkoW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCBbeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBvcmRlciBhbmRcbiAgICAgKiByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsV2l0aGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VXaXRoKG9iamVjdHMsIFt7ICd4JzogMSwgJ3knOiAyIH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoY29tcGFyYXRvcikpIHtcbiAgICAgICAgY29tcGFyYXRvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbGxzIGVsZW1lbnRzIG9mIGBhcnJheWAgd2l0aCBgdmFsdWVgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdFxuICAgICAqIGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLmZpbGwoYXJyYXksICdhJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdhJywgJ2EnXVxuICAgICAqXG4gICAgICogXy5maWxsKEFycmF5KDMpLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgMiwgMl1cbiAgICAgKlxuICAgICAqIF8uZmlsbChbNCwgNiwgOCwgMTBdLCAnKicsIDEsIDMpO1xuICAgICAqIC8vID0+IFs0LCAnKicsICcqJywgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHZhbHVlLCBzdGFydCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdiYXJuZXknOyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ3BlYmJsZXMnOyB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0SW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4IDwgMFxuICAgICAgICAgID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKVxuICAgICAgICAgIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmxhdHRlbnMgYGFycmF5YCBhIHNpbmdsZSBsZXZlbCBkZWVwLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCAxKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlZXAoWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNCwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVlcChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCBJTkZJTklUWSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVuIGBhcnJheWAgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIFsyLCBbMywgWzRdXSwgNV1dO1xuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZXB0aChhcnJheSwgZGVwdGgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8udG9QYWlyc2A7IHRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkXG4gICAgICogZnJvbSBrZXktdmFsdWUgYHBhaXJzYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mcm9tUGFpcnMoW1snYScsIDFdLCBbJ2InLCAyXV0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21QYWlycyhwYWlycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICByZXN1bHRbcGFpclswXV0gPSBwYWlyWzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZmlyc3RcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5oZWFkKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5oZWFkKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoZWFkKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgdmFsdWVgIGlzIGZvdW5kIGluIGBhcnJheWBcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhcyB0aGVcbiAgICAgKiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRpYWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDAsIC0xKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBhbGwgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMl1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZClcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgaWYgKGl0ZXJhdGVlID09PSBsYXN0KG1hcHBlZCkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzXG4gICAgICogb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFsbCBlbGVtZW50cyBpbiBgYXJyYXlgIGludG8gYSBzdHJpbmcgc2VwYXJhdGVkIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzZXBhcmF0b3I9JywnXSBUaGUgZWxlbWVudCBzZXBhcmF0b3IuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgam9pbmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5qb2luKFsnYScsICdiJywgJ2MnXSwgJ34nKTtcbiAgICAgKiAvLyA9PiAnYX5ifmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gam9pbihhcnJheSwgc2VwYXJhdG9yKSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/ICcnIDogbmF0aXZlSm9pbi5jYWxsKGFycmF5LCBzZXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgYXJyYXlgIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCkgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgICA/IHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpXG4gICAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZWxlbWVudCBhdCBpbmRleCBgbmAgb2YgYGFycmF5YC4gSWYgYG5gIGlzIG5lZ2F0aXZlLCB0aGUgbnRoXG4gICAgICogZWxlbWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAtMik7XG4gICAgICogLy8gPT4gJ2MnO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aChhcnJheSwgbikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZU50aChhcnJheSwgdG9JbnRlZ2VyKG4pKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBnaXZlbiB2YWx1ZXMgZnJvbSBgYXJyYXlgIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLndpdGhvdXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5yZW1vdmVgXG4gICAgICogdG8gcmVtb3ZlIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgcHJlZGljYXRlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGwoYXJyYXksICdhJywgJ2MnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIHZhciBwdWxsID0gYmFzZVJlc3QocHVsbEFsbCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGwoYXJyYXksIFsnYScsICdjJ10pO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbChhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZUJ5YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDMgfSwgeyAneCc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxCeShhcnJheSwgW3sgJ3gnOiAxIH0sIHsgJ3gnOiAzIH1dLCAneCcpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsQnkoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VXaXRoYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAzLCAneSc6IDQgfSwgeyAneCc6IDUsICd5JzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbFdpdGgoYXJyYXksIFt7ICd4JzogMywgJ3knOiA0IH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogNSwgJ3knOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbFdpdGgoYXJyYXksIHZhbHVlcywgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZWxlbWVudHMgZnJvbSBgYXJyYXlgIGNvcnJlc3BvbmRpbmcgdG8gYGluZGV4ZXNgIGFuZCByZXR1cm5zIGFuXG4gICAgICogYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uYXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IFtpbmRleGVzXSBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICogdmFyIHB1bGxlZCA9IF8ucHVsbEF0KGFycmF5LCBbMSwgM10pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdjJ11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKHB1bGxlZCk7XG4gICAgICogLy8gPT4gWydiJywgJ2QnXVxuICAgICAqL1xuICAgIHZhciBwdWxsQXQgPSBmbGF0UmVzdChmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGJhc2VBdChhcnJheSwgaW5kZXhlcyk7XG5cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGFycmF5TWFwKGluZGV4ZXMsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBpc0luZGV4KGluZGV4LCBsZW5ndGgpID8gK2luZGV4IDogaW5kZXg7XG4gICAgICB9KS5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gYGFycmF5YCB0aGF0IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByZW1vdmVkIGVsZW1lbnRzLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5maWx0ZXJgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5wdWxsYFxuICAgICAqIHRvIHB1bGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XTtcbiAgICAgKiB2YXIgZXZlbnMgPSBfLnJlbW92ZShhcnJheSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhldmVucyk7XG4gICAgICogLy8gPT4gWzIsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIGBhcnJheWAgc28gdGhhdCB0aGUgZmlyc3QgZWxlbWVudCBiZWNvbWVzIHRoZSBsYXN0LCB0aGUgc2Vjb25kXG4gICAgICogZWxlbWVudCBiZWNvbWVzIHRoZSBzZWNvbmQgdG8gbGFzdCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YCBhbmQgaXMgYmFzZWQgb25cbiAgICAgKiBbYEFycmF5I3JldmVyc2VgXShodHRwczovL21kbi5pby9BcnJheS9yZXZlcnNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8ucmV2ZXJzZShhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmV2ZXJzZShhcnJheSkge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyBhcnJheSA6IG5hdGl2ZVJldmVyc2UuY2FsbChhcnJheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgdXNlZCBpbnN0ZWFkIG9mXG4gICAgICogW2BBcnJheSNzbGljZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3NsaWNlKSB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZVxuICAgICAqIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgJiYgdHlwZW9mIGVuZCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc3RhcnQsIGVuZCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIGxvd2VzdCBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWzMwLCA1MF0sIDQwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBoaWdoZXN0XG4gICAgICogaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvXG4gICAgICogbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleChbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRMYXN0SW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmxhc3RJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKSAtIDE7XG4gICAgICAgIGlmIChlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxKFsxLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXkpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxQnlgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxQnkoWzEuMSwgMS4yLCAyLjMsIDIuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjEsIDIuM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWlsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFpbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMSwgbGVuZ3RoKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2UoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuIEVsZW1lbnRzIGFyZVxuICAgICAqIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy4gRWxlbWVudHNcbiAgICAgKiBhcmUgdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tIHRoZSBmaXJzdFxuICAgICAqIGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbkJ5KFsyLjFdLCBbMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb21cbiAgICAgKiB0aGUgZmlyc3QgYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIGFuIGFycmF5LCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGVhY2ggZWxlbWVudFxuICAgICAqIGlzIGtlcHQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXJcbiAgICAgKiBpbiB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxKFsyLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGVcbiAgICAgKiBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxQnkoWzIuMSwgMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaXFCeShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pcVdpdGgob2JqZWN0cywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcVdpdGgoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgZ3JvdXBlZFxuICAgICAqIGVsZW1lbnRzIGFuZCBjcmVhdGVzIGFuIGFycmF5IHJlZ3JvdXBpbmcgdGhlIGVsZW1lbnRzIHRvIHRoZWlyIHByZS16aXBcbiAgICAgKiBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqXG4gICAgICogXy51bnppcCh6aXBwZWQpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXAoYXJyYXkpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgICBhcnJheSA9IGFycmF5RmlsdGVyKGFycmF5LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoZ3JvdXApKSB7XG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGdyb3VwLmxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYmFzZVRpbWVzKGxlbmd0aCwgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKGFycmF5LCBiYXNlUHJvcGVydHkoaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IHJlZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICByZWdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0pO1xuICAgICAqIC8vID0+IFtbMSwgMTAsIDEwMF0sIFsyLCAyMCwgMjAwXV1cbiAgICAgKlxuICAgICAqIF8udW56aXBXaXRoKHppcHBlZCwgXy5hZGQpO1xuICAgICAqIC8vID0+IFszLCAzMCwgMzAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwV2l0aChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHVuemlwKGFycmF5KTtcbiAgICAgIGlmIChpdGVyYXRlZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlNYXAocmVzdWx0LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHVuZGVmaW5lZCwgZ3JvdXApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIGdpdmVuIHZhbHVlcyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53aXRob3V0KFsyLCAxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICovXG4gICAgdmFyIHdpdGhvdXQgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGlzIHRoZVxuICAgICAqIFtzeW1tZXRyaWMgZGlmZmVyZW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3ltbWV0cmljX2RpZmZlcmVuY2UpXG4gICAgICogb2YgdGhlIGdpdmVuIGFycmF5cy4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXJcbiAgICAgKiB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLndpdGhvdXRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3IoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqL1xuICAgIHZhciB4b3IgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZFxuICAgICAqIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lXG4gICAgICogYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3JCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yLCAzLjRdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnhvckJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB4b3JCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ueG9yV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB4b3JXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLCB0aGUgZmlyc3Qgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogZmlyc3QgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgdGhlIHNlY29uZCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBzZWNvbmQgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICovXG4gICAgdmFyIHppcCA9IGJhc2VSZXN0KHVuemlwKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZnJvbVBhaXJzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIHR3byBhcnJheXMsXG4gICAgICogb25lIG9mIHByb3BlcnR5IGlkZW50aWZpZXJzIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0KFsnYScsICdiJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0KHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGFzc2lnblZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcE9iamVjdGAgZXhjZXB0IHRoYXQgaXQgc3VwcG9ydHMgcHJvcGVydHkgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0RGVlcChbJ2EuYlswXS5jJywgJ2EuYlsxXS5kJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiBbeyAnYyc6IDEgfSwgeyAnZCc6IDIgfV0gfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0RGVlcChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBiYXNlU2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIGdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwV2l0aChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdLCBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gYSArIGIgKyBjO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxMTEsIDIyMl1cbiAgICAgKi9cbiAgICB2YXIgemlwV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgaXRlcmF0ZWUgPSBsZW5ndGggPiAxID8gYXJyYXlzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpdGVyYXRlZSA9IHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nID8gKGFycmF5cy5wb3AoKSwgaXRlcmF0ZWUpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHVuemlwV2l0aChhcnJheXMsIGl0ZXJhdGVlKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHRoYXQgd3JhcHMgYHZhbHVlYCB3aXRoIGV4cGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLiBUaGUgcmVzdWx0IG9mIHN1Y2ggc2VxdWVuY2VzIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHlvdW5nZXN0ID0gX1xuICAgICAqICAgLmNoYWluKHVzZXJzKVxuICAgICAqICAgLnNvcnRCeSgnYWdlJylcbiAgICAgKiAgIC5tYXAoZnVuY3Rpb24obykge1xuICAgICAqICAgICByZXR1cm4gby51c2VyICsgJyBpcyAnICsgby5hZ2U7XG4gICAgICogICB9KVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMgaXMgMSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaGFpbih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaCh2YWx1ZSk7XG4gICAgICByZXN1bHQuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBgaW50ZXJjZXB0b3JgIGFuZCByZXR1cm5zIGB2YWx1ZWAuIFRoZSBpbnRlcmNlcHRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvXG4gICAgICogXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlIGluIG9yZGVyIHRvIG1vZGlmeSBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSlcbiAgICAgKiAgLnRhcChmdW5jdGlvbihhcnJheSkge1xuICAgICAqICAgIC8vIE11dGF0ZSBpbnB1dCBhcnJheS5cbiAgICAgKiAgICBhcnJheS5wb3AoKTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnJldmVyc2UoKVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy50YXBgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwicGFzcyB0aHJ1XCIgdmFsdWVzIHJlcGxhY2luZyBpbnRlcm1lZGlhdGVcbiAgICAgKiByZXN1bHRzIGluIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXygnICBhYmMgICcpXG4gICAgICogIC5jaGFpbigpXG4gICAgICogIC50cmltKClcbiAgICAgKiAgLnRocnUoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocnUodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICByZXR1cm4gaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8uYXRgLlxuICAgICAqXG4gICAgICogQG5hbWUgYXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXyhvYmplY3QpLmF0KFsnYVswXS5iLmMnLCAnYVsxXSddKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciB3cmFwcGVyQXQgPSBmbGF0UmVzdChmdW5jdGlvbihwYXRocykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICBzdGFydCA9IGxlbmd0aCA/IHBhdGhzWzBdIDogMCxcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbihvYmplY3QpIHsgcmV0dXJuIGJhc2VBdChvYmplY3QsIHBhdGhzKTsgfTtcblxuICAgICAgaWYgKGxlbmd0aCA+IDEgfHwgdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGggfHxcbiAgICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHx8ICFpc0luZGV4KHN0YXJ0KSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2Uoc3RhcnQsICtzdGFydCArIChsZW5ndGggPyAxIDogMCkpO1xuICAgICAgdmFsdWUuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLFxuICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUsIHRoaXMuX19jaGFpbl9fKS50aHJ1KGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIGlmIChsZW5ndGggJiYgIWFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgIGFycmF5LnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHdpdGggZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQG5hbWUgY2hhaW5cbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRob3V0IGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpLmhlYWQoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGggZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycylcbiAgICAgKiAgIC5jaGFpbigpXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAucGljaygndXNlcicpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDaGFpbigpIHtcbiAgICAgIHJldHVybiBjaGFpbih0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgYW5kIHJldHVybnMgdGhlIHdyYXBwZWQgcmVzdWx0LlxuICAgICAqXG4gICAgICogQG5hbWUgY29tbWl0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyXTtcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oYXJyYXkpLnB1c2goMyk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkID0gd3JhcHBlZC5jb21taXQoKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLmxhc3QoKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNvbW1pdCgpIHtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih0aGlzLnZhbHVlKCksIHRoaXMuX19jaGFpbl9fKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuZXh0IHZhbHVlIG9uIGEgd3JhcHBlZCBvYmplY3QgZm9sbG93aW5nIHRoZVxuICAgICAqIFtpdGVyYXRvciBwcm90b2NvbF0oaHR0cHM6Ly9tZG4uaW8vaXRlcmF0aW9uX3Byb3RvY29scyNpdGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAbmFtZSBuZXh0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV4dCBpdGVyYXRvciB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDEgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAyIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiB0cnVlLCAndmFsdWUnOiB1bmRlZmluZWQgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJOZXh0KCkge1xuICAgICAgaWYgKHRoaXMuX192YWx1ZXNfXyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHRvQXJyYXkodGhpcy52YWx1ZSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciBkb25lID0gdGhpcy5fX2luZGV4X18gPj0gdGhpcy5fX3ZhbHVlc19fLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IGRvbmUgPyB1bmRlZmluZWQgOiB0aGlzLl9fdmFsdWVzX19bdGhpcy5fX2luZGV4X18rK107XG5cbiAgICAgIHJldHVybiB7ICdkb25lJzogZG9uZSwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSB3cmFwcGVyIHRvIGJlIGl0ZXJhYmxlLlxuICAgICAqXG4gICAgICogQG5hbWUgU3ltYm9sLml0ZXJhdG9yXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZFtTeW1ib2wuaXRlcmF0b3JdKCkgPT09IHdyYXBwZWQ7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogQXJyYXkuZnJvbSh3cmFwcGVkKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVG9JdGVyYXRvcigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgY2hhaW4gc2VxdWVuY2UgcGxhbnRpbmcgYHZhbHVlYCBhcyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHBsYW50XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGxhbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSkubWFwKHNxdWFyZSk7XG4gICAgICogdmFyIG90aGVyID0gd3JhcHBlZC5wbGFudChbMywgNF0pO1xuICAgICAqXG4gICAgICogb3RoZXIudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbOSwgMTZdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclBsYW50KHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIHBhcmVudCA9IHRoaXM7XG5cbiAgICAgIHdoaWxlIChwYXJlbnQgaW5zdGFuY2VvZiBiYXNlTG9kYXNoKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHdyYXBwZXJDbG9uZShwYXJlbnQpO1xuICAgICAgICBjbG9uZS5fX2luZGV4X18gPSAwO1xuICAgICAgICBjbG9uZS5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSBjbG9uZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBjbG9uZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldmlvdXMgPSBjbG9uZTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50Ll9fd3JhcHBlZF9fO1xuICAgICAgfVxuICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5yZXZlcnNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIHRoZSB3cmFwcGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfKGFycmF5KS5yZXZlcnNlKCkudmFsdWUoKVxuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJSZXZlcnNlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXztcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHZhciB3cmFwcGVkID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkge1xuICAgICAgICAgIHdyYXBwZWQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQucmV2ZXJzZSgpO1xuICAgICAgICB3cmFwcGVkLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgICAnYXJncyc6IFtyZXZlcnNlXSxcbiAgICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZWQsIHRoaXMuX19jaGFpbl9fKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRocnUocmV2ZXJzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgdG9KU09OLCB2YWx1ZU9mXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJWYWx1ZSgpIHtcbiAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKHRoaXMuX193cmFwcGVkX18sIHRoaXMuX19hY3Rpb25zX18pO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcmV0dXJuZWQgYnkgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb3VudEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogMiwgJzUnOiAxIH1cbiAgICAgKi9cbiAgICB2YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgKytyZXN1bHRba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYWxsKiogZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogW2VtcHR5IGNvbGxlY3Rpb25zXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FbXB0eV9zZXQpIGJlY2F1c2VcbiAgICAgKiBbZXZlcnl0aGluZyBpcyB0cnVlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WYWN1b3VzX3RydXRoKSBvZlxuICAgICAqIGVsZW1lbnRzIG9mIGVtcHR5IGNvbGxlY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ldmVyeShbdHJ1ZSwgMSwgbnVsbCwgJ3llcyddLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFdmVyeSA6IGJhc2VFdmVyeTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8ucmVqZWN0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gQ29tYmluaW5nIHNldmVyYWwgcHJlZGljYXRlcyB1c2luZyBgXy5vdmVyRXZlcnlgIG9yIGBfLm92ZXJTb21lYC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5vdmVyU29tZShbeyAnYWdlJzogMzYgfSwgWydhZ2UnLCA0MF1dKSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9Y29sbGVjdGlvbi5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChmaW5kTGFzdEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYFxuICAgICAqIHRocnUgYGl0ZXJhdGVlYCBhbmQgZmxhdHRlbmluZyB0aGUgbWFwcGVkIHJlc3VsdHMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbbiwgbl07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlZXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZWVwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgSU5GSU5JVFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlcHRoKFsxLCAyXSwgZHVwbGljYXRlLCAyKTtcbiAgICAgKiAvLyA9PiBbWzEsIDFdLCBbMiwgMl1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlcHRoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBkZXB0aCkge1xuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAgICAgKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckVhY2hgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaFJpZ2h0KFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAyYCB0aGVuIGAxYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaFJpZ2h0IDogYmFzZUVhY2hSaWdodDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBvcmRlciBvZiBncm91cGVkIHZhbHVlc1xuICAgICAqIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gYGNvbGxlY3Rpb25gLiBUaGUgY29ycmVzcG9uZGluZ1xuICAgICAqIHZhbHVlIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZVxuICAgICAqIGtleS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjNdIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBhIHN0cmluZywgaXQnc1xuICAgICAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogaXMgdXNlZCBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXNcbiAgICAgKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyh7ICdhJzogMSwgJ2InOiAyIH0sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoJ2FiY2QnLCAnYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgIGNvbGxlY3Rpb24gPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pXG4gICAgICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICogYXJlIHByb3ZpZGVkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBwYXRoYCBpcyBhIGZ1bmN0aW9uLCBpdCdzIGludm9rZWRcbiAgICAgKiBmb3IsIGFuZCBgdGhpc2AgYm91bmQgdG8sIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvclxuICAgICAqICB0aGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGVhY2ggbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgdmFyIGludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXNGdW5jID8gYXBwbHkocGF0aCwgdmFsdWUsIGFyZ3MpIDogYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtcbiAgICAgKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICAgICAqICAgeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCBmdW5jdGlvbihvKSB7XG4gICAgICogICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvLmNvZGUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqL1xuICAgIHZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICAgICAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICAgICAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdXG4gICAgICpcbiAgICAgKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgYWxsb3dzIHNwZWNpZnlpbmcgdGhlIHNvcnRcbiAgICAgKiBvcmRlcnMgb2YgdGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlc1xuICAgICAqIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yXG4gICAgICogZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlciBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXlbXXxGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBTb3J0IGJ5IGB1c2VyYCBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kIGJ5IGBhZ2VgIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogXy5vcmRlckJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10sIFsnYXNjJywgJ2Rlc2MnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KGl0ZXJhdGVlcykpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGwgPyBbXSA6IFtpdGVyYXRlZXNdO1xuICAgICAgfVxuICAgICAgb3JkZXJzID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBvcmRlcnM7XG4gICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICBvcmRlcnMgPSBvcmRlcnMgPT0gbnVsbCA/IFtdIDogW29yZGVyc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byB0d28gZ3JvdXBzLCB0aGUgZmlyc3Qgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IsIHRoZSBzZWNvbmQgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleSBmb3IuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydwZWJibGVzJ10sIFsnYmFybmV5JywgJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsICdwZWJibGVzJ10sIFsnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKi9cbiAgICB2YXIgcGFydGl0aW9uID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXkgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7IHJldHVybiBbW10sIFtdXTsgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gICAgICogaXMgbm90IGdpdmVuLCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICAgICAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gICAgICogYW5kIGBzb3J0QnlgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICAgICAqICAgcmV0dXJuIHN1bSArIG47XG4gICAgICogfSwgMCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICpcbiAgICAgKiBfLnJlZHVjZVJpZ2h0KGFycmF5LCBmdW5jdGlvbihmbGF0dGVuZWQsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChvdGhlcik7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2VSaWdodCA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2hSaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmZpbHRlcmA7IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYFxuICAgICAqIHRoYXQgYHByZWRpY2F0ZWAgZG9lcyAqKm5vdCoqIHJldHVybiB0cnV0aHkgZm9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5maWx0ZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5yZWplY3QodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZSA6IGJhc2VTYW1wbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGBuYCByYW5kb20gZWxlbWVudHMgYXQgdW5pcXVlIGtleXMgZnJvbSBgY29sbGVjdGlvbmAgdXAgdG8gdGhlXG4gICAgICogc2l6ZSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzMsIDFdXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZVNpemUgOiBiYXNlU2FtcGxlU2l6ZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlXG4gICAgICogW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IFs0LCAxLCAzLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTaHVmZmxlIDogYmFzZVNodWZmbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICAgICAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIHNpemUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSgncGViYmxlcycpO1xuICAgICAqIC8vID0+IDdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gc3RyaW5nU2l6ZShjb2xsZWN0aW9uKSA6IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlS2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U29tZSA6IGJhc2VTb21lO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuICAgICAqIHBlcmZvcm1zIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZlxuICAgICAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDMwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCAzMF1dXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNF0sIFsnYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCAzMF0sIFsnZnJlZCcsIDQ4XV1cbiAgICAgKi9cbiAgICB2YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBpdGVyYXRlZXNbMl0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcywgMSksIFtdKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICAgICAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IERhdGVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gICAgICogfSwgXy5ub3coKSk7XG4gICAgICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgbm93ID0gY3R4Tm93IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmJlZm9yZWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiBgZnVuY2Agb25jZSBpdCdzIGNhbGxlZCBgbmAgb3IgbW9yZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYmVmb3JlIGBmdW5jYCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddO1xuICAgICAqXG4gICAgICogdmFyIGRvbmUgPSBfLmFmdGVyKHNhdmVzLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnZG9uZSBzYXZpbmchJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgKiAgIGFzeW5jU2F2ZSh7ICd0eXBlJzogdHlwZSwgJ2NvbXBsZXRlJzogZG9uZSB9KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdkb25lIHNhdmluZyEnIGFmdGVyIHRoZSB0d28gYXN5bmMgc2F2ZXMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gICAgICogaWdub3JpbmcgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgY2FwLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLmFyeShwYXJzZUludCwgMSkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnkoZnVuYywgbiwgZ3VhcmQpIHtcbiAgICAgIG4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IG47XG4gICAgICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQVJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHNcbiAgICAgKiBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hpbGUgaXQncyBjYWxsZWQgbGVzcyB0aGFuIGBuYCB0aW1lcy4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBhdCB3aGljaCBgZnVuY2AgaXMgbm8gbG9uZ2VyIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uYmVmb3JlKDUsIGFkZENvbnRhY3RUb0xpc3QpKTtcbiAgICAgKiAvLyA9PiBBbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmVmb3JlKG4sIGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgICAgZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgbmF0aXZlIGBGdW5jdGlvbiNiaW5kYCwgdGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmQpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gIHdpdGggYHBhcnRpYWxzYFxuICAgICAqIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIGBfLmJpbmRgIGJ5IGFsbG93aW5nIGJvdW5kIGZ1bmN0aW9ucyB0byByZWZlcmVuY2VcbiAgICAgKiBtZXRob2RzIHRoYXQgbWF5IGJlIHJlZGVmaW5lZCBvciBkb24ndCB5ZXQgZXhpc3QuIFNlZVxuICAgICAqIFtQZXRlciBNaWNoYXV4J3MgYXJ0aWNsZV0oaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4pXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kS2V5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52b2tlIHRoZSBtZXRob2Qgb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAndXNlcic6ICdmcmVkJyxcbiAgICAgKiAgICdncmVldCc6IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiBvYmplY3QuZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICd5YSAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kS2V5ID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZEtleSkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIG9mIGBmdW5jYCBhbmQgZWl0aGVyIGludm9rZXNcbiAgICAgKiBgZnVuY2AgcmV0dXJuaW5nIGl0cyByZXN1bHQsIGlmIGF0IGxlYXN0IGBhcml0eWAgbnVtYmVyIG9mIGFyZ3VtZW50cyBoYXZlXG4gICAgICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICAgICAqIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIG1heSBiZSBzcGVjaWZpZWQgaWYgYGZ1bmMubGVuZ3RoYFxuICAgICAqIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMSkoXywgMykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnkoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jdXJyeWAgZXhjZXB0IHRoYXQgYXJndW1lbnRzIGFyZSBhcHBsaWVkIHRvIGBmdW5jYFxuICAgICAqIGluIHRoZSBtYW5uZXIgb2YgYF8ucGFydGlhbFJpZ2h0YCBpbnN0ZWFkIG9mIGBfLnBhcnRpYWxgLlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5UmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnlSaWdodChhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgzKSgyKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMiwgMykoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDMpKDEsIF8pKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5UmlnaHQoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAgICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICAgKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gICAgICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gICAgICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gICAgICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICAgICAqIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICAgICAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAgICogICAnbGVhZGluZyc6IHRydWUsXG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gICAgICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxhc3RBcmdzLFxuICAgICAgICAgIGxhc3RUaGlzLFxuICAgICAgICAgIG1heFdhaXQsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHRpbWVySWQsXG4gICAgICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgICAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgICAgICByZXR1cm4gbWF4aW5nXG4gICAgICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgICAgIDogdGltZVdhaXRpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICAgICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAgICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gICAgICByZXR1cm4gZGVib3VuY2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmVycyBpbnZva2luZyB0aGUgYGZ1bmNgIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuIEFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWZlci5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAnZGVmZXJyZWQnKTtcbiAgICAgKiAvLyA9PiBMb2dzICdkZWZlcnJlZCcgYWZ0ZXIgb25lIG1pbGxpc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWZlciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgMSwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGBmdW5jYCBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBMb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVsYXkgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIHRvTnVtYmVyKHdhaXQpIHx8IDAsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgcmV2ZXJzZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBmbGlwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxpcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZsaXBwZWQgPSBfLmZsaXAoZnVuY3Rpb24oKSB7XG4gICAgICogICByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBmbGlwcGVkKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gWydkJywgJ2MnLCAnYicsICdhJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGlwKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfRkxJUF9GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICAgICAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAgICAgKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICAgICAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICAgICAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gICAgICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAgICAgKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICAgICAqXG4gICAgICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YWx1ZXMob3RoZXIpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqXG4gICAgICogb2JqZWN0LmEgPSAyO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gICAgICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKlxuICAgICAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gICAgICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgYE1hcENhY2hlYC5cbiAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBuZWdhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHByZWRpY2F0ZSBgZnVuY2AuIFRoZVxuICAgICAqIGBmdW5jYCBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBuZWdhdGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbmVnYXRlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNFdmVuKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGludm9raW5nIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHNcbiAgICAgKiB0byB0aGUgZnVuY3Rpb24gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW52b2NhdGlvbi4gVGhlIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIC8vID0+IGBjcmVhdGVBcHBsaWNhdGlvbmAgaXMgaW52b2tlZCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmVmb3JlKDIsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50cyB0cmFuc2Zvcm1lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFt0cmFuc2Zvcm1zPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGFyZ3VtZW50IHRyYW5zZm9ybXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGRvdWJsZWQobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJBcmdzKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiBbeCwgeV07XG4gICAgICogfSwgW3NxdWFyZSwgZG91YmxlZF0pO1xuICAgICAqXG4gICAgICogZnVuYyg5LCAzKTtcbiAgICAgKiAvLyA9PiBbODEsIDZdXG4gICAgICpcbiAgICAgKiBmdW5jKDEwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTAwLCAxMF1cbiAgICAgKi9cbiAgICB2YXIgb3ZlckFyZ3MgPSBjYXN0UmVzdChmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB0cmFuc2Zvcm1zID0gKHRyYW5zZm9ybXMubGVuZ3RoID09IDEgJiYgaXNBcnJheSh0cmFuc2Zvcm1zWzBdKSlcbiAgICAgICAgPyBhcnJheU1hcCh0cmFuc2Zvcm1zWzBdLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpXG4gICAgICAgIDogYXJyYXlNYXAoYmFzZUZsYXR0ZW4odHJhbnNmb3JtcywgMSksIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciBmdW5jc0xlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oYXJncy5sZW5ndGgsIGZ1bmNzTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gdHJhbnNmb3Jtc1tpbmRleF0uY2FsbCh0aGlzLCBhcmdzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpdCByZWNlaXZlcy4gVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqXG4gICAgICogYWx0ZXIgdGhlIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWwoZ3JlZXQsICdoZWxsbycpO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWwoZ3JlZXQsIF8sICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsKSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50c1xuICAgICAqIGFyZSBhcHBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWxSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2hlbGxvJywgXyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsUmlnaHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWxSaWdodCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBgaW5kZXhlc2Agd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBmaXJzdCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBzZWNvbmQgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcmd1bWVudCBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcmVhcmdlZCA9IF8ucmVhcmcoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9LCBbMiwgMCwgMV0pO1xuICAgICAqXG4gICAgICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIHZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUkVBUkdfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5kZXhlcyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIGFuZCBhcmd1bWVudHMgZnJvbSBgc3RhcnRgIGFuZCBiZXlvbmQgcHJvdmlkZWQgYXNcbiAgICAgKiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbcmVzdCBwYXJhbWV0ZXJdKGh0dHBzOi8vbWRuLmlvL3Jlc3RfcGFyYW1ldGVycykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8ucmVzdChmdW5jdGlvbih3aGF0LCBuYW1lcykge1xuICAgICAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICAgICAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jLCBzdGFydCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlIGZ1bmN0aW9uIGFuZCBhbiBhcnJheSBvZiBhcmd1bWVudHMgbXVjaCBsaWtlXG4gICAgICogW2BGdW5jdGlvbiNhcHBseWBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtzcHJlYWQgb3BlcmF0b3JdKGh0dHBzOi8vbWRuLmlvL3NwcmVhZF9vcGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNwcmVhZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8uc3ByZWFkKGZ1bmN0aW9uKHdobywgd2hhdCkge1xuICAgICAqICAgcmV0dXJuIHdobyArICcgc2F5cyAnICsgd2hhdDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheShbJ2ZyZWQnLCAnaGVsbG8nXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQgc2F5cyBoZWxsbydcbiAgICAgKlxuICAgICAqIHZhciBudW1iZXJzID0gUHJvbWlzZS5hbGwoW1xuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDQwKSxcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSgzNilcbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIG51bWJlcnMudGhlbihfLnNwcmVhZChmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4geCArIHk7XG4gICAgICogfSkpO1xuICAgICAqIC8vID0+IGEgUHJvbWlzZSBvZiA3NlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwcmVhZChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IG5hdGl2ZU1heCh0b0ludGVnZXIoc3RhcnQpLCAwKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFyZ3Nbc3RhcnRdLFxuICAgICAgICAgICAgb3RoZXJBcmdzID0gY2FzdFNsaWNlKGFyZ3MsIDAsIHN0YXJ0KTtcblxuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBhcnJheVB1c2gob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gICAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICAgKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gICAgICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gICAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICAgICAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAgICAgKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gICAgICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gICAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAgICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIG9uZSBhcmd1bWVudCwgaWdub3JpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8udW5hcnkocGFyc2VJbnQpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5hcnkoZnVuYykge1xuICAgICAgcmV0dXJuIGFyeShmdW5jLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIGB3cmFwcGVyYCBhcyBpdHMgZmlyc3RcbiAgICAgKiBhcmd1bWVudC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmUgYXBwZW5kZWRcbiAgICAgKiB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgYHdyYXBwZXJgLiBUaGUgd3JhcHBlciBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFt3cmFwcGVyPWlkZW50aXR5XSBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICc8cD5mcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXM8L3A+J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXAodmFsdWUsIHdyYXBwZXIpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsKGNhc3RGdW5jdGlvbih3cmFwcGVyKSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgYXMgYW4gYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoMSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbbnVsbF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKiBjb25zb2xlLmxvZyhfLmNhc3RBcnJheShhcnJheSkgPT09IGFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5KCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAgICAgKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gICAgICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAgICAgKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gICAgICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgKiBjbG9uaW5nIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHVwIHRvIGZvdXIgYXJndW1lbnRzOyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lV2l0aGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVEZWVwV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgb2JqZWN0YCBjb25mb3JtcyB0byBgc291cmNlYCBieSBpbnZva2luZyB0aGUgcHJlZGljYXRlXG4gICAgICogcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMjsgfSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2UgPT0gbnVsbCB8fCBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKE5hTiwgTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5ndCgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUd0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheUJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheUJ1ZmZlciA9IG5vZGVJc0FycmF5QnVmZmVyID8gYmFzZVVuYXJ5KG5vZGVJc0FycmF5QnVmZmVyKSA6IGJhc2VJc0FycmF5QnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICAgICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAgICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gICAgICogaXMgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJvb2xlYW4sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4oZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBEYXRlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUobmV3IERhdGUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKCdNb24gQXByaWwgMjMgMjAxMicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzRGF0ZSA9IG5vZGVJc0RhdGUgPyBiYXNlVW5hcnkobm9kZUlzRGF0ZSkgOiBiYXNlSXNEYXRlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgRE9NIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoJzxib2R5PicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAgICAgKlxuICAgICAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAgICAgKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gICAgICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkodHJ1ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gICAgICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICAgICAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gICAgICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gICAgICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogb2JqZWN0ID09PSBvdGhlcjtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzRXF1YWxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCB1cCB0b1xuICAgICAqIHNpeCBhcmd1bWVudHM6IChvYmpWYWx1ZSwgb3RoVmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIG90aGVyLCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcob3RoVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddO1xuICAgICAqIHZhciBvdGhlciA9IFsnaGknLCAnZ29vZGJ5ZSddO1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsV2l0aChhcnJheSwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCB1bmRlZmluZWQsIGN1c3RvbWl6ZXIpIDogISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAgICAgKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IoRXJyb3IpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZXJyb3JUYWcgfHwgdGFnID09IGRvbUV4Y1RhZyB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBwcmltaXRpdmUgbnVtYmVyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNGaW5pdGVgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNGaW5pdGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiBuYXRpdmVJc0Zpbml0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gICAgICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gICAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgICAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3Qoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gICAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBgb2JqZWN0YCBhbmQgYHNvdXJjZWAgdG9cbiAgICAgKiBkZXRlcm1pbmUgaWYgYG9iamVjdGAgY29udGFpbnMgZXF1aXZhbGVudCBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5tYXRjaGVzYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc01hdGNoYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggZml2ZVxuICAgICAqIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwgaW5kZXh8a2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcoc3JjVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdncmVldGluZyc6ICdoZWxsbycgfTtcbiAgICAgKiB2YXIgc291cmNlID0geyAnZ3JlZXRpbmcnOiAnaGknIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAgICAgKiBnbG9iYWwgW2Bpc05hTmBdKGh0dHBzOi8vbWRuLmlvL2lzTmFOKSB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBgdW5kZWZpbmVkYCBhbmQgb3RoZXIgbm9uLW51bWJlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4oTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgICAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGB0b1N0cmluZ1RhZ2AgY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZVxuICAgICAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcmlzdGluZSBuYXRpdmUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgY2FuJ3QgcmVsaWFibHkgZGV0ZWN0IG5hdGl2ZSBmdW5jdGlvbnMgaW4gdGhlIHByZXNlbmNlXG4gICAgICogb2YgdGhlIGNvcmUtanMgcGFja2FnZSBiZWNhdXNlIGNvcmUtanMgY2lyY3VtdmVudHMgdGhpcyBraW5kIG9mIGRldGVjdGlvbi5cbiAgICAgKiBEZXNwaXRlIG11bHRpcGxlIHJlcXVlc3RzLCB0aGUgY29yZS1qcyBtYWludGFpbmVyIGhhcyBtYWRlIGl0IGNsZWFyOiBhbnlcbiAgICAgKiBhdHRlbXB0IHRvIGZpeCB0aGUgZGV0ZWN0aW9uIHdpbGwgYmUgb2JzdHJ1Y3RlZC4gQXMgYSByZXN1bHQsIHdlJ3JlIGxlZnRcbiAgICAgKiB3aXRoIGxpdHRsZSBjaG9pY2UgYnV0IHRvIHRocm93IGFuIGVycm9yLiBVbmZvcnR1bmF0ZWx5LCB0aGlzIGFsc28gYWZmZWN0c1xuICAgICAqIHBhY2thZ2VzLCBsaWtlIFtiYWJlbC1wb2x5ZmlsbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmFiZWwtcG9seWZpbGwpLFxuICAgICAqIHdoaWNoIHJlbHkgb24gY29yZS1qcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShfKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoaXNNYXNrYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKENPUkVfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh2b2lkIDApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBudWxsaXNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICAgICAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuOC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICAgICAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gICAgICogZG91YmxlIHByZWNpc2lvbiBudW1iZXIgd2hpY2ggaXNuJ3QgdGhlIHJlc3VsdCBvZiBhIHJvdW5kZWQgdW5zYWZlIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc1NhZmVJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzU2FmZUludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gd2Vha01hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHdlYWtTZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0KDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHQgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VMdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDw9IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0FycmF5KHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KDEpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHN0cmluZ1RvQXJyYXkodmFsdWUpIDogY29weUFycmF5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheSh2YWx1ZVtzeW1JdGVyYXRvcl0oKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICBmdW5jID0gdGFnID09IG1hcFRhZyA/IG1hcFRvQXJyYXkgOiAodGFnID09IHNldFRhZyA/IHNldFRvQXJyYXkgOiB2YWx1ZXMpO1xuXG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMi4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAgICAgKiBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDQyOTQ5NjcyOTVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b051bWJlcigzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IEluZmluaXR5XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IGJhc2VUcmltKHZhbHVlKTtcbiAgICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICAgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAgICAgKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHNhZmUgaW50ZWdlci4gQSBzYWZlIGludGVnZXIgY2FuIGJlIGNvbXBhcmVkIGFuZFxuICAgICAqIHJlcHJlc2VudGVkIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gOTAwNzE5OTI1NDc0MDk5MVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAgICAgKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKG51bGwpO1xuICAgICAqIC8vID0+ICcnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKC0wKTtcbiAgICAgKiAvLyA9PiAnLTAnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BPYmplY3QuYXNzaWduYF0oaHR0cHM6Ly9tZG4uaW8vT2JqZWN0L2Fzc2lnbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBpZiAoaXNQcm90b3R5cGUoc291cmNlKSB8fCBpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBzb3VyY2UgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbkluKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMywgJ2QnOiA0IH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW4gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRXaXRoXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gYHBhdGhzYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXy5hdChvYmplY3QsIFsnYVswXS5iLmMnLCAnYVsxXSddKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgYXQgPSBmbGF0UmVzdChiYXNlQXQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBgcHJvdG90eXBlYCBvYmplY3QuIElmIGFcbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0IGlzIGdpdmVuLCBpdHMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXNcbiAgICAgKiBhcmUgYXNzaWduZWQgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwge1xuICAgICAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA9PSBudWxsID8gcmVzdWx0IDogYmFzZUFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2VcbiAgICAgKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAgICAgKiByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogT25jZSBhIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCB2YWx1ZXMgb2YgdGhlIHNhbWUgcHJvcGVydHkgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gICAgICB2YXIgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXNJbihzb3VyY2UpO1xuICAgICAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgICAgICB2YXIgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsrcHJvcHNJbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICAgICAqIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0c0RlZXAoeyAnYSc6IHsgJ2InOiAyIH0gfSwgeyAnYSc6IHsgJ2InOiAxLCAnYyc6IDMgfSB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IDIsICdjJzogMyB9IH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHNEZWVwID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgYXJncy5wdXNoKHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSk7XG4gICAgICByZXR1cm4gYXBwbHkobWVyZ2VXaXRoLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiByZXR1cm5zICdwZWJibGVzJyBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93blJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW5cbiAgICAgKiBvYmplY3QgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3Iob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2MnLCAnYicsIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvckluYCBsb2dzICdhJywgJ2InLCB0aGVuICdjJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3JSaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmRcbiAgICAgKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gICAgICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yT3duYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdiJyB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JPd25gIGxvZ3MgJ2EnIHRoZW4gJ2InLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93blJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAqIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc0luXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9ucyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGFuZCBpbmhlcml0ZWRcbiAgICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9uc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9uc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gICAgICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICogSWYgYG9iamVjdGAgY29udGFpbnMgZHVwbGljYXRlIHZhbHVlcywgc3Vic2VxdWVudCB2YWx1ZXMgb3ZlcndyaXRlXG4gICAgICogcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnQob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogJ2MnLCAnMic6ICdiJyB9XG4gICAgICovXG4gICAgdmFyIGludmVydCA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludmVydGAgZXhjZXB0IHRoYXQgdGhlIGludmVydGVkIG9iamVjdCBpcyBnZW5lcmF0ZWRcbiAgICAgKiBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogY29ycmVzcG9uZGluZyBpbnZlcnRlZCB2YWx1ZSBvZiBlYWNoIGludmVydGVkIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzXG4gICAgICogcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGludmVydGVkIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAnZ3JvdXAnICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZ3JvdXAxJzogWydhJywgJ2MnXSwgJ2dyb3VwMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0QnkgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXS5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbdmFsdWVdID0gW2tleV07XG4gICAgICB9XG4gICAgfSwgZ2V0SXRlcmF0ZWUpO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IFsxLCAyLCAzLCA0XSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmludm9rZShvYmplY3QsICdhWzBdLmIuYy5zbGljZScsIDEsIDMpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIHZhciBpbnZva2UgPSBiYXNlUmVzdChiYXNlSW52b2tlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICAgKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5cyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLmtleXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1hcFZhbHVlc2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICogc2FtZSB2YWx1ZXMgYXMgYG9iamVjdGAgYW5kIGtleXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZVxuICAgICAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcFZhbHVlc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAgICAgKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBLZXlzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICAgICAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICAgICAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gICAgICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gICAgICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVyZ2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBtZXJnZWQgdmFsdWVzIG9mIHRoZSBkZXN0aW5hdGlvbiBhbmQgc291cmNlXG4gICAgICogcHJvcGVydGllcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIG1lcmdpbmcgaXMgaGFuZGxlZCBieSB0aGVcbiAgICAgKiBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggc2l4IGFyZ3VtZW50czpcbiAgICAgKiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiBvYmpWYWx1ZS5jb25jYXQoc3JjVmFsdWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogWzFdLCAnYic6IFsyXSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiBbM10sICdiJzogWzRdIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlV2l0aChvYmplY3QsIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogWzEsIDNdLCAnYic6IFsyLCA0XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgcGF0aHMgb2YgYG9iamVjdGAgdGhhdCBhcmUgbm90IG9taXR0ZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gb21pdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIHZhciBvbWl0ID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gICAgICBwYXRocyA9IGFycmF5TWFwKHBhdGhzLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfSk7XG4gICAgICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJlc3VsdCA9IGJhc2VDbG9uZShyZXN1bHQsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tCeWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mXG4gICAgICogdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYG9iamVjdGAgdGhhdFxuICAgICAqIGBwcmVkaWNhdGVgIGRvZXNuJ3QgcmV0dXJuIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3b1xuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXRCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9taXRCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHBpY2tCeShvYmplY3QsIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBgb2JqZWN0YCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBgb2JqZWN0YCBwcm9wZXJ0aWVzIGBwcmVkaWNhdGVgIHJldHVybnNcbiAgICAgKiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGlja0J5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0gYXJyYXlNYXAoZ2V0QWxsS2V5c0luKG9iamVjdCksIGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICAgIH0pO1xuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlKTtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5nZXRgIGV4Y2VwdCB0aGF0IGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhXG4gICAgICogZnVuY3Rpb24gaXQncyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGl0cyBwYXJlbnQgb2JqZWN0IGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYzEnOiAzLCAnYzInOiBfLmNvbnN0YW50KDQpIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMScpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMicpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCBfLmNvbnN0YW50KCdkZWZhdWx0JykpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGxvb3AgaXMgZW50ZXJlZCB3aGVuIHBhdGggaXMgZW1wdHkuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICBvYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFt0b0tleShwYXRoW2luZGV4XSldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IGlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYCBkb2Vzbid0IGV4aXN0LFxuICAgICAqIGl0J3MgY3JlYXRlZC4gQXJyYXlzIGFyZSBjcmVhdGVkIGZvciBtaXNzaW5nIGluZGV4IHByb3BlcnRpZXMgd2hpbGUgb2JqZWN0c1xuICAgICAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gICAgICogYHBhdGhgIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCAnYVswXS5iLmMnLCA0KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnNldFdpdGgob2JqZWN0LCAnWzBdWzFdJywgJ2EnLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdpdGgob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGBcbiAgICAgKiB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXAgb3Igc2V0LCBpdHNcbiAgICAgKiBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlycyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzID0gY3JlYXRlVG9QYWlycyhrZXlzKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnNcbiAgICAgKiBmb3IgYG9iamVjdGAgd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwXG4gICAgICogb3Igc2V0LCBpdHMgZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc0luXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlyc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl0sIFsnYycsIDNdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzSW4gPSBjcmVhdGVUb1BhaXJzKGtleXNJbik7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICAgICAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAgICAgKiBwcm92aWRlZCwgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgYFtbUHJvdG90eXBlXV1gIHdpbGwgYmUgdXNlZC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICAgICAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgOV1cbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBpc0Fyckxpa2UgPSBpc0FyciB8fCBpc0J1ZmZlcihvYmplY3QpIHx8IGlzVHlwZWRBcnJheShvYmplY3QpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KTtcbiAgICAgIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvcGVydHkgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogNyB9IH1dIH07XG4gICAgICogXy51bnNldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udW5zZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdHJ1ZSA6IGJhc2VVbnNldChvYmplY3QsIHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBhY2NlcHRzIGB1cGRhdGVyYCB0byBwcm9kdWNlIHRoZVxuICAgICAqIHZhbHVlIHRvIHNldC4gVXNlIGBfLnVwZGF0ZVdpdGhgIHRvIGN1c3RvbWl6ZSBgcGF0aGAgY3JlYXRpb24uIFRoZSBgdXBkYXRlcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ2FbMF0uYi5jJywgZnVuY3Rpb24obikgeyByZXR1cm4gbiAqIG47IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gOVxuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAneFswXS55LnonLCBmdW5jdGlvbihuKSB7IHJldHVybiBuID8gbiArIDEgOiAwOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVwZGF0ZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlV2l0aChvYmplY3QsICdbMF1bMV0nLCBfLmNvbnN0YW50KCdhJyksIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV2l0aChvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlciksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKCdoaScpO1xuICAgICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5XG4gICAgICogdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDbGFtcHMgYG51bWJlcmAgd2l0aGluIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNsYW1wKC0xMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IC01XG4gICAgICpcbiAgICAgKiBfLmNsYW1wKDEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgICAgICB1cHBlciA9IHVwcGVyID09PSB1cHBlciA/IHVwcGVyIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gdG9OdW1iZXIobG93ZXIpO1xuICAgICAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlQ2xhbXAodG9OdW1iZXIobnVtYmVyKSwgbG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gSWZcbiAgICAgKiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICogSWYgYHN0YXJ0YCBpcyBncmVhdGVyIHRoYW4gYGVuZGAgdGhlIHBhcmFtcyBhcmUgc3dhcHBlZCB0byBzdXBwb3J0XG4gICAgICogbmVnYXRpdmUgcmFuZ2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLnJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCA4KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgyLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDEuMiwgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDUuMiwgNCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgtMywgLTIsIC02KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgfVxuICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgIHJldHVybiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICogSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXJcbiAgICAgKiBpcyByZXR1cm5lZC4gSWYgYGZsb2F0aW5nYCBpcyBgdHJ1ZWAsIG9yIGVpdGhlciBgbG93ZXJgIG9yIGB1cHBlcmAgYXJlXG4gICAgICogZmxvYXRzLCBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyPTBdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3VwcGVyPTFdIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZ10gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMCwgNSk7XG4gICAgICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUpO1xuICAgICAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUsIHRydWUpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMS4yLCA1LjIpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5kb20obG93ZXIsIHVwcGVyLCBmbG9hdGluZykge1xuICAgICAgaWYgKGZsb2F0aW5nICYmIHR5cGVvZiBmbG9hdGluZyAhPSAnYm9vbGVhbicgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsIHVwcGVyLCBmbG9hdGluZykpIHtcbiAgICAgICAgdXBwZXIgPSBmbG9hdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBwZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSB1cHBlcjtcbiAgICAgICAgICB1cHBlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG93ZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQgJiYgdXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIHVwcGVyID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsb3dlciA9IHRvRmluaXRlKGxvd2VyKTtcbiAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cHBlciA9IHRvRmluaXRlKHVwcGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID4gdXBwZXIpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1cHBlcjtcbiAgICAgICAgdXBwZXIgPSB0ZW1wO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nIHx8IGxvd2VyICUgMSB8fCB1cHBlciAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIChyYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArICcnKS5sZW5ndGggLSAxKSkpKSwgdXBwZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICovXG4gICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UgYW5kIHRoZSByZW1haW5pbmdcbiAgICAgKiB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgICAgcmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAgICAgKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAgICAgKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gICAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICAgICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICAgICAqIC8vID0+ICdkZWphIHZ1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBlbmRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGVuZ3RoXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBlbmQgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIGVuZCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICAgICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAgICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICAgICAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAgICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAgICAgKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICAgICAqIFhTUyB2ZWN0b3JzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIHRoZSBgUmVnRXhwYCBzcGVjaWFsIGNoYXJhY3RlcnMgXCJeXCIsIFwiJFwiLCBcIlxcXCIsIFwiLlwiLCBcIipcIiwgXCIrXCIsXG4gICAgICogXCI/XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIGFuZCBcInxcIiBpbiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICAgICAqIC8vID0+ICdcXFtsb2Rhc2hcXF1cXChodHRwczovL2xvZGFzaFxcLmNvbS9cXCknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzUmVnRXhwQ2hhci50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBba2ViYWIgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3BlY2lhbF9jYXNlX3N0eWxlcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKi9cbiAgICB2YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGcmVkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnZlJFRCdcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9Mb3dlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLlxuICAgICAqIFBhZGRpbmcgY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgY2FuJ3QgYmUgZXZlbmx5IGRpdmlkZWQgYnkgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgpO1xuICAgICAqIC8vID0+ICcgIGFiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1hYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc3RyTGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG1pZCA9IChsZW5ndGggLSBzdHJMZW5ndGgpIC8gMjtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlRmxvb3IobWlkKSwgY2hhcnMpICtcbiAgICAgICAgc3RyaW5nICtcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVDZWlsKG1pZCksIGNoYXJzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSByaWdodCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRFbmQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChzdHJpbmcgKyBjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJyAgIGFiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdfLV9hYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSArIHN0cmluZylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIHJhZGl4LiBJZiBgcmFkaXhgIGlzXG4gICAgICogYHVuZGVmaW5lZGAgb3IgYDBgLCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyBgdmFsdWVgIGlzIGFcbiAgICAgKiBoZXhhZGVjaW1hbCwgaW4gd2hpY2ggY2FzZSBhIGByYWRpeGAgb2YgYDE2YCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFsaWducyB3aXRoIHRoZVxuICAgICAqIFtFUzUgaW1wbGVtZW50YXRpb25dKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4yKSBvZiBgcGFyc2VJbnRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXg9MTBdIFRoZSByYWRpeCB0byBpbnRlcnByZXQgYHZhbHVlYCBieS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnNlSW50KCcwOCcpO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICcwOCcsICcxMCddLCBfLnBhcnNlSW50KTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCB8fCByYWRpeCA9PSBudWxsKSB7XG4gICAgICAgIHJhZGl4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocmFkaXgpIHtcbiAgICAgICAgcmFkaXggPSArcmFkaXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQodG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyksIHJhZGl4IHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGVhdHMgdGhlIGdpdmVuIHN0cmluZyBgbmAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnKicsIDMpO1xuICAgICAqIC8vID0+ICcqKionXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMik7XG4gICAgICogLy8gPT4gJ2FiY2FiYydcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAwKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmVwZWF0KHRvU3RyaW5nKHN0cmluZyksIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG1hdGNoZXMgZm9yIGBwYXR0ZXJuYCBpbiBgc3RyaW5nYCB3aXRoIGByZXBsYWNlbWVudGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNyZXBsYWNlYF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3JlcGxhY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gcmVwbGFjZW1lbnQgVGhlIG1hdGNoIHJlcGxhY2VtZW50LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBsYWNlKCdIaSBGcmVkJywgJ0ZyZWQnLCAnQmFybmV5Jyk7XG4gICAgICogLy8gPT4gJ0hpIEJhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoYXJnc1swXSk7XG5cbiAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA8IDMgPyBzdHJpbmcgOiBzdHJpbmcucmVwbGFjZShhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqL1xuICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNzcGxpdGBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9zcGxpdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHNwbGl0IGJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdIFRoZSBsZW5ndGggdG8gdHJ1bmNhdGUgcmVzdWx0cyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zcGxpdCgnYS1iLWMnLCAnLScsIDIpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcGxpdChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCAmJiB0eXBlb2YgbGltaXQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBsaW1pdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGxpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9BUlJBWV9MRU5HVEggOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmICghbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKFxuICAgICAgICAgICAgdHlwZW9mIHNlcGFyYXRvciA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgKHNlcGFyYXRvciAhPSBudWxsICYmICFpc1JlZ0V4cChzZXBhcmF0b3IpKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gYmFzZVRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgICAgIGlmICghc2VwYXJhdG9yICYmIGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShzdHJpbmcpLCAwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0YXJ0IGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgdXBwZXJGaXJzdCh3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj0wXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09IG51bGxcbiAgICAgICAgPyAwXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIHN0cmluZy5sZW5ndGgpO1xuXG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAgICAgKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICAgICAqIFwiZXNjYXBlXCIgZGVsaW1pdGVycywgYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdCBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy4gRGF0YVxuICAgICAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gICAgICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICAgKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAgICAgKiBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gICAgICogW2xvZGFzaCdzIGN1c3RvbSBidWlsZHMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHMpLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gICAgICogW0Nocm9tZSdzIGV4dGVuc2lvbnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHRlbXBsYXRlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gICAgICogIFRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gICAgICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzPV8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXVxuICAgICAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gICAgICogIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICAgICAqICBUaGUgc291cmNlVVJMIG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gICAgICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyIHRvIGVzY2FwZSBkYXRhIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIF8uZm9yRWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEVTIHRlbXBsYXRlIGxpdGVyYWwgZGVsaW1pdGVyIGFzIGFuIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0LlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnPCUtIHZhbHVlICU+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICAgICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICAgICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqIC8vICAgcmV0dXJuIF9fcDtcbiAgICAgKiAvLyB9XG4gICAgICpcbiAgICAgKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gICAgICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnanN0LmpzJyksICdcXFxuICAgICAqICAgdmFyIEpTVCA9IHtcXFxuICAgICAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICAgICAqICAgfTtcXFxuICAgICAqICcpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRlbXBsYXRlKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpIHtcbiAgICAgIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QpLlxuICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICAgICAgdmFyIGltcG9ydHMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cywgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICAgICAgdmFyIGlzRXNjYXBpbmcsXG4gICAgICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cChcbiAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgICAgICwgJ2cnKTtcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgLy8gVGhlIHNvdXJjZVVSTCBnZXRzIGluamVjdGVkIGludG8gdGhlIHNvdXJjZSB0aGF0J3MgZXZhbC1lZCwgc28gYmUgY2FyZWZ1bFxuICAgICAgLy8gdG8gbm9ybWFsaXplIGFsbCBraW5kcyBvZiB3aGl0ZXNwYWNlLCBzbyBlLmcuIG5ld2xpbmVzIChhbmQgdW5pY29kZSB2ZXJzaW9ucyBvZiBpdCkgY2FuJ3Qgc25lYWsgaW5cbiAgICAgIC8vIGFuZCBlc2NhcGUgdGhlIGNvbW1lbnQsIHRodXMgaW5qZWN0aW5nIGNvZGUgdGhhdCBnZXRzIGV2YWxlZC5cbiAgICAgIHZhciBzb3VyY2VVUkwgPSAnLy8jIHNvdXJjZVVSTD0nICtcbiAgICAgICAgKGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3NvdXJjZVVSTCcpXG4gICAgICAgICAgPyAob3B0aW9ucy5zb3VyY2VVUkwgKyAnJykucmVwbGFjZSgvXFxzL2csICcgJylcbiAgICAgICAgICA6ICgnbG9kYXNoLnRlbXBsYXRlU291cmNlc1snICsgKCsrdGVtcGxhdGVDb3VudGVyKSArICddJylcbiAgICAgICAgKSArICdcXG4nO1xuXG4gICAgICBzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW4ndCBiZSBpbmNsdWRlZCBpbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICAgIHNvdXJjZSArPSBzdHJpbmcuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShyZVVuZXNjYXBlZFN0cmluZywgZXNjYXBlU3RyaW5nQ2hhcik7XG5cbiAgICAgICAgLy8gUmVwbGFjZSBkZWxpbWl0ZXJzIHdpdGggc25pcHBldHMuXG4gICAgICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICAgIC8vIFRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgbmVlZHMgYG1hdGNoYCByZXR1cm5lZCBpblxuICAgICAgICAvLyBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcblxuICAgICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgICAgLy8gSWYgYHZhcmlhYmxlYCBpcyBub3Qgc3BlY2lmaWVkIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAgICAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluLlxuICAgICAgdmFyIHZhcmlhYmxlID0gaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAndmFyaWFibGUnKSAmJiBvcHRpb25zLnZhcmlhYmxlO1xuICAgICAgaWYgKCF2YXJpYWJsZSkge1xuICAgICAgICBzb3VyY2UgPSAnd2l0aCAob2JqKSB7XFxuJyArIHNvdXJjZSArICdcXG59XFxuJztcbiAgICAgIH1cbiAgICAgIC8vIFRocm93IGFuIGVycm9yIGlmIGEgZm9yYmlkZGVuIGNoYXJhY3RlciB3YXMgZm91bmQgaW4gYHZhcmlhYmxlYCwgdG8gcHJldmVudFxuICAgICAgLy8gcG90ZW50aWFsIGNvbW1hbmQgaW5qZWN0aW9uIGF0dGFja3MuXG4gICAgICBlbHNlIGlmIChyZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycy50ZXN0KHZhcmlhYmxlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9URU1QTF9WQVJfRVJST1JfVEVYVCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFudXAgY29kZSBieSBzdHJpcHBpbmcgZW1wdHkgc3RyaW5ncy5cbiAgICAgIHNvdXJjZSA9IChpc0V2YWx1YXRpbmcgPyBzb3VyY2UucmVwbGFjZShyZUVtcHR5U3RyaW5nTGVhZGluZywgJycpIDogc291cmNlKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nTWlkZGxlLCAnJDEnKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nVHJhaWxpbmcsICckMTsnKTtcblxuICAgICAgLy8gRnJhbWUgY29kZSBhcyB0aGUgZnVuY3Rpb24gYm9keS5cbiAgICAgIHNvdXJjZSA9ICdmdW5jdGlvbignICsgKHZhcmlhYmxlIHx8ICdvYmonKSArICcpIHtcXG4nICtcbiAgICAgICAgKHZhcmlhYmxlXG4gICAgICAgICAgPyAnJ1xuICAgICAgICAgIDogJ29iaiB8fCAob2JqID0ge30pO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIFwidmFyIF9fdCwgX19wID0gJydcIiArXG4gICAgICAgIChpc0VzY2FwaW5nXG4gICAgICAgICAgID8gJywgX19lID0gXy5lc2NhcGUnXG4gICAgICAgICAgIDogJydcbiAgICAgICAgKSArXG4gICAgICAgIChpc0V2YWx1YXRpbmdcbiAgICAgICAgICA/ICcsIF9faiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xcbicgK1xuICAgICAgICAgICAgXCJmdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cXG5cIlxuICAgICAgICAgIDogJztcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBzb3VyY2UgK1xuICAgICAgICAncmV0dXJuIF9fcFxcbn0nO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYXR0ZW1wdChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uKGltcG9ydHNLZXlzLCBzb3VyY2VVUkwgKyAncmV0dXJuICcgKyBzb3VyY2UpXG4gICAgICAgICAgLmFwcGx5KHVuZGVmaW5lZCwgaW1wb3J0c1ZhbHVlcyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24ncyBzb3VyY2UgYnkgaXRzIGB0b1N0cmluZ2AgbWV0aG9kIG9yXG4gICAgICAvLyB0aGUgYHNvdXJjZWAgcHJvcGVydHkgYXMgYSBjb252ZW5pZW5jZSBmb3IgaW5saW5pbmcgY29tcGlsZWQgdGVtcGxhdGVzLlxuICAgICAgcmVzdWx0LnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIGlmIChpc0Vycm9yKHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gbG93ZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvTG93ZXJDYXNlXShodHRwczovL21kbi5pby90b0xvd2VyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1mb28tYmFyLS0nXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29iYXInXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ19fZm9vX2Jhcl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTG93ZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gdXBwZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvVXBwZXJDYXNlXShodHRwczovL21kbi5pby90b1VwcGVyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1GT08tQkFSLS0nXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGT09CQVInXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ19fRk9PX0JBUl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvVXBwZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9VcHBlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy5tYXAoWycgIGZvbyAgJywgJyAgYmFyICAnXSwgXy50cmltKTtcbiAgICAgKiAvLyA9PiBbJ2ZvbycsICdiYXInXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW0oc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gYmFzZVRyaW0oc3RyaW5nKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRW5kKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMtXy0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/IHRvSW50ZWdlcihvcHRpb25zLmxlbmd0aCkgOiBsZW5ndGg7XG4gICAgICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBlbmQgPSBsZW5ndGggLSBzdHJpbmdTaXplKG9taXNzaW9uKTtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJylcbiAgICAgICAgOiBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgIGVuZCArPSAocmVzdWx0Lmxlbmd0aCAtIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdWJzdHJpbmcpKSkge1xuICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09PSB1bmRlZmluZWQgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpLCBlbmQpICE9IGVuZCkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYDsgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIEhUTUwgZW50aXRpZXMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNi4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBtZXRob2ROYW1lcyBUaGUgb2JqZWN0IG1ldGhvZCBuYW1lcyB0byBiaW5kLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ2NsaWNrJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdjbGlja2VkICcgKyB0aGlzLmxhYmVsKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcsIFsnY2xpY2snXSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHZpZXcuY2xpY2spO1xuICAgICAqIC8vID0+IExvZ3MgJ2NsaWNrZWQgZG9jcycgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBtZXRob2ROYW1lcykge1xuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAga2V5ID0gdG9LZXkoa2V5KTtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBiaW5kKG9iamVjdFtrZXldLCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIG92ZXIgYHBhaXJzYCBhbmQgaW52b2tlcyB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAqIGZ1bmN0aW9uIG9mIHRoZSBmaXJzdCBwcmVkaWNhdGUgdG8gcmV0dXJuIHRydXRoeS4gVGhlIHByZWRpY2F0ZS1mdW5jdGlvblxuICAgICAqIHBhaXJzIGFyZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIHByZWRpY2F0ZS1mdW5jdGlvbiBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5jb25kKFtcbiAgICAgKiAgIFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksICAgICAgICAgICBfLmNvbnN0YW50KCdtYXRjaGVzIEEnKV0sXG4gICAgICogICBbXy5jb25mb3Jtcyh7ICdiJzogXy5pc051bWJlciB9KSwgXy5jb25zdGFudCgnbWF0Y2hlcyBCJyldLFxuICAgICAqICAgW18uc3R1YlRydWUsICAgICAgICAgICAgICAgICAgICAgIF8uY29uc3RhbnQoJ25vIG1hdGNoJyldXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQSdcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDAsICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBCJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogJzEnLCAnYic6ICcyJyB9KTtcbiAgICAgKiAvLyA9PiAnbm8gbWF0Y2gnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZChwYWlycykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHRvSXRlcmF0ZWUgPSBnZXRJdGVyYXRlZSgpO1xuXG4gICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFpclsxXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdG9JdGVyYXRlZShwYWlyWzBdKSwgcGFpclsxXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGFwcGx5KHBhaXJbMF0sIHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBwcmVkaWNhdGUgcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCByZXR1cm5pbmcgYHRydWVgIGlmXG4gICAgICogYWxsIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNUb2Agd2l0aFxuICAgICAqIGBzb3VyY2VgIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDIsICdiJzogMSB9LFxuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8uY29uZm9ybXMoeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGB2YWx1ZWAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZCBpblxuICAgICAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93UmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KFtfLmFkZCwgc3F1YXJlXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoW3NxdWFyZSwgXy5hZGRdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgZXF1aXZhbGVudFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoWyd1c2VyJywgJ2ZyZWQnXSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAgICAgKiAgIHJldHVybiAhXy5pc1JlZ0V4cChmdW5jKSA/IGl0ZXJhdGVlKGZ1bmMpIDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gICAgICogLy8gPT4gWydkZWYnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW5cbiAgICAgKiBvYmplY3QgYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmlzTWF0Y2hgIHdpdGggYHNvdXJjZWBcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5tYXRjaGVzKHsgJ2EnOiA0LCAnYyc6IDYgfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgXy5tYXRjaGVzKHsgJ2EnOiA0IH0pXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdGhlXG4gICAgICogdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0IHRvIGBzcmNWYWx1ZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlXG4gICAgICogb2JqZWN0IHZhbHVlIGlzIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdFxuICAgICAqIGBzcmNWYWx1ZWAgdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWVcbiAgICAgKiBgXy5pc0VxdWFsYCBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKG9iamVjdHMsIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCkpO1xuICAgICAqIC8vID0+IHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICpcbiAgICAgKiAvLyBDaGVja2luZyBmb3Igc2V2ZXJhbCBwb3NzaWJsZSB2YWx1ZXNcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm92ZXJTb21lKFtfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDEpLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBiYXNlQ2xvbmUoc3JjVmFsdWUsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgyKSB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMSkgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZChbJ2EnLCAnYiddKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWV0aG9kYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIHRoZSBtZXRob2QgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IF8udGltZXMoMywgXy5jb25zdGFudCksXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kT2YgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbGwgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIGZ1bmN0aW9uIHByb3BlcnRpZXMgb2YgYSBzb3VyY2VcbiAgICAgKiBvYmplY3QgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4gSWYgYG9iamVjdGAgaXMgYSBmdW5jdGlvbiwgdGhlbiBtZXRob2RzXG4gICAgICogYXJlIGFkZGVkIHRvIGl0cyBwcm90b3R5cGUgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVc2UgYF8ucnVuSW5Db250ZXh0YCB0byBjcmVhdGUgYSBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB0b1xuICAgICAqIGF2b2lkIGNvbmZsaWN0cyBjYXVzZWQgYnkgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IFtvYmplY3Q9bG9kYXNoXSBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hhaW49dHJ1ZV0gU3BlY2lmeSB3aGV0aGVyIG1peGlucyBhcmUgY2hhaW5hYmxlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHZvd2VscyhzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBfLmZpbHRlcihzdHJpbmcsIGZ1bmN0aW9uKHYpIHtcbiAgICAgKiAgICAgcmV0dXJuIC9bYWVpb3VdL2kudGVzdCh2KTtcbiAgICAgKiAgIH0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0pO1xuICAgICAqIF8udm93ZWxzKCdmcmVkJyk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9LCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1peGluKG9iamVjdCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSksXG4gICAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwgcHJvcHMpO1xuXG4gICAgICBpZiAob3B0aW9ucyA9PSBudWxsICYmXG4gICAgICAgICAgIShpc09iamVjdChzb3VyY2UpICYmIChtZXRob2ROYW1lcy5sZW5ndGggfHwgIXByb3BzLmxlbmd0aCkpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBzb3VyY2U7XG4gICAgICAgIHNvdXJjZSA9IG9iamVjdDtcbiAgICAgICAgb2JqZWN0ID0gdGhpcztcbiAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGFpbiA9ICEoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NoYWluJyBpbiBvcHRpb25zKSB8fCAhIW9wdGlvbnMuY2hhaW4sXG4gICAgICAgICAgaXNGdW5jID0gaXNGdW5jdGlvbihvYmplY3QpO1xuXG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBzb3VyY2VbbWV0aG9kTmFtZV07XG4gICAgICAgIG9iamVjdFttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICBvYmplY3QucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXztcbiAgICAgICAgICAgIGlmIChjaGFpbiB8fCBjaGFpbkFsbCkge1xuICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0KHRoaXMuX193cmFwcGVkX18pLFxuICAgICAgICAgICAgICAgICAgYWN0aW9ucyA9IHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcblxuICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goeyAnZnVuYyc6IGZ1bmMsICdhcmdzJzogYXJndW1lbnRzLCAndGhpc0FyZyc6IG9iamVjdCB9KTtcbiAgICAgICAgICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IGNoYWluQWxsO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqZWN0LCBhcnJheVB1c2goW3RoaXMudmFsdWUoKV0sIGFyZ3VtZW50cykpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVydHMgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG9cbiAgICAgKiB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBsb2Rhc2ggPSBfLm5vQ29uZmxpY3QoKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub0NvbmZsaWN0KCkge1xuICAgICAgaWYgKHJvb3QuXyA9PT0gdGhpcykge1xuICAgICAgICByb290Ll8gPSBvbGREYXNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgYXJndW1lbnQgYXQgaW5kZXggYG5gLiBJZiBgbmAgaXMgbmVnYXRpdmUsXG4gICAgICogdGhlIG50aCBhcmd1bWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGFyZ3VtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXNzLXRocnUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoMSk7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygtMik7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aEFyZyhuKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VOdGgoYXJncywgbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBpdGVyYXRlZXNgIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlc1xuICAgICAqIGFuZCByZXR1cm5zIHRoZWlyIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyKFtNYXRoLm1heCwgTWF0aC5taW5dKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoMSwgMiwgMywgNCk7XG4gICAgICogLy8gPT4gWzQsIDFdXG4gICAgICovXG4gICAgdmFyIG92ZXIgPSBjcmVhdGVPdmVyKGFycmF5TWFwKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFsbCoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBGb2xsb3dpbmcgc2hvcnRoYW5kcyBhcmUgcG9zc2libGUgZm9yIHByb3ZpZGluZyBwcmVkaWNhdGVzLlxuICAgICAqIFBhc3MgYW4gYE9iamVjdGAgYW5kIGl0IHdpbGwgYmUgdXNlZCBhcyBhbiBwYXJhbWV0ZXIgZm9yIGBfLm1hdGNoZXNgIHRvIGNyZWF0ZSB0aGUgcHJlZGljYXRlLlxuICAgICAqIFBhc3MgYW4gYEFycmF5YCBvZiBwYXJhbWV0ZXJzIGZvciBgXy5tYXRjaGVzUHJvcGVydHlgIGFuZCB0aGUgcHJlZGljYXRlIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGVtLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJFdmVyeShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlckV2ZXJ5ID0gY3JlYXRlT3ZlcihhcnJheUV2ZXJ5KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFueSoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBGb2xsb3dpbmcgc2hvcnRoYW5kcyBhcmUgcG9zc2libGUgZm9yIHByb3ZpZGluZyBwcmVkaWNhdGVzLlxuICAgICAqIFBhc3MgYW4gYE9iamVjdGAgYW5kIGl0IHdpbGwgYmUgdXNlZCBhcyBhbiBwYXJhbWV0ZXIgZm9yIGBfLm1hdGNoZXNgIHRvIGNyZWF0ZSB0aGUgcHJlZGljYXRlLlxuICAgICAqIFBhc3MgYW4gYEFycmF5YCBvZiBwYXJhbWV0ZXJzIGZvciBgXy5tYXRjaGVzUHJvcGVydHlgIGFuZCB0aGUgcHJlZGljYXRlIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGVtLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJTb21lKFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgbWF0Y2hlc0Z1bmMgPSBfLm92ZXJTb21lKFt7ICdhJzogMSB9LCB7ICdhJzogMiB9XSlcbiAgICAgKiB2YXIgbWF0Y2hlc1Byb3BlcnR5RnVuYyA9IF8ub3ZlclNvbWUoW1snYScsIDFdLCBbJ2EnLCAyXV0pXG4gICAgICovXG4gICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAgICAgKiBgc3RhcnRgIGlzIHNwZWNpZmllZCB3aXRob3V0IGFuIGBlbmRgIG9yIGBzdGVwYC4gSWYgYGVuZGAgaXMgbm90IHNwZWNpZmllZCxcbiAgICAgKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKC00KTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yYW5nZWAgZXhjZXB0IHRoYXQgaXQgcG9wdWxhdGVzIHZhbHVlcyBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDQpO1xuICAgICAqIC8vID0+IFszLCAyLCAxLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KC00KTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA1KTtcbiAgICAgKiAvLyA9PiBbNCwgMywgMiwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzE1LCAxMCwgNSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlUmlnaHQgPSBjcmVhdGVSYW5nZSh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAgICAgKiAvLyA9PiBbW10sIFtdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgICAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uc3R1Yk9iamVjdCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbe30sIHt9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlN0cmluZyk7XG4gICAgICogLy8gPT4gWycnLCAnJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlRydWUpO1xuICAgICAqIC8vID0+IFt0cnVlLCB0cnVlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBlYWNoIGludm9jYXRpb24uIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJywgJzInXVxuICAgICAqXG4gICAgICogIF8udGltZXMoNCwgXy5jb25zdGFudCgwKSk7XG4gICAgICogLy8gPT4gWzAsIDAsIDAsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpO1xuICAgICAgbiAtPSBNQVhfQVJSQVlfTEVOR1RIO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgZ2l2ZW4sIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXg9JyddIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhdWdlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRvdGFsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFkZCg2LCA0KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIHZhciBhZGQgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gYXVnZW5kICsgYWRkZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB1cCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCB1cC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgdXAgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNC4wMDYpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2LjAwNCwgMik7XG4gICAgICogLy8gPT4gNi4wMVxuICAgICAqXG4gICAgICogXy5jZWlsKDYwNDAsIC0yKTtcbiAgICAgKiAvLyA9PiA2MTAwXG4gICAgICovXG4gICAgdmFyIGNlaWwgPSBjcmVhdGVSb3VuZCgnY2VpbCcpO1xuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aWRlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpc29yIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcXVvdGllbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGl2aWRlKDYsIDQpO1xuICAgICAqIC8vID0+IDEuNVxuICAgICAqL1xuICAgIHZhciBkaXZpZGUgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCBkb3duIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIGRvd24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCBkb3duIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgZG93biBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoMC4wNDYsIDIpO1xuICAgICAqIC8vID0+IDAuMDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQwMDBcbiAgICAgKi9cbiAgICB2YXIgZmxvb3IgPSBjcmVhdGVSb3VuZCgnZmxvb3InKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4QnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWVhbiBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tZWFuKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgaWRlbnRpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVhbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIGF2ZXJhZ2VkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIgVGhlIGZpcnN0IG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWNhbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwcm9kdWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm11bHRpcGx5KDYsIDQpO1xuICAgICAqIC8vID0+IDI0XG4gICAgICovXG4gICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgIHJldHVybiBtdWx0aXBsaWVyICogbXVsdGlwbGljYW5kO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbnVlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJ0cmFoZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdWJ0cmFjdCg2LCA0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICByZXR1cm4gbWludWVuZCAtIHN1YnRyYWhlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VtKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zdW1gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBzdW1tZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guYXNzaWduSW5XaXRoID0gYXNzaWduSW5XaXRoO1xuICAgIGxvZGFzaC5hc3NpZ25XaXRoID0gYXNzaWduV2l0aDtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYXN0QXJyYXkgPSBjYXN0QXJyYXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgbG9kYXNoLmNvbmQgPSBjb25kO1xuICAgIGxvZGFzaC5jb25mb3JtcyA9IGNvbmZvcm1zO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZUJ5ID0gZGlmZmVyZW5jZUJ5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgIGxvZGFzaC5kcm9wID0gZHJvcDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0ID0gZHJvcFJpZ2h0O1xuICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgIGxvZGFzaC5kcm9wV2hpbGUgPSBkcm9wV2hpbGU7XG4gICAgbG9kYXNoLmZpbGwgPSBmaWxsO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXRNYXAgPSBmbGF0TWFwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVlcCA9IGZsYXRNYXBEZWVwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgbG9kYXNoLmZsaXAgPSBmbGlwO1xuICAgIGxvZGFzaC5mbG93ID0gZmxvdztcbiAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5mcm9tUGFpcnMgPSBmcm9tUGFpcnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbkJ5ID0gaW50ZXJzZWN0aW9uQnk7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbldpdGggPSBpbnRlcnNlY3Rpb25XaXRoO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludmVydEJ5ID0gaW52ZXJ0Qnk7XG4gICAgbG9kYXNoLmludm9rZU1hcCA9IGludm9rZU1hcDtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICBsb2Rhc2gua2V5QnkgPSBrZXlCeTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBsb2Rhc2gubnRoQXJnID0gbnRoQXJnO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gub3JkZXJCeSA9IG9yZGVyQnk7XG4gICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgIGxvZGFzaC5vdmVyQXJncyA9IG92ZXJBcmdzO1xuICAgIGxvZGFzaC5vdmVyRXZlcnkgPSBvdmVyRXZlcnk7XG4gICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBpY2tCeSA9IHBpY2tCeTtcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICBsb2Rhc2gucHVsbEFsbEJ5ID0gcHVsbEFsbEJ5O1xuICAgIGxvZGFzaC5wdWxsQWxsV2l0aCA9IHB1bGxBbGxXaXRoO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJhbmdlUmlnaHQgPSByYW5nZVJpZ2h0O1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJldmVyc2UgPSByZXZlcnNlO1xuICAgIGxvZGFzaC5zYW1wbGVTaXplID0gc2FtcGxlU2l6ZTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zZXRXaXRoID0gc2V0V2l0aDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcSA9IHNvcnRlZFVuaXE7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICBsb2Rhc2guc3BsaXQgPSBzcGxpdDtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLnRvUGFpcnNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2gudG9QYXRoID0gdG9QYXRoO1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmFyeSA9IHVuYXJ5O1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlvbkJ5ID0gdW5pb25CeTtcbiAgICBsb2Rhc2gudW5pb25XaXRoID0gdW5pb25XaXRoO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW5pcUJ5ID0gdW5pcUJ5O1xuICAgIGxvZGFzaC51bmlxV2l0aCA9IHVuaXFXaXRoO1xuICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgIGxvZGFzaC51bnppcCA9IHVuemlwO1xuICAgIGxvZGFzaC51bnppcFdpdGggPSB1bnppcFdpdGg7XG4gICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICBsb2Rhc2gudXBkYXRlV2l0aCA9IHVwZGF0ZVdpdGg7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnhvckJ5ID0geG9yQnk7XG4gICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC5lbnRyaWVzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xhbXAgPSBjbGFtcDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jbG9uZURlZXBXaXRoID0gY2xvbmVEZWVwV2l0aDtcbiAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgIGxvZGFzaC5jb25mb3Jtc1RvID0gY29uZm9ybXNUbztcbiAgICBsb2Rhc2guZGVidXJyID0gZGVidXJyO1xuICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgbG9kYXNoLmRpdmlkZSA9IGRpdmlkZTtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICBsb2Rhc2guaGVhZCA9IGhlYWQ7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3Q7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICBsb2Rhc2guaXNFcnJvciA9IGlzRXJyb3I7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc0ludGVnZXIgPSBpc0ludGVnZXI7XG4gICAgbG9kYXNoLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG4gICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc01hdGNoV2l0aCA9IGlzTWF0Y2hXaXRoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc05pbCA9IGlzTmlsO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc1NldCA9IGlzU2V0O1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBsb2Rhc2guaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuICAgIGxvZGFzaC5qb2luID0gam9pbjtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgIGxvZGFzaC5sb3dlckZpcnN0ID0gbG93ZXJGaXJzdDtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1heEJ5ID0gbWF4Qnk7XG4gICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgIGxvZGFzaC5tZWFuQnkgPSBtZWFuQnk7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICBsb2Rhc2guc3R1YkFycmF5ID0gc3R1YkFycmF5O1xuICAgIGxvZGFzaC5zdHViRmFsc2UgPSBzdHViRmFsc2U7XG4gICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgIGxvZGFzaC5zdHViU3RyaW5nID0gc3R1YlN0cmluZztcbiAgICBsb2Rhc2guc3R1YlRydWUgPSBzdHViVHJ1ZTtcbiAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICBsb2Rhc2gubnRoID0gbnRoO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFkID0gcGFkO1xuICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgbG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtcbiAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgbG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgbG9kYXNoLnN1bSA9IHN1bTtcbiAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICBsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO1xuICAgIGxvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO1xuICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICBsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtcbiAgICBsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgbG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgbG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtcbiAgICBsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcbiAgICBsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO1xuICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5maXJzdCA9IGhlYWQ7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICBuID0gbiA9PT0gdW5kZWZpbmVkID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSAodGhpcy5fX2ZpbHRlcmVkX18gJiYgIWluZGV4KVxuICAgICAgICAgID8gbmV3IExhenlXcmFwcGVyKHRoaXMpXG4gICAgICAgICAgOiB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihuLCByZXN1bHQuX190YWtlQ291bnRfXyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICdzaXplJzogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAnaXRlcmF0ZWUnOiBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksXG4gICAgICAgICAgJ3R5cGUnOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5oZWFkYCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnaGVhZCcsICdsYXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdGFrZU5hbWUgPSAndGFrZScgKyAoaW5kZXggPyAnUmlnaHQnIDogJycpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaW5pdGlhbGAgYW5kIGBfLnRhaWxgLlxuICAgIGFycmF5RWFjaChbJ2luaXRpYWwnLCAndGFpbCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIGRyb3BOYW1lID0gJ2Ryb3AnICsgKGluZGV4ID8gJycgOiAnUmlnaHQnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyZWRfXyA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKSA6IHRoaXNbZHJvcE5hbWVdKDEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHByZWRpY2F0ZSkuaGVhZCgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSkucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgaXNUYWtlciA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV0sXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gaXNUYWtlciB8fCAvXmZpbmQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICAgIHJldHVybiAoaXNUYWtlciAmJiBjaGFpbkFsbCkgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVzZUxhenkgJiYgY2hlY2tJdGVyYXRlZSAmJiB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiBpdGVyYXRlZS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxhenkgdXNlIGlmIHRoZSBpdGVyYXRlZSBoYXMgYSBcImxlbmd0aFwiIHZhbHVlIG90aGVyIHRoYW4gYDFgLlxuICAgICAgICAgIGlzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzVW53cmFwcGVkID0gcmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxcbiAgICAgICAgICAgIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcblxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgICAgcmV0dXJuIGlzVW53cmFwcGVkID8gKGlzVGFrZXIgPyByZXN1bHQudmFsdWUoKVswXSA6IHJlc3VsdC52YWx1ZSgpKSA6IHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBhcnJheUVhY2goWydwb3AnLCAncHVzaCcsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlQcm90b1ttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OnBvcHxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBNYXAgbWluaWZpZWQgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IGxvZGFzaEZ1bmMubmFtZSArICcnO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCBrZXkpKSB7XG4gICAgICAgICAgcmVhbE5hbWVzW2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZWFsTmFtZXNba2V5XS5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkKHVuZGVmaW5lZCwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAnbmFtZSc6ICd3cmFwcGVyJyxcbiAgICAgICdmdW5jJzogdW5kZWZpbmVkXG4gICAgfV07XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGF6eVdyYXBwZXJgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbiBzZXF1ZW5jZSBtZXRob2RzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7XG5cbiAgICAvLyBBZGQgbGF6eSBhbGlhc2VzLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuZmlyc3QgPSBsb2Rhc2gucHJvdG90eXBlLmhlYWQ7XG5cbiAgICBpZiAoc3ltSXRlcmF0b3IpIHtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbc3ltSXRlcmF0b3JdID0gd3JhcHBlclRvSXRlcmF0b3I7XG4gICAgfVxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH0pO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEV4cG9ydCBsb2Rhc2guXG4gIHZhciBfID0gcnVuSW5Db250ZXh0KCk7XG5cbiAgLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2U6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBMb2Rhc2ggb24gdGhlIGdsb2JhbCBvYmplY3QgdG8gcHJldmVudCBlcnJvcnMgd2hlbiBMb2Rhc2ggaXNcbiAgICAvLyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTUQgbG9hZGVyLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2Vycm9ycy5odG1sI21pc21hdGNoIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy8gVXNlIGBfLm5vQ29uZmxpY3RgIHRvIHJlbW92ZSBMb2Rhc2ggZnJvbSB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuXG4gICAgLy8gRGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmVcbiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSBcInVuZGVyc2NvcmVcIiBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgaXQuXG4gIGVsc2UgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMuXG4gICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsIjx0ZW1wbGF0ZT5cclxuICAgIDx2YW4tcG9wb3ZlciB0cmlnZ2VyPVwiY2xpY2tcIiBwbGFjZW1lbnQ9XCJ0b3Atc3RhcnRcIiAgdi1tb2RlbD1cInNob3dNb3JlXCI+XHJcbiAgICAgICAgPGRpdiAgc3R5bGU9XCJwYWRkaW5nOiAxMHB4XCI+XHJcbiAgICAgICAgICAgIHt7dGlwfX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8dGVtcGxhdGUgI3JlZmVyZW5jZT5cclxuICAgICAgICAgICAgPGRpdiBAY2xpY2suc3RvcD1cInNob3dUb2FzdFwiIGNsYXNzPVwiZmxleC1taWRkbGUganNvbnZ1ZS1mdWxsLWhlaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgPHZhbi1pY29uIG5hbWU9XCJxdWVzdGlvblwiIGNvbG9yPVwiI0RDOUMyM1wiLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgIDwvdmFuLXBvcG92ZXI+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgaW1wb3J0IHsgUG9wb3ZlciAgfSBmcm9tICd2YW50J1xyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6IFwiRmllbGRUaXBcIixcclxuICAgICAgICBjb21wb25lbnRzOntcclxuICAgICAgICAgICAgUG9wb3ZlclxyXG4gICAgICAgIH0sXHJcbiAgICAgIHByb3BzOntcclxuICAgICAgICAvL+Wtl+auteaPkOekulxyXG4gICAgICAgIHRpcDp7XHJcbiAgICAgICAgICB0eXBlOlN0cmluZyxcclxuICAgICAgICAgIGRlZmF1bHQ6JydcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgICAgIGRhdGEoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzaG93TW9yZTpmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcmVhdGVkKCkge1xyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vdW50ZWQoKSB7XHJcblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgICBzaG93VG9hc3QoKXtcclxuICAgICAgICAgICAgICAgdGhpcy5zaG93TW9yZT10cnVlXHJcbiAgICAgICAgICAgICAgICBsZXQgX3NlbGY9dGhpc1xyXG4gICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgICAgICAgICAgICBfc2VsZi5zaG93TW9yZT1mYWxzZVxyXG4gICAgICAgICAgICAgICB9LDMwMDApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIHNjb3BlZCBsYW5nPVwic2Nzc1wiPlxyXG5cclxuPC9zdHlsZT5cclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQodGVtcGxhdGUsIHN0eWxlLCBzY3JpcHQsIHNjb3BlSWQsIGlzRnVuY3Rpb25hbFRlbXBsYXRlLCBtb2R1bGVJZGVudGlmaWVyXG4vKiBzZXJ2ZXIgb25seSAqL1xuLCBzaGFkb3dNb2RlLCBjcmVhdGVJbmplY3RvciwgY3JlYXRlSW5qZWN0b3JTU1IsIGNyZWF0ZUluamVjdG9yU2hhZG93KSB7XG4gIGlmICh0eXBlb2Ygc2hhZG93TW9kZSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgY3JlYXRlSW5qZWN0b3JTU1IgPSBjcmVhdGVJbmplY3RvcjtcbiAgICBjcmVhdGVJbmplY3RvciA9IHNoYWRvd01vZGU7XG4gICAgc2hhZG93TW9kZSA9IGZhbHNlO1xuICB9IC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3AuXG5cblxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHQgPT09ICdmdW5jdGlvbicgPyBzY3JpcHQub3B0aW9ucyA6IHNjcmlwdDsgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuXG4gIGlmICh0ZW1wbGF0ZSAmJiB0ZW1wbGF0ZS5yZW5kZXIpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IHRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWU7IC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcblxuICAgIGlmIChpc0Z1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZTtcbiAgICB9XG4gIH0gLy8gc2NvcGVkSWRcblxuXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWQ7XG4gIH1cblxuICB2YXIgaG9vaztcblxuICBpZiAobW9kdWxlSWRlbnRpZmllcikge1xuICAgIC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiBob29rKGNvbnRleHQpIHtcbiAgICAgIC8vIDIuMyBpbmplY3Rpb25cbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0IHx8IC8vIHN0YXRlZnVsXG4gICAgICB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQ7IC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fO1xuICAgICAgfSAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuXG5cbiAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICBzdHlsZS5jYWxsKHRoaXMsIGNyZWF0ZUluamVjdG9yU1NSKGNvbnRleHQpKTtcbiAgICAgIH0gLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcmVuY2VcblxuXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcik7XG4gICAgICB9XG4gICAgfTsgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuXG5cbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2s7XG4gIH0gZWxzZSBpZiAoc3R5bGUpIHtcbiAgICBob29rID0gc2hhZG93TW9kZSA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0eWxlLmNhbGwodGhpcywgY3JlYXRlSW5qZWN0b3JTaGFkb3codGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSk7XG4gICAgfSA6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICBzdHlsZS5jYWxsKHRoaXMsIGNyZWF0ZUluamVjdG9yKGNvbnRleHQpKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyO1xuXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbihoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMuYmVmb3JlQ3JlYXRlO1xuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaykgOiBbaG9va107XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNjcmlwdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBub3JtYWxpemVDb21wb25lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxpemUtY29tcG9uZW50LmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNPbGRJRSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9tc2llIFs2LTldXFxcXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtcbmZ1bmN0aW9uIGNyZWF0ZUluamVjdG9yKGNvbnRleHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpZCwgc3R5bGUpIHtcbiAgICByZXR1cm4gYWRkU3R5bGUoaWQsIHN0eWxlKTtcbiAgfTtcbn1cbnZhciBIRUFEID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xudmFyIHN0eWxlcyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRTdHlsZShpZCwgY3NzKSB7XG4gIHZhciBncm91cCA9IGlzT2xkSUUgPyBjc3MubWVkaWEgfHwgJ2RlZmF1bHQnIDogaWQ7XG4gIHZhciBzdHlsZSA9IHN0eWxlc1tncm91cF0gfHwgKHN0eWxlc1tncm91cF0gPSB7XG4gICAgaWRzOiBuZXcgU2V0KCksXG4gICAgc3R5bGVzOiBbXVxuICB9KTtcblxuICBpZiAoIXN0eWxlLmlkcy5oYXMoaWQpKSB7XG4gICAgc3R5bGUuaWRzLmFkZChpZCk7XG4gICAgdmFyIGNvZGUgPSBjc3Muc291cmNlO1xuXG4gICAgaWYgKGNzcy5tYXApIHtcbiAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9qYXZhc2NyaXB0LWRlYnVnZ2luZ1xuICAgICAgLy8gdGhpcyBtYWtlcyBzb3VyY2UgbWFwcyBpbnNpZGUgc3R5bGUgdGFncyB3b3JrIHByb3Blcmx5IGluIENocm9tZVxuICAgICAgY29kZSArPSAnXFxuLyojIHNvdXJjZVVSTD0nICsgY3NzLm1hcC5zb3VyY2VzWzBdICsgJyAqLyc7IC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cbiAgICAgIGNvZGUgKz0gJ1xcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJyArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzcy5tYXApKSkpICsgJyAqLyc7XG4gICAgfVxuXG4gICAgaWYgKCFzdHlsZS5lbGVtZW50KSB7XG4gICAgICBzdHlsZS5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgIHN0eWxlLmVsZW1lbnQudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgICBpZiAoY3NzLm1lZGlhKSBzdHlsZS5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBjc3MubWVkaWEpO1xuICAgICAgSEVBRC5hcHBlbmRDaGlsZChzdHlsZS5lbGVtZW50KTtcbiAgICB9XG5cbiAgICBpZiAoJ3N0eWxlU2hlZXQnIGluIHN0eWxlLmVsZW1lbnQpIHtcbiAgICAgIHN0eWxlLnN0eWxlcy5wdXNoKGNvZGUpO1xuICAgICAgc3R5bGUuZWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBzdHlsZS5zdHlsZXMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaW5kZXggPSBzdHlsZS5pZHMuc2l6ZSAtIDE7XG4gICAgICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjb2RlKTtcbiAgICAgIHZhciBub2RlcyA9IHN0eWxlLmVsZW1lbnQuY2hpbGROb2RlcztcbiAgICAgIGlmIChub2Rlc1tpbmRleF0pIHN0eWxlLmVsZW1lbnQucmVtb3ZlQ2hpbGQobm9kZXNbaW5kZXhdKTtcbiAgICAgIGlmIChub2Rlcy5sZW5ndGgpIHN0eWxlLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRleHROb2RlLCBub2Rlc1tpbmRleF0pO2Vsc2Ugc3R5bGUuZWxlbWVudC5hcHBlbmRDaGlsZCh0ZXh0Tm9kZSk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlSW5qZWN0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLmpzLm1hcFxuIiwiLy/mj5DnpLrlhaznlKjphY3nva5cclxuZXhwb3J0IGNvbnN0IGNvbW1vbkxhYmVsTWl4aW4gPSB7XHJcbiAgICBwcm9wczp7XHJcbiAgICAgICAgLy8g5o+Q56S6XHJcbiAgICAgICAgdGlwOntcclxuICAgICAgICAgICAgdHlwZTpTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6JydcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8v5o+Q56S65L+h5oGv5pi+56S655qE5L2N572uIOWPr+mAieWAvCByaWdodC9ib3R0b21cclxuICAgICAgICB0aXBMb2NhdGlvbjp7XHJcbiAgICAgICAgICAgIHR5cGU6U3RyaW5nLFxyXG4gICAgICAgICAgICBkZWZhdWx0OidyaWdodCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8v5paH5pys5piv5ZCm5Yqg57KXXHJcbiAgICAgICAgaXNCb2xkOntcclxuICAgICAgICAgICAgdHlwZTpCb29sZWFuLFxyXG4gICAgICAgICAgICBkZWZhdWx0OmZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgIH1cclxufVxyXG4iLCIgIDx0ZW1wbGF0ZT5cclxuICAgIDxWYWxpZGF0aW9uUHJvdmlkZXIgOm5hbWU9XCJuYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgOnJ1bGVzPVwidmFsaWRhdGVSdWxlc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYtc2xvdD1cIntlcnJvcnN9XCI+XHJcbiAgICAgICAgPEZpZWxkIDp2YWx1ZT1cImN1cnJlbnRUZXh0XCJcclxuICAgICAgICAgICAgICAgdi1iaW5kPVwiJGF0dHJzXCJcclxuICAgICAgICAgICAgICAgOmxhYmVsPVwibGFiZWxcIlxyXG4gICAgICAgICAgICAgICBAaW5wdXQ9XCJjaGFuZ2VUZXh0XCJcclxuICAgICAgICAgICAgICAgOmVycm9yLW1lc3NhZ2U9XCJlcnJvcnNbMF1cIlxyXG4gICAgICAgICAgICAgICA6Zm9ybWF0dGVyPVwiZm9ybWF0dGVyXCJcclxuICAgICAgICAgICAgICAgOmlucHV0LWFsaWduPVwiaW5wdXRBbGlnblwiXHJcbiAgICAgICAgICAgICAgIDptYXhsZW5ndGg9XCJtYXhsZW5ndGhcIlxyXG4gICAgICAgICAgICAgICA6Y2xhc3M9XCJbaXNFbmQgPyAnYm90LWJvcicgOiAnJywkYXR0cnMubGFiZWxBbGlnbiA9PT0gJ3RvcCcgPyAnanNvbnZ1ZS1mbGV4LWNvbHVtbicgOiAnJ11cIlxyXG4gICAgICAgICAgICAgICByZWY9XCJmaWVsZFwiXHJcbiAgICAgICAgICAgICAgIDp0eXBlPVwiZmllbGRUeXBlXCJcclxuICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgI2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmllbGQtY29tbW9uX19sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIDpjbGFzcz1cImlzQm9sZD8nZm9udC1ib2xkJzonJ1wiPnt7bGFiZWx9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8RmllbGRUaXAgdi1pZj1cInRpcCAmJiB0aXBMb2NhdGlvbiA9PT0gJ3JpZ2h0J1wiIGNsYXNzPVwiZmllbGQtY29tbW9uX19sYWJlbC10aXBcIiAgOnRpcD1cInRpcFwiPjwvRmllbGRUaXA+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiZmllbGRUeXBlID09PSAnYW1vdW50J1wiICAjcmlnaHQtaWNvbj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwiY29sb3I6ICMzMzMzMzM7bWFyZ2luLWxlZnQ6IDVweFwiID7lhYM8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlLWlmPVwiZmllbGRUeXBlID09PSAnYXZhaWxhYmxlQmFsYW5jZVR5cGUnICYmIGhpZGVBdmFpbGFibGVCYWxhbmNlID09IGZhbHNlXCIgICNyaWdodC1pY29uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJjb2xvcjogIzk2OTc5OTttYXJnaW4tbGVmdDogMjBweFwiID57e2F2YWlsYWJsZUJhbGFuY2VBbXR8Y3VycmVuY3l9fTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICA8L0ZpZWxkPlxyXG4gICAgICAgIDxkaXYgdi1pZj1cInRpcCAmJiB0aXBMb2NhdGlvbiA9PT0gJ2JvdHRvbSdcIiBjbGFzcz1cImZpZWxkLWNvbW1vbl9fbGFiZWwtdGlwX19ib3R0b21cIj5cclxuICAgICAgICAgICAge3t0aXB9fVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9WYWxpZGF0aW9uUHJvdmlkZXI+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5pbXBvcnQge0ZpZWxkfSBmcm9tICd2YW50J1xyXG5pbXBvcnQge2Nsb25lRGVlcCwgdHJpbX0gZnJvbSAnbG9kYXNoJ1xyXG5pbXBvcnQgRmllbGRUaXAgZnJvbSBcIi4uL0ZpZWxkVGlwLnZ1ZVwiO1xyXG5pbXBvcnQge2NvbW1vbkxhYmVsTWl4aW59IGZyb20gXCIuLi9taXhpbnMvY29tbW9uTGFiZWxNaXhpblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogXCJGaWVsZFRleHRcIixcclxuICAgIGNvbXBvbmVudHM6IHsgRmllbGQsRmllbGRUaXB9LFxyXG4gICAgbWl4aW5zOltjb21tb25MYWJlbE1peGluXSxcclxuICAgIGluaGVyaXRBdHRyczpmYWxzZSxcclxuICAgIG1vZGVsOiB7XHJcbiAgICAgICAgcHJvcDogXCJjdXJyZW50VGV4dFwiXHJcbiAgICB9LFxyXG4gICAgZGF0YSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzaG93TW9yZTpmYWxzZSxcclxuICAgICAgICAgICAgcnVsZXM6Y2xvbmVEZWVwKHRoaXMudmFsaWRhdGVSdWxlcylcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICB2YWxpZGF0ZVJ1bGVzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFtTdHJpbmcsT2JqZWN0XSxcclxuICAgICAgICAgICAgZGVmYXVsdDooKT0+e31cclxuICAgICAgICB9LFxyXG4gICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3VycmVudFRleHQ6W1N0cmluZyxOdW1iZXJdLFxyXG4gICAgICAgIC8v5b2T5pCc57Si57uT5p6c5Li656m65pe25piv5ZCm5YWB6K645bCG5b2T5YmN5pCc57Si55qE5YC85paw5aKeXHJcbiAgICAgICAgYWRkQWJsZTpbU3RyaW5nLE51bWJlcl0sXHJcbiAgICAgICAgbWF4bGVuZ3RoOntcclxuICAgICAgICAgICAgdHlwZTpbU3RyaW5nLE51bWJlcl0sXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IDEwMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmllbGRUeXBlOntcclxuICAgICAgICAgIHR5cGU6U3RyaW5nLFxyXG4gICAgICAgICAgZGVmYXVsdDondGV4dCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZhbGlkYXRlTmFtZTp7XHJcbiAgICAgICAgICAgIHR5cGU6U3RyaW5nLFxyXG4gICAgICAgICAgICBkZWZhdWx0OicnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhdmFpbGFibGVCYWxhbmNlQW10OntcclxuICAgICAgICAgICAgdHlwZTpbU3RyaW5nLE51bWJlcl1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGhpZGVBdmFpbGFibGVCYWxhbmNlOntcclxuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzRW5kOntcclxuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8v57K+5bqmIOm7mOiupOS4ujLkvY3lsI/mlbAg57G75Z6L5Li6TnVtYmVy5pe255Sf5pWIXHJcbiAgICAgICAgcHJlY2lzaW9uOntcclxuICAgICAgICAgIHR5cGU6TnVtYmVyLFxyXG4gICAgICAgICAgZGVmYXVsdDoyXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbnB1dEFsaWduOntcclxuICAgICAgICAgIHR5cGU6U3RyaW5nLFxyXG4gICAgICAgICAgZGVmYXVsdDoncmlnaHQnXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNvbXB1dGVkOntcclxuICAgICAgbmFtZSgpe1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVOYW1lIHx8IHRoaXMubGFiZWxcclxuICAgICAgfSxcclxuICAgICAgbnVtYmVyUHJlY2lzaW9uUmVnZXgoKXtcclxuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChgXihcXFxcZCkqXFxcXC5cXFxcZHske3RoaXMucHJlY2lzaW9ufSx9JGApXHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgbWV0aG9kczp7XHJcbiAgICAgICAgY2hhbmdlVGV4dCh2YWx1ZSl7XHJcbiAgICAgICAgICAgIGNvbnN0IHByZVZhbCA9IHRoaXMuY3VycmVudFRleHRcclxuICAgICAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLHZhbHVlKVxyXG4gICAgICAgICAgICB0aGlzLiRlbWl0KFwib25UZXh0XCIsIHZhbHVlLHByZVZhbCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvL+iOt+WPlueEpueCuVxyXG4gICAgICAgIGZvY3VzKCl7XHJcbiAgICAgICAgICAgIHRoaXMuJHJlZnMuZmllbGQuZm9jdXMoKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZm9ybWF0dGVyKHZhbHVlLHR5cGUgPSB0aGlzLiRhdHRycy50eXBlKSB7XHJcbiAgICAgICAgICAgIHZhbHVlICs9IFwiXCI7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdHJpbSh2YWx1ZSlcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3ZhbHVlOicrdGhpcy5jdXJyZW50VGV4dCsnIGZpZWxkVGV4dDonK3ZhbHVlKycgdHlwZTonK3R5cGUpXHJcbiAgICAgICAgICAgIGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiB0aGlzLm51bWJlclByZWNpc2lvblJlZ2V4LnRlc3QodmFsdWUpICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0ZpeGVkKHRoaXMucHJlY2lzaW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSBcImludFwiICYmIC9eWzAtOV0rXFwuPyQvLnRlc3QodmFsdWUpICkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0ZpeGVkKDApO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG59LFxyXG4gICAgd2F0Y2g6IHtcclxuICAgICAgICBjdXJyZW50VGV4dDoge1xyXG4gICAgICAgICAgICBoYW5kbGVyICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgLyog55uR5ZCs5YC85Y+Y5YyW77yM6Kem5Y+R6L+U5ZueICovXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgc2NvcGVkIGxhbmc9XCJsZXNzXCI+XHJcbiAgICAuZm9udC1ib2xke1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgfVxyXG4gICAgLmJvdC1ib3J7XHJcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMHB4O1xyXG4gICAgfVxyXG4gICAgL2RlZXAvLnZhbi1maWVsZF9fY29udHJvbC0tcmlnaHR7XHJcbiAgICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcclxuICAgIH1cclxuPC9zdHlsZT5cclxuIiwiaW1wb3J0IEZpZWxkVGV4dCBmcm9tICcuL0ZpZWxkVGV4dC52dWUnXHJcblxyXG5GaWVsZFRleHQuaW5zdGFsbCA9IGZ1bmN0aW9uKFZ1ZSl7XHJcbiAgICBWdWUuY29tcG9uZW50KEZpZWxkVGV4dC5uYW1lLEZpZWxkVGV4dClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmllbGRUZXh0IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdj5cclxuICAgICAgIDxWYWxpZGF0aW9uUHJvdmlkZXIgOm5hbWU9XCIkYXR0cnMubGFiZWxcIiA6cnVsZXM9XCJ2YWxpZGF0ZVJ1bGVzXCIgdi1zbG90PVwie2Vycm9yc31cIj5cclxuICAgICAgICAgICAgPEZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgdi1pZj1cIiF1c2VTaG93U2xvdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgdi1iaW5kPVwiJGF0dHJzXCJcclxuICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9XCJ0cnVlXCJcclxuICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwiZmllbGRWYWxcIlxyXG4gICAgICAgICAgICAgICAgICAgIEBjbGljaz1cIm9uQ2xpY2tcIlxyXG4gICAgICAgICAgICAgICAgICAgIDplcnJvci1tZXNzYWdlPVwiZXJyb3JzWzBdXCJcclxuICAgICAgICAgICAgICAgICAgICA6aW5wdXQtYWxpZ249XCJpbnB1dEFsaWduXCJcclxuICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJbaXNFbmQgPyAnYm90LWJvcicgOiAnJywkYXR0cnMubGFiZWxBbGlnbiA9PT0gJ3RvcCcgPyAnanNvbnZ1ZS1mbGV4LWNvbHVtbicgOiAnJ11cIlxyXG4gICAgICAgICAgICA+XHJcblxyXG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlICNsYWJlbD5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZpZWxkLWNvbW1vbl9fbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiA6Y2xhc3M9XCIgaXNCb2xkID8gJ2ZvbnQtYm9sZCcgOiAnJyBcIj57eyRhdHRycy5sYWJlbH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxGaWVsZFRpcCB2LWlmPVwidGlwICYmIHRpcExvY2F0aW9uID09PSAncmlnaHQnXCIgY2xhc3M9XCJmaWVsZC1jb21tb25fX2xhYmVsLXRpcFwiICA6dGlwPVwidGlwXCI+PC9GaWVsZFRpcD5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICAgICAgPGRpdiAgc2xvdD1cImJ1dHRvblwiIHN0eWxlPVwiZGlzcGxheTogZmxleDthbGlnbi1pdGVtczogY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBAY2xpY2suc3RvcD1cIm9uRGVsZXRlXCIgdi1pZj1cIiBzY2VuZSE9PTIgJiYgIWRpc2FibGVkICYmIGZpZWxkVmFsIFwiID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidHh0LWFsbFwiID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uZm9udCBpY29uLXNoYW5jaHVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJwYWRkaW5nLWxlZnQ6IDJweFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJ0eHQtYWxsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPVwic2NlbmUhPT0yICYmICFkaXNhYmxlZCAmJiAoZ2V0VHlwZSAhPT0nVEVYVCcgfHwgZ2V0VHlwZSAhPT0ndGV4dCcpXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uIG5hbWU9XCJhcnJvd1wiPjwvSWNvbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L0ZpZWxkPlxyXG4gICAgICAgICAgICA8c2xvdCB2LWVsc2UgOmNsaWNrPVwiKCk9Pm9uQ2xpY2soKVwiPjwvc2xvdD5cclxuICAgICAgICAgICA8ZGl2IHYtaWY9XCJ0aXAgJiYgdGlwTG9jYXRpb24gPT09ICdib3R0b20nXCIgY2xhc3M9XCJmaWVsZC1jb21tb25fX2xhYmVsLXRpcF9fYm90dG9tXCI+XHJcbiAgICAgICAgICAgICB7e3RpcH19XHJcbiAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9WYWxpZGF0aW9uUHJvdmlkZXI+XHJcbiAgICAgIDxQb3B1cFxyXG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJzaG93XCJcclxuICAgICAgICAgICAgICBwb3NpdGlvbj1cImJvdHRvbVwiXHJcbiAgICAgICAgICAgICAgZ2V0LWNvbnRhaW5lcj1cIiNhcHBcIlxyXG4gICAgICAgICAgICAgIDpzdHlsZT1cInsgd2lkdGg6ICcxMDAlJ31cIlxyXG4gICAgICAgICAgICAgIHYtaWY9XCJjb2x1bW5zQWxsLmxlbmd0aDw9MTAwXCJcclxuICAgICAgPlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8Zm9ybSBhY3Rpb249XCIvXCIgdi1pZj1cImNvbHVtbnNBbGwubGVuZ3RoPjEwXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxTZWFyY2ggdi1tb2RlbD1cInNlYXJjaFZhbFwiIGNsZWFyYWJsZSBwbGFjZWhvbGRlcj1cIuivt+aQnOe0ouWFs+mUruivjVwiIEBzZWFyY2g9XCJvblNlYXJjaFwiPjwvU2VhcmNoPlxyXG4gICAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICAgICAgICA8UGlja2VyXHJcbiAgICAgICAgICAgICAgICAgICAgICBzaG93LXRvb2xiYXJcclxuICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZS1rZXk9XCJ2YWx1ZUtleVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCIn6K+36YCJ5oupJyskYXR0cnMubGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgOmNvbHVtbnM9XCJjb2x1bW5zXCJcclxuICAgICAgICAgICAgICAgICAgICAgIDpkZWZhdWx0LWluZGV4PVwiZGVmYXVsdEluZGV4XCJcclxuICAgICAgICAgICAgICAgICAgICAgIEBjYW5jZWw9XCJzaG93PWZhbHNlXCJcclxuICAgICAgICAgICAgICAgICAgICAgIEBjb25maXJtPVwib25Db25maXJtXCJcclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvUG9wdXA+XHJcbiAgICAgIDxQb3B1cFxyXG4gICAgICAgICAgICAgIHYtZWxzZVxyXG4gICAgICAgICAgICAgIHYtbW9kZWw9XCJzaG93XCJcclxuICAgICAgICAgICAgICBwb3NpdGlvbj1cImJvdHRvbVwiXHJcbiAgICAgICAgICAgICAgZ2V0LWNvbnRhaW5lcj1cIiNhcHBcIlxyXG4gICAgICAgICAgICAgIDpzdHlsZT1cInsgd2lkdGg6ICcxMDAlJyxoZWlnaHQ6JzU0JScgfVwiXHJcbiAgICAgID5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJqc29udnVlLXBhZ2VcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2VsZWN0LWhkIHZhbi1oYWlybGluZS0tYm90dG9tXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibnVsbC1wb3BcIj4mbmJzcDs8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFuLWluZm8tdGl0bGVcIj7mt7vliqB7eyRhdHRycy5sYWJlbH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8SWNvbiBjbGFzcz1cImNsb3NlLXBvcFwiIEBjbGljaz1cInNob3c9ZmFsc2VcIiBuYW1lPVwiY2xvc2VcIiAvPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj1cIi9cIj5cclxuICAgICAgICAgICAgICAgICAgPFNlYXJjaCB2LW1vZGVsPVwic2VhcmNoVmFsXCIgY2xlYXJhYmxlIHBsYWNlaG9sZGVyPVwi6K+35pCc57Si5YWz6ZSu6K+NXCIgQHNlYXJjaD1cIm9uU2VhcmNoXCI+PC9TZWFyY2g+XHJcbiAgICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJqc29udnVlLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgPFJhZGlvR3JvdXAgdi1tb2RlbD1cInJlc3VsdFJhZGlvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8Q2VsbEdyb3VwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxDZWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj1cIihpdGVtLCBpbmRleCkgaW4gY29sdW1uc1JhZGlvXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmtleT1cImluZGV4XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIml0ZW0ubmFtZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJ0b2dnbGUoaXRlbS5pZClcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJhZGlvIGNsYXNzPVwibWw1XCIgOm5hbWU9XCJpdGVtLmlkXCIgc2xvdD1cInJpZ2h0LWljb25cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvQ2VsbEdyb3VwPlxyXG4gICAgICAgICAgICAgICAgICA8L1JhZGlvR3JvdXA+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPFBhZ2luYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJjdXJyZW50UGFnZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICA6cGFnZS1jb3VudD1cInBhZ2VDb3VudFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlPVwic2ltcGxlXCJcclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvUG9wdXA+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuICAgIGltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gXCJsb2Rhc2hcIjtcclxuICAgIGltcG9ydCB7RmllbGQsUG9wdXAsU2VhcmNoLFBpY2tlcixJY29uLFJhZGlvR3JvdXAsQ2VsbEdyb3VwLENlbGwsUmFkaW8sUGFnaW5hdGlvbn0gZnJvbSAndmFudCdcclxuICAgIGltcG9ydCBGaWVsZFRpcCBmcm9tIFwiLi4vRmllbGRUaXAudnVlXCI7XHJcbiAgICBpbXBvcnQge2NvbW1vbkxhYmVsTWl4aW59IGZyb20gXCIuLi9taXhpbnMvY29tbW9uTGFiZWxNaXhpblwiO1xyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6IFwiRmllbGRTZWxlY3RcIixcclxuICAgICAgICBjb21wb25lbnRzOiB7RmllbGQsUG9wdXAsU2VhcmNoLFBpY2tlcixJY29uLFJhZGlvR3JvdXAsQ2VsbEdyb3VwLENlbGwsUmFkaW8sUGFnaW5hdGlvbixGaWVsZFRpcH0sXHJcbiAgICAgICAgbWl4aW5zOltjb21tb25MYWJlbE1peGluXSxcclxuICAgICAgICBkYXRhKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzZWFyY2hWYWw6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zQWxsOiBbXSxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRJbmRleDogMCxcclxuICAgICAgICAgICAgICAgIHJlc3VsdFJhZGlvOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2U6IDEsXHJcbiAgICAgICAgICAgICAgICBwYWdlOjUsXHJcbiAgICAgICAgICAgICAgICBydWxlczpjbG9uZURlZXAodGhpcy52YWxpZGF0ZVJ1bGVzKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcclxuICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICBwcm9wOiBcImN1cnJlbnRTZWxlY3RcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgY3VycmVudFNlbGVjdDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTpbT2JqZWN0LCBTdHJpbmcsIE51bWJlciwgQXJyYXldLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDooKT0+e31cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdmFsdWVLZXk6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFwibmFtZVwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldFR5cGU6e1xyXG4gICAgICAgICAgICAgIHR5cGU6U3RyaW5nLFxyXG4gICAgICAgICAgICAgIGRlZmF1bHQ6J2NvZGUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9wdGlvbkNvZGVzOntcclxuICAgICAgICAgICAgICB0eXBlOkFycmF5LFxyXG4gICAgICAgICAgICAgIGRlZmF1bHQ6KCk9PltdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBvc3REYXRhOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIHBvc3RVcmw6IFN0cmluZyxcclxuICAgICAgICAgICAgdmFsaWRhdGVSdWxlczoge1xyXG4gICAgICAgICAgICAgIHR5cGU6W1N0cmluZyxPYmplY3RdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNjZW5lOntcclxuICAgICAgICAgICAgICB0eXBlOltTdHJpbmcsTnVtYmVyXSxcclxuICAgICAgICAgICAgICBkZWZhdWx0OjFcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGlzYWJsZWQ6e1xyXG4gICAgICAgICAgICAgICAgdHlwZTpCb29sZWFuLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6ZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXNFbmQ6e1xyXG4gICAgICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVzZVNob3dTbG90OntcclxuICAgICAgICAgICAgICAgIHR5cGU6Qm9vbGVhbixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy/mr4/mrKHngrnlh7vml7bmmK/lkKbliLfmlrDmlbDmja4g6buY6K6k5Yid5qyh5Yqg6L295ZCO57yT5a2Y5pWw5o2u5ZCO5LiN5YaN5Yi35paw5Yqg6L29XHJcbiAgICAgICAgICAgIHJlZnJlc2hXaGVuQ2xpY2s6e1xyXG4gICAgICAgICAgICAgIHR5cGU6Qm9vbGVhbixcclxuICAgICAgICAgICAgICBkZWZhdWx0OmZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vaHR0cCDlpJbpg6hodHRw6K+35rGC5Ye95pWw5pa55L6/5a+55o6l546w5pyJ5o6l5Y+jXHJcbiAgICAgICAgICAgIGh0dHBGdW5jdGlvbjpbRnVuY3Rpb25dLFxyXG4gICAgICAgICAgICBpbnB1dEFsaWduOntcclxuICAgICAgICAgICAgICB0eXBlOlN0cmluZyxcclxuICAgICAgICAgICAgICBkZWZhdWx0OidyaWdodCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29tcHV0ZWQ6IHtcclxuICAgICAgICAgICAgZmllbGRWYWwoKSB7XHJcbiAgICAgICAgICAgICAgLyog5a2X5q616YCJ5oup55qEbmFtZSAqL1xyXG4gICAgICAgICAgICAgIGxldCBuYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuY3VycmVudFNlbGVjdCA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lID0gdGhpcy5jdXJyZW50U2VsZWN0O1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lID0gKHRoaXMuY3VycmVudFNlbGVjdCB8fCB7fSkubmFtZSB8fCBcIlwiO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmllbGRJZCgpIHtcclxuICAgICAgICAgICAgICAgIC8qIOWtl+autWlkICovXHJcbiAgICAgICAgICAgICAgICBsZXQgaWQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmN1cnJlbnRTZWxlY3QgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQgPSAodGhpcy5jdXJyZW50U2VsZWN0IHx8IHt9KS5pZCB8fCBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2x1bW5zUmFkaW8oKXtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50UGFnZSA9ICh0aGlzLmN1cnJlbnRQYWdlIC0gMSkgKiB0aGlzLnBhZ2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5zLnNsaWNlKGN1cnJlbnRQYWdlLGN1cnJlbnRQYWdlK3RoaXMucGFnZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBhZ2VDb3VudCgpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmNvbHVtbnMubGVuZ3RoL3RoaXMucGFnZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbHVtbnMoKSB7XHJcbiAgICAgICAgICAgICAgICAvKiBwaWNrZXLnrZvpgIkgKi9cclxuICAgICAgICAgICAgICAgIGxldCBjb2x1bW5zO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29sdW1uc0FsbCA9IGNsb25lRGVlcCh0aGlzLmNvbHVtbnNBbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnMgPSBjb2x1bW5zQWxsLmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBpdGVtLm5hbWUgKyBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VhcmNoVmFsID0gKHRoaXMuc2VhcmNoVmFsICsgXCJcIikudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hWYWwgPSBzZWFyY2hWYWwudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hbWUuaW5kZXhPZihzZWFyY2hWYWwpID4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2x1bW5zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB3YXRjaDoge1xyXG4gICAgICAgICAgICBzaG93KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hWYWwgPSBcIlwiO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZWFyY2hWYWwoKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAxO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjdXJyZW50U2VsZWN0OiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qIOebkeWQrOWAvOWPmOWMlu+8jOinpuWPkei/lOWbniAqL1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhpcy4kZW1pdChcIm9uU2VsZWN0XCIsIHRoaXMuY3VycmVudFNlbGVjdCk7XHJcbiAgICAgICAgICAgICAgICAgIGxldCBuYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmN1cnJlbnRTZWxlY3QgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSB0aGlzLmN1cnJlbnRTZWxlY3Q7XHJcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9ICh0aGlzLmN1cnJlbnRTZWxlY3QgfHwge30pW3RoaXMudmFsdWVLZXldIHx8IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICAgb25EZWxldGUoKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJvblNlbGVjdFwiLCB7fSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KFwiaW5wdXRcIix7fSlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25TZWFyY2goKSB7fSxcclxuICAgICAgICAgICAgdG9nZ2xlKGlkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdFJhZGlvID0gaWQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB7fTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uc0FsbC5ldmVyeShpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjbG9uZURlZXAoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25Db25maXJtKHZhbHVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25DbGljaygpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjZW5lID09PSAyIHx8IHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5nZXRUeXBlID09PSBcIlRFWFRcIiB8fCB0aGlzLmdldFR5cGUgPT09IFwidGV4dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy/lj4LmlbDlj5jmm7Tnu4Tku7ZcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3BhcmFtc0NoYW5nZScpXHJcbiAgICAgICAgICAgICAgICAvL+inpuWPkeS4i+aLiSzojrflj5bmlbDmja5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldFR5cGUgPT09IFwiQ09ERVwiIHx8IHRoaXMuZ2V0VHlwZSA9PT0gXCJjb2RlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldENvbHVtbnModGhpcy5vcHRpb25Db2RlcyB8fCBbXSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5wb3N0VXJsICYmICF0aGlzLmh0dHBGdW5jdGlvbiBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChhc3luYyAoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWZyZXNoV2hlbkNsaWNrIHx8IEFycmF5LmlzQXJyYXkodGhpcy5jb2x1bW5zQWxsKSAmJiB0aGlzLmNvbHVtbnNBbGwubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKHRoaXMucG9zdERhdGEgfHwgXCJ7fVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmh0dHBGdW5jdGlvbiBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLmh0dHBGdW5jdGlvbihkYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldENvbHVtbnMoKEFycmF5LmlzQXJyYXkocmVzcCkgPyByZXNwIDogdW5kZWZpbmVkKSB8fCByZXNwLmxpc3QgfHwgcmVzcC5kYXRhLmxpc3QgfHwgW10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRwb3N0KHRoaXMucG9zdFVybCwgZGF0YSkudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJmaWVsZFNlbGVjdDpcIixyZXNwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldENvbHVtbnMoKEFycmF5LmlzQXJyYXkocmVzcCkgPyByZXNwIDogdW5kZWZpbmVkKSB8fCByZXNwLmxpc3QgfHwgcmVzcC5kYXRhLmxpc3QgfHwgW10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwzMDApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRDb2x1bW5zKGNvbHVtbnNBbGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uc0FsbCA9IGNvbHVtbnNBbGwgfHwgW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0UmFkaW8gPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmllbGRJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uc0FsbC5ldmVyeSgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaWQgPT09IHRoaXMuZmllbGRJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0SW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSBNYXRoLmNlaWwoKGluZGV4KzEpL3RoaXMucGFnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdFJhZGlvID0gaXRlbS5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5zQWxsLmV2ZXJ5KChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5uYW1lID09PSB0aGlzLmZpZWxkVmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRJbmRleCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IE1hdGguY2VpbCgoaW5kZXgrMSkvdGhpcy5wYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0UmFkaW8gPSBpdGVtLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkNvbmZpcm0odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIC8qIOabtOaWsOaVsOaNruWSjOinpuWPkSAqL1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdChcIm9uU2VsZWN0XCIsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJpbnB1dFwiLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIHNjb3BlZD5cclxuICAgIC5qc29udnVlLXBhZ2Uge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIH1cclxuICAgIC5qc29udnVlLWZsZXgxIHtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBmbGV4OiAxO1xyXG4gICAgfVxyXG4gICAgLmpzb252dWUtY29udGVudCB7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgZmxleDogMTtcclxuICAgICAgICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbiAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgICAgICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XHJcbiAgICB9XHJcbiAgICAuYm90LWJvcntcclxuICAgICAgICBib3JkZXItYm90dG9tOiAwcHg7XHJcbiAgICB9XHJcbiAgICAuc2VsZWN0LWhkIHtcclxuICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgICBwYWRkaW5nOiAyMHB4IDMwcHg7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICAgIH1cclxuICAgIC52YW4taW5mby10aXRsZXtcclxuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XHJcbiAgICAgIHdpZHRoOiA2MCU7XHJcbiAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuPC9zdHlsZT5cclxuIiwiaW1wb3J0IEZpZWxkU2VsZWN0IGZyb20gJy4vRmllbGRTZWxlY3QudnVlJ1xyXG5cclxuRmllbGRTZWxlY3QuaW5zdGFsbCA9IGZ1bmN0aW9uKFZ1ZSl7XHJcbiAgICBWdWUuY29tcG9uZW50KEZpZWxkU2VsZWN0Lm5hbWUsRmllbGRTZWxlY3QpXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgRmllbGRTZWxlY3QiLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2PuaWh+S7tuS4iuS8oOe7hOS7tjwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOidGaWVsZFVwbG9hZCdcclxufVxyXG48L3NjcmlwdD4iLCJpbXBvcnQgRmllbGRVcGxvYWQgZnJvbSAnLi9GaWVsZFVwbG9hZC52dWUnXHJcblxyXG5GaWVsZFVwbG9hZC5pbnN0YWxsID0gZnVuY3Rpb24oVnVlKXtcclxuICAgIFZ1ZS5jb21wb25lbnQoRmllbGRVcGxvYWQubmFtZSxGaWVsZFVwbG9hZClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmllbGRVcGxvYWQiLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2PlxyXG4gICAgICA8VmFsaWRhdGlvblByb3ZpZGVyIDpuYW1lPVwiJGF0dHJzLmxhYmVsXCIgOnJ1bGVzPVwidmFsaWRhdGVSdWxlc1wiIHYtc2xvdD1cIntlcnJvcnN9XCI+XHJcbiAgICAgICAgPEZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgdi1iaW5kPVwiJGF0dHJzXCJcclxuICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9XCJ0cnVlXCJcclxuICAgICAgICAgICAgICAgICAgICA6dmFsdWU9XCJmaWVsZFZhbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwib25DbGlja1wiXHJcbiAgICAgICAgICAgICAgICAgICAgOmVycm9yLW1lc3NhZ2U9XCJlcnJvcnNbMF1cIlxyXG4gICAgICAgICAgICAgICAgICAgIDppbnB1dC1hbGlnbj1cImlucHV0QWxpZ25cIlxyXG4gICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cIltpc0VuZCA/ICdib3QtYm9yJyA6ICcnLCRhdHRycy5sYWJlbEFsaWduID09PSAndG9wJyA/ICdqc29udnVlLWZsZXgtY29sdW1uJyA6ICcnXVwiXHJcbiAgICAgICAgICAgID5cclxuXHJcbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgI2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmllbGQtY29tbW9uX19sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIDpjbGFzcz1cIiBpc0JvbGQgPyAnZm9udC1ib2xkJyA6ICcnIFwiPnt7JGF0dHJzLmxhYmVsfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPEZpZWxkVGlwIHYtaWY9XCJ0aXAgJiYgdGlwTG9jYXRpb24gPT09ICdyaWdodCdcIiBjbGFzcz1cImZpZWxkLWNvbW1vbl9fbGFiZWwtdGlwXCIgIDp0aXA9XCJ0aXBcIj48L0ZpZWxkVGlwPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgI3JpZ2h0LWljb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgdi1pZj1cInNjZW5lIT09MlwiIGNsYXNzPVwiaWNvbmZvbnQgaWNvbi1yaXFpXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgPC9GaWVsZD5cclxuICAgICAgICAgICAgPGRpdiB2LWlmPVwidGlwICYmIHRpcExvY2F0aW9uID09PSAnYm90dG9tJ1wiIGNsYXNzPVwiZmllbGQtY29tbW9uX19sYWJlbC10aXBfX2JvdHRvbVwiPlxyXG4gICAgICAgICAgICAgIHt7dGlwfX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9WYWxpZGF0aW9uUHJvdmlkZXI+XHJcbiAgICAgIDxQb3B1cCB2LW1vZGVsPVwic2hvd1wiIHBvc2l0aW9uPVwiYm90dG9tXCIgZ2V0LWNvbnRhaW5lcj1cIiNhcHBcIiA6c3R5bGU9XCJ7IHdpZHRoOiAnMTAwJScgfVwiPlxyXG4gICAgICAgICAgPERhdGV0aW1lUGlja2VyXHJcbiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJub3dEYXRlXCJcclxuICAgICAgICAgICAgICAgICAgOnR5cGU9XCJmaWVsZFR5cGVcIlxyXG4gICAgICAgICAgICAgICAgICA6bWluLWRhdGU9XCJtaW5EYXRlU2hvd1wiXHJcbiAgICAgICAgICAgICAgICAgIDptYXgtZGF0ZT1cIm1heERhdGVTaG93XCJcclxuICAgICAgICAgICAgICAgICAgQGNvbmZpcm09XCJvbkNvbmZpcm1cIlxyXG4gICAgICAgICAgICAgICAgICBAY2FuY2VsPVwic2hvdz1mYWxzZVwiXHJcbiAgICAgICAgICAgICAgICAgIDpmb3JtYXR0ZXI9XCJmb3JtYXR0ZXJcIlxyXG4gICAgICAgICAgLz5cclxuICAgICAgPC9Qb3B1cD5cclxuXHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuaW1wb3J0IHtGaWVsZCxQb3B1cCxEYXRldGltZVBpY2tlcn0gZnJvbSAndmFudCdcclxuaW1wb3J0IHtjbG9uZURlZXB9IGZyb20gJ2xvZGFzaCdcclxuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJ1xyXG5pbXBvcnQgRmllbGRUaXAgZnJvbSBcIi4uL0ZpZWxkVGlwLnZ1ZVwiO1xyXG5pbXBvcnQge2NvbW1vbkxhYmVsTWl4aW59IGZyb20gXCIuLi9taXhpbnMvY29tbW9uTGFiZWxNaXhpblwiO1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOidGaWVsZERhdGUnLFxyXG4gICAgY29tcG9uZW50czoge0ZpZWxkLFBvcHVwLERhdGV0aW1lUGlja2VyLEZpZWxkVGlwfSxcclxuICAgIG1peGluczpbY29tbW9uTGFiZWxNaXhpbl0sXHJcbiAgICAgIGRhdGEoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIG5vd0RhdGU6IFwiXCIsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmhlcml0QXR0cnM6IGZhbHNlLFxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIHByb3A6IFwiY3VycmVudERhdGVcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgY3VycmVudERhdGU6IHtcclxuICAgICAgICAgICAgICB0eXBlOltTdHJpbmcsIE51bWJlcl0sXHJcbiAgICAgICAgICAgICAgZGVmYXVsdDonJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvL+aXpeacn+aYvuekuuagvOW8j1xyXG4gICAgICAgICAgICBkaXNwbGF5Rm9ybWF0OltTdHJpbmddLFxyXG4gICAgICAgICAgICBtaW5EYXRlOiBbU3RyaW5nLCBOdW1iZXJdLFxyXG4gICAgICAgICAgICBtYXhEYXRlOiBbU3RyaW5nLCBOdW1iZXJdLFxyXG4gICAgICAgICAgICBzY2VuZTp7XHJcbiAgICAgICAgICAgICAgdHlwZTpbU3RyaW5nLE51bWJlcl0sXHJcbiAgICAgICAgICAgICAgZGVmYXVsdDoxXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHZhbGlkYXRlUnVsZXM6e1xyXG4gICAgICAgICAgICAgIHR5cGU6W09iamVjdCxTdHJpbmddLFxyXG4gICAgICAgICAgICAgIGRlZmF1bHQ6KCk9Pnt9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRpc2FibGVkOntcclxuICAgICAgICAgICAgICAgIHR5cGU6Qm9vbGVhbixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXNFbmQ6e1xyXG4gICAgICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8v5pel5pyf57uE5Lu26YCJ5oup57G75Z6L77yM6buY6K6k5Li65bm05pyI5pelXHJcbiAgICAgICAgICAgIGZpZWxkVHlwZTp7XHJcbiAgICAgICAgICAgICAgdHlwZTpTdHJpbmcsXHJcbiAgICAgICAgICAgICAgZGVmYXVsdDonZGF0ZSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5wdXRBbGlnbjp7XHJcbiAgICAgICAgICAgICAgdHlwZTpTdHJpbmcsXHJcbiAgICAgICAgICAgICAgZGVmYXVsdDoncmlnaHQnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbXB1dGVkOiB7XHJcbiAgICAgICAgICAgIG1pbkRhdGVTaG93KCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1pbkRhdGUgPSBuZXcgRGF0ZSh0aGlzLm1pbkRhdGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1pbkRhdGUudG9TdHJpbmcoKS5pbmRleE9mKFwiSW52YWxpZFwiKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRZZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShjdXJyZW50WWVhciAtIDEwLCAwLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWluRGF0ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWF4RGF0ZVNob3coKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWF4RGF0ZSA9IG5ldyBEYXRlKHRoaXMubWF4RGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF4RGF0ZS50b1N0cmluZygpLmluZGV4T2YoXCJJbnZhbGlkXCIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudFllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGN1cnJlbnRZZWFyICsgMTAsIDExLCAzMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF4RGF0ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmllbGRWYWwoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudERhdGU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maWVsZFR5cGUgIT09ICd0aW1lJykge1xyXG4gICAgICAgICAgICAgICAgICAvL+aXtumXtOaIs+i9rOS4uuaXtumXtOagvOW8j+WxleekulxyXG4gICAgICAgICAgICAgICAgICBsZXQgaXNWYWxpZCA9IG5ldyBEYXRlKHRoaXMuY3VycmVudERhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZmllbGREYXRlOmZpZWxkVmFsJyxpc1ZhbGlkKVxyXG4gICAgICAgICAgICAgICAgICAvL+aXoOaViOaXtumXtOebtOaOpei1i+WAvO+8jOacieaViOaXtumXtOi9rOWMluaXtumXtOaIs1xyXG4gICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZC50b1N0cmluZygpLmluZGV4T2YoXCJJbnZhbGlkXCIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZSA9IHRoaXMuY3VycmVudERhdGU7XHJcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZvcm1hdCA9IHRoaXMuZGlzcGxheUZvcm1hdCB8fCB0aGlzLmRlZmF1bHREaXNwbGF5Rm9ybWF0O1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlID0gZGF5anModGhpcy5jdXJyZW50RGF0ZSkuZm9ybWF0KGZvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlID0gdGhpcy5jdXJyZW50RGF0ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy/pu5jorqTnmoTmmL7npLrmoLzlvI9cclxuICAgICAgICAgICAgZGVmYXVsdERpc3BsYXlGb3JtYXQoKXtcclxuICAgICAgICAgICAgICBpZiAodGhpcy5maWVsZFR5cGUgPT09ICd5ZWFyLW1vbnRoJyl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1lZWVktTU0nXHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZpZWxkVHlwZSA9PT0gJ2RhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJZWVlZLU1NLUREXCJcclxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmllbGRUeXBlID09PSAnZGF0ZXRpbWUnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJZWVlZLU1NLUREIEhIOm1tXCJcclxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmllbGRUeXBlID09PSAndGltZScpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkhIOm1tXCJcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHdhdGNoOiB7XHJcbiAgICAgICAgICAgIGN1cnJlbnREYXRlOiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qIOS8oOaXtumXtOaIs+WbnuWOuyAqL1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhpcy4kZW1pdChcIm9uRGF0ZXRpbWVcIiwgdGhpcy5jdXJyZW50RGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOaYvuekuuaXtumXtOmAieaLqeWZqO+8jOWIneWni+WMluaXtumXtFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgb25DbGljaygpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjZW5lID09PSAyIHx8IHRoaXMuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIHRoaXMuZmllbGRUeXBlICE9PSAndGltZScgKXtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRoaXMuY3VycmVudERhdGUpO1xyXG4gICAgICAgICAgICAgICAgICBpZiAoIGRhdGUudG9TdHJpbmcoKS5pbmRleE9mKFwiSW52YWxpZFwiKSA9PT0gLTEgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3dEYXRlID0gZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vd0RhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLm5vd0RhdGUgPSB0aGlzLmN1cnJlbnREYXRlIHx8IGRheWpzKG5ldyBEYXRlKCkpLmZvcm1hdCh0aGlzLmRlZmF1bHREaXNwbGF5Rm9ybWF0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvdyA9IHRydWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ29uZmlybSh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZpZWxkRGF0ZTp2YWx1ZTonLHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGVUaW1lXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maWVsZFR5cGUgIT09ICd0aW1lJykge1xyXG4gICAgICAgICAgICAgICAgICBkYXRlVGltZSA9IG5ldyBEYXRlKHZhbHVlKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmaWVsZERhdGU6dGltZTonLGRhdGVUaW1lKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgZGF0ZVRpbWUgPSB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyog5pu05paw6L6T5YWl5qGG5pe26Ze0ICovXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KFwib25EYXRldGltZVwiLCBkYXRlVGltZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KFwiaW5wdXRcIiwgZGF0ZVRpbWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDmoLzlvI/ljJbml7bpl7RcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGZvcm1hdHRlcih0eXBlLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwieWVhclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke3ZhbHVlfeW5tGA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwibW9udGhcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHt2YWx1ZX3mnIhgO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBcImRheVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke3ZhbHVlfeaXpWA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiaG91clwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke3ZhbHVlfeaXtmA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwibWludXRlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7dmFsdWV95YiGYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxufVxyXG48L3NjcmlwdD5cclxuPHN0eWxlIHNjb3BlZD5cclxuICAgIC5ib3QtYm9ye1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDBweDtcclxuICAgIH1cclxuPC9zdHlsZT5cclxuIiwiaW1wb3J0IEZpZWxkRGF0ZSBmcm9tICcuL0ZpZWxkRGF0ZS52dWUnXHJcblxyXG5GaWVsZERhdGUuaW5zdGFsbCA9IGZ1bmN0aW9uKFZ1ZSl7XHJcbiAgICBWdWUuY29tcG9uZW50KEZpZWxkRGF0ZS5uYW1lLEZpZWxkRGF0ZSlcclxufVxyXG5leHBvcnQgZGVmYXVsdCBGaWVsZERhdGUiLCJleHBvcnQgY29uc3QgY2l0eXMgPSB7XHJcbiAgQXJlYUxpc3QgOiB7XHJcbiAgICBwcm92aW5jZV9saXN0OntcclxuICAgICAgMTEwMDAwOiAn5YyX5Lqs5biCJyxcclxuICAgICAgMTIwMDAwOiAn5aSp5rSl5biCJyxcclxuICAgICAgMTMwMDAwOiAn5rKz5YyX55yBJyxcclxuICAgICAgMTQwMDAwOiAn5bGx6KW/55yBJyxcclxuICAgICAgMTUwMDAwOiAn5YaF6JKZ5Y+k6Ieq5rK75Yy6JyxcclxuICAgICAgMjEwMDAwOiAn6L695a6B55yBJyxcclxuICAgICAgMjIwMDAwOiAn5ZCJ5p6X55yBJyxcclxuICAgICAgMjMwMDAwOiAn6buR6b6Z5rGf55yBJyxcclxuICAgICAgMzEwMDAwOiAn5LiK5rW35biCJyxcclxuICAgICAgMzIwMDAwOiAn5rGf6IuP55yBJyxcclxuICAgICAgMzMwMDAwOiAn5rWZ5rGf55yBJyxcclxuICAgICAgMzQwMDAwOiAn5a6J5b6955yBJyxcclxuICAgICAgMzUwMDAwOiAn56aP5bu655yBJyxcclxuICAgICAgMzYwMDAwOiAn5rGf6KW/55yBJyxcclxuICAgICAgMzcwMDAwOiAn5bGx5Lic55yBJyxcclxuICAgICAgNDEwMDAwOiAn5rKz5Y2X55yBJyxcclxuICAgICAgNDIwMDAwOiAn5rmW5YyX55yBJyxcclxuICAgICAgNDMwMDAwOiAn5rmW5Y2X55yBJyxcclxuICAgICAgNDQwMDAwOiAn5bm/5Lic55yBJyxcclxuICAgICAgNDUwMDAwOiAn5bm/6KW/5aOu5peP6Ieq5rK75Yy6JyxcclxuICAgICAgNDYwMDAwOiAn5rW35Y2X55yBJyxcclxuICAgICAgNTAwMDAwOiAn6YeN5bqG5biCJyxcclxuICAgICAgNTEwMDAwOiAn5Zub5bed55yBJyxcclxuICAgICAgNTIwMDAwOiAn6LS15bee55yBJyxcclxuICAgICAgNTMwMDAwOiAn5LqR5Y2X55yBJyxcclxuICAgICAgNTQwMDAwOiAn6KW/6JeP6Ieq5rK75Yy6JyxcclxuICAgICAgNjEwMDAwOiAn6ZmV6KW/55yBJyxcclxuICAgICAgNjIwMDAwOiAn55SY6IKD55yBJyxcclxuICAgICAgNjMwMDAwOiAn6Z2S5rW355yBJyxcclxuICAgICAgNjQwMDAwOiAn5a6B5aSP5Zue5peP6Ieq5rK75Yy6JyxcclxuICAgICAgNjUwMDAwOiAn5paw55aG57u05ZC+5bCU6Ieq5rK75Yy6JyxcclxuICAgICAgNzEwMDAwOiAn5Y+w5rm+55yBJyxcclxuICAgICAgODEwMDAwOiAn6aaZ5riv54m55Yir6KGM5pS/5Yy6JyxcclxuICAgICAgODIwMDAwOiAn5r6z6Zeo54m55Yir6KGM5pS/5Yy6JyxcclxuICAgICAgLy8gOTAwMDAwOiAn5rW35aSWJ1xyXG4gICAgfSxcclxuICAgIGNpdHlfbGlzdDoge1xyXG4gICAgICAxMTAxMDA6ICfljJfkuqzluIInLFxyXG4gICAgICAxMjAxMDA6ICflpKnmtKXluIInLFxyXG4gICAgICAxMzAxMDA6ICfnn7PlrrbluoTluIInLFxyXG4gICAgICAxMzAyMDA6ICfllJDlsbHluIInLFxyXG4gICAgICAxMzAzMDA6ICfnp6bnmoflspvluIInLFxyXG4gICAgICAxMzA0MDA6ICfpgq/pg7jluIInLFxyXG4gICAgICAxMzA1MDA6ICfpgqLlj7DluIInLFxyXG4gICAgICAxMzA2MDA6ICfkv53lrprluIInLFxyXG4gICAgICAxMzA3MDA6ICflvKDlrrblj6PluIInLFxyXG4gICAgICAxMzA4MDA6ICfmib/lvrfluIInLFxyXG4gICAgICAxMzA5MDA6ICfmsqflt57luIInLFxyXG4gICAgICAxMzEwMDA6ICflu4rlnYrluIInLFxyXG4gICAgICAxMzExMDA6ICfooaHmsLTluIInLFxyXG4gICAgICAxNDAxMDA6ICflpKrljp/luIInLFxyXG4gICAgICAxNDAyMDA6ICflpKflkIzluIInLFxyXG4gICAgICAxNDAzMDA6ICfpmLPms4nluIInLFxyXG4gICAgICAxNDA0MDA6ICfplb/msrvluIInLFxyXG4gICAgICAxNDA1MDA6ICfmmYvln47luIInLFxyXG4gICAgICAxNDA2MDA6ICfmnJTlt57luIInLFxyXG4gICAgICAxNDA3MDA6ICfmmYvkuK3luIInLFxyXG4gICAgICAxNDA4MDA6ICfov5Dln47luIInLFxyXG4gICAgICAxNDA5MDA6ICflv7vlt57luIInLFxyXG4gICAgICAxNDEwMDA6ICfkuLTmsb7luIInLFxyXG4gICAgICAxNDExMDA6ICflkJXmooHluIInLFxyXG4gICAgICAxNTAxMDA6ICflkbzlkozmtannibnluIInLFxyXG4gICAgICAxNTAyMDA6ICfljIXlpLTluIInLFxyXG4gICAgICAxNTAzMDA6ICfkuYzmtbfluIInLFxyXG4gICAgICAxNTA0MDA6ICfotaTls7DluIInLFxyXG4gICAgICAxNTA1MDA6ICfpgJrovr3luIInLFxyXG4gICAgICAxNTA2MDA6ICfphILlsJTlpJrmlq/luIInLFxyXG4gICAgICAxNTA3MDA6ICflkbzkvKbotJ3lsJTluIInLFxyXG4gICAgICAxNTA4MDA6ICflt7Tlvabmt5blsJTluIInLFxyXG4gICAgICAxNTA5MDA6ICfkuYzlhbDlr5/luIPluIInLFxyXG4gICAgICAxNTIyMDA6ICflhbTlronnm58nLFxyXG4gICAgICAxNTI1MDA6ICfplKHmnpfpg63li5Lnm58nLFxyXG4gICAgICAxNTI5MDA6ICfpmL/mi4nlloTnm58nLFxyXG4gICAgICAyMTAxMDA6ICfmsojpmLPluIInLFxyXG4gICAgICAyMTAyMDA6ICflpKfov57luIInLFxyXG4gICAgICAyMTAzMDA6ICfpno3lsbHluIInLFxyXG4gICAgICAyMTA0MDA6ICfmiprpobrluIInLFxyXG4gICAgICAyMTA1MDA6ICfmnKzmuqrluIInLFxyXG4gICAgICAyMTA2MDA6ICfkuLnkuJzluIInLFxyXG4gICAgICAyMTA3MDA6ICfplKblt57luIInLFxyXG4gICAgICAyMTA4MDA6ICfokKXlj6PluIInLFxyXG4gICAgICAyMTA5MDA6ICfpmJzmlrDluIInLFxyXG4gICAgICAyMTEwMDA6ICfovr3pmLPluIInLFxyXG4gICAgICAyMTExMDA6ICfnm5jplKbluIInLFxyXG4gICAgICAyMTEyMDA6ICfpk4Hlsq3luIInLFxyXG4gICAgICAyMTEzMDA6ICfmnJ3pmLPluIInLFxyXG4gICAgICAyMTE0MDA6ICfokavoiqblspvluIInLFxyXG4gICAgICAyMjAxMDA6ICfplb/mmKXluIInLFxyXG4gICAgICAyMjAyMDA6ICflkInmnpfluIInLFxyXG4gICAgICAyMjAzMDA6ICflm5vlubPluIInLFxyXG4gICAgICAyMjA0MDA6ICfovr3mupDluIInLFxyXG4gICAgICAyMjA1MDA6ICfpgJrljJbluIInLFxyXG4gICAgICAyMjA2MDA6ICfnmb3lsbHluIInLFxyXG4gICAgICAyMjA3MDA6ICfmnb7ljp/luIInLFxyXG4gICAgICAyMjA4MDA6ICfnmb3ln47luIInLFxyXG4gICAgICAyMjI0MDA6ICflu7bovrnmnJ3pspzml4/oh6rmsrvlt54nLFxyXG4gICAgICAyMzAxMDA6ICflk4jlsJTmu6jluIInLFxyXG4gICAgICAyMzAyMDA6ICfpvZDpvZDlk4jlsJTluIInLFxyXG4gICAgICAyMzAzMDA6ICfpuKHopb/luIInLFxyXG4gICAgICAyMzA0MDA6ICfpuaTlspfluIInLFxyXG4gICAgICAyMzA1MDA6ICflj4zpuK3lsbHluIInLFxyXG4gICAgICAyMzA2MDA6ICflpKfluobluIInLFxyXG4gICAgICAyMzA3MDA6ICfkvIrmmKXluIInLFxyXG4gICAgICAyMzA4MDA6ICfkvbPmnKjmlq/luIInLFxyXG4gICAgICAyMzA5MDA6ICfkuIPlj7DmsrPluIInLFxyXG4gICAgICAyMzEwMDA6ICfniaHkuLnmsZ/luIInLFxyXG4gICAgICAyMzExMDA6ICfpu5HmsrPluIInLFxyXG4gICAgICAyMzEyMDA6ICfnu6XljJbluIInLFxyXG4gICAgICAyMzI3MDA6ICflpKflhbTlronlsq3lnLDljLonLFxyXG4gICAgICAzMTAxMDA6ICfkuIrmtbfluIInLFxyXG4gICAgICAzMjAxMDA6ICfljZfkuqzluIInLFxyXG4gICAgICAzMjAyMDA6ICfml6DplKHluIInLFxyXG4gICAgICAzMjAzMDA6ICflvpDlt57luIInLFxyXG4gICAgICAzMjA0MDA6ICfluLjlt57luIInLFxyXG4gICAgICAzMjA1MDA6ICfoi4/lt57luIInLFxyXG4gICAgICAzMjA2MDA6ICfljZfpgJrluIInLFxyXG4gICAgICAzMjA3MDA6ICfov57kupHmuK/luIInLFxyXG4gICAgICAzMjA4MDA6ICfmt67lronluIInLFxyXG4gICAgICAzMjA5MDA6ICfnm5Dln47luIInLFxyXG4gICAgICAzMjEwMDA6ICfmiazlt57luIInLFxyXG4gICAgICAzMjExMDA6ICfplYfmsZ/luIInLFxyXG4gICAgICAzMjEyMDA6ICfms7Dlt57luIInLFxyXG4gICAgICAzMjEzMDA6ICflrr/ov4HluIInLFxyXG4gICAgICAzMzAxMDA6ICfmna3lt57luIInLFxyXG4gICAgICAzMzAyMDA6ICflroHms6LluIInLFxyXG4gICAgICAzMzAzMDA6ICfmuKnlt57luIInLFxyXG4gICAgICAzMzA0MDA6ICflmInlhbTluIInLFxyXG4gICAgICAzMzA1MDA6ICfmuZblt57luIInLFxyXG4gICAgICAzMzA2MDA6ICfnu43lhbTluIInLFxyXG4gICAgICAzMzA3MDA6ICfph5HljY7luIInLFxyXG4gICAgICAzMzA4MDA6ICfooaLlt57luIInLFxyXG4gICAgICAzMzA5MDA6ICfoiJ/lsbHluIInLFxyXG4gICAgICAzMzEwMDA6ICflj7Dlt57luIInLFxyXG4gICAgICAzMzExMDA6ICfkuL3msLTluIInLFxyXG4gICAgICAzNDAxMDA6ICflkIjogqXluIInLFxyXG4gICAgICAzNDAyMDA6ICfoipzmuZbluIInLFxyXG4gICAgICAzNDAzMDA6ICfomozln6DluIInLFxyXG4gICAgICAzNDA0MDA6ICfmt67ljZfluIInLFxyXG4gICAgICAzNDA1MDA6ICfpqazpno3lsbHluIInLFxyXG4gICAgICAzNDA2MDA6ICfmt67ljJfluIInLFxyXG4gICAgICAzNDA3MDA6ICfpk5zpmbXluIInLFxyXG4gICAgICAzNDA4MDA6ICflronluobluIInLFxyXG4gICAgICAzNDEwMDA6ICfpu4TlsbHluIInLFxyXG4gICAgICAzNDExMDA6ICfmu4Hlt57luIInLFxyXG4gICAgICAzNDEyMDA6ICfpmJzpmLPluIInLFxyXG4gICAgICAzNDEzMDA6ICflrr/lt57luIInLFxyXG4gICAgICAzNDE1MDA6ICflha3lronluIInLFxyXG4gICAgICAzNDE2MDA6ICfkurPlt57luIInLFxyXG4gICAgICAzNDE3MDA6ICfmsaDlt57luIInLFxyXG4gICAgICAzNDE4MDA6ICflrqPln47luIInLFxyXG4gICAgICAzNTAxMDA6ICfnpo/lt57luIInLFxyXG4gICAgICAzNTAyMDA6ICfljqbpl6jluIInLFxyXG4gICAgICAzNTAzMDA6ICfojobnlLDluIInLFxyXG4gICAgICAzNTA0MDA6ICfkuInmmI7luIInLFxyXG4gICAgICAzNTA1MDA6ICfms4nlt57luIInLFxyXG4gICAgICAzNTA2MDA6ICfmvLPlt57luIInLFxyXG4gICAgICAzNTA3MDA6ICfljZflubPluIInLFxyXG4gICAgICAzNTA4MDA6ICfpvpnlsqnluIInLFxyXG4gICAgICAzNTA5MDA6ICflroHlvrfluIInLFxyXG4gICAgICAzNjAxMDA6ICfljZfmmIzluIInLFxyXG4gICAgICAzNjAyMDA6ICfmma/lvrfplYfluIInLFxyXG4gICAgICAzNjAzMDA6ICfokI3kuaHluIInLFxyXG4gICAgICAzNjA0MDA6ICfkuZ3msZ/luIInLFxyXG4gICAgICAzNjA1MDA6ICfmlrDkvZnluIInLFxyXG4gICAgICAzNjA2MDA6ICfpubDmva3luIInLFxyXG4gICAgICAzNjA3MDA6ICfotaPlt57luIInLFxyXG4gICAgICAzNjA4MDA6ICflkInlronluIInLFxyXG4gICAgICAzNjA5MDA6ICflrpzmmKXluIInLFxyXG4gICAgICAzNjEwMDA6ICfmiprlt57luIInLFxyXG4gICAgICAzNjExMDA6ICfkuIrppbbluIInLFxyXG4gICAgICAzNzAxMDA6ICfmtY7ljZfluIInLFxyXG4gICAgICAzNzAyMDA6ICfpnZLlspvluIInLFxyXG4gICAgICAzNzAzMDA6ICfmt4TljZrluIInLFxyXG4gICAgICAzNzA0MDA6ICfmnqPluoTluIInLFxyXG4gICAgICAzNzA1MDA6ICfkuJzokKXluIInLFxyXG4gICAgICAzNzA2MDA6ICfng5/lj7DluIInLFxyXG4gICAgICAzNzA3MDA6ICfmvY3lnYrluIInLFxyXG4gICAgICAzNzA4MDA6ICfmtY7lroHluIInLFxyXG4gICAgICAzNzA5MDA6ICfms7DlronluIInLFxyXG4gICAgICAzNzEwMDA6ICflqIHmtbfluIInLFxyXG4gICAgICAzNzExMDA6ICfml6XnhafluIInLFxyXG4gICAgICAzNzEyMDA6ICfojrHoipzluIInLFxyXG4gICAgICAzNzEzMDA6ICfkuLTmsoLluIInLFxyXG4gICAgICAzNzE0MDA6ICflvrflt57luIInLFxyXG4gICAgICAzNzE1MDA6ICfogYrln47luIInLFxyXG4gICAgICAzNzE2MDA6ICfmu6jlt57luIInLFxyXG4gICAgICAzNzE3MDA6ICfoj4/ms73luIInLFxyXG4gICAgICA0MTAxMDA6ICfpg5Hlt57luIInLFxyXG4gICAgICA0MTAyMDA6ICflvIDlsIHluIInLFxyXG4gICAgICA0MTAzMDA6ICfmtJvpmLPluIInLFxyXG4gICAgICA0MTA0MDA6ICflubPpobblsbHluIInLFxyXG4gICAgICA0MTA1MDA6ICflronpmLPluIInLFxyXG4gICAgICA0MTA2MDA6ICfpuaTlo4HluIInLFxyXG4gICAgICA0MTA3MDA6ICfmlrDkuaHluIInLFxyXG4gICAgICA0MTA4MDA6ICfnhKbkvZzluIInLFxyXG4gICAgICA0MTA5MDA6ICfmv67pmLPluIInLFxyXG4gICAgICA0MTEwMDA6ICforrjmmIzluIInLFxyXG4gICAgICA0MTExMDA6ICfmvK/msrPluIInLFxyXG4gICAgICA0MTEyMDA6ICfkuInpl6jls6HluIInLFxyXG4gICAgICA0MTEzMDA6ICfljZfpmLPluIInLFxyXG4gICAgICA0MTE0MDA6ICfllYbkuJjluIInLFxyXG4gICAgICA0MTE1MDA6ICfkv6HpmLPluIInLFxyXG4gICAgICA0MTE2MDA6ICflkajlj6PluIInLFxyXG4gICAgICA0MTE3MDA6ICfpqbvpqazlupfluIInLFxyXG4gICAgICA0MTkwMDA6ICfnnIHnm7Tovpbljr8nLFxyXG4gICAgICA0MjAxMDA6ICfmrabmsYnluIInLFxyXG4gICAgICA0MjAyMDA6ICfpu4Tnn7PluIInLFxyXG4gICAgICA0MjAzMDA6ICfljYHloLDluIInLFxyXG4gICAgICA0MjA1MDA6ICflrpzmmIzluIInLFxyXG4gICAgICA0MjA2MDA6ICfopYTpmLPluIInLFxyXG4gICAgICA0MjA3MDA6ICfphILlt57luIInLFxyXG4gICAgICA0MjA4MDA6ICfojYbpl6jluIInLFxyXG4gICAgICA0MjA5MDA6ICflrZ3mhJ/luIInLFxyXG4gICAgICA0MjEwMDA6ICfojYblt57luIInLFxyXG4gICAgICA0MjExMDA6ICfpu4TlhojluIInLFxyXG4gICAgICA0MjEyMDA6ICflkrjlroHluIInLFxyXG4gICAgICA0MjEzMDA6ICfpmo/lt57luIInLFxyXG4gICAgICA0MjI4MDA6ICfmganmlr3lnJ/lrrbml4/oi5fml4/oh6rmsrvlt54nLFxyXG4gICAgICA0MjkwMDA6ICfnnIHnm7Tovpbljr8nLFxyXG4gICAgICA0MzAxMDA6ICfplb/mspnluIInLFxyXG4gICAgICA0MzAyMDA6ICfmoKrmtLLluIInLFxyXG4gICAgICA0MzAzMDA6ICfmuZjmva3luIInLFxyXG4gICAgICA0MzA0MDA6ICfooaHpmLPluIInLFxyXG4gICAgICA0MzA1MDA6ICfpgrXpmLPluIInLFxyXG4gICAgICA0MzA2MDA6ICflsrPpmLPluIInLFxyXG4gICAgICA0MzA3MDA6ICfluLjlvrfluIInLFxyXG4gICAgICA0MzA4MDA6ICflvKDlrrbnlYzluIInLFxyXG4gICAgICA0MzA5MDA6ICfnm4rpmLPluIInLFxyXG4gICAgICA0MzEwMDA6ICfpg7Tlt57luIInLFxyXG4gICAgICA0MzExMDA6ICfmsLjlt57luIInLFxyXG4gICAgICA0MzEyMDA6ICfmgIDljJbluIInLFxyXG4gICAgICA0MzEzMDA6ICflqITlupXluIInLFxyXG4gICAgICA0MzMxMDA6ICfmuZjopb/lnJ/lrrbml4/oi5fml4/oh6rmsrvlt54nLFxyXG4gICAgICA0NDAxMDA6ICflub/lt57luIInLFxyXG4gICAgICA0NDAyMDA6ICfpn7blhbPluIInLFxyXG4gICAgICA0NDAzMDA6ICfmt7HlnLPluIInLFxyXG4gICAgICA0NDA0MDA6ICfnj6DmtbfluIInLFxyXG4gICAgICA0NDA1MDA6ICfmsZXlpLTluIInLFxyXG4gICAgICA0NDA2MDA6ICfkvZvlsbHluIInLFxyXG4gICAgICA0NDA3MDA6ICfmsZ/pl6jluIInLFxyXG4gICAgICA0NDA4MDA6ICfmuZvmsZ/luIInLFxyXG4gICAgICA0NDA5MDA6ICfojILlkI3luIInLFxyXG4gICAgICA0NDEyMDA6ICfogofluobluIInLFxyXG4gICAgICA0NDEzMDA6ICfmg6Dlt57luIInLFxyXG4gICAgICA0NDE0MDA6ICfmooXlt57luIInLFxyXG4gICAgICA0NDE1MDA6ICfmsZXlsL7luIInLFxyXG4gICAgICA0NDE2MDA6ICfmsrPmupDluIInLFxyXG4gICAgICA0NDE3MDA6ICfpmLPmsZ/luIInLFxyXG4gICAgICA0NDE4MDA6ICfmuIXov5zluIInLFxyXG4gICAgICA0NDE5MDA6ICfkuJzojp7luIInLFxyXG4gICAgICA0NDIwMDA6ICfkuK3lsbHluIInLFxyXG4gICAgICA0NDUxMDA6ICfmva7lt57luIInLFxyXG4gICAgICA0NDUyMDA6ICfmj63pmLPluIInLFxyXG4gICAgICA0NDUzMDA6ICfkupHmta7luIInLFxyXG4gICAgICA0NTAxMDA6ICfljZflroHluIInLFxyXG4gICAgICA0NTAyMDA6ICfmn7Plt57luIInLFxyXG4gICAgICA0NTAzMDA6ICfmoYLmnpfluIInLFxyXG4gICAgICA0NTA0MDA6ICfmoqflt57luIInLFxyXG4gICAgICA0NTA1MDA6ICfljJfmtbfluIInLFxyXG4gICAgICA0NTA2MDA6ICfpmLLln47muK/luIInLFxyXG4gICAgICA0NTA3MDA6ICfpkqblt57luIInLFxyXG4gICAgICA0NTA4MDA6ICfotLXmuK/luIInLFxyXG4gICAgICA0NTA5MDA6ICfnjonmnpfluIInLFxyXG4gICAgICA0NTEwMDA6ICfnmb7oibLluIInLFxyXG4gICAgICA0NTExMDA6ICfotLrlt57luIInLFxyXG4gICAgICA0NTEyMDA6ICfmsrPmsaDluIInLFxyXG4gICAgICA0NTEzMDA6ICfmnaXlrr7luIInLFxyXG4gICAgICA0NTE0MDA6ICfltIflt6bluIInLFxyXG4gICAgICA0NjAxMDA6ICfmtbflj6PluIInLFxyXG4gICAgICA0NjAyMDA6ICfkuInkuprluIInLFxyXG4gICAgICA0NjAzMDA6ICfkuInmspnluIInLFxyXG4gICAgICA0NjA0MDA6ICflhIvlt57luIInLFxyXG4gICAgICA0NjkwMDA6ICfnnIHnm7Tovpbljr8nLFxyXG4gICAgICA1MDAxMDA6ICfph43luobluIInLFxyXG4gICAgICA1MDAyMDA6ICfljr8nLFxyXG4gICAgICA1MTAxMDA6ICfmiJDpg73luIInLFxyXG4gICAgICA1MTAzMDA6ICfoh6rotKHluIInLFxyXG4gICAgICA1MTA0MDA6ICfmlIDmnp3oirHluIInLFxyXG4gICAgICA1MTA1MDA6ICfms7jlt57luIInLFxyXG4gICAgICA1MTA2MDA6ICflvrfpmLPluIInLFxyXG4gICAgICA1MTA3MDA6ICfnu7XpmLPluIInLFxyXG4gICAgICA1MTA4MDA6ICflub/lhYPluIInLFxyXG4gICAgICA1MTA5MDA6ICfpgYLlroHluIInLFxyXG4gICAgICA1MTEwMDA6ICflhoXmsZ/luIInLFxyXG4gICAgICA1MTExMDA6ICfkuZDlsbHluIInLFxyXG4gICAgICA1MTEzMDA6ICfljZflhYXluIInLFxyXG4gICAgICA1MTE0MDA6ICfnnInlsbHluIInLFxyXG4gICAgICA1MTE1MDA6ICflrpzlrr7luIInLFxyXG4gICAgICA1MTE2MDA6ICflub/lronluIInLFxyXG4gICAgICA1MTE3MDA6ICfovr7lt57luIInLFxyXG4gICAgICA1MTE4MDA6ICfpm4XlronluIInLFxyXG4gICAgICA1MTE5MDA6ICflt7TkuK3luIInLFxyXG4gICAgICA1MTIwMDA6ICfotYTpmLPluIInLFxyXG4gICAgICA1MTMyMDA6ICfpmL/lnZ3ol4/ml4/nvozml4/oh6rmsrvlt54nLFxyXG4gICAgICA1MTMzMDA6ICfnlJjlrZzol4/ml4/oh6rmsrvlt54nLFxyXG4gICAgICA1MTM0MDA6ICflh4nlsbHlvZ3ml4/oh6rmsrvlt54nLFxyXG4gICAgICA1MjAxMDA6ICfotLXpmLPluIInLFxyXG4gICAgICA1MjAyMDA6ICflha3nm5jmsLTluIInLFxyXG4gICAgICA1MjAzMDA6ICfpgbXkuYnluIInLFxyXG4gICAgICA1MjA0MDA6ICflronpobrluIInLFxyXG4gICAgICA1MjA1MDA6ICfmr5XoioLluIInLFxyXG4gICAgICA1MjA2MDA6ICfpk5zku4HluIInLFxyXG4gICAgICA1MjIzMDA6ICfpu5Topb/ljZfluIPkvp3ml4/oi5fml4/oh6rmsrvlt54nLFxyXG4gICAgICA1MjI2MDA6ICfpu5TkuJzljZfoi5fml4/kvpfml4/oh6rmsrvlt54nLFxyXG4gICAgICA1MjI3MDA6ICfpu5TljZfluIPkvp3ml4/oi5fml4/oh6rmsrvlt54nLFxyXG4gICAgICA1MzAxMDA6ICfmmIbmmI7luIInLFxyXG4gICAgICA1MzAzMDA6ICfmm7LpnZbluIInLFxyXG4gICAgICA1MzA0MDA6ICfnjonmuqrluIInLFxyXG4gICAgICA1MzA1MDA6ICfkv53lsbHluIInLFxyXG4gICAgICA1MzA2MDA6ICfmmK3pgJrluIInLFxyXG4gICAgICA1MzA3MDA6ICfkuL3msZ/luIInLFxyXG4gICAgICA1MzA4MDA6ICfmma7mtLHluIInLFxyXG4gICAgICA1MzA5MDA6ICfkuLTmsqfluIInLFxyXG4gICAgICA1MzIzMDA6ICfmpZrpm4TlvZ3ml4/oh6rmsrvlt54nLFxyXG4gICAgICA1MzI1MDA6ICfnuqLmsrPlk4jlsLzml4/lvZ3ml4/oh6rmsrvlt54nLFxyXG4gICAgICA1MzI2MDA6ICfmloflsbHlo67ml4/oi5fml4/oh6rmsrvlt54nLFxyXG4gICAgICA1MzI4MDA6ICfopb/lj4zniYjnurPlgqPml4/oh6rmsrvlt54nLFxyXG4gICAgICA1MzI5MDA6ICflpKfnkIbnmb3ml4/oh6rmsrvlt54nLFxyXG4gICAgICA1MzMxMDA6ICflvrflro/lgqPml4/mma/poofml4/oh6rmsrvlt54nLFxyXG4gICAgICA1MzMzMDA6ICfmgJLmsZ/lgojlg7Pml4/oh6rmsrvlt54nLFxyXG4gICAgICA1MzM0MDA6ICfov6rluobol4/ml4/oh6rmsrvlt54nLFxyXG4gICAgICA1NDAxMDA6ICfmi4nokKjluIInLFxyXG4gICAgICA1NDAyMDA6ICfml6XlloDliJnluIInLFxyXG4gICAgICA1NDAzMDA6ICfmmIzpg73luIInLFxyXG4gICAgICA1NDA0MDA6ICfmnpfoip3luIInLFxyXG4gICAgICA1NDA1MDA6ICflsbHljZfluIInLFxyXG4gICAgICA1NDA2MDA6ICfpgqPmm7LluIInLFxyXG4gICAgICA1NDI1MDA6ICfpmL/ph4zlnLDljLonLFxyXG4gICAgICA2MTAxMDA6ICfopb/lronluIInLFxyXG4gICAgICA2MTAyMDA6ICfpk5zlt53luIInLFxyXG4gICAgICA2MTAzMDA6ICflrp3puKHluIInLFxyXG4gICAgICA2MTA0MDA6ICflkrjpmLPluIInLFxyXG4gICAgICA2MTA1MDA6ICfmuK3ljZfluIInLFxyXG4gICAgICA2MTA2MDA6ICflu7blronluIInLFxyXG4gICAgICA2MTA3MDA6ICfmsYnkuK3luIInLFxyXG4gICAgICA2MTA4MDA6ICfmpobmnpfluIInLFxyXG4gICAgICA2MTA5MDA6ICflronlurfluIInLFxyXG4gICAgICA2MTEwMDA6ICfllYbmtJvluIInLFxyXG4gICAgICA2MjAxMDA6ICflhbDlt57luIInLFxyXG4gICAgICA2MjAyMDA6ICflmInls6rlhbPluIInLFxyXG4gICAgICA2MjAzMDA6ICfph5HmmIzluIInLFxyXG4gICAgICA2MjA0MDA6ICfnmb3pk7bluIInLFxyXG4gICAgICA2MjA1MDA6ICflpKnmsLTluIInLFxyXG4gICAgICA2MjA2MDA6ICfmrablqIHluIInLFxyXG4gICAgICA2MjA3MDA6ICflvKDmjpbluIInLFxyXG4gICAgICA2MjA4MDA6ICflubPlh4nluIInLFxyXG4gICAgICA2MjA5MDA6ICfphZLms4nluIInLFxyXG4gICAgICA2MjEwMDA6ICfluobpmLPluIInLFxyXG4gICAgICA2MjExMDA6ICflrpropb/luIInLFxyXG4gICAgICA2MjEyMDA6ICfpmYfljZfluIInLFxyXG4gICAgICA2MjI5MDA6ICfkuLTlpI/lm57ml4/oh6rmsrvlt54nLFxyXG4gICAgICA2MjMwMDA6ICfnlJjljZfol4/ml4/oh6rmsrvlt54nLFxyXG4gICAgICA2MzAxMDA6ICfopb/lroHluIInLFxyXG4gICAgICA2MzAyMDA6ICfmtbfkuJzluIInLFxyXG4gICAgICA2MzIyMDA6ICfmtbfljJfol4/ml4/oh6rmsrvlt54nLFxyXG4gICAgICA2MzIzMDA6ICfpu4TljZfol4/ml4/oh6rmsrvlt54nLFxyXG4gICAgICA2MzI1MDA6ICfmtbfljZfol4/ml4/oh6rmsrvlt54nLFxyXG4gICAgICA2MzI2MDA6ICfmnpzmtJvol4/ml4/oh6rmsrvlt54nLFxyXG4gICAgICA2MzI3MDA6ICfnjonmoJHol4/ml4/oh6rmsrvlt54nLFxyXG4gICAgICA2MzI4MDA6ICfmtbfopb/okpnlj6Tml4/ol4/ml4/oh6rmsrvlt54nLFxyXG4gICAgICA2NDAxMDA6ICfpk7blt53luIInLFxyXG4gICAgICA2NDAyMDA6ICfnn7PlmLTlsbHluIInLFxyXG4gICAgICA2NDAzMDA6ICflkLTlv6DluIInLFxyXG4gICAgICA2NDA0MDA6ICflm7rljp/luIInLFxyXG4gICAgICA2NDA1MDA6ICfkuK3ljavluIInLFxyXG4gICAgICA2NTAxMDA6ICfkuYzpsoHmnKjpvZDluIInLFxyXG4gICAgICA2NTAyMDA6ICflhYvmi4nnjpvkvp3luIInLFxyXG4gICAgICA2NTA0MDA6ICflkJDpsoHnlarluIInLFxyXG4gICAgICA2NTA1MDA6ICflk4jlr4bluIInLFxyXG4gICAgICA2NTIzMDA6ICfmmIzlkInlm57ml4/oh6rmsrvlt54nLFxyXG4gICAgICA2NTI3MDA6ICfljZrlsJTloZTmi4nokpnlj6Toh6rmsrvlt54nLFxyXG4gICAgICA2NTI4MDA6ICflt7Tpn7Ppg63mpZ7okpnlj6Toh6rmsrvlt54nLFxyXG4gICAgICA2NTI5MDA6ICfpmL/lhYvoi4/lnLDljLonLFxyXG4gICAgICA2NTMwMDA6ICflhYvlrZzli5Loi4/mn6/lsJTlhYvlrZzoh6rmsrvlt54nLFxyXG4gICAgICA2NTMxMDA6ICflloDku4DlnLDljLonLFxyXG4gICAgICA2NTMyMDA6ICflkoznlLDlnLDljLonLFxyXG4gICAgICA2NTQwMDA6ICfkvIrnioHlk4jokKjlhYvoh6rmsrvlt54nLFxyXG4gICAgICA2NTQyMDA6ICfloZTln47lnLDljLonLFxyXG4gICAgICA2NTQzMDA6ICfpmL/li5Lms7DlnLDljLonLFxyXG4gICAgICA2NTkwMDA6ICfoh6rmsrvljLrnm7Tovpbljr/nuqfooYzmlL/ljLrliJInLFxyXG4gICAgICA3MTAxMDA6ICflj7DljJfluIInLFxyXG4gICAgICA3MTAyMDA6ICfpq5jpm4TluIInLFxyXG4gICAgICA3MTAzMDA6ICflj7DljZfluIInLFxyXG4gICAgICA3MTA0MDA6ICflj7DkuK3luIInLFxyXG4gICAgICA3MTA1MDA6ICfph5Hpl6jljr8nLFxyXG4gICAgICA3MTA2MDA6ICfljZfmipXljr8nLFxyXG4gICAgICA3MTA3MDA6ICfln7rpmobluIInLFxyXG4gICAgICA3MTA4MDA6ICfmlrDnq7nluIInLFxyXG4gICAgICA3MTA5MDA6ICflmInkuYnluIInLFxyXG4gICAgICA3MTExMDA6ICfmlrDljJfluIInLFxyXG4gICAgICA3MTEyMDA6ICflrpzlhbDljr8nLFxyXG4gICAgICA3MTEzMDA6ICfmlrDnq7nljr8nLFxyXG4gICAgICA3MTE0MDA6ICfmoYPlm63ljr8nLFxyXG4gICAgICA3MTE1MDA6ICfoi5fmoJfljr8nLFxyXG4gICAgICA3MTE3MDA6ICflvbDljJbljr8nLFxyXG4gICAgICA3MTE5MDA6ICflmInkuYnljr8nLFxyXG4gICAgICA3MTIxMDA6ICfkupHmnpfljr8nLFxyXG4gICAgICA3MTI0MDA6ICflsY/kuJzljr8nLFxyXG4gICAgICA3MTI1MDA6ICflj7DkuJzljr8nLFxyXG4gICAgICA3MTI2MDA6ICfoirHojrLljr8nLFxyXG4gICAgICA3MTI3MDA6ICfmvo7muZbljr8nLFxyXG4gICAgICA3MTI4MDA6ICfov57msZ/ljr8nLFxyXG4gICAgICA4MTAxMDA6ICfpppnmuK/lspsnLFxyXG4gICAgICA4MTAyMDA6ICfkuZ3pvpknLFxyXG4gICAgICA4MTAzMDA6ICfmlrDnlYwnLFxyXG4gICAgICA4MjAxMDA6ICfmvrPpl6jljYrlspsnLFxyXG4gICAgICA4MjAyMDA6ICfnprvlspsnLFxyXG4gICAgICA5MDA0MDA6ICfpmL/lr4zmsZcnLFxyXG4gICAgICA5MDA4MDA6ICfpmL/lsJTlt7TlsLzkuponLFxyXG4gICAgICA5MDEwMDA6ICfljZfmnoHmtLInLFxyXG4gICAgICA5MDEyMDA6ICfpmL/lsJTlj4rliKnkuponLFxyXG4gICAgICA5MDE2MDA6ICfnvo7lsZ7okKjmkankuponLFxyXG4gICAgICA5MDIwMDA6ICflronpgZPlsJQnLFxyXG4gICAgICA5MDI0MDA6ICflronlk6Xmi4knLFxyXG4gICAgICA5MDI4MDA6ICflronmj5Dnk5zlkozlt7TluIPovr4nLFxyXG4gICAgICA5MDMxMDA6ICfpmL/loZ7mi5znloYnLFxyXG4gICAgICA5MDMyMDA6ICfpmL/moLnlu7cnLFxyXG4gICAgICA5MDM2MDA6ICfmvrPlpKfliKnkuponLFxyXG4gICAgICA5MDQwMDA6ICflpaXlnLDliKknLFxyXG4gICAgICA5MDQ0MDA6ICflt7Tlk4jpqawnLFxyXG4gICAgICA5MDQ4MDA6ICflt7TmnpcnLFxyXG4gICAgICA5MDUwMDA6ICflrZ/liqDmi4knLFxyXG4gICAgICA5MDUxMDA6ICfkuprnvo7lsLzkuponLFxyXG4gICAgICA5MDUyMDA6ICflt7Tlt7TlpJrmlq8nLFxyXG4gICAgICA5MDU2MDA6ICfmr5TliKnml7YnLFxyXG4gICAgICA5MDYwMDA6ICfnmb7mhZXlpKcnLFxyXG4gICAgICA5MDY0MDA6ICfkuI3kuLknLFxyXG4gICAgICA5MDY4MDA6ICfnjrvliKnnu7TkuponLFxyXG4gICAgICA5MDcwMDA6ICfms6Lpu5EnLFxyXG4gICAgICA5MDcyMDA6ICfljZrojKjnk6bnurMnLFxyXG4gICAgICA5MDc0MDA6ICfluIPpn6blspsnLFxyXG4gICAgICA5MDc2MDA6ICflt7Topb8nLFxyXG4gICAgICA5MDg0MDA6ICfkvK/liKnlhbknLFxyXG4gICAgICA5MDg2MDA6ICfoi7HlsZ7ljbDluqbmtIvpooblnLAnLFxyXG4gICAgICA5MDkwMDA6ICfmiYDnvZfpl6jnvqTlspsnLFxyXG4gICAgICA5MDkyMDA6ICfoi7HlsZ7nu7TlsJTkuqznvqTlspsnLFxyXG4gICAgICA5MDk2MDA6ICfmlofojrEnLFxyXG4gICAgICA5MTAwMDA6ICfkv53liqDliKnkuponLFxyXG4gICAgICA5MTA0MDA6ICfnvIXnlLgnLFxyXG4gICAgICA5MTA4MDA6ICfluIPpmobov6onLFxyXG4gICAgICA5MTEyMDA6ICfnmb3kv4TnvZfmlq8nLFxyXG4gICAgICA5MTE2MDA6ICfmn6zln5Tlr6gnLFxyXG4gICAgICA5MTIwMDA6ICflloDpuqbpmoYnLFxyXG4gICAgICA5MTI0MDA6ICfliqDmi7/lpKcnLFxyXG4gICAgICA5MTMyMDA6ICfkvZvlvpfop5InLFxyXG4gICAgICA5MTM2MDA6ICflvIDmm7znvqTlspsnLFxyXG4gICAgICA5MTQwMDA6ICfkuK3pnZ4nLFxyXG4gICAgICA5MTQ0MDA6ICfmlq/ph4zlhbDljaEnLFxyXG4gICAgICA5MTQ4MDA6ICfkuY3lvpcnLFxyXG4gICAgICA5MTUyMDA6ICfmmbrliKknLFxyXG4gICAgICA5MTYyMDA6ICflnKPor57lspsnLFxyXG4gICAgICA5MTY2MDA6ICfnp5Hnp5Hmlq/nvqTlspsnLFxyXG4gICAgICA5MTcwMDA6ICflk6XkvKbmr5TkuponLFxyXG4gICAgICA5MTc0MDA6ICfnp5HmkannvZcnLFxyXG4gICAgICA5MTc1MDA6ICfpqaznuqbnibknLFxyXG4gICAgICA5MTc4MDA6ICfliJrmnpzvvIjluIPvvIknLFxyXG4gICAgICA5MTgwMDA6ICfliJrmnpzvvIjph5HvvIknLFxyXG4gICAgICA5MTg0MDA6ICflupPlhYvnvqTlspsnLFxyXG4gICAgICA5MTg4MDA6ICflk6Xmlq/ovr7pu47liqAnLFxyXG4gICAgICA5MTkxMDA6ICflhYvnvZflnLDkuponLFxyXG4gICAgICA5MTkyMDA6ICflj6Tlt7QnLFxyXG4gICAgICA5MTk2MDA6ICfloZ7mtabot6/mlq8nLFxyXG4gICAgICA5MjAzMDA6ICfmjbflhYsnLFxyXG4gICAgICA5MjA0MDA6ICfotJ3lroEnLFxyXG4gICAgICA5MjA4MDA6ICfkuLnpuqYnLFxyXG4gICAgICA5MjEyMDA6ICflpJrnsbPlsLzlhYsnLFxyXG4gICAgICA5MjE0MDA6ICflpJrnsbPlsLzliqAnLFxyXG4gICAgICA5MjE4MDA6ICfljoTnk5zlpJrlsJQnLFxyXG4gICAgICA5MjIyMDA6ICfokKjlsJTnk6blpJonLFxyXG4gICAgICA5MjI2MDA6ICfotaTpgZPlh6DlhoXkuponLFxyXG4gICAgICA5MjMxMDA6ICfln4PloZ7kv4Tmr5TkuponLFxyXG4gICAgICA5MjMyMDA6ICfljoTnq4vnibnph4zkuponLFxyXG4gICAgICA5MjMzMDA6ICfniLHmspnlsLzkuponLFxyXG4gICAgICA5MjM0MDA6ICfms5XnvZfnvqTlspsnLFxyXG4gICAgICA5MjM4MDA6ICfpqazlsJTnu7TnurPmlq/nvqTlspvvvIgg56aP5YWL5YWw77yJJyxcclxuICAgICAgOTIzOTAwOiAn5Y2X5LmU5rK75Lqa5bKb5ZKM5Y2X5qGR5aiB5aWH576k5bKbJyxcclxuICAgICAgOTI0MjAwOiAn5paQ5rWO576k5bKbJyxcclxuICAgICAgOTI0NjAwOiAn6Iqs5YWwJyxcclxuICAgICAgOTI0ODAwOiAn5aWl5YWw576k5bKbJyxcclxuICAgICAgOTI1MDAwOiAn5rOV5Zu9JyxcclxuICAgICAgOTI1NDAwOiAn5rOV5bGe5Zyt5Lqa6YKjJyxcclxuICAgICAgOTI1ODAwOiAn5rOV5bGe5rOi5Yip5bC86KW/5LqaJyxcclxuICAgICAgOTI2MDAwOiAn5rOV5bGe5Y2X6YOo6aKG5ZywJyxcclxuICAgICAgOTI2MjAwOiAn5ZCJ5biD5o+QJyxcclxuICAgICAgOTI2NjAwOiAn5Yqg6JOsJyxcclxuICAgICAgOTI2ODAwOiAn5qC86bKB5ZCJ5LqaJyxcclxuICAgICAgOTI3MDAwOiAn5YaI5q+U5LqaJyxcclxuICAgICAgOTI3NTAwOiAn5be05YuS5pav5Z2mJyxcclxuICAgICAgOTI3NjAwOiAn5b635Zu9JyxcclxuICAgICAgOTI4ODAwOiAn5Yqg57qzJyxcclxuICAgICAgOTI5MjAwOiAn55u05biD572X6ZmAJyxcclxuICAgICAgOTI5NjAwOiAn5Z+66YeM5be05pavJyxcclxuICAgICAgOTMwMDAwOiAn5biM6IWKJyxcclxuICAgICAgOTMwNDAwOiAn5qC86Zm15YWwJyxcclxuICAgICAgOTMwODAwOiAn5qC85p6X57qz6L6+JyxcclxuICAgICAgOTMxMjAwOiAn55Oc5b63572X5pmuJyxcclxuICAgICAgOTMxNjAwOiAn5YWz5bKbJyxcclxuICAgICAgOTMyMDAwOiAn5Y2x5Zyw6ams5ouJJyxcclxuICAgICAgOTMyNDAwOiAn5Yeg5YaF5LqaJyxcclxuICAgICAgOTMyODAwOiAn5Zyt5Lqa6YKjJyxcclxuICAgICAgOTMzMjAwOiAn5rW35ZywJyxcclxuICAgICAgOTMzNDAwOiAn6LWr5b635bKb5ZKM6bqm5YWL5ZSQ57qz576k5bKbJyxcclxuICAgICAgOTMzNjAwOiAn5qK16JKC5YaIJyxcclxuICAgICAgOTM0MDAwOiAn5rSq6YO95ouJ5pavJyxcclxuICAgICAgOTM0ODAwOiAn5YyI54mZ5YipJyxcclxuICAgICAgOTM1MjAwOiAn5Yaw5bKbJyxcclxuICAgICAgOTM1NjAwOiAn5Y2w5bqmJyxcclxuICAgICAgOTM2MDAwOiAn5Y2w5bC8JyxcclxuICAgICAgOTM2NDAwOiAn5LyK5pyXJyxcclxuICAgICAgOTM2ODAwOiAn5LyK5ouJ5YWLJyxcclxuICAgICAgOTM3MjAwOiAn54ix5bCU5YWwJyxcclxuICAgICAgOTM3NjAwOiAn5Lul6Imy5YiXJyxcclxuICAgICAgOTM4MDAwOiAn5oSP5aSn5YipJyxcclxuICAgICAgOTM4NDAwOiAn56eR54m56L+q55OmJyxcclxuICAgICAgOTM4ODAwOiAn54mZ5Lmw5YqgJyxcclxuICAgICAgOTM5MjAwOiAn5pel5pysJyxcclxuICAgICAgOTM5ODAwOiAn5ZOI6JCo5YWL5pav5Z2mJyxcclxuICAgICAgOTQwMDAwOiAn57qm5pemJyxcclxuICAgICAgOTQwNDAwOiAn6IKv5bC85LqaJyxcclxuICAgICAgOTQwODAwOiAn5pyd6bKcIOWMl+acnemynCcsXHJcbiAgICAgIDk0MTAwMDogJ+mfqeWbvScsXHJcbiAgICAgIDk0MTQwMDogJ+enkeWogeeJuScsXHJcbiAgICAgIDk0MTcwMDogJ+WQieWwlOWQieaWr+aWr+WdpicsXHJcbiAgICAgIDk0MTgwMDogJ+iAgeaMnScsXHJcbiAgICAgIDk0MjIwMDogJ+m7juW3tOWrqScsXHJcbiAgICAgIDk0MjYwMDogJ+iOsee0ouaJmCcsXHJcbiAgICAgIDk0MjgwMDogJ+aLieiEsee7tOS6micsXHJcbiAgICAgIDk0MzAwMDogJ+WIqeavlOmHjOS6micsXHJcbiAgICAgIDk0MzQwMDogJ+WIqeavlOS6micsXHJcbiAgICAgIDk0MzgwMDogJ+WIl+aUr+aVpuWjq+eZuycsXHJcbiAgICAgIDk0NDAwMDogJ+eri+mZtuWumycsXHJcbiAgICAgIDk0NDIwMDogJ+WNouajruWgoScsXHJcbiAgICAgIDk0NTAwMDogJ+mprOi+vuWKoOaWr+WKoCcsXHJcbiAgICAgIDk0NTQwMDogJ+mprOaLiee7tCcsXHJcbiAgICAgIDk0NTgwMDogJ+mprOadpeilv+S6micsXHJcbiAgICAgIDk0NjIwMDogJ+mprOWwlOS7o+WkqycsXHJcbiAgICAgIDk0NjYwMDogJ+mprOmHjCcsXHJcbiAgICAgIDk0NzAwMDogJ+mprOiAs+S7licsXHJcbiAgICAgIDk0NzQwMDogJ+mprOaPkOWwvOWFiycsXHJcbiAgICAgIDk0NzgwMDogJ+avm+mHjOWhlOWwvOS6micsXHJcbiAgICAgIDk0ODAwMDogJ+avm+mHjOaxguaWrycsXHJcbiAgICAgIDk0ODQwMDogJ+WiqOilv+WTpScsXHJcbiAgICAgIDk0OTIwMDogJ+aRqee6s+WTpScsXHJcbiAgICAgIDk0OTYwMDogJ+iSmeWPpOWbvScsXHJcbiAgICAgIDk0OTgwMDogJ+aRqeWwlOWkmueTpicsXHJcbiAgICAgIDk0OTkwMDogJ+m7keWxsScsXHJcbiAgICAgIDk1MDAwMDogJ+iSmeWhnuaLieeJueWymycsXHJcbiAgICAgIDk1MDQwMDogJ+aRqea0m+WTpScsXHJcbiAgICAgIDk1MDgwMDogJ+iOq+ahkeavlOWFiycsXHJcbiAgICAgIDk1MTIwMDogJ+mYv+abvCcsXHJcbiAgICAgIDk1MTYwMDogJ+e6s+exs+avlOS6micsXHJcbiAgICAgIDk1MjAwMDogJ+eRmemygScsXHJcbiAgICAgIDk1MjQwMDogJ+WwvOaziuWwlCcsXHJcbiAgICAgIDk1MjgwMDogJ+iNt+WFsCcsXHJcbiAgICAgIDk1MzMwMDogJ+mYv+mygeW3tCcsXHJcbiAgICAgIDk1MzUwMDogJ+iNt+WFsOWKoOWLkuavlOWMuicsXHJcbiAgICAgIDk1NDAwMDogJ+aWsOWWgOmHjOWkmuWwvOS6micsXHJcbiAgICAgIDk1NDgwMDogJ+eTpuWKqumYv+WbvicsXHJcbiAgICAgIDk1NTQwMDogJ+aWsOilv+WFsCcsXHJcbiAgICAgIDk1NTgwMDogJ+WwvOWKoOaLieeTnCcsXHJcbiAgICAgIDk1NjIwMDogJ+WwvOaXpeWwlCcsXHJcbiAgICAgIDk1NjYwMDogJ+WwvOaXpeWIqeS6micsXHJcbiAgICAgIDk1NzAwMDogJ+e6veWfgycsXHJcbiAgICAgIDk1NzQwMDogJ+ivuuemj+WFi+WymycsXHJcbiAgICAgIDk1NzgwMDogJ+aMquWogScsXHJcbiAgICAgIDk1ODAwMDogJ+WMl+mprOmHjOS6mue6s+e+pOWymycsXHJcbiAgICAgIDk1ODEwMDogJ+e+juWbveacrOWcn+WkluWwj+Wym+WxvycsXHJcbiAgICAgIDk1ODMwMDogJ+WvhuWFi+e9l+WwvOilv+S6muiBlOmCpicsXHJcbiAgICAgIDk1ODQwMDogJ+mprOe7jeWwlOe+pOWymycsXHJcbiAgICAgIDk1ODUwMDogJ+W4leWKsycsXHJcbiAgICAgIDk1ODYwMDogJ+W3tOWfuuaWr+WdpicsXHJcbiAgICAgIDk1OTEwMDogJ+W3tOaLv+mprCcsXHJcbiAgICAgIDk1OTgwMDogJ+W3tOW4g+S6muaWsOWHoOWGheS6micsXHJcbiAgICAgIDk2MDAwMDogJ+W3tOaLieWcrScsXHJcbiAgICAgIDk2MDQwMDogJ+enmOmygScsXHJcbiAgICAgIDk2MDgwMDogJ+iPsuW+i+WuvicsXHJcbiAgICAgIDk2MTIwMDogJ+earueJueWHr+aBqee+pOWymycsXHJcbiAgICAgIDk2MTYwMDogJ+azouWFsCcsXHJcbiAgICAgIDk2MjAwMDogJ+iRoeiQhOeJmScsXHJcbiAgICAgIDk2MjQwMDogJ+WHoOWGheS6muavlOe7jScsXHJcbiAgICAgIDk2MjYwMDogJ+S4nOW4neaxticsXHJcbiAgICAgIDk2MzAwMDogJ+azouWkmum7juWQhCcsXHJcbiAgICAgIDk2MzQwMDogJ+WNoeWhlOWwlCcsXHJcbiAgICAgIDk2MzgwMDogJ+eVmeWwvOaxqicsXHJcbiAgICAgIDk2NDIwMDogJ+e9l+mprOWwvOS6micsXHJcbiAgICAgIDk2NDMwMDogJ+S/hOe9l+aWrycsXHJcbiAgICAgIDk2NDYwMDogJ+WNouaXuui+vicsXHJcbiAgICAgIDk2NTIwMDogJ+Wco+W3tOazsOWLkuexs+WymycsXHJcbiAgICAgIDk2NTQwMDogJ+Wco+i1q+WLkuaLvycsXHJcbiAgICAgIDk2NTkwMDogJ+Wco+WfuuiMqOWSjOWwvOe7tOaWrycsXHJcbiAgICAgIDk2NjAwMDogJ+WuieWcreaLiScsXHJcbiAgICAgIDk2NjIwMDogJ+Wco+WNouilv+S6micsXHJcbiAgICAgIDk2NjMwMDogJ+azleWxnuWco+mprOS4gScsXHJcbiAgICAgIDk2NjYwMDogJ+Wco+earuWfg+WwlOWSjOWvhuWFi+mahicsXHJcbiAgICAgIDk2NzAwMDogJ+Wco+aWh+ajrueJueWSjOagvOael+e6s+S4geaWrycsXHJcbiAgICAgIDk2NzQwMDogJ+Wco+mprOWKm+ivuicsXHJcbiAgICAgIDk2NzgwMDogJ+Wco+Wkmue+juWSjOaZruael+ilv+avlCcsXHJcbiAgICAgIDk2ODIwMDogJ+aymeeJuemYv+aLieS8rycsXHJcbiAgICAgIDk2ODYwMDogJ+WhnuWGheWKoOWwlCcsXHJcbiAgICAgIDk2ODgwMDogJ+WhnuWwlOe7tOS6micsXHJcbiAgICAgIDk2OTAwMDogJ+WhnuiIjOWwlCcsXHJcbiAgICAgIDk2OTQwMDogJ+WhnuaLieWIqeaYgicsXHJcbiAgICAgIDk3MDIwMDogJ+aWsOWKoOWdoScsXHJcbiAgICAgIDk3MDMwMDogJ+aWr+a0m+S8kOWFiycsXHJcbiAgICAgIDk3MDQwMDogJ+i2iuWNlycsXHJcbiAgICAgIDk3MDUwMDogJ+aWr+a0m+aWh+WwvOS6micsXHJcbiAgICAgIDk3MDYwMDogJ+e0oumprOmHjCcsXHJcbiAgICAgIDk3MTAwMDogJ+WNl+mdnicsXHJcbiAgICAgIDk3MTYwMDogJ+a0peW3tOW4g+mfpicsXHJcbiAgICAgIDk3MjQwMDogJ+ilv+ePreeJmScsXHJcbiAgICAgIDk3MjgwMDogJ+WNl+iLj+S4uScsXHJcbiAgICAgIDk3MjkwMDogJ+iLj+S4uScsXHJcbiAgICAgIDk3MzIwMDogJ+ilv+aSkuWTiOaLiScsXHJcbiAgICAgIDk3NDAwMDogJ+iLj+mHjOWNlycsXHJcbiAgICAgIDk3NDQwMDogJ+aWr+eTpuWwlOW3tOe+pOWym+WSjCDmiazpqazlu7blspsnLFxyXG4gICAgICA5NzQ4MDA6ICfmlq/lqIHlo6vlhbAnLFxyXG4gICAgICA5NzUyMDA6ICfnkZ7lhbgnLFxyXG4gICAgICA5NzU2MDA6ICfnkZ7lo6snLFxyXG4gICAgICA5NzYwMDA6ICflj5nliKnkuponLFxyXG4gICAgICA5NzYyMDA6ICfloZTlkInlhYvmlq/lnaYnLFxyXG4gICAgICA5NzY0MDA6ICfms7Dlm70nLFxyXG4gICAgICA5NzY4MDA6ICflpJrlk6UnLFxyXG4gICAgICA5NzcyMDA6ICfmiZjlhYvlirMnLFxyXG4gICAgICA5Nzc2MDA6ICfmsaTliqAnLFxyXG4gICAgICA5NzgwMDA6ICfnibnnq4vlsLzovr7lkozlpJrlt7Tlk6UnLFxyXG4gICAgICA5Nzg0MDA6ICfpmL/ogZTphYsnLFxyXG4gICAgICA5Nzg4MDA6ICfnqoHlsLzmlq8nLFxyXG4gICAgICA5NzkyMDA6ICflnJ/ogLPlhbYnLFxyXG4gICAgICA5Nzk1MDA6ICflnJ/lupPmm7zmlq/lnaYnLFxyXG4gICAgICA5Nzk2MDA6ICfnibnlhYvmlq/lkozlh6/np5Hmlq/nvqTlspsnLFxyXG4gICAgICA5Nzk4MDA6ICflm77nk6bljaInLFxyXG4gICAgICA5ODAwMDA6ICfkuYzlubLovr4nLFxyXG4gICAgICA5ODA0MDA6ICfkuYzlhYvlhbAnLFxyXG4gICAgICA5ODA3MDA6ICfpqazlhbbpob8nLFxyXG4gICAgICA5ODE4MDA6ICfln4Plj4onLFxyXG4gICAgICA5ODI2MDA6ICfoi7Hlm70nLFxyXG4gICAgICA5ODMxMDA6ICfmoLnopb/lspsnLFxyXG4gICAgICA5ODMyMDA6ICfms73opb/lspsnLFxyXG4gICAgICA5ODMzMDA6ICfpqazmganlspsnLFxyXG4gICAgICA5ODM0MDA6ICflnabmoZHlsLzkuponLFxyXG4gICAgICA5ODQwMDA6ICfnvo7lm70nLFxyXG4gICAgICA5ODUwMDA6ICfnvo7lsZ7nu7TlsJTkuqznvqTlspsnLFxyXG4gICAgICA5ODU0MDA6ICfluIPln7rnurPms5XntKInLFxyXG4gICAgICA5ODU4MDA6ICfkuYzmi4nlnK0nLFxyXG4gICAgICA5ODYwMDA6ICfkuYzlhbnliKvlhYvmlq/lnaYnLFxyXG4gICAgICA5ODYyMDA6ICflp5TlhoXnkZ7mi4knLFxyXG4gICAgICA5ODc2MDA6ICfnk6bliKnmlq/lkozlr4zlm77nurMnLFxyXG4gICAgICA5ODgyMDA6ICfokKjmkankuponLFxyXG4gICAgICA5ODg3MDA6ICfkuZ/pl6gnLFxyXG4gICAgICA5ODk0MDA6ICfotZ7mr5TkuponXHJcbiAgICB9LFxyXG4gICAgY291bnR5X2xpc3Q6IHtcclxuICAgICAgMTEwMTAxOiAn5Lic5Z+O5Yy6JyxcclxuICAgICAgMTEwMTAyOiAn6KW/5Z+O5Yy6JyxcclxuICAgICAgMTEwMTA1OiAn5pyd6Ziz5Yy6JyxcclxuICAgICAgMTEwMTA2OiAn5Liw5Y+w5Yy6JyxcclxuICAgICAgMTEwMTA3OiAn55+z5pmv5bGx5Yy6JyxcclxuICAgICAgMTEwMTA4OiAn5rW35reA5Yy6JyxcclxuICAgICAgMTEwMTA5OiAn6Zeo5aS05rKf5Yy6JyxcclxuICAgICAgMTEwMTExOiAn5oi/5bGx5Yy6JyxcclxuICAgICAgMTEwMTEyOiAn6YCa5bee5Yy6JyxcclxuICAgICAgMTEwMTEzOiAn6aG65LmJ5Yy6JyxcclxuICAgICAgMTEwMTE0OiAn5piM5bmz5Yy6JyxcclxuICAgICAgMTEwMTE1OiAn5aSn5YW05Yy6JyxcclxuICAgICAgMTEwMTE2OiAn5oCA5p+U5Yy6JyxcclxuICAgICAgMTEwMTE3OiAn5bmz6LC35Yy6JyxcclxuICAgICAgMTEwMTE4OiAn5a+G5LqR5Yy6JyxcclxuICAgICAgMTEwMTE5OiAn5bu25bqG5Yy6JyxcclxuICAgICAgMTIwMTAxOiAn5ZKM5bmz5Yy6JyxcclxuICAgICAgMTIwMTAyOiAn5rKz5Lic5Yy6JyxcclxuICAgICAgMTIwMTAzOiAn5rKz6KW/5Yy6JyxcclxuICAgICAgMTIwMTA0OiAn5Y2X5byA5Yy6JyxcclxuICAgICAgMTIwMTA1OiAn5rKz5YyX5Yy6JyxcclxuICAgICAgMTIwMTA2OiAn57qi5qGl5Yy6JyxcclxuICAgICAgMTIwMTEwOiAn5Lic5Li95Yy6JyxcclxuICAgICAgMTIwMTExOiAn6KW/6Z2S5Yy6JyxcclxuICAgICAgMTIwMTEyOiAn5rSl5Y2X5Yy6JyxcclxuICAgICAgMTIwMTEzOiAn5YyX6L6w5Yy6JyxcclxuICAgICAgMTIwMTE0OiAn5q2m5riF5Yy6JyxcclxuICAgICAgMTIwMTE1OiAn5a6d5Z275Yy6JyxcclxuICAgICAgMTIwMTE2OiAn5ruo5rW35paw5Yy6JyxcclxuICAgICAgMTIwMTE3OiAn5a6B5rKz5Yy6JyxcclxuICAgICAgMTIwMTE4OiAn6Z2Z5rW35Yy6JyxcclxuICAgICAgMTIwMTE5OiAn6JOf5bee5Yy6JyxcclxuICAgICAgMTMwMTAyOiAn6ZW/5a6J5Yy6JyxcclxuICAgICAgMTMwMTA0OiAn5qGl6KW/5Yy6JyxcclxuICAgICAgMTMwMTA1OiAn5paw5Y2O5Yy6JyxcclxuICAgICAgMTMwMTA3OiAn5LqV6ZmJ55+/5Yy6JyxcclxuICAgICAgMTMwMTA4OiAn6KOV5Y2O5Yy6JyxcclxuICAgICAgMTMwMTA5OiAn6JeB5Z+O5Yy6JyxcclxuICAgICAgMTMwMTEwOiAn6bm/5rOJ5Yy6JyxcclxuICAgICAgMTMwMTExOiAn5qC+5Z+O5Yy6JyxcclxuICAgICAgMTMwMTIxOiAn5LqV6ZmJ5Y6/JyxcclxuICAgICAgMTMwMTIzOiAn5q2j5a6a5Y6/JyxcclxuICAgICAgMTMwMTI1OiAn6KGM5ZSQ5Y6/JyxcclxuICAgICAgMTMwMTI2OiAn54G15a+/5Y6/JyxcclxuICAgICAgMTMwMTI3OiAn6auY6YKR5Y6/JyxcclxuICAgICAgMTMwMTI4OiAn5rex5rO95Y6/JyxcclxuICAgICAgMTMwMTI5OiAn6LWe55qH5Y6/JyxcclxuICAgICAgMTMwMTMwOiAn5peg5p6B5Y6/JyxcclxuICAgICAgMTMwMTMxOiAn5bmz5bGx5Y6/JyxcclxuICAgICAgMTMwMTMyOiAn5YWD5rCP5Y6/JyxcclxuICAgICAgMTMwMTMzOiAn6LW15Y6/JyxcclxuICAgICAgMTMwMTgxOiAn6L6b6ZuG5biCJyxcclxuICAgICAgMTMwMTgzOiAn5pmL5bee5biCJyxcclxuICAgICAgMTMwMTg0OiAn5paw5LmQ5biCJyxcclxuICAgICAgMTMwMjAyOiAn6Lev5Y2X5Yy6JyxcclxuICAgICAgMTMwMjAzOiAn6Lev5YyX5Yy6JyxcclxuICAgICAgMTMwMjA0OiAn5Y+k5Ya25Yy6JyxcclxuICAgICAgMTMwMjA1OiAn5byA5bmz5Yy6JyxcclxuICAgICAgMTMwMjA3OiAn5Liw5Y2X5Yy6JyxcclxuICAgICAgMTMwMjA4OiAn5Liw5ram5Yy6JyxcclxuICAgICAgMTMwMjA5OiAn5pu55aaD55S45Yy6JyxcclxuICAgICAgMTMwMjI0OiAn5rum5Y2X5Y6/JyxcclxuICAgICAgMTMwMjI1OiAn5LmQ5Lqt5Y6/JyxcclxuICAgICAgMTMwMjI3OiAn6L+B6KW/5Y6/JyxcclxuICAgICAgMTMwMjI5OiAn546J55Sw5Y6/JyxcclxuICAgICAgMTMwMjgxOiAn6YG15YyW5biCJyxcclxuICAgICAgMTMwMjgzOiAn6L+B5a6J5biCJyxcclxuICAgICAgMTMwMjg0OiAn5rum5bee5biCJyxcclxuICAgICAgMTMwMzAyOiAn5rW35riv5Yy6JyxcclxuICAgICAgMTMwMzAzOiAn5bGx5rW35YWz5Yy6JyxcclxuICAgICAgMTMwMzA0OiAn5YyX5oi05rKz5Yy6JyxcclxuICAgICAgMTMwMzA2OiAn5oqa5a6B5Yy6JyxcclxuICAgICAgMTMwMzIxOiAn6Z2S6b6Z5ruh5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMTMwMzIyOiAn5piM6buO5Y6/JyxcclxuICAgICAgMTMwMzI0OiAn5Y2i6b6Z5Y6/JyxcclxuICAgICAgMTMwMzkwOiAn57uP5rWO5oqA5pyv5byA5Y+R5Yy6JyxcclxuICAgICAgMTMwNDAyOiAn6YKv5bGx5Yy6JyxcclxuICAgICAgMTMwNDAzOiAn5Lib5Y+w5Yy6JyxcclxuICAgICAgMTMwNDA0OiAn5aSN5YW05Yy6JyxcclxuICAgICAgMTMwNDA2OiAn5bOw5bOw55+/5Yy6JyxcclxuICAgICAgMTMwNDA3OiAn6IKl5Lmh5Yy6JyxcclxuICAgICAgMTMwNDA4OiAn5rC45bm05Yy6JyxcclxuICAgICAgMTMwNDIzOiAn5Li05ryz5Y6/JyxcclxuICAgICAgMTMwNDI0OiAn5oiQ5a6J5Y6/JyxcclxuICAgICAgMTMwNDI1OiAn5aSn5ZCN5Y6/JyxcclxuICAgICAgMTMwNDI2OiAn5raJ5Y6/JyxcclxuICAgICAgMTMwNDI3OiAn56OB5Y6/JyxcclxuICAgICAgMTMwNDMwOiAn6YKx5Y6/JyxcclxuICAgICAgMTMwNDMxOiAn6bih5rO95Y6/JyxcclxuICAgICAgMTMwNDMyOiAn5bm/5bmz5Y6/JyxcclxuICAgICAgMTMwNDMzOiAn6aaG6Zm25Y6/JyxcclxuICAgICAgMTMwNDM0OiAn6a2P5Y6/JyxcclxuICAgICAgMTMwNDM1OiAn5puy5ZGo5Y6/JyxcclxuICAgICAgMTMwNDgxOiAn5q2m5a6J5biCJyxcclxuICAgICAgMTMwNTAyOiAn5qGl5Lic5Yy6JyxcclxuICAgICAgMTMwNTAzOiAn5qGl6KW/5Yy6JyxcclxuICAgICAgMTMwNTIxOiAn6YKi5Y+w5Y6/JyxcclxuICAgICAgMTMwNTIyOiAn5Li05Z+O5Y6/JyxcclxuICAgICAgMTMwNTIzOiAn5YaF5LiY5Y6/JyxcclxuICAgICAgMTMwNTI0OiAn5p+P5Lmh5Y6/JyxcclxuICAgICAgMTMwNTI1OiAn6ZqG5bCn5Y6/JyxcclxuICAgICAgMTMwNTI2OiAn5Lu75Y6/JyxcclxuICAgICAgMTMwNTI3OiAn5Y2X5ZKM5Y6/JyxcclxuICAgICAgMTMwNTI4OiAn5a6B5pmL5Y6/JyxcclxuICAgICAgMTMwNTI5OiAn5beo6bm/5Y6/JyxcclxuICAgICAgMTMwNTMwOiAn5paw5rKz5Y6/JyxcclxuICAgICAgMTMwNTMxOiAn5bm/5a6X5Y6/JyxcclxuICAgICAgMTMwNTMyOiAn5bmz5Lmh5Y6/JyxcclxuICAgICAgMTMwNTMzOiAn5aiB5Y6/JyxcclxuICAgICAgMTMwNTM0OiAn5riF5rKz5Y6/JyxcclxuICAgICAgMTMwNTM1OiAn5Li06KW/5Y6/JyxcclxuICAgICAgMTMwNTgxOiAn5Y2X5a6r5biCJyxcclxuICAgICAgMTMwNTgyOiAn5rKZ5rKz5biCJyxcclxuICAgICAgMTMwNjAyOiAn56ue56eA5Yy6JyxcclxuICAgICAgMTMwNjA2OiAn6I6y5rGg5Yy6JyxcclxuICAgICAgMTMwNjA3OiAn5ruh5Z+O5Yy6JyxcclxuICAgICAgMTMwNjA4OiAn5riF6IuR5Yy6JyxcclxuICAgICAgMTMwNjA5OiAn5b6Q5rC05Yy6JyxcclxuICAgICAgMTMwNjIzOiAn5rae5rC05Y6/JyxcclxuICAgICAgMTMwNjI0OiAn6Zic5bmz5Y6/JyxcclxuICAgICAgMTMwNjI2OiAn5a6a5YW05Y6/JyxcclxuICAgICAgMTMwNjI3OiAn5ZSQ5Y6/JyxcclxuICAgICAgMTMwNjI4OiAn6auY6Ziz5Y6/JyxcclxuICAgICAgMTMwNjI5OiAn5a655Z+O5Y6/JyxcclxuICAgICAgMTMwNjMwOiAn5rae5rqQ5Y6/JyxcclxuICAgICAgMTMwNjMxOiAn5pyb6YO95Y6/JyxcclxuICAgICAgMTMwNjMyOiAn5a6J5paw5Y6/JyxcclxuICAgICAgMTMwNjMzOiAn5piT5Y6/JyxcclxuICAgICAgMTMwNjM0OiAn5puy6Ziz5Y6/JyxcclxuICAgICAgMTMwNjM1OiAn6KCh5Y6/JyxcclxuICAgICAgMTMwNjM2OiAn6aG65bmz5Y6/JyxcclxuICAgICAgMTMwNjM3OiAn5Y2a6YeO5Y6/JyxcclxuICAgICAgMTMwNjM4OiAn6ZuE5Y6/JyxcclxuICAgICAgMTMwNjgxOiAn5ra/5bee5biCJyxcclxuICAgICAgMTMwNjgyOiAn5a6a5bee5biCJyxcclxuICAgICAgMTMwNjgzOiAn5a6J5Zu95biCJyxcclxuICAgICAgMTMwNjg0OiAn6auY56KR5bqX5biCJyxcclxuICAgICAgMTMwNzAyOiAn5qGl5Lic5Yy6JyxcclxuICAgICAgMTMwNzAzOiAn5qGl6KW/5Yy6JyxcclxuICAgICAgMTMwNzA1OiAn5a6j5YyW5Yy6JyxcclxuICAgICAgMTMwNzA2OiAn5LiL6Iqx5Zut5Yy6JyxcclxuICAgICAgMTMwNzA4OiAn5LiH5YWo5Yy6JyxcclxuICAgICAgMTMwNzA5OiAn5bSH56S85Yy6JyxcclxuICAgICAgMTMwNzIyOiAn5byg5YyX5Y6/JyxcclxuICAgICAgMTMwNzIzOiAn5bq35L+d5Y6/JyxcclxuICAgICAgMTMwNzI0OiAn5rK95rqQ5Y6/JyxcclxuICAgICAgMTMwNzI1OiAn5bCa5LmJ5Y6/JyxcclxuICAgICAgMTMwNzI2OiAn6JSa5Y6/JyxcclxuICAgICAgMTMwNzI3OiAn6Ziz5Y6f5Y6/JyxcclxuICAgICAgMTMwNzI4OiAn5oCA5a6J5Y6/JyxcclxuICAgICAgMTMwNzMwOiAn5oCA5p2l5Y6/JyxcclxuICAgICAgMTMwNzMxOiAn5ra/6bm/5Y6/JyxcclxuICAgICAgMTMwNzMyOiAn6LWk5Z+O5Y6/JyxcclxuICAgICAgMTMwODAyOiAn5Y+M5qGl5Yy6JyxcclxuICAgICAgMTMwODAzOiAn5Y+M5rum5Yy6JyxcclxuICAgICAgMTMwODA0OiAn6bmw5omL6JCl5a2Q55+/5Yy6JyxcclxuICAgICAgMTMwODIxOiAn5om/5b635Y6/JyxcclxuICAgICAgMTMwODIyOiAn5YW06ZqG5Y6/JyxcclxuICAgICAgMTMwODI0OiAn5rum5bmz5Y6/JyxcclxuICAgICAgMTMwODI1OiAn6ZqG5YyW5Y6/JyxcclxuICAgICAgMTMwODI2OiAn5Liw5a6B5ruh5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMTMwODI3OiAn5a695Z+O5ruh5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMTMwODI4OiAn5Zu05Zy65ruh5peP6JKZ5Y+k5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMTMwODgxOiAn5bmz5rOJ5biCJyxcclxuICAgICAgMTMwOTAyOiAn5paw5Y2O5Yy6JyxcclxuICAgICAgMTMwOTAzOiAn6L+Q5rKz5Yy6JyxcclxuICAgICAgMTMwOTIxOiAn5rKn5Y6/JyxcclxuICAgICAgMTMwOTIyOiAn6Z2S5Y6/JyxcclxuICAgICAgMTMwOTIzOiAn5Lic5YWJ5Y6/JyxcclxuICAgICAgMTMwOTI0OiAn5rW35YW05Y6/JyxcclxuICAgICAgMTMwOTI1OiAn55uQ5bGx5Y6/JyxcclxuICAgICAgMTMwOTI2OiAn6IKD5a6B5Y6/JyxcclxuICAgICAgMTMwOTI3OiAn5Y2X55qu5Y6/JyxcclxuICAgICAgMTMwOTI4OiAn5ZC05qGl5Y6/JyxcclxuICAgICAgMTMwOTI5OiAn54yu5Y6/JyxcclxuICAgICAgMTMwOTMwOiAn5a2f5p2R5Zue5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMTMwOTgxOiAn5rOK5aS05biCJyxcclxuICAgICAgMTMwOTgyOiAn5Lu75LiY5biCJyxcclxuICAgICAgMTMwOTgzOiAn6buE6aqF5biCJyxcclxuICAgICAgMTMwOTg0OiAn5rKz6Ze05biCJyxcclxuICAgICAgMTMxMDAyOiAn5a6J5qyh5Yy6JyxcclxuICAgICAgMTMxMDAzOiAn5bm/6Ziz5Yy6JyxcclxuICAgICAgMTMxMDIyOiAn5Zu65a6J5Y6/JyxcclxuICAgICAgMTMxMDIzOiAn5rC45riF5Y6/JyxcclxuICAgICAgMTMxMDI0OiAn6aaZ5rKz5Y6/JyxcclxuICAgICAgMTMxMDI1OiAn5aSn5Z+O5Y6/JyxcclxuICAgICAgMTMxMDI2OiAn5paH5a6J5Y6/JyxcclxuICAgICAgMTMxMDI4OiAn5aSn5Y6C5Zue5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMTMxMDgxOiAn6Zy45bee5biCJyxcclxuICAgICAgMTMxMDgyOiAn5LiJ5rKz5biCJyxcclxuICAgICAgMTMxMDkwOiAn5byA5Y+R5Yy6JyxcclxuICAgICAgMTMxMTAyOiAn5qGD5Z+O5Yy6JyxcclxuICAgICAgMTMxMTAzOiAn5YaA5bee5Yy6JyxcclxuICAgICAgMTMxMTIxOiAn5p6j5by65Y6/JyxcclxuICAgICAgMTMxMTIyOiAn5q2m6YKR5Y6/JyxcclxuICAgICAgMTMxMTIzOiAn5q2m5by65Y6/JyxcclxuICAgICAgMTMxMTI0OiAn6aW26Ziz5Y6/JyxcclxuICAgICAgMTMxMTI1OiAn5a6J5bmz5Y6/JyxcclxuICAgICAgMTMxMTI2OiAn5pWF5Z+O5Y6/JyxcclxuICAgICAgMTMxMTI3OiAn5pmv5Y6/JyxcclxuICAgICAgMTMxMTI4OiAn6Zic5Z+O5Y6/JyxcclxuICAgICAgMTMxMTgyOiAn5rex5bee5biCJyxcclxuICAgICAgMTQwMTA1OiAn5bCP5bqX5Yy6JyxcclxuICAgICAgMTQwMTA2OiAn6L+O5rO95Yy6JyxcclxuICAgICAgMTQwMTA3OiAn5p2P6Iqx5bKt5Yy6JyxcclxuICAgICAgMTQwMTA4OiAn5bCW6I2J5Z2q5Yy6JyxcclxuICAgICAgMTQwMTA5OiAn5LiH5p+P5p6X5Yy6JyxcclxuICAgICAgMTQwMTEwOiAn5pmL5rqQ5Yy6JyxcclxuICAgICAgMTQwMTIxOiAn5riF5b6Q5Y6/JyxcclxuICAgICAgMTQwMTIyOiAn6Ziz5puy5Y6/JyxcclxuICAgICAgMTQwMTIzOiAn5aiE54Om5Y6/JyxcclxuICAgICAgMTQwMTgxOiAn5Y+k5Lqk5biCJyxcclxuICAgICAgMTQwMjEyOiAn5paw6I2j5Yy6JyxcclxuICAgICAgMTQwMjEzOiAn5bmz5Z+O5Yy6JyxcclxuICAgICAgMTQwMjE0OiAn5LqR5YaI5Yy6JyxcclxuICAgICAgMTQwMjE1OiAn5LqR5bee5Yy6JyxcclxuICAgICAgMTQwMjIxOiAn6Ziz6auY5Y6/JyxcclxuICAgICAgMTQwMjIyOiAn5aSp6ZWH5Y6/JyxcclxuICAgICAgMTQwMjIzOiAn5bm/54G15Y6/JyxcclxuICAgICAgMTQwMjI0OiAn54G15LiY5Y6/JyxcclxuICAgICAgMTQwMjI1OiAn5rWR5rqQ5Y6/JyxcclxuICAgICAgMTQwMjI2OiAn5bem5LqR5Y6/JyxcclxuICAgICAgMTQwMzAyOiAn5Z+O5Yy6JyxcclxuICAgICAgMTQwMzAzOiAn55+/5Yy6JyxcclxuICAgICAgMTQwMzExOiAn6YOK5Yy6JyxcclxuICAgICAgMTQwMzIxOiAn5bmz5a6a5Y6/JyxcclxuICAgICAgMTQwMzIyOiAn55uC5Y6/JyxcclxuICAgICAgMTQwNDAzOiAn5r2e5bee5Yy6JyxcclxuICAgICAgMTQwNDA0OiAn5LiK5YWa5Yy6JyxcclxuICAgICAgMTQwNDA1OiAn5bGv55WZ5Yy6JyxcclxuICAgICAgMTQwNDA2OiAn5r2e5Z+O5Yy6JyxcclxuICAgICAgMTQwNDIzOiAn6KWE5Z6j5Y6/JyxcclxuICAgICAgMTQwNDI1OiAn5bmz6aG65Y6/JyxcclxuICAgICAgMTQwNDI2OiAn6buO5Z+O5Y6/JyxcclxuICAgICAgMTQwNDI3OiAn5aO25YWz5Y6/JyxcclxuICAgICAgMTQwNDI4OiAn6ZW/5a2Q5Y6/JyxcclxuICAgICAgMTQwNDI5OiAn5q2m5Lmh5Y6/JyxcclxuICAgICAgMTQwNDMwOiAn5rKB5Y6/JyxcclxuICAgICAgMTQwNDMxOiAn5rKB5rqQ5Y6/JyxcclxuICAgICAgMTQwNTAyOiAn5Z+O5Yy6JyxcclxuICAgICAgMTQwNTIxOiAn5rKB5rC05Y6/JyxcclxuICAgICAgMTQwNTIyOiAn6Ziz5Z+O5Y6/JyxcclxuICAgICAgMTQwNTI0OiAn6Zm15bed5Y6/JyxcclxuICAgICAgMTQwNTI1OiAn5rO95bee5Y6/JyxcclxuICAgICAgMTQwNTgxOiAn6auY5bmz5biCJyxcclxuICAgICAgMTQwNjAyOiAn5pyU5Z+O5Yy6JyxcclxuICAgICAgMTQwNjAzOiAn5bmz6bKB5Yy6JyxcclxuICAgICAgMTQwNjIxOiAn5bGx6Zi05Y6/JyxcclxuICAgICAgMTQwNjIyOiAn5bqU5Y6/JyxcclxuICAgICAgMTQwNjIzOiAn5Y+z546J5Y6/JyxcclxuICAgICAgMTQwNjgxOiAn5oCA5LuB5biCJyxcclxuICAgICAgMTQwNzAyOiAn5qaG5qyh5Yy6JyxcclxuICAgICAgMTQwNzIxOiAn5qaG56S+5Y6/JyxcclxuICAgICAgMTQwNzIyOiAn5bem5p2D5Y6/JyxcclxuICAgICAgMTQwNzIzOiAn5ZKM6aG65Y6/JyxcclxuICAgICAgMTQwNzI0OiAn5piU6Ziz5Y6/JyxcclxuICAgICAgMTQwNzI1OiAn5a+/6Ziz5Y6/JyxcclxuICAgICAgMTQwNzI2OiAn5aSq6LC35Y6/JyxcclxuICAgICAgMTQwNzI3OiAn56WB5Y6/JyxcclxuICAgICAgMTQwNzI4OiAn5bmz6YGl5Y6/JyxcclxuICAgICAgMTQwNzI5OiAn54G155+z5Y6/JyxcclxuICAgICAgMTQwNzgxOiAn5LuL5LyR5biCJyxcclxuICAgICAgMTQwODAyOiAn55uQ5rmW5Yy6JyxcclxuICAgICAgMTQwODIxOiAn5Li054yX5Y6/JyxcclxuICAgICAgMTQwODIyOiAn5LiH6I2j5Y6/JyxcclxuICAgICAgMTQwODIzOiAn6Ze75Zac5Y6/JyxcclxuICAgICAgMTQwODI0OiAn56i35bGx5Y6/JyxcclxuICAgICAgMTQwODI1OiAn5paw57ub5Y6/JyxcclxuICAgICAgMTQwODI2OiAn57ub5Y6/JyxcclxuICAgICAgMTQwODI3OiAn5Z6j5puy5Y6/JyxcclxuICAgICAgMTQwODI4OiAn5aSP5Y6/JyxcclxuICAgICAgMTQwODI5OiAn5bmz6ZmG5Y6/JyxcclxuICAgICAgMTQwODMwOiAn6Iqu5Z+O5Y6/JyxcclxuICAgICAgMTQwODgxOiAn5rC45rWO5biCJyxcclxuICAgICAgMTQwODgyOiAn5rKz5rSl5biCJyxcclxuICAgICAgMTQwOTAyOiAn5b+75bqc5Yy6JyxcclxuICAgICAgMTQwOTIxOiAn5a6a6KWE5Y6/JyxcclxuICAgICAgMTQwOTIyOiAn5LqU5Y+w5Y6/JyxcclxuICAgICAgMTQwOTIzOiAn5Luj5Y6/JyxcclxuICAgICAgMTQwOTI0OiAn57mB5bOZ5Y6/JyxcclxuICAgICAgMTQwOTI1OiAn5a6B5q2m5Y6/JyxcclxuICAgICAgMTQwOTI2OiAn6Z2Z5LmQ5Y6/JyxcclxuICAgICAgMTQwOTI3OiAn56We5rGg5Y6/JyxcclxuICAgICAgMTQwOTI4OiAn5LqU5a+o5Y6/JyxcclxuICAgICAgMTQwOTI5OiAn5bKi5bKa5Y6/JyxcclxuICAgICAgMTQwOTMwOiAn5rKz5puy5Y6/JyxcclxuICAgICAgMTQwOTMxOiAn5L+d5b635Y6/JyxcclxuICAgICAgMTQwOTMyOiAn5YGP5YWz5Y6/JyxcclxuICAgICAgMTQwOTgxOiAn5Y6f5bmz5biCJyxcclxuICAgICAgMTQxMDAyOiAn5bCn6YO95Yy6JyxcclxuICAgICAgMTQxMDIxOiAn5puy5rKD5Y6/JyxcclxuICAgICAgMTQxMDIyOiAn57+85Z+O5Y6/JyxcclxuICAgICAgMTQxMDIzOiAn6KWE5rG+5Y6/JyxcclxuICAgICAgMTQxMDI0OiAn5rSq5rSe5Y6/JyxcclxuICAgICAgMTQxMDI1OiAn5Y+k5Y6/JyxcclxuICAgICAgMTQxMDI2OiAn5a6J5rO95Y6/JyxcclxuICAgICAgMTQxMDI3OiAn5rWu5bGx5Y6/JyxcclxuICAgICAgMTQxMDI4OiAn5ZCJ5Y6/JyxcclxuICAgICAgMTQxMDI5OiAn5Lmh5a6B5Y6/JyxcclxuICAgICAgMTQxMDMwOiAn5aSn5a6B5Y6/JyxcclxuICAgICAgMTQxMDMxOiAn6Zqw5Y6/JyxcclxuICAgICAgMTQxMDMyOiAn5rC45ZKM5Y6/JyxcclxuICAgICAgMTQxMDMzOiAn6JKy5Y6/JyxcclxuICAgICAgMTQxMDM0OiAn5rG+6KW/5Y6/JyxcclxuICAgICAgMTQxMDgxOiAn5L6v6ams5biCJyxcclxuICAgICAgMTQxMDgyOiAn6ZyN5bee5biCJyxcclxuICAgICAgMTQxMTAyOiAn56a755+z5Yy6JyxcclxuICAgICAgMTQxMTIxOiAn5paH5rC05Y6/JyxcclxuICAgICAgMTQxMTIyOiAn5Lqk5Z+O5Y6/JyxcclxuICAgICAgMTQxMTIzOiAn5YW05Y6/JyxcclxuICAgICAgMTQxMTI0OiAn5Li05Y6/JyxcclxuICAgICAgMTQxMTI1OiAn5p+z5p6X5Y6/JyxcclxuICAgICAgMTQxMTI2OiAn55+z5qW85Y6/JyxcclxuICAgICAgMTQxMTI3OiAn5bKa5Y6/JyxcclxuICAgICAgMTQxMTI4OiAn5pa55bGx5Y6/JyxcclxuICAgICAgMTQxMTI5OiAn5Lit6Ziz5Y6/JyxcclxuICAgICAgMTQxMTMwOiAn5Lqk5Y+j5Y6/JyxcclxuICAgICAgMTQxMTgxOiAn5a2d5LmJ5biCJyxcclxuICAgICAgMTQxMTgyOiAn5rG+6Ziz5biCJyxcclxuICAgICAgMTUwMTAyOiAn5paw5Z+O5Yy6JyxcclxuICAgICAgMTUwMTAzOiAn5Zue5rCR5Yy6JyxcclxuICAgICAgMTUwMTA0OiAn546J5rOJ5Yy6JyxcclxuICAgICAgMTUwMTA1OiAn6LWb572V5Yy6JyxcclxuICAgICAgMTUwMTIxOiAn5Zyf6buY54m55bem5peXJyxcclxuICAgICAgMTUwMTIyOiAn5omY5YWL5omY5Y6/JyxcclxuICAgICAgMTUwMTIzOiAn5ZKM5p6X5qC85bCU5Y6/JyxcclxuICAgICAgMTUwMTI0OiAn5riF5rC05rKz5Y6/JyxcclxuICAgICAgMTUwMTI1OiAn5q2m5bed5Y6/JyxcclxuICAgICAgMTUwMjAyOiAn5Lic5rKz5Yy6JyxcclxuICAgICAgMTUwMjAzOiAn5piG6YO95LuR5Yy6JyxcclxuICAgICAgMTUwMjA0OiAn6Z2S5bGx5Yy6JyxcclxuICAgICAgMTUwMjA1OiAn55+z5ouQ5Yy6JyxcclxuICAgICAgMTUwMjA2OiAn55m95LqR6YSC5Y2a55+/5Yy6JyxcclxuICAgICAgMTUwMjA3OiAn5Lmd5Y6f5Yy6JyxcclxuICAgICAgMTUwMjIxOiAn5Zyf6buY54m55Y+z5peXJyxcclxuICAgICAgMTUwMjIyOiAn5Zu66Ziz5Y6/JyxcclxuICAgICAgMTUwMjIzOiAn6L6+5bCU572V6IyC5piO5a6J6IGU5ZCI5peXJyxcclxuICAgICAgMTUwMzAyOiAn5rW35YuD5rm+5Yy6JyxcclxuICAgICAgMTUwMzAzOiAn5rW35Y2X5Yy6JyxcclxuICAgICAgMTUwMzA0OiAn5LmM6L6+5Yy6JyxcclxuICAgICAgMTUwNDAyOiAn57qi5bGx5Yy6JyxcclxuICAgICAgMTUwNDAzOiAn5YWD5a6d5bGx5Yy6JyxcclxuICAgICAgMTUwNDA0OiAn5p2+5bGx5Yy6JyxcclxuICAgICAgMTUwNDIxOiAn6Zi/6bKB56eR5bCU5rKB5peXJyxcclxuICAgICAgMTUwNDIyOiAn5be05p6X5bem5peXJyxcclxuICAgICAgMTUwNDIzOiAn5be05p6X5Y+z5peXJyxcclxuICAgICAgMTUwNDI0OiAn5p6X6KW/5Y6/JyxcclxuICAgICAgMTUwNDI1OiAn5YWL5LuA5YWL6IW+5peXJyxcclxuICAgICAgMTUwNDI2OiAn57+B54mb54m55peXJyxcclxuICAgICAgMTUwNDI4OiAn5ZaA5ZaH5rKB5peXJyxcclxuICAgICAgMTUwNDI5OiAn5a6B5Z+O5Y6/JyxcclxuICAgICAgMTUwNDMwOiAn5pWW5rGJ5peXJyxcclxuICAgICAgMTUwNTAyOiAn56eR5bCU5rKB5Yy6JyxcclxuICAgICAgMTUwNTIxOiAn56eR5bCU5rKB5bem57+85Lit5peXJyxcclxuICAgICAgMTUwNTIyOiAn56eR5bCU5rKB5bem57+85ZCO5peXJyxcclxuICAgICAgMTUwNTIzOiAn5byA6bKB5Y6/JyxcclxuICAgICAgMTUwNTI0OiAn5bqT5Lym5peXJyxcclxuICAgICAgMTUwNTI1OiAn5aWI5pu85peXJyxcclxuICAgICAgMTUwNTI2OiAn5omO6bKB54m55peXJyxcclxuICAgICAgMTUwNTgxOiAn6ZyN5p6X6YOt5YuS5biCJyxcclxuICAgICAgMTUwNjAyOiAn5Lic6IOc5Yy6JyxcclxuICAgICAgMTUwNjAzOiAn5bq35be05LuA5Yy6JyxcclxuICAgICAgMTUwNjIxOiAn6L6+5ouJ54m55peXJyxcclxuICAgICAgMTUwNjIyOiAn5YeG5qC85bCU5peXJyxcclxuICAgICAgMTUwNjIzOiAn6YSC5omY5YWL5YmN5peXJyxcclxuICAgICAgMTUwNjI0OiAn6YSC5omY5YWL5peXJyxcclxuICAgICAgMTUwNjI1OiAn5p2t6ZSm5peXJyxcclxuICAgICAgMTUwNjI2OiAn5LmM5a6h5peXJyxcclxuICAgICAgMTUwNjI3OiAn5LyK6YeR6ZyN5rSb5peXJyxcclxuICAgICAgMTUwNzAyOiAn5rW35ouJ5bCU5Yy6JyxcclxuICAgICAgMTUwNzAzOiAn5omO6LWJ6K+65bCU5Yy6JyxcclxuICAgICAgMTUwNzIxOiAn6Zi/6I2j5peXJyxcclxuICAgICAgMTUwNzIyOiAn6I6r5Yqb6L6+55Om6L6+5pah5bCU5peP6Ieq5rK75peXJyxcclxuICAgICAgMTUwNzIzOiAn6YSC5Lym5pil6Ieq5rK75peXJyxcclxuICAgICAgMTUwNzI0OiAn6YSC5rip5YWL5peP6Ieq5rK75peXJyxcclxuICAgICAgMTUwNzI1OiAn6ZmI5be05bCU6JmO5peXJyxcclxuICAgICAgMTUwNzI2OiAn5paw5be05bCU6JmO5bem5peXJyxcclxuICAgICAgMTUwNzI3OiAn5paw5be05bCU6JmO5Y+z5peXJyxcclxuICAgICAgMTUwNzgxOiAn5ruh5rSy6YeM5biCJyxcclxuICAgICAgMTUwNzgyOiAn54mZ5YWL55+z5biCJyxcclxuICAgICAgMTUwNzgzOiAn5omO5YWw5bGv5biCJyxcclxuICAgICAgMTUwNzg0OiAn6aKd5bCU5Y+k57qz5biCJyxcclxuICAgICAgMTUwNzg1OiAn5qC55rKz5biCJyxcclxuICAgICAgMTUwODAyOiAn5Li05rKz5Yy6JyxcclxuICAgICAgMTUwODIxOiAn5LqU5Y6f5Y6/JyxcclxuICAgICAgMTUwODIyOiAn56O05Y+j5Y6/JyxcclxuICAgICAgMTUwODIzOiAn5LmM5ouJ54m55YmN5peXJyxcclxuICAgICAgMTUwODI0OiAn5LmM5ouJ54m55Lit5peXJyxcclxuICAgICAgMTUwODI1OiAn5LmM5ouJ54m55ZCO5peXJyxcclxuICAgICAgMTUwODI2OiAn5p2t6ZSm5ZCO5peXJyxcclxuICAgICAgMTUwOTAyOiAn6ZuG5a6B5Yy6JyxcclxuICAgICAgMTUwOTIxOiAn5Y2T6LWE5Y6/JyxcclxuICAgICAgMTUwOTIyOiAn5YyW5b635Y6/JyxcclxuICAgICAgMTUwOTIzOiAn5ZWG6YO95Y6/JyxcclxuICAgICAgMTUwOTI0OiAn5YW05ZKM5Y6/JyxcclxuICAgICAgMTUwOTI1OiAn5YeJ5Z+O5Y6/JyxcclxuICAgICAgMTUwOTI2OiAn5a+f5ZOI5bCU5Y+z57+85YmN5peXJyxcclxuICAgICAgMTUwOTI3OiAn5a+f5ZOI5bCU5Y+z57+85Lit5peXJyxcclxuICAgICAgMTUwOTI4OiAn5a+f5ZOI5bCU5Y+z57+85ZCO5peXJyxcclxuICAgICAgMTUwOTI5OiAn5Zub5a2Q546L5peXJyxcclxuICAgICAgMTUwOTgxOiAn5Liw6ZWH5biCJyxcclxuICAgICAgMTUyMjAxOiAn5LmM5YWw5rWp54m55biCJyxcclxuICAgICAgMTUyMjAyOiAn6Zi/5bCU5bGx5biCJyxcclxuICAgICAgMTUyMjIxOiAn56eR5bCU5rKB5Y+z57+85YmN5peXJyxcclxuICAgICAgMTUyMjIyOiAn56eR5bCU5rKB5Y+z57+85Lit5peXJyxcclxuICAgICAgMTUyMjIzOiAn5omO6LWJ54m55peXJyxcclxuICAgICAgMTUyMjI0OiAn56qB5rOJ5Y6/JyxcclxuICAgICAgMTUyNTAxOiAn5LqM6L+e5rWp54m55biCJyxcclxuICAgICAgMTUyNTAyOiAn6ZSh5p6X5rWp54m55biCJyxcclxuICAgICAgMTUyNTIyOiAn6Zi/5be05ZiO5peXJyxcclxuICAgICAgMTUyNTIzOiAn6IuP5bC854m55bem5peXJyxcclxuICAgICAgMTUyNTI0OiAn6IuP5bC854m55Y+z5peXJyxcclxuICAgICAgMTUyNTI1OiAn5Lic5LmM54+g56mG5rKB5peXJyxcclxuICAgICAgMTUyNTI2OiAn6KW/5LmM54+g56mG5rKB5peXJyxcclxuICAgICAgMTUyNTI3OiAn5aSq5LuG5a+65peXJyxcclxuICAgICAgMTUyNTI4OiAn6ZW26buE5peXJyxcclxuICAgICAgMTUyNTI5OiAn5q2j6ZW255m95peXJyxcclxuICAgICAgMTUyNTMwOiAn5q2j6JOd5peXJyxcclxuICAgICAgMTUyNTMxOiAn5aSa5Lym5Y6/JyxcclxuICAgICAgMTUyOTIxOiAn6Zi/5ouJ5ZaE5bem5peXJyxcclxuICAgICAgMTUyOTIyOiAn6Zi/5ouJ5ZaE5Y+z5peXJyxcclxuICAgICAgMTUyOTIzOiAn6aKd5rWO57qz5peXJyxcclxuICAgICAgMjEwMTAyOiAn5ZKM5bmz5Yy6JyxcclxuICAgICAgMjEwMTAzOiAn5rKI5rKz5Yy6JyxcclxuICAgICAgMjEwMTA0OiAn5aSn5Lic5Yy6JyxcclxuICAgICAgMjEwMTA1OiAn55qH5aeR5Yy6JyxcclxuICAgICAgMjEwMTA2OiAn6ZOB6KW/5Yy6JyxcclxuICAgICAgMjEwMTExOiAn6IuP5a625bGv5Yy6JyxcclxuICAgICAgMjEwMTEyOiAn5rWR5Y2X5Yy6JyxcclxuICAgICAgMjEwMTEzOiAn5rKI5YyX5paw5Yy6JyxcclxuICAgICAgMjEwMTE0OiAn5LqO5rSq5Yy6JyxcclxuICAgICAgMjEwMTE1OiAn6L695Lit5Yy6JyxcclxuICAgICAgMjEwMTIzOiAn5bq35bmz5Y6/JyxcclxuICAgICAgMjEwMTI0OiAn5rOV5bqT5Y6/JyxcclxuICAgICAgMjEwMTgxOiAn5paw5rCR5biCJyxcclxuICAgICAgMjEwMTkwOiAn57uP5rWO5oqA5pyv5byA5Y+R5Yy6JyxcclxuICAgICAgMjEwMjAyOiAn5Lit5bGx5Yy6JyxcclxuICAgICAgMjEwMjAzOiAn6KW/5bKX5Yy6JyxcclxuICAgICAgMjEwMjA0OiAn5rKZ5rKz5Y+j5Yy6JyxcclxuICAgICAgMjEwMjExOiAn55SY5LqV5a2Q5Yy6JyxcclxuICAgICAgMjEwMjEyOiAn5peF6aG65Y+j5Yy6JyxcclxuICAgICAgMjEwMjEzOiAn6YeR5bee5Yy6JyxcclxuICAgICAgMjEwMjE0OiAn5pmu5YWw5bqX5Yy6JyxcclxuICAgICAgMjEwMjI0OiAn6ZW/5rW35Y6/JyxcclxuICAgICAgMjEwMjgxOiAn55Om5oi/5bqX5biCJyxcclxuICAgICAgMjEwMjgzOiAn5bqE5rKz5biCJyxcclxuICAgICAgMjEwMzAyOiAn6ZOB5Lic5Yy6JyxcclxuICAgICAgMjEwMzAzOiAn6ZOB6KW/5Yy6JyxcclxuICAgICAgMjEwMzA0OiAn56uL5bGx5Yy6JyxcclxuICAgICAgMjEwMzExOiAn5Y2D5bGx5Yy6JyxcclxuICAgICAgMjEwMzIxOiAn5Y+w5a6J5Y6/JyxcclxuICAgICAgMjEwMzIzOiAn5bKr5bKp5ruh5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMjEwMzgxOiAn5rW35Z+O5biCJyxcclxuICAgICAgMjEwMzkwOiAn6auY5paw5Yy6JyxcclxuICAgICAgMjEwNDAyOiAn5paw5oqa5Yy6JyxcclxuICAgICAgMjEwNDAzOiAn5Lic5rSy5Yy6JyxcclxuICAgICAgMjEwNDA0OiAn5pyb6Iqx5Yy6JyxcclxuICAgICAgMjEwNDExOiAn6aG65Z+O5Yy6JyxcclxuICAgICAgMjEwNDIxOiAn5oqa6aG65Y6/JyxcclxuICAgICAgMjEwNDIyOiAn5paw5a6+5ruh5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMjEwNDIzOiAn5riF5Y6f5ruh5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMjEwNTAyOiAn5bmz5bGx5Yy6JyxcclxuICAgICAgMjEwNTAzOiAn5rqq5rmW5Yy6JyxcclxuICAgICAgMjEwNTA0OiAn5piO5bGx5Yy6JyxcclxuICAgICAgMjEwNTA1OiAn5Y2X6Iqs5Yy6JyxcclxuICAgICAgMjEwNTIxOiAn5pys5rqq5ruh5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMjEwNTIyOiAn5qGT5LuB5ruh5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMjEwNjAyOiAn5YWD5a6d5Yy6JyxcclxuICAgICAgMjEwNjAzOiAn5oyv5YW05Yy6JyxcclxuICAgICAgMjEwNjA0OiAn5oyv5a6J5Yy6JyxcclxuICAgICAgMjEwNjI0OiAn5a6955S45ruh5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMjEwNjgxOiAn5Lic5riv5biCJyxcclxuICAgICAgMjEwNjgyOiAn5Yek5Z+O5biCJyxcclxuICAgICAgMjEwNzAyOiAn5Y+k5aGU5Yy6JyxcclxuICAgICAgMjEwNzAzOiAn5YeM5rKz5Yy6JyxcclxuICAgICAgMjEwNzExOiAn5aSq5ZKM5Yy6JyxcclxuICAgICAgMjEwNzI2OiAn6buR5bGx5Y6/JyxcclxuICAgICAgMjEwNzI3OiAn5LmJ5Y6/JyxcclxuICAgICAgMjEwNzgxOiAn5YeM5rW35biCJyxcclxuICAgICAgMjEwNzgyOiAn5YyX6ZWH5biCJyxcclxuICAgICAgMjEwNzkzOiAn57uP5rWO5oqA5pyv5byA5Y+R5Yy6JyxcclxuICAgICAgMjEwODAyOiAn56uZ5YmN5Yy6JyxcclxuICAgICAgMjEwODAzOiAn6KW/5biC5Yy6JyxcclxuICAgICAgMjEwODA0OiAn6bKF6bG85ZyI5Yy6JyxcclxuICAgICAgMjEwODExOiAn6ICB6L655Yy6JyxcclxuICAgICAgMjEwODgxOiAn55uW5bee5biCJyxcclxuICAgICAgMjEwODgyOiAn5aSn55+z5qGl5biCJyxcclxuICAgICAgMjEwOTAyOiAn5rW35bee5Yy6JyxcclxuICAgICAgMjEwOTAzOiAn5paw6YKx5Yy6JyxcclxuICAgICAgMjEwOTA0OiAn5aSq5bmz5Yy6JyxcclxuICAgICAgMjEwOTA1OiAn5riF5rKz6Zeo5Yy6JyxcclxuICAgICAgMjEwOTExOiAn57uG5rKz5Yy6JyxcclxuICAgICAgMjEwOTIxOiAn6Zic5paw6JKZ5Y+k5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMjEwOTIyOiAn5b2w5q2m5Y6/JyxcclxuICAgICAgMjExMDAyOiAn55m95aGU5Yy6JyxcclxuICAgICAgMjExMDAzOiAn5paH5Zyj5Yy6JyxcclxuICAgICAgMjExMDA0OiAn5a6P5Lyf5Yy6JyxcclxuICAgICAgMjExMDA1OiAn5byT6ZW/5bKt5Yy6JyxcclxuICAgICAgMjExMDExOiAn5aSq5a2Q5rKz5Yy6JyxcclxuICAgICAgMjExMDIxOiAn6L696Ziz5Y6/JyxcclxuICAgICAgMjExMDgxOiAn54Gv5aGU5biCJyxcclxuICAgICAgMjExMTAyOiAn5Y+M5Y+w5a2Q5Yy6JyxcclxuICAgICAgMjExMTAzOiAn5YW06ZqG5Y+w5Yy6JyxcclxuICAgICAgMjExMTA0OiAn5aSn5rS85Yy6JyxcclxuICAgICAgMjExMTIyOiAn55uY5bGx5Y6/JyxcclxuICAgICAgMjExMjAyOiAn6ZO25bee5Yy6JyxcclxuICAgICAgMjExMjA0OiAn5riF5rKz5Yy6JyxcclxuICAgICAgMjExMjIxOiAn6ZOB5bKt5Y6/JyxcclxuICAgICAgMjExMjIzOiAn6KW/5Liw5Y6/JyxcclxuICAgICAgMjExMjI0OiAn5piM5Zu+5Y6/JyxcclxuICAgICAgMjExMjgxOiAn6LCD5YW15bGx5biCJyxcclxuICAgICAgMjExMjgyOiAn5byA5Y6f5biCJyxcclxuICAgICAgMjExMzAyOiAn5Y+M5aGU5Yy6JyxcclxuICAgICAgMjExMzAzOiAn6b6Z5Z+O5Yy6JyxcclxuICAgICAgMjExMzIxOiAn5pyd6Ziz5Y6/JyxcclxuICAgICAgMjExMzIyOiAn5bu65bmz5Y6/JyxcclxuICAgICAgMjExMzI0OiAn5ZaA5ZaH5rKB5bem57+86JKZ5Y+k5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMjExMzgxOiAn5YyX56Wo5biCJyxcclxuICAgICAgMjExMzgyOiAn5YeM5rqQ5biCJyxcclxuICAgICAgMjExNDAyOiAn6L+e5bGx5Yy6JyxcclxuICAgICAgMjExNDAzOiAn6b6Z5riv5Yy6JyxcclxuICAgICAgMjExNDA0OiAn5Y2X56Wo5Yy6JyxcclxuICAgICAgMjExNDIxOiAn57ul5Lit5Y6/JyxcclxuICAgICAgMjExNDIyOiAn5bu65piM5Y6/JyxcclxuICAgICAgMjExNDgxOiAn5YW05Z+O5biCJyxcclxuICAgICAgMjIwMTAyOiAn5Y2X5YWz5Yy6JyxcclxuICAgICAgMjIwMTAzOiAn5a695Z+O5Yy6JyxcclxuICAgICAgMjIwMTA0OiAn5pyd6Ziz5Yy6JyxcclxuICAgICAgMjIwMTA1OiAn5LqM6YGT5Yy6JyxcclxuICAgICAgMjIwMTA2OiAn57u/5Zut5Yy6JyxcclxuICAgICAgMjIwMTEyOiAn5Y+M6Ziz5Yy6JyxcclxuICAgICAgMjIwMTEzOiAn5Lmd5Y+w5Yy6JyxcclxuICAgICAgMjIwMTIyOiAn5Yac5a6J5Y6/JyxcclxuICAgICAgMjIwMTgyOiAn5qaG5qCR5biCJyxcclxuICAgICAgMjIwMTgzOiAn5b635oOg5biCJyxcclxuICAgICAgMjIwMTkyOiAn57uP5rWO5oqA5pyv5byA5Y+R5Yy6JyxcclxuICAgICAgMjIwMjAyOiAn5piM6YKR5Yy6JyxcclxuICAgICAgMjIwMjAzOiAn6b6Z5r2t5Yy6JyxcclxuICAgICAgMjIwMjA0OiAn6Ii56JCl5Yy6JyxcclxuICAgICAgMjIwMjExOiAn5Liw5ruh5Yy6JyxcclxuICAgICAgMjIwMjIxOiAn5rC45ZCJ5Y6/JyxcclxuICAgICAgMjIwMjgxOiAn6Juf5rKz5biCJyxcclxuICAgICAgMjIwMjgyOiAn5qGm55S45biCJyxcclxuICAgICAgMjIwMjgzOiAn6IiS5YWw5biCJyxcclxuICAgICAgMjIwMjg0OiAn56OQ55+z5biCJyxcclxuICAgICAgMjIwMzAyOiAn6ZOB6KW/5Yy6JyxcclxuICAgICAgMjIwMzAzOiAn6ZOB5Lic5Yy6JyxcclxuICAgICAgMjIwMzIyOiAn5qKo5qCR5Y6/JyxcclxuICAgICAgMjIwMzIzOiAn5LyK6YCa5ruh5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMjIwMzgxOiAn5YWs5Li75bKt5biCJyxcclxuICAgICAgMjIwMzgyOiAn5Y+M6L695biCJyxcclxuICAgICAgMjIwNDAyOiAn6b6Z5bGx5Yy6JyxcclxuICAgICAgMjIwNDAzOiAn6KW/5a6J5Yy6JyxcclxuICAgICAgMjIwNDIxOiAn5Lic5Liw5Y6/JyxcclxuICAgICAgMjIwNDIyOiAn5Lic6L695Y6/JyxcclxuICAgICAgMjIwNTAyOiAn5Lic5piM5Yy6JyxcclxuICAgICAgMjIwNTAzOiAn5LqM6YGT5rGf5Yy6JyxcclxuICAgICAgMjIwNTIxOiAn6YCa5YyW5Y6/JyxcclxuICAgICAgMjIwNTIzOiAn6L6J5Y2X5Y6/JyxcclxuICAgICAgMjIwNTI0OiAn5p+z5rKz5Y6/JyxcclxuICAgICAgMjIwNTgxOiAn5qKF5rKz5Y+j5biCJyxcclxuICAgICAgMjIwNTgyOiAn6ZuG5a6J5biCJyxcclxuICAgICAgMjIwNjAyOiAn5rWR5rGf5Yy6JyxcclxuICAgICAgMjIwNjA1OiAn5rGf5rqQ5Yy6JyxcclxuICAgICAgMjIwNjIxOiAn5oqa5p2+5Y6/JyxcclxuICAgICAgMjIwNjIyOiAn6Z2W5a6H5Y6/JyxcclxuICAgICAgMjIwNjIzOiAn6ZW/55m95pyd6bKc5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMjIwNjgxOiAn5Li05rGf5biCJyxcclxuICAgICAgMjIwNzAyOiAn5a6B5rGf5Yy6JyxcclxuICAgICAgMjIwNzIxOiAn5YmN6YOt5bCU572X5pav6JKZ5Y+k5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMjIwNzIyOiAn6ZW/5bKt5Y6/JyxcclxuICAgICAgMjIwNzIzOiAn5Lm+5a6J5Y6/JyxcclxuICAgICAgMjIwNzgxOiAn5om25L2Z5biCJyxcclxuICAgICAgMjIwODAyOiAn5rSu5YyX5Yy6JyxcclxuICAgICAgMjIwODIxOiAn6ZWH6LWJ5Y6/JyxcclxuICAgICAgMjIwODIyOiAn6YCa5qaG5Y6/JyxcclxuICAgICAgMjIwODgxOiAn5rSu5Y2X5biCJyxcclxuICAgICAgMjIwODgyOiAn5aSn5a6J5biCJyxcclxuICAgICAgMjIyNDAxOiAn5bu25ZCJ5biCJyxcclxuICAgICAgMjIyNDAyOiAn5Zu+5Lus5biCJyxcclxuICAgICAgMjIyNDAzOiAn5pWm5YyW5biCJyxcclxuICAgICAgMjIyNDA0OiAn54+y5pil5biCJyxcclxuICAgICAgMjIyNDA1OiAn6b6Z5LqV5biCJyxcclxuICAgICAgMjIyNDA2OiAn5ZKM6b6Z5biCJyxcclxuICAgICAgMjIyNDI0OiAn5rGq5riF5Y6/JyxcclxuICAgICAgMjIyNDI2OiAn5a6J5Zu+5Y6/JyxcclxuICAgICAgMjMwMTAyOiAn6YGT6YeM5Yy6JyxcclxuICAgICAgMjMwMTAzOiAn5Y2X5bKX5Yy6JyxcclxuICAgICAgMjMwMTA0OiAn6YGT5aSW5Yy6JyxcclxuICAgICAgMjMwMTA4OiAn5bmz5oi/5Yy6JyxcclxuICAgICAgMjMwMTA5OiAn5p2+5YyX5Yy6JyxcclxuICAgICAgMjMwMTEwOiAn6aaZ5Z2K5Yy6JyxcclxuICAgICAgMjMwMTExOiAn5ZG85YWw5Yy6JyxcclxuICAgICAgMjMwMTEyOiAn6Zi/5Z+O5Yy6JyxcclxuICAgICAgMjMwMTEzOiAn5Y+M5Z+O5Yy6JyxcclxuICAgICAgMjMwMTIzOiAn5L6d5YWw5Y6/JyxcclxuICAgICAgMjMwMTI0OiAn5pa55q2j5Y6/JyxcclxuICAgICAgMjMwMTI1OiAn5a6+5Y6/JyxcclxuICAgICAgMjMwMTI2OiAn5be05b2m5Y6/JyxcclxuICAgICAgMjMwMTI3OiAn5pyo5YWw5Y6/JyxcclxuICAgICAgMjMwMTI4OiAn6YCa5rKz5Y6/JyxcclxuICAgICAgMjMwMTI5OiAn5bu25a+/5Y6/JyxcclxuICAgICAgMjMwMTgzOiAn5bCa5b+X5biCJyxcclxuICAgICAgMjMwMTg0OiAn5LqU5bi45biCJyxcclxuICAgICAgMjMwMjAyOiAn6b6Z5rKZ5Yy6JyxcclxuICAgICAgMjMwMjAzOiAn5bu65Y2O5Yy6JyxcclxuICAgICAgMjMwMjA0OiAn6ZOB6ZSL5Yy6JyxcclxuICAgICAgMjMwMjA1OiAn5piC5piC5rqq5Yy6JyxcclxuICAgICAgMjMwMjA2OiAn5a+M5ouJ5bCU5Z+65Yy6JyxcclxuICAgICAgMjMwMjA3OiAn56K+5a2Q5bGx5Yy6JyxcclxuICAgICAgMjMwMjA4OiAn5qKF6YeM5pav6L6+5pah5bCU5peP5Yy6JyxcclxuICAgICAgMjMwMjIxOiAn6b6Z5rGf5Y6/JyxcclxuICAgICAgMjMwMjIzOiAn5L6d5a6J5Y6/JyxcclxuICAgICAgMjMwMjI0OiAn5rOw5p2l5Y6/JyxcclxuICAgICAgMjMwMjI1OiAn55SY5Y2X5Y6/JyxcclxuICAgICAgMjMwMjI3OiAn5a+M6KOV5Y6/JyxcclxuICAgICAgMjMwMjI5OiAn5YWL5bGx5Y6/JyxcclxuICAgICAgMjMwMjMwOiAn5YWL5Lic5Y6/JyxcclxuICAgICAgMjMwMjMxOiAn5ouc5rOJ5Y6/JyxcclxuICAgICAgMjMwMjgxOiAn6K635rKz5biCJyxcclxuICAgICAgMjMwMzAyOiAn6bih5Yag5Yy6JyxcclxuICAgICAgMjMwMzAzOiAn5oGS5bGx5Yy6JyxcclxuICAgICAgMjMwMzA0OiAn5ru06YGT5Yy6JyxcclxuICAgICAgMjMwMzA1OiAn5qKo5qCR5Yy6JyxcclxuICAgICAgMjMwMzA2OiAn5Z+O5a2Q5rKz5Yy6JyxcclxuICAgICAgMjMwMzA3OiAn6bq75bGx5Yy6JyxcclxuICAgICAgMjMwMzIxOiAn6bih5Lic5Y6/JyxcclxuICAgICAgMjMwMzgxOiAn6JmO5p6X5biCJyxcclxuICAgICAgMjMwMzgyOiAn5a+G5bGx5biCJyxcclxuICAgICAgMjMwNDAyOiAn5ZCR6Ziz5Yy6JyxcclxuICAgICAgMjMwNDAzOiAn5bel5Yac5Yy6JyxcclxuICAgICAgMjMwNDA0OiAn5Y2X5bGx5Yy6JyxcclxuICAgICAgMjMwNDA1OiAn5YW05a6J5Yy6JyxcclxuICAgICAgMjMwNDA2OiAn5Lic5bGx5Yy6JyxcclxuICAgICAgMjMwNDA3OiAn5YW05bGx5Yy6JyxcclxuICAgICAgMjMwNDIxOiAn6JCd5YyX5Y6/JyxcclxuICAgICAgMjMwNDIyOiAn57ul5ruo5Y6/JyxcclxuICAgICAgMjMwNTAyOiAn5bCW5bGx5Yy6JyxcclxuICAgICAgMjMwNTAzOiAn5bKt5Lic5Yy6JyxcclxuICAgICAgMjMwNTA1OiAn5Zub5pa55Y+w5Yy6JyxcclxuICAgICAgMjMwNTA2OiAn5a6d5bGx5Yy6JyxcclxuICAgICAgMjMwNTIxOiAn6ZuG6LSk5Y6/JyxcclxuICAgICAgMjMwNTIyOiAn5Y+L6LCK5Y6/JyxcclxuICAgICAgMjMwNTIzOiAn5a6d5riF5Y6/JyxcclxuICAgICAgMjMwNTI0OiAn6aW25rKz5Y6/JyxcclxuICAgICAgMjMwNjAyOiAn6JCo5bCU5Zu+5Yy6JyxcclxuICAgICAgMjMwNjAzOiAn6b6Z5Yek5Yy6JyxcclxuICAgICAgMjMwNjA0OiAn6K6p6IOh6Lev5Yy6JyxcclxuICAgICAgMjMwNjA1OiAn57qi5bKX5Yy6JyxcclxuICAgICAgMjMwNjA2OiAn5aSn5ZCM5Yy6JyxcclxuICAgICAgMjMwNjIxOiAn6IKH5bee5Y6/JyxcclxuICAgICAgMjMwNjIyOiAn6IKH5rqQ5Y6/JyxcclxuICAgICAgMjMwNjIzOiAn5p6X55S45Y6/JyxcclxuICAgICAgMjMwNjI0OiAn5p2c5bCU5Lyv54m56JKZ5Y+k5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMjMwNzAyOiAn5LyK5pil5Yy6JyxcclxuICAgICAgMjMwNzAzOiAn5Y2X5bKU5Yy6JyxcclxuICAgICAgMjMwNzA0OiAn5Y+L5aW95Yy6JyxcclxuICAgICAgMjMwNzA1OiAn6KW/5p6X5Yy6JyxcclxuICAgICAgMjMwNzA2OiAn57+g5bOm5Yy6JyxcclxuICAgICAgMjMwNzA3OiAn5paw6Z2S5Yy6JyxcclxuICAgICAgMjMwNzA4OiAn576O5rqq5Yy6JyxcclxuICAgICAgMjMwNzA5OiAn6YeR5bGx5bGv5Yy6JyxcclxuICAgICAgMjMwNzEwOiAn5LqU6JCl5Yy6JyxcclxuICAgICAgMjMwNzExOiAn5LmM6ams5rKz5Yy6JyxcclxuICAgICAgMjMwNzEyOiAn5rGk5pe65rKz5Yy6JyxcclxuICAgICAgMjMwNzEzOiAn5bim5bKt5Yy6JyxcclxuICAgICAgMjMwNzE0OiAn5LmM5LyK5bKt5Yy6JyxcclxuICAgICAgMjMwNzE1OiAn57qi5pif5Yy6JyxcclxuICAgICAgMjMwNzE2OiAn5LiK55SY5bKt5Yy6JyxcclxuICAgICAgMjMwNzIyOiAn5ZiJ6I2r5Y6/JyxcclxuICAgICAgMjMwNzgxOiAn6ZOB5Yqb5biCJyxcclxuICAgICAgMjMwODAzOiAn5ZCR6Ziz5Yy6JyxcclxuICAgICAgMjMwODA0OiAn5YmN6L+b5Yy6JyxcclxuICAgICAgMjMwODA1OiAn5Lic6aOO5Yy6JyxcclxuICAgICAgMjMwODExOiAn6YOK5Yy6JyxcclxuICAgICAgMjMwODIyOiAn5qGm5Y2X5Y6/JyxcclxuICAgICAgMjMwODI2OiAn5qGm5bed5Y6/JyxcclxuICAgICAgMjMwODI4OiAn5rGk5Y6f5Y6/JyxcclxuICAgICAgMjMwODgxOiAn5ZCM5rGf5biCJyxcclxuICAgICAgMjMwODgyOiAn5a+M6ZSm5biCJyxcclxuICAgICAgMjMwODgzOiAn5oqa6L+c5biCJyxcclxuICAgICAgMjMwOTAyOiAn5paw5YW05Yy6JyxcclxuICAgICAgMjMwOTAzOiAn5qGD5bGx5Yy6JyxcclxuICAgICAgMjMwOTA0OiAn6IyE5a2Q5rKz5Yy6JyxcclxuICAgICAgMjMwOTIxOiAn5YuD5Yip5Y6/JyxcclxuICAgICAgMjMxMDAyOiAn5Lic5a6J5Yy6JyxcclxuICAgICAgMjMxMDAzOiAn6Ziz5piO5Yy6JyxcclxuICAgICAgMjMxMDA0OiAn54ix5rCR5Yy6JyxcclxuICAgICAgMjMxMDA1OiAn6KW/5a6J5Yy6JyxcclxuICAgICAgMjMxMDI1OiAn5p6X5Y+j5Y6/JyxcclxuICAgICAgMjMxMDgxOiAn57ul6Iqs5rKz5biCJyxcclxuICAgICAgMjMxMDgzOiAn5rW35p6X5biCJyxcclxuICAgICAgMjMxMDg0OiAn5a6B5a6J5biCJyxcclxuICAgICAgMjMxMDg1OiAn56mG5qOx5biCJyxcclxuICAgICAgMjMxMDg2OiAn5Lic5a6B5biCJyxcclxuICAgICAgMjMxMTAyOiAn54ix6L6J5Yy6JyxcclxuICAgICAgMjMxMTIxOiAn5aup5rGf5Y6/JyxcclxuICAgICAgMjMxMTIzOiAn6YCK5YWL5Y6/JyxcclxuICAgICAgMjMxMTI0OiAn5a2Z5ZC05Y6/JyxcclxuICAgICAgMjMxMTgxOiAn5YyX5a6J5biCJyxcclxuICAgICAgMjMxMTgyOiAn5LqU5aSn6L+e5rGg5biCJyxcclxuICAgICAgMjMxMjAyOiAn5YyX5p6X5Yy6JyxcclxuICAgICAgMjMxMjIxOiAn5pyb5aWO5Y6/JyxcclxuICAgICAgMjMxMjIyOiAn5YWw6KW/5Y6/JyxcclxuICAgICAgMjMxMjIzOiAn6Z2S5YaI5Y6/JyxcclxuICAgICAgMjMxMjI0OiAn5bqG5a6J5Y6/JyxcclxuICAgICAgMjMxMjI1OiAn5piO5rC05Y6/JyxcclxuICAgICAgMjMxMjI2OiAn57ul5qOx5Y6/JyxcclxuICAgICAgMjMxMjgxOiAn5a6J6L6+5biCJyxcclxuICAgICAgMjMxMjgyOiAn6IKH5Lic5biCJyxcclxuICAgICAgMjMxMjgzOiAn5rW35Lym5biCJyxcclxuICAgICAgMjMyNzAxOiAn5ryg5rKz5biCJyxcclxuICAgICAgMjMyNzIxOiAn5ZG8546b5Y6/JyxcclxuICAgICAgMjMyNzIyOiAn5aGU5rKz5Y6/JyxcclxuICAgICAgMjMyNzkwOiAn5p2+5bKt5Yy6JyxcclxuICAgICAgMjMyNzkxOiAn5ZG85Lit5Yy6JyxcclxuICAgICAgMjMyNzkyOiAn5Yqg5qC86L6+5aWH5Yy6JyxcclxuICAgICAgMjMyNzkzOiAn5paw5p6X5Yy6JyxcclxuICAgICAgMzEwMTAxOiAn6buE5rWm5Yy6JyxcclxuICAgICAgMzEwMTA0OiAn5b6Q5rGH5Yy6JyxcclxuICAgICAgMzEwMTA1OiAn6ZW/5a6B5Yy6JyxcclxuICAgICAgMzEwMTA2OiAn6Z2Z5a6J5Yy6JyxcclxuICAgICAgMzEwMTA3OiAn5pmu6ZmA5Yy6JyxcclxuICAgICAgMzEwMTA5OiAn6Jm55Y+j5Yy6JyxcclxuICAgICAgMzEwMTEwOiAn5p2o5rWm5Yy6JyxcclxuICAgICAgMzEwMTEyOiAn6Ze16KGM5Yy6JyxcclxuICAgICAgMzEwMTEzOiAn5a6d5bGx5Yy6JyxcclxuICAgICAgMzEwMTE0OiAn5ZiJ5a6a5Yy6JyxcclxuICAgICAgMzEwMTE1OiAn5rWm5Lic5paw5Yy6JyxcclxuICAgICAgMzEwMTE2OiAn6YeR5bGx5Yy6JyxcclxuICAgICAgMzEwMTE3OiAn5p2+5rGf5Yy6JyxcclxuICAgICAgMzEwMTE4OiAn6Z2S5rWm5Yy6JyxcclxuICAgICAgMzEwMTIwOiAn5aWJ6LSk5Yy6JyxcclxuICAgICAgMzEwMTUxOiAn5bSH5piO5Yy6JyxcclxuICAgICAgMzIwMTAyOiAn546E5q2m5Yy6JyxcclxuICAgICAgMzIwMTA0OiAn56em5reu5Yy6JyxcclxuICAgICAgMzIwMTA1OiAn5bu66YK65Yy6JyxcclxuICAgICAgMzIwMTA2OiAn6byT5qW85Yy6JyxcclxuICAgICAgMzIwMTExOiAn5rWm5Y+j5Yy6JyxcclxuICAgICAgMzIwMTEzOiAn5qCW6Zye5Yy6JyxcclxuICAgICAgMzIwMTE0OiAn6Zuo6Iqx5Y+w5Yy6JyxcclxuICAgICAgMzIwMTE1OiAn5rGf5a6B5Yy6JyxcclxuICAgICAgMzIwMTE2OiAn5YWt5ZCI5Yy6JyxcclxuICAgICAgMzIwMTE3OiAn5rqn5rC05Yy6JyxcclxuICAgICAgMzIwMTE4OiAn6auY5rez5Yy6JyxcclxuICAgICAgMzIwMjA1OiAn6ZSh5bGx5Yy6JyxcclxuICAgICAgMzIwMjA2OiAn5oOg5bGx5Yy6JyxcclxuICAgICAgMzIwMjExOiAn5ruo5rmW5Yy6JyxcclxuICAgICAgMzIwMjEzOiAn5qKB5rqq5Yy6JyxcclxuICAgICAgMzIwMjE0OiAn5paw5ZC05Yy6JyxcclxuICAgICAgMzIwMjgxOiAn5rGf6Zi05biCJyxcclxuICAgICAgMzIwMjgyOiAn5a6c5YW05biCJyxcclxuICAgICAgMzIwMzAyOiAn6byT5qW85Yy6JyxcclxuICAgICAgMzIwMzAzOiAn5LqR6b6Z5Yy6JyxcclxuICAgICAgMzIwMzA1OiAn6LS+5rGq5Yy6JyxcclxuICAgICAgMzIwMzExOiAn5rOJ5bGx5Yy6JyxcclxuICAgICAgMzIwMzEyOiAn6ZOc5bGx5Yy6JyxcclxuICAgICAgMzIwMzIxOiAn5Liw5Y6/JyxcclxuICAgICAgMzIwMzIyOiAn5rKb5Y6/JyxcclxuICAgICAgMzIwMzI0OiAn552i5a6B5Y6/JyxcclxuICAgICAgMzIwMzgxOiAn5paw5rKC5biCJyxcclxuICAgICAgMzIwMzgyOiAn6YKz5bee5biCJyxcclxuICAgICAgMzIwMzkxOiAn5bel5Lia5Zut5Yy6JyxcclxuICAgICAgMzIwNDAyOiAn5aSp5a6B5Yy6JyxcclxuICAgICAgMzIwNDA0OiAn6ZKf5qW85Yy6JyxcclxuICAgICAgMzIwNDExOiAn5paw5YyX5Yy6JyxcclxuICAgICAgMzIwNDEyOiAn5q2m6L+b5Yy6JyxcclxuICAgICAgMzIwNDEzOiAn6YeR5Z2b5Yy6JyxcclxuICAgICAgMzIwNDgxOiAn5rqn6Ziz5biCJyxcclxuICAgICAgMzIwNTA1OiAn6JmO5LiY5Yy6JyxcclxuICAgICAgMzIwNTA2OiAn5ZC05Lit5Yy6JyxcclxuICAgICAgMzIwNTA3OiAn55u45Z+O5Yy6JyxcclxuICAgICAgMzIwNTA4OiAn5aeR6IuP5Yy6JyxcclxuICAgICAgMzIwNTA5OiAn5ZC05rGf5Yy6JyxcclxuICAgICAgMzIwNTgxOiAn5bi454af5biCJyxcclxuICAgICAgMzIwNTgyOiAn5byg5a625riv5biCJyxcclxuICAgICAgMzIwNTgzOiAn5piG5bGx5biCJyxcclxuICAgICAgMzIwNTg1OiAn5aSq5LuT5biCJyxcclxuICAgICAgMzIwNTkwOiAn5bel5Lia5Zut5Yy6JyxcclxuICAgICAgMzIwNTkxOiAn6auY5paw5Yy6JyxcclxuICAgICAgMzIwNjAyOiAn5bSH5bed5Yy6JyxcclxuICAgICAgMzIwNjExOiAn5riv6Ze45Yy6JyxcclxuICAgICAgMzIwNjEyOiAn6YCa5bee5Yy6JyxcclxuICAgICAgMzIwNjIzOiAn5aaC5Lic5Y6/JyxcclxuICAgICAgMzIwNjgxOiAn5ZCv5Lic5biCJyxcclxuICAgICAgMzIwNjgyOiAn5aaC55qL5biCJyxcclxuICAgICAgMzIwNjg0OiAn5rW36Zeo5biCJyxcclxuICAgICAgMzIwNjg1OiAn5rW35a6J5biCJyxcclxuICAgICAgMzIwNjkxOiAn6auY5paw5Yy6JyxcclxuICAgICAgMzIwNzAzOiAn6L+e5LqR5Yy6JyxcclxuICAgICAgMzIwNzA2OiAn5rW35bee5Yy6JyxcclxuICAgICAgMzIwNzA3OiAn6LWj5qaG5Yy6JyxcclxuICAgICAgMzIwNzIyOiAn5Lic5rW35Y6/JyxcclxuICAgICAgMzIwNzIzOiAn54GM5LqR5Y6/JyxcclxuICAgICAgMzIwNzI0OiAn54GM5Y2X5Y6/JyxcclxuICAgICAgMzIwODAzOiAn5reu5a6J5Yy6JyxcclxuICAgICAgMzIwODA0OiAn5reu6Zi05Yy6JyxcclxuICAgICAgMzIwODEyOiAn5riF5rGf5rWm5Yy6JyxcclxuICAgICAgMzIwODEzOiAn5rSq5rO95Yy6JyxcclxuICAgICAgMzIwODI2OiAn5raf5rC05Y6/JyxcclxuICAgICAgMzIwODMwOiAn55ux55yZ5Y6/JyxcclxuICAgICAgMzIwODMxOiAn6YeR5rmW5Y6/JyxcclxuICAgICAgMzIwODkwOiAn57uP5rWO5byA5Y+R5Yy6JyxcclxuICAgICAgMzIwOTAyOiAn5Lqt5rmW5Yy6JyxcclxuICAgICAgMzIwOTAzOiAn55uQ6YO95Yy6JyxcclxuICAgICAgMzIwOTA0OiAn5aSn5Liw5Yy6JyxcclxuICAgICAgMzIwOTIxOiAn5ZON5rC05Y6/JyxcclxuICAgICAgMzIwOTIyOiAn5ruo5rW35Y6/JyxcclxuICAgICAgMzIwOTIzOiAn6Zic5a6B5Y6/JyxcclxuICAgICAgMzIwOTI0OiAn5bCE6Ziz5Y6/JyxcclxuICAgICAgMzIwOTI1OiAn5bu65rmW5Y6/JyxcclxuICAgICAgMzIwOTgxOiAn5Lic5Y+w5biCJyxcclxuICAgICAgMzIxMDAyOiAn5bm/6Zm15Yy6JyxcclxuICAgICAgMzIxMDAzOiAn6YKX5rGf5Yy6JyxcclxuICAgICAgMzIxMDEyOiAn5rGf6YO95Yy6JyxcclxuICAgICAgMzIxMDIzOiAn5a6d5bqU5Y6/JyxcclxuICAgICAgMzIxMDgxOiAn5Luq5b6B5biCJyxcclxuICAgICAgMzIxMDg0OiAn6auY6YKu5biCJyxcclxuICAgICAgMzIxMDkwOiAn57uP5rWO5byA5Y+R5Yy6JyxcclxuICAgICAgMzIxMTAyOiAn5Lqs5Y+j5Yy6JyxcclxuICAgICAgMzIxMTExOiAn5ram5bee5Yy6JyxcclxuICAgICAgMzIxMTEyOiAn5Li55b6S5Yy6JyxcclxuICAgICAgMzIxMTgxOiAn5Li56Ziz5biCJyxcclxuICAgICAgMzIxMTgyOiAn5oms5Lit5biCJyxcclxuICAgICAgMzIxMTgzOiAn5Y+l5a655biCJyxcclxuICAgICAgMzIxMjAyOiAn5rW36Zm15Yy6JyxcclxuICAgICAgMzIxMjAzOiAn6auY5riv5Yy6JyxcclxuICAgICAgMzIxMjA0OiAn5aec5aCw5Yy6JyxcclxuICAgICAgMzIxMjgxOiAn5YW05YyW5biCJyxcclxuICAgICAgMzIxMjgyOiAn6Z2W5rGf5biCJyxcclxuICAgICAgMzIxMjgzOiAn5rOw5YW05biCJyxcclxuICAgICAgMzIxMzAyOiAn5a6/5Z+O5Yy6JyxcclxuICAgICAgMzIxMzExOiAn5a6/6LGr5Yy6JyxcclxuICAgICAgMzIxMzIyOiAn5rKt6Ziz5Y6/JyxcclxuICAgICAgMzIxMzIzOiAn5rOX6Ziz5Y6/JyxcclxuICAgICAgMzIxMzI0OiAn5rOX5rSq5Y6/JyxcclxuICAgICAgMzMwMTAyOiAn5LiK5Z+O5Yy6JyxcclxuICAgICAgMzMwMTAzOiAn5LiL5Z+O5Yy6JyxcclxuICAgICAgMzMwMTA0OiAn5rGf5bmy5Yy6JyxcclxuICAgICAgMzMwMTA1OiAn5oux5aKF5Yy6JyxcclxuICAgICAgMzMwMTA2OiAn6KW/5rmW5Yy6JyxcclxuICAgICAgMzMwMTA4OiAn5ruo5rGf5Yy6JyxcclxuICAgICAgMzMwMTA5OiAn6JCn5bGx5Yy6JyxcclxuICAgICAgMzMwMTEwOiAn5L2Z5p2t5Yy6JyxcclxuICAgICAgMzMwMTExOiAn5a+M6Ziz5Yy6JyxcclxuICAgICAgMzMwMTEyOiAn5Li05a6J5Yy6JyxcclxuICAgICAgMzMwMTIyOiAn5qGQ5bqQ5Y6/JyxcclxuICAgICAgMzMwMTI3OiAn5rez5a6J5Y6/JyxcclxuICAgICAgMzMwMTgyOiAn5bu65b635biCJyxcclxuICAgICAgMzMwMjAzOiAn5rW35puZ5Yy6JyxcclxuICAgICAgMzMwMjA1OiAn5rGf5YyX5Yy6JyxcclxuICAgICAgMzMwMjA2OiAn5YyX5LuR5Yy6JyxcclxuICAgICAgMzMwMjExOiAn6ZWH5rW35Yy6JyxcclxuICAgICAgMzMwMjEyOiAn6YSe5bee5Yy6JyxcclxuICAgICAgMzMwMjEzOiAn5aWJ5YyW5Yy6JyxcclxuICAgICAgMzMwMjI1OiAn6LGh5bGx5Y6/JyxcclxuICAgICAgMzMwMjI2OiAn5a6B5rW35Y6/JyxcclxuICAgICAgMzMwMjgxOiAn5L2Z5aea5biCJyxcclxuICAgICAgMzMwMjgyOiAn5oWI5rqq5biCJyxcclxuICAgICAgMzMwMzAyOiAn6bm/5Z+O5Yy6JyxcclxuICAgICAgMzMwMzAzOiAn6b6Z5rm+5Yy6JyxcclxuICAgICAgMzMwMzA0OiAn55Ov5rW35Yy6JyxcclxuICAgICAgMzMwMzA1OiAn5rSe5aS05Yy6JyxcclxuICAgICAgMzMwMzI0OiAn5rC45ZiJ5Y6/JyxcclxuICAgICAgMzMwMzI2OiAn5bmz6Ziz5Y6/JyxcclxuICAgICAgMzMwMzI3OiAn6IuN5Y2X5Y6/JyxcclxuICAgICAgMzMwMzI4OiAn5paH5oiQ5Y6/JyxcclxuICAgICAgMzMwMzI5OiAn5rOw6aG65Y6/JyxcclxuICAgICAgMzMwMzgxOiAn55Ge5a6J5biCJyxcclxuICAgICAgMzMwMzgyOiAn5LmQ5riF5biCJyxcclxuICAgICAgMzMwNDAyOiAn5Y2X5rmW5Yy6JyxcclxuICAgICAgMzMwNDExOiAn56eA5rSy5Yy6JyxcclxuICAgICAgMzMwNDIxOiAn5ZiJ5ZaE5Y6/JyxcclxuICAgICAgMzMwNDI0OiAn5rW355uQ5Y6/JyxcclxuICAgICAgMzMwNDgxOiAn5rW35a6B5biCJyxcclxuICAgICAgMzMwNDgyOiAn5bmz5rmW5biCJyxcclxuICAgICAgMzMwNDgzOiAn5qGQ5Lmh5biCJyxcclxuICAgICAgMzMwNTAyOiAn5ZC05YW05Yy6JyxcclxuICAgICAgMzMwNTAzOiAn5Y2X5rWU5Yy6JyxcclxuICAgICAgMzMwNTIxOiAn5b635riF5Y6/JyxcclxuICAgICAgMzMwNTIyOiAn6ZW/5YW05Y6/JyxcclxuICAgICAgMzMwNTIzOiAn5a6J5ZCJ5Y6/JyxcclxuICAgICAgMzMwNjAyOiAn6LaK5Z+O5Yy6JyxcclxuICAgICAgMzMwNjAzOiAn5p+v5qGl5Yy6JyxcclxuICAgICAgMzMwNjA0OiAn5LiK6Jme5Yy6JyxcclxuICAgICAgMzMwNjI0OiAn5paw5piM5Y6/JyxcclxuICAgICAgMzMwNjgxOiAn6K+45pqo5biCJyxcclxuICAgICAgMzMwNjgzOiAn5bWK5bee5biCJyxcclxuICAgICAgMzMwNzAyOiAn5am65Z+O5Yy6JyxcclxuICAgICAgMzMwNzAzOiAn6YeR5Lic5Yy6JyxcclxuICAgICAgMzMwNzIzOiAn5q2m5LmJ5Y6/JyxcclxuICAgICAgMzMwNzI2OiAn5rWm5rGf5Y6/JyxcclxuICAgICAgMzMwNzI3OiAn56OQ5a6J5Y6/JyxcclxuICAgICAgMzMwNzgxOiAn5YWw5rqq5biCJyxcclxuICAgICAgMzMwNzgyOiAn5LmJ5LmM5biCJyxcclxuICAgICAgMzMwNzgzOiAn5Lic6Ziz5biCJyxcclxuICAgICAgMzMwNzg0OiAn5rC45bq35biCJyxcclxuICAgICAgMzMwODAyOiAn5p+v5Z+O5Yy6JyxcclxuICAgICAgMzMwODAzOiAn6KGi5rGf5Yy6JyxcclxuICAgICAgMzMwODIyOiAn5bi45bGx5Y6/JyxcclxuICAgICAgMzMwODI0OiAn5byA5YyW5Y6/JyxcclxuICAgICAgMzMwODI1OiAn6b6Z5ri45Y6/JyxcclxuICAgICAgMzMwODgxOiAn5rGf5bGx5biCJyxcclxuICAgICAgMzMwOTAyOiAn5a6a5rW35Yy6JyxcclxuICAgICAgMzMwOTAzOiAn5pmu6ZmA5Yy6JyxcclxuICAgICAgMzMwOTIxOiAn5bKx5bGx5Y6/JyxcclxuICAgICAgMzMwOTIyOiAn5bWK5rOX5Y6/JyxcclxuICAgICAgMzMxMDAyOiAn5qSS5rGf5Yy6JyxcclxuICAgICAgMzMxMDAzOiAn6buE5bKp5Yy6JyxcclxuICAgICAgMzMxMDA0OiAn6Lev5qGl5Yy6JyxcclxuICAgICAgMzMxMDIyOiAn5LiJ6Zeo5Y6/JyxcclxuICAgICAgMzMxMDIzOiAn5aSp5Y+w5Y6/JyxcclxuICAgICAgMzMxMDI0OiAn5LuZ5bGF5Y6/JyxcclxuICAgICAgMzMxMDgxOiAn5rip5bKt5biCJyxcclxuICAgICAgMzMxMDgyOiAn5Li05rW35biCJyxcclxuICAgICAgMzMxMDgzOiAn546J546v5biCJyxcclxuICAgICAgMzMxMTAyOiAn6I6y6YO95Yy6JyxcclxuICAgICAgMzMxMTIxOiAn6Z2S55Sw5Y6/JyxcclxuICAgICAgMzMxMTIyOiAn57yZ5LqR5Y6/JyxcclxuICAgICAgMzMxMTIzOiAn6YGC5piM5Y6/JyxcclxuICAgICAgMzMxMTI0OiAn5p2+6Ziz5Y6/JyxcclxuICAgICAgMzMxMTI1OiAn5LqR5ZKM5Y6/JyxcclxuICAgICAgMzMxMTI2OiAn5bqG5YWD5Y6/JyxcclxuICAgICAgMzMxMTI3OiAn5pmv5a6B55Wy5peP6Ieq5rK75Y6/JyxcclxuICAgICAgMzMxMTgxOiAn6b6Z5rOJ5biCJyxcclxuICAgICAgMzQwMTAyOiAn55G25rW35Yy6JyxcclxuICAgICAgMzQwMTAzOiAn5bqQ6Ziz5Yy6JyxcclxuICAgICAgMzQwMTA0OiAn6JyA5bGx5Yy6JyxcclxuICAgICAgMzQwMTExOiAn5YyF5rKz5Yy6JyxcclxuICAgICAgMzQwMTIxOiAn6ZW/5Liw5Y6/JyxcclxuICAgICAgMzQwMTIyOiAn6IKl5Lic5Y6/JyxcclxuICAgICAgMzQwMTIzOiAn6IKl6KW/5Y6/JyxcclxuICAgICAgMzQwMTI0OiAn5bqQ5rGf5Y6/JyxcclxuICAgICAgMzQwMTgxOiAn5bei5rmW5biCJyxcclxuICAgICAgMzQwMTkwOiAn6auY5paw5oqA5pyv5byA5Y+R5Yy6JyxcclxuICAgICAgMzQwMTkxOiAn57uP5rWO5oqA5pyv5byA5Y+R5Yy6JyxcclxuICAgICAgMzQwMjAyOiAn6ZWc5rmW5Yy6JyxcclxuICAgICAgMzQwMjAzOiAn5byL5rGf5Yy6JyxcclxuICAgICAgMzQwMjA3OiAn6big5rGf5Yy6JyxcclxuICAgICAgMzQwMjA4OiAn5LiJ5bGx5Yy6JyxcclxuICAgICAgMzQwMjIxOiAn6Iqc5rmW5Y6/JyxcclxuICAgICAgMzQwMjIyOiAn57mB5piM5Y6/JyxcclxuICAgICAgMzQwMjIzOiAn5Y2X6Zm15Y6/JyxcclxuICAgICAgMzQwMjI1OiAn5peg5Li65Y6/JyxcclxuICAgICAgMzQwMzAyOiAn6b6Z5a2Q5rmW5Yy6JyxcclxuICAgICAgMzQwMzAzOiAn6JqM5bGx5Yy6JyxcclxuICAgICAgMzQwMzA0OiAn56a55Lya5Yy6JyxcclxuICAgICAgMzQwMzExOiAn5reu5LiK5Yy6JyxcclxuICAgICAgMzQwMzIxOiAn5oCA6L+c5Y6/JyxcclxuICAgICAgMzQwMzIyOiAn5LqU5rKz5Y6/JyxcclxuICAgICAgMzQwMzIzOiAn5Zu66ZWH5Y6/JyxcclxuICAgICAgMzQwNDAyOiAn5aSn6YCa5Yy6JyxcclxuICAgICAgMzQwNDAzOiAn55Sw5a625bq15Yy6JyxcclxuICAgICAgMzQwNDA0OiAn6LCi5a626ZuG5Yy6JyxcclxuICAgICAgMzQwNDA1OiAn5YWr5YWs5bGx5Yy6JyxcclxuICAgICAgMzQwNDA2OiAn5r2Y6ZuG5Yy6JyxcclxuICAgICAgMzQwNDIxOiAn5Yek5Y+w5Y6/JyxcclxuICAgICAgMzQwNDIyOiAn5a+/5Y6/JyxcclxuICAgICAgMzQwNTAzOiAn6Iqx5bGx5Yy6JyxcclxuICAgICAgMzQwNTA0OiAn6Zuo5bGx5Yy6JyxcclxuICAgICAgMzQwNTA2OiAn5Y2a5pyb5Yy6JyxcclxuICAgICAgMzQwNTIxOiAn5b2T5raC5Y6/JyxcclxuICAgICAgMzQwNTIyOiAn5ZCr5bGx5Y6/JyxcclxuICAgICAgMzQwNTIzOiAn5ZKM5Y6/JyxcclxuICAgICAgMzQwNjAyOiAn5p2c6ZuG5Yy6JyxcclxuICAgICAgMzQwNjAzOiAn55u45bGx5Yy6JyxcclxuICAgICAgMzQwNjA0OiAn54OI5bGx5Yy6JyxcclxuICAgICAgMzQwNjIxOiAn5r+J5rqq5Y6/JyxcclxuICAgICAgMzQwNzA1OiAn6ZOc5a6Y5Yy6JyxcclxuICAgICAgMzQwNzA2OiAn5LmJ5a6J5Yy6JyxcclxuICAgICAgMzQwNzExOiAn6YOK5Yy6JyxcclxuICAgICAgMzQwNzIyOiAn5p6e6Ziz5Y6/JyxcclxuICAgICAgMzQwODAyOiAn6L+O5rGf5Yy6JyxcclxuICAgICAgMzQwODAzOiAn5aSn6KeC5Yy6JyxcclxuICAgICAgMzQwODExOiAn5a6c56eA5Yy6JyxcclxuICAgICAgMzQwODIyOiAn5oCA5a6B5Y6/JyxcclxuICAgICAgMzQwODI0OiAn5r2c5bGx5Y6/JyxcclxuICAgICAgMzQwODI1OiAn5aSq5rmW5Y6/JyxcclxuICAgICAgMzQwODI2OiAn5a6/5p2+5Y6/JyxcclxuICAgICAgMzQwODI3OiAn5pyb5rGf5Y6/JyxcclxuICAgICAgMzQwODI4OiAn5bKz6KW/5Y6/JyxcclxuICAgICAgMzQwODgxOiAn5qGQ5Z+O5biCJyxcclxuICAgICAgMzQxMDAyOiAn5bGv5rqq5Yy6JyxcclxuICAgICAgMzQxMDAzOiAn6buE5bGx5Yy6JyxcclxuICAgICAgMzQxMDA0OiAn5b695bee5Yy6JyxcclxuICAgICAgMzQxMDIxOiAn5q2Z5Y6/JyxcclxuICAgICAgMzQxMDIyOiAn5LyR5a6B5Y6/JyxcclxuICAgICAgMzQxMDIzOiAn6buf5Y6/JyxcclxuICAgICAgMzQxMDI0OiAn56WB6Zeo5Y6/JyxcclxuICAgICAgMzQxMTAyOiAn55CF55CK5Yy6JyxcclxuICAgICAgMzQxMTAzOiAn5Y2X6LCv5Yy6JyxcclxuICAgICAgMzQxMTIyOiAn5p2l5a6J5Y6/JyxcclxuICAgICAgMzQxMTI0OiAn5YWo5qSS5Y6/JyxcclxuICAgICAgMzQxMTI1OiAn5a6a6L+c5Y6/JyxcclxuICAgICAgMzQxMTI2OiAn5Yek6Ziz5Y6/JyxcclxuICAgICAgMzQxMTgxOiAn5aSp6ZW/5biCJyxcclxuICAgICAgMzQxMTgyOiAn5piO5YWJ5biCJyxcclxuICAgICAgMzQxMjAyOiAn6aKN5bee5Yy6JyxcclxuICAgICAgMzQxMjAzOiAn6aKN5Lic5Yy6JyxcclxuICAgICAgMzQxMjA0OiAn6aKN5rOJ5Yy6JyxcclxuICAgICAgMzQxMjIxOiAn5Li05rOJ5Y6/JyxcclxuICAgICAgMzQxMjIyOiAn5aSq5ZKM5Y6/JyxcclxuICAgICAgMzQxMjI1OiAn6Zic5Y2X5Y6/JyxcclxuICAgICAgMzQxMjI2OiAn6aKN5LiK5Y6/JyxcclxuICAgICAgMzQxMjgyOiAn55WM6aaW5biCJyxcclxuICAgICAgMzQxMzAyOiAn5Z+H5qGl5Yy6JyxcclxuICAgICAgMzQxMzIxOiAn56CA5bGx5Y6/JyxcclxuICAgICAgMzQxMzIyOiAn6JCn5Y6/JyxcclxuICAgICAgMzQxMzIzOiAn54G155Kn5Y6/JyxcclxuICAgICAgMzQxMzI0OiAn5rOX5Y6/JyxcclxuICAgICAgMzQxMzkwOiAn57uP5rWO5byA5Y+R5Yy6JyxcclxuICAgICAgMzQxNTAyOiAn6YeR5a6J5Yy6JyxcclxuICAgICAgMzQxNTAzOiAn6KOV5a6J5Yy6JyxcclxuICAgICAgMzQxNTA0OiAn5Y+26ZuG5Yy6JyxcclxuICAgICAgMzQxNTIyOiAn6ZyN6YKx5Y6/JyxcclxuICAgICAgMzQxNTIzOiAn6IiS5Z+O5Y6/JyxcclxuICAgICAgMzQxNTI0OiAn6YeR5a+o5Y6/JyxcclxuICAgICAgMzQxNTI1OiAn6ZyN5bGx5Y6/JyxcclxuICAgICAgMzQxNjAyOiAn6LCv5Z+O5Yy6JyxcclxuICAgICAgMzQxNjIxOiAn5rah6Ziz5Y6/JyxcclxuICAgICAgMzQxNjIyOiAn6JKZ5Z+O5Y6/JyxcclxuICAgICAgMzQxNjIzOiAn5Yip6L6b5Y6/JyxcclxuICAgICAgMzQxNzAyOiAn6LS15rGg5Yy6JyxcclxuICAgICAgMzQxNzIxOiAn5Lic6Iez5Y6/JyxcclxuICAgICAgMzQxNzIyOiAn55+z5Y+w5Y6/JyxcclxuICAgICAgMzQxNzIzOiAn6Z2S6Ziz5Y6/JyxcclxuICAgICAgMzQxODAyOiAn5a6j5bee5Yy6JyxcclxuICAgICAgMzQxODIxOiAn6YOO5rqq5Y6/JyxcclxuICAgICAgMzQxODIyOiAn5bm/5b635Y6/JyxcclxuICAgICAgMzQxODIzOiAn5rO+5Y6/JyxcclxuICAgICAgMzQxODI0OiAn57up5rqq5Y6/JyxcclxuICAgICAgMzQxODI1OiAn5peM5b635Y6/JyxcclxuICAgICAgMzQxODgxOiAn5a6B5Zu95biCJyxcclxuICAgICAgMzUwMTAyOiAn6byT5qW85Yy6JyxcclxuICAgICAgMzUwMTAzOiAn5Y+w5rGf5Yy6JyxcclxuICAgICAgMzUwMTA0OiAn5LuT5bGx5Yy6JyxcclxuICAgICAgMzUwMTA1OiAn6ams5bC+5Yy6JyxcclxuICAgICAgMzUwMTExOiAn5pmL5a6J5Yy6JyxcclxuICAgICAgMzUwMTEyOiAn6ZW/5LmQ5Yy6JyxcclxuICAgICAgMzUwMTIxOiAn6Ze95L6v5Y6/JyxcclxuICAgICAgMzUwMTIyOiAn6L+e5rGf5Y6/JyxcclxuICAgICAgMzUwMTIzOiAn572X5rqQ5Y6/JyxcclxuICAgICAgMzUwMTI0OiAn6Ze95riF5Y6/JyxcclxuICAgICAgMzUwMTI1OiAn5rC45rOw5Y6/JyxcclxuICAgICAgMzUwMTI4OiAn5bmz5r2t5Y6/JyxcclxuICAgICAgMzUwMTgxOiAn56aP5riF5biCJyxcclxuICAgICAgMzUwMjAzOiAn5oCd5piO5Yy6JyxcclxuICAgICAgMzUwMjA1OiAn5rW35rKn5Yy6JyxcclxuICAgICAgMzUwMjA2OiAn5rmW6YeM5Yy6JyxcclxuICAgICAgMzUwMjExOiAn6ZuG576O5Yy6JyxcclxuICAgICAgMzUwMjEyOiAn5ZCM5a6J5Yy6JyxcclxuICAgICAgMzUwMjEzOiAn57+U5a6J5Yy6JyxcclxuICAgICAgMzUwMzAyOiAn5Z+O5Y6i5Yy6JyxcclxuICAgICAgMzUwMzAzOiAn5ra15rGf5Yy6JyxcclxuICAgICAgMzUwMzA0OiAn6I2U5Z+O5Yy6JyxcclxuICAgICAgMzUwMzA1OiAn56eA5bG/5Yy6JyxcclxuICAgICAgMzUwMzIyOiAn5LuZ5ri45Y6/JyxcclxuICAgICAgMzUwNDAyOiAn5qKF5YiX5Yy6JyxcclxuICAgICAgMzUwNDAzOiAn5LiJ5YWD5Yy6JyxcclxuICAgICAgMzUwNDIxOiAn5piO5rqq5Y6/JyxcclxuICAgICAgMzUwNDIzOiAn5riF5rWB5Y6/JyxcclxuICAgICAgMzUwNDI0OiAn5a6B5YyW5Y6/JyxcclxuICAgICAgMzUwNDI1OiAn5aSn55Sw5Y6/JyxcclxuICAgICAgMzUwNDI2OiAn5bCk5rqq5Y6/JyxcclxuICAgICAgMzUwNDI3OiAn5rKZ5Y6/JyxcclxuICAgICAgMzUwNDI4OiAn5bCG5LmQ5Y6/JyxcclxuICAgICAgMzUwNDI5OiAn5rOw5a6B5Y6/JyxcclxuICAgICAgMzUwNDMwOiAn5bu65a6B5Y6/JyxcclxuICAgICAgMzUwNDgxOiAn5rC45a6J5biCJyxcclxuICAgICAgMzUwNTAyOiAn6bKk5Z+O5Yy6JyxcclxuICAgICAgMzUwNTAzOiAn5Liw5rO95Yy6JyxcclxuICAgICAgMzUwNTA0OiAn5rSb5rGf5Yy6JyxcclxuICAgICAgMzUwNTA1OiAn5rOJ5riv5Yy6JyxcclxuICAgICAgMzUwNTIxOiAn5oOg5a6J5Y6/JyxcclxuICAgICAgMzUwNTI0OiAn5a6J5rqq5Y6/JyxcclxuICAgICAgMzUwNTI1OiAn5rC45pil5Y6/JyxcclxuICAgICAgMzUwNTI2OiAn5b635YyW5Y6/JyxcclxuICAgICAgMzUwNTI3OiAn6YeR6Zeo5Y6/JyxcclxuICAgICAgMzUwNTgxOiAn55+z54uu5biCJyxcclxuICAgICAgMzUwNTgyOiAn5pmL5rGf5biCJyxcclxuICAgICAgMzUwNTgzOiAn5Y2X5a6J5biCJyxcclxuICAgICAgMzUwNjAyOiAn6IqX5Z+O5Yy6JyxcclxuICAgICAgMzUwNjAzOiAn6b6Z5paH5Yy6JyxcclxuICAgICAgMzUwNjIyOiAn5LqR6ZyE5Y6/JyxcclxuICAgICAgMzUwNjIzOiAn5ryz5rWm5Y6/JyxcclxuICAgICAgMzUwNjI0OiAn6K+P5a6J5Y6/JyxcclxuICAgICAgMzUwNjI1OiAn6ZW/5rOw5Y6/JyxcclxuICAgICAgMzUwNjI2OiAn5Lic5bGx5Y6/JyxcclxuICAgICAgMzUwNjI3OiAn5Y2X6Z2W5Y6/JyxcclxuICAgICAgMzUwNjI4OiAn5bmz5ZKM5Y6/JyxcclxuICAgICAgMzUwNjI5OiAn5Y2O5a6J5Y6/JyxcclxuICAgICAgMzUwNjgxOiAn6b6Z5rW35biCJyxcclxuICAgICAgMzUwNzAyOiAn5bu25bmz5Yy6JyxcclxuICAgICAgMzUwNzAzOiAn5bu66Ziz5Yy6JyxcclxuICAgICAgMzUwNzIxOiAn6aG65piM5Y6/JyxcclxuICAgICAgMzUwNzIyOiAn5rWm5Z+O5Y6/JyxcclxuICAgICAgMzUwNzIzOiAn5YWJ5rO95Y6/JyxcclxuICAgICAgMzUwNzI0OiAn5p2+5rqq5Y6/JyxcclxuICAgICAgMzUwNzI1OiAn5pS/5ZKM5Y6/JyxcclxuICAgICAgMzUwNzgxOiAn6YK15q2m5biCJyxcclxuICAgICAgMzUwNzgyOiAn5q2m5aS35bGx5biCJyxcclxuICAgICAgMzUwNzgzOiAn5bu655Ov5biCJyxcclxuICAgICAgMzUwODAyOiAn5paw572X5Yy6JyxcclxuICAgICAgMzUwODAzOiAn5rC45a6a5Yy6JyxcclxuICAgICAgMzUwODIxOiAn6ZW/5rGA5Y6/JyxcclxuICAgICAgMzUwODIzOiAn5LiK5p2t5Y6/JyxcclxuICAgICAgMzUwODI0OiAn5q2m5bmz5Y6/JyxcclxuICAgICAgMzUwODI1OiAn6L+e5Z+O5Y6/JyxcclxuICAgICAgMzUwODgxOiAn5ryz5bmz5biCJyxcclxuICAgICAgMzUwOTAyOiAn6JWJ5Z+O5Yy6JyxcclxuICAgICAgMzUwOTIxOiAn6Zye5rWm5Y6/JyxcclxuICAgICAgMzUwOTIyOiAn5Y+k55Sw5Y6/JyxcclxuICAgICAgMzUwOTIzOiAn5bGP5Y2X5Y6/JyxcclxuICAgICAgMzUwOTI0OiAn5a+/5a6B5Y6/JyxcclxuICAgICAgMzUwOTI1OiAn5ZGo5a6B5Y6/JyxcclxuICAgICAgMzUwOTI2OiAn5p+Y6I2j5Y6/JyxcclxuICAgICAgMzUwOTgxOiAn56aP5a6J5biCJyxcclxuICAgICAgMzUwOTgyOiAn56aP6byO5biCJyxcclxuICAgICAgMzYwMTAyOiAn5Lic5rmW5Yy6JyxcclxuICAgICAgMzYwMTAzOiAn6KW/5rmW5Yy6JyxcclxuICAgICAgMzYwMTA0OiAn6Z2S5LqR6LCx5Yy6JyxcclxuICAgICAgMzYwMTA1OiAn5rm+6YeM5Yy6JyxcclxuICAgICAgMzYwMTExOiAn6Z2S5bGx5rmW5Yy6JyxcclxuICAgICAgMzYwMTEyOiAn5paw5bu65Yy6JyxcclxuICAgICAgMzYwMTIxOiAn5Y2X5piM5Y6/JyxcclxuICAgICAgMzYwMTIzOiAn5a6J5LmJ5Y6/JyxcclxuICAgICAgMzYwMTI0OiAn6L+b6LSk5Y6/JyxcclxuICAgICAgMzYwMTkwOiAn57uP5rWO5oqA5pyv5byA5Y+R5Yy6JyxcclxuICAgICAgMzYwMTkyOiAn6auY5paw5Yy6JyxcclxuICAgICAgMzYwMjAyOiAn5piM5rGf5Yy6JyxcclxuICAgICAgMzYwMjAzOiAn54+g5bGx5Yy6JyxcclxuICAgICAgMzYwMjIyOiAn5rWu5qKB5Y6/JyxcclxuICAgICAgMzYwMjgxOiAn5LmQ5bmz5biCJyxcclxuICAgICAgMzYwMzAyOiAn5a6J5rqQ5Yy6JyxcclxuICAgICAgMzYwMzEzOiAn5rmY5Lic5Yy6JyxcclxuICAgICAgMzYwMzIxOiAn6I6y6Iqx5Y6/JyxcclxuICAgICAgMzYwMzIyOiAn5LiK5qCX5Y6/JyxcclxuICAgICAgMzYwMzIzOiAn6Iqm5rqq5Y6/JyxcclxuICAgICAgMzYwNDAyOiAn5r+C5rqq5Yy6JyxcclxuICAgICAgMzYwNDAzOiAn5rWU6Ziz5Yy6JyxcclxuICAgICAgMzYwNDA0OiAn5p+05qGR5Yy6JyxcclxuICAgICAgMzYwNDIzOiAn5q2m5a6B5Y6/JyxcclxuICAgICAgMzYwNDI0OiAn5L+u5rC05Y6/JyxcclxuICAgICAgMzYwNDI1OiAn5rC45L+u5Y6/JyxcclxuICAgICAgMzYwNDI2OiAn5b635a6J5Y6/JyxcclxuICAgICAgMzYwNDI4OiAn6YO95piM5Y6/JyxcclxuICAgICAgMzYwNDI5OiAn5rmW5Y+j5Y6/JyxcclxuICAgICAgMzYwNDMwOiAn5b2t5rO95Y6/JyxcclxuICAgICAgMzYwNDgxOiAn55Ge5piM5biCJyxcclxuICAgICAgMzYwNDgyOiAn5YWx6Z2S5Z+O5biCJyxcclxuICAgICAgMzYwNDgzOiAn5bqQ5bGx5biCJyxcclxuICAgICAgMzYwNDkwOiAn57uP5rWO5oqA5pyv5byA5Y+R5Yy6JyxcclxuICAgICAgMzYwNTAyOiAn5rid5rC05Yy6JyxcclxuICAgICAgMzYwNTIxOiAn5YiG5a6c5Y6/JyxcclxuICAgICAgMzYwNjAyOiAn5pyI5rmW5Yy6JyxcclxuICAgICAgMzYwNjAzOiAn5L2Z5rGf5Yy6JyxcclxuICAgICAgMzYwNjgxOiAn6LS15rqq5biCJyxcclxuICAgICAgMzYwNzAyOiAn56ug6LSh5Yy6JyxcclxuICAgICAgMzYwNzAzOiAn5Y2X5bq35Yy6JyxcclxuICAgICAgMzYwNzA0OiAn6LWj5Y6/5Yy6JyxcclxuICAgICAgMzYwNzIyOiAn5L+h5Liw5Y6/JyxcclxuICAgICAgMzYwNzIzOiAn5aSn5L2Z5Y6/JyxcclxuICAgICAgMzYwNzI0OiAn5LiK54q55Y6/JyxcclxuICAgICAgMzYwNzI1OiAn5bSH5LmJ5Y6/JyxcclxuICAgICAgMzYwNzI2OiAn5a6J6L+c5Y6/JyxcclxuICAgICAgMzYwNzI3OiAn6b6Z5Y2X5Y6/JyxcclxuICAgICAgMzYwNzI4OiAn5a6a5Y2X5Y6/JyxcclxuICAgICAgMzYwNzI5OiAn5YWo5Y2X5Y6/JyxcclxuICAgICAgMzYwNzMwOiAn5a6B6YO95Y6/JyxcclxuICAgICAgMzYwNzMxOiAn5LqO6YO95Y6/JyxcclxuICAgICAgMzYwNzMyOiAn5YW05Zu95Y6/JyxcclxuICAgICAgMzYwNzMzOiAn5Lya5piM5Y6/JyxcclxuICAgICAgMzYwNzM0OiAn5a+75LmM5Y6/JyxcclxuICAgICAgMzYwNzM1OiAn55+z5Z+O5Y6/JyxcclxuICAgICAgMzYwNzgxOiAn55Ge6YeR5biCJyxcclxuICAgICAgMzYwODAyOiAn5ZCJ5bee5Yy6JyxcclxuICAgICAgMzYwODAzOiAn6Z2S5Y6f5Yy6JyxcclxuICAgICAgMzYwODIxOiAn5ZCJ5a6J5Y6/JyxcclxuICAgICAgMzYwODIyOiAn5ZCJ5rC05Y6/JyxcclxuICAgICAgMzYwODIzOiAn5bOh5rGf5Y6/JyxcclxuICAgICAgMzYwODI0OiAn5paw5bmy5Y6/JyxcclxuICAgICAgMzYwODI1OiAn5rC45Liw5Y6/JyxcclxuICAgICAgMzYwODI2OiAn5rOw5ZKM5Y6/JyxcclxuICAgICAgMzYwODI3OiAn6YGC5bed5Y6/JyxcclxuICAgICAgMzYwODI4OiAn5LiH5a6J5Y6/JyxcclxuICAgICAgMzYwODI5OiAn5a6J56aP5Y6/JyxcclxuICAgICAgMzYwODMwOiAn5rC45paw5Y6/JyxcclxuICAgICAgMzYwODgxOiAn5LqV5YaI5bGx5biCJyxcclxuICAgICAgMzYwOTAyOiAn6KKB5bee5Yy6JyxcclxuICAgICAgMzYwOTIxOiAn5aWJ5paw5Y6/JyxcclxuICAgICAgMzYwOTIyOiAn5LiH6L295Y6/JyxcclxuICAgICAgMzYwOTIzOiAn5LiK6auY5Y6/JyxcclxuICAgICAgMzYwOTI0OiAn5a6c5Liw5Y6/JyxcclxuICAgICAgMzYwOTI1OiAn6Z2W5a6J5Y6/JyxcclxuICAgICAgMzYwOTI2OiAn6ZOc6byT5Y6/JyxcclxuICAgICAgMzYwOTgxOiAn5Liw5Z+O5biCJyxcclxuICAgICAgMzYwOTgyOiAn5qif5qCR5biCJyxcclxuICAgICAgMzYwOTgzOiAn6auY5a6J5biCJyxcclxuICAgICAgMzYxMDAyOiAn5Li05bed5Yy6JyxcclxuICAgICAgMzYxMDAzOiAn5Lic5Lmh5Yy6JyxcclxuICAgICAgMzYxMDIxOiAn5Y2X5Z+O5Y6/JyxcclxuICAgICAgMzYxMDIyOiAn6buO5bed5Y6/JyxcclxuICAgICAgMzYxMDIzOiAn5Y2X5Liw5Y6/JyxcclxuICAgICAgMzYxMDI0OiAn5bSH5LuB5Y6/JyxcclxuICAgICAgMzYxMDI1OiAn5LmQ5a6J5Y6/JyxcclxuICAgICAgMzYxMDI2OiAn5a6c6buE5Y6/JyxcclxuICAgICAgMzYxMDI3OiAn6YeR5rqq5Y6/JyxcclxuICAgICAgMzYxMDI4OiAn6LWE5rqq5Y6/JyxcclxuICAgICAgMzYxMDMwOiAn5bm/5piM5Y6/JyxcclxuICAgICAgMzYxMTAyOiAn5L+h5bee5Yy6JyxcclxuICAgICAgMzYxMTAzOiAn5bm/5Liw5Yy6JyxcclxuICAgICAgMzYxMTIxOiAn5LiK6aW25Y6/JyxcclxuICAgICAgMzYxMTIzOiAn546J5bGx5Y6/JyxcclxuICAgICAgMzYxMTI0OiAn6ZOF5bGx5Y6/JyxcclxuICAgICAgMzYxMTI1OiAn5qiq5bOw5Y6/JyxcclxuICAgICAgMzYxMTI2OiAn5byL6Ziz5Y6/JyxcclxuICAgICAgMzYxMTI3OiAn5L2Z5bmy5Y6/JyxcclxuICAgICAgMzYxMTI4OiAn6YSx6Ziz5Y6/JyxcclxuICAgICAgMzYxMTI5OiAn5LiH5bm05Y6/JyxcclxuICAgICAgMzYxMTMwOiAn5am65rqQ5Y6/JyxcclxuICAgICAgMzYxMTgxOiAn5b635YW05biCJyxcclxuICAgICAgMzcwMTAyOiAn5Y6G5LiL5Yy6JyxcclxuICAgICAgMzcwMTAzOiAn5biC5Lit5Yy6JyxcclxuICAgICAgMzcwMTA0OiAn5qeQ6I2r5Yy6JyxcclxuICAgICAgMzcwMTA1OiAn5aSp5qGl5Yy6JyxcclxuICAgICAgMzcwMTEyOiAn5Y6G5Z+O5Yy6JyxcclxuICAgICAgMzcwMTEzOiAn6ZW/5riF5Yy6JyxcclxuICAgICAgMzcwMTE0OiAn56ug5LiY5Yy6JyxcclxuICAgICAgMzcwMTE1OiAn5rWO6Ziz5Yy6JyxcclxuICAgICAgMzcwMTI0OiAn5bmz6Zi05Y6/JyxcclxuICAgICAgMzcwMTI2OiAn5ZWG5rKz5Y6/JyxcclxuICAgICAgMzcwMTkwOiAn6auY5paw5Yy6JyxcclxuICAgICAgMzcwMjAyOiAn5biC5Y2X5Yy6JyxcclxuICAgICAgMzcwMjAzOiAn5biC5YyX5Yy6JyxcclxuICAgICAgMzcwMjExOiAn6buE5bKb5Yy6JyxcclxuICAgICAgMzcwMjEyOiAn5bSC5bGx5Yy6JyxcclxuICAgICAgMzcwMjEzOiAn5p2O5rKn5Yy6JyxcclxuICAgICAgMzcwMjE0OiAn5Z+O6Ziz5Yy6JyxcclxuICAgICAgMzcwMjE1OiAn5Y2z5aKo5Yy6JyxcclxuICAgICAgMzcwMjgxOiAn6IO25bee5biCJyxcclxuICAgICAgMzcwMjgzOiAn5bmz5bqm5biCJyxcclxuICAgICAgMzcwMjg1OiAn6I6x6KW/5biCJyxcclxuICAgICAgMzcwMjkwOiAn5byA5Y+R5Yy6JyxcclxuICAgICAgMzcwMzAyOiAn5reE5bed5Yy6JyxcclxuICAgICAgMzcwMzAzOiAn5byg5bqX5Yy6JyxcclxuICAgICAgMzcwMzA0OiAn5Y2a5bGx5Yy6JyxcclxuICAgICAgMzcwMzA1OiAn5Li05reE5Yy6JyxcclxuICAgICAgMzcwMzA2OiAn5ZGo5p2R5Yy6JyxcclxuICAgICAgMzcwMzIxOiAn5qGT5Y+w5Y6/JyxcclxuICAgICAgMzcwMzIyOiAn6auY6Z2S5Y6/JyxcclxuICAgICAgMzcwMzIzOiAn5rKC5rqQ5Y6/JyxcclxuICAgICAgMzcwNDAyOiAn5biC5Lit5Yy6JyxcclxuICAgICAgMzcwNDAzOiAn6Jab5Z+O5Yy6JyxcclxuICAgICAgMzcwNDA0OiAn5bOE5Z+O5Yy6JyxcclxuICAgICAgMzcwNDA1OiAn5Y+w5YS/5bqE5Yy6JyxcclxuICAgICAgMzcwNDA2OiAn5bGx5Lqt5Yy6JyxcclxuICAgICAgMzcwNDgxOiAn5ruV5bee5biCJyxcclxuICAgICAgMzcwNTAyOiAn5Lic6JCl5Yy6JyxcclxuICAgICAgMzcwNTAzOiAn5rKz5Y+j5Yy6JyxcclxuICAgICAgMzcwNTA1OiAn5Z6m5Yip5Yy6JyxcclxuICAgICAgMzcwNTIyOiAn5Yip5rSl5Y6/JyxcclxuICAgICAgMzcwNTIzOiAn5bm/6aW25Y6/JyxcclxuICAgICAgMzcwNjAyOiAn6Iqd572Y5Yy6JyxcclxuICAgICAgMzcwNjExOiAn56aP5bGx5Yy6JyxcclxuICAgICAgMzcwNjEyOiAn54mf5bmz5Yy6JyxcclxuICAgICAgMzcwNjEzOiAn6I6x5bGx5Yy6JyxcclxuICAgICAgMzcwNjM0OiAn6ZW/5bKb5Y6/JyxcclxuICAgICAgMzcwNjgxOiAn6b6Z5Y+j5biCJyxcclxuICAgICAgMzcwNjgyOiAn6I6x6Ziz5biCJyxcclxuICAgICAgMzcwNjgzOiAn6I6x5bee5biCJyxcclxuICAgICAgMzcwNjg0OiAn6JOs6I6x5biCJyxcclxuICAgICAgMzcwNjg1OiAn5oub6L+c5biCJyxcclxuICAgICAgMzcwNjg2OiAn5qCW6Zye5biCJyxcclxuICAgICAgMzcwNjg3OiAn5rW36Ziz5biCJyxcclxuICAgICAgMzcwNjkwOiAn5byA5Y+R5Yy6JyxcclxuICAgICAgMzcwNzAyOiAn5r2N5Z+O5Yy6JyxcclxuICAgICAgMzcwNzAzOiAn5a+S5Lqt5Yy6JyxcclxuICAgICAgMzcwNzA0OiAn5Z2K5a2Q5Yy6JyxcclxuICAgICAgMzcwNzA1OiAn5aWO5paH5Yy6JyxcclxuICAgICAgMzcwNzI0OiAn5Li05pyQ5Y6/JyxcclxuICAgICAgMzcwNzI1OiAn5piM5LmQ5Y6/JyxcclxuICAgICAgMzcwNzgxOiAn6Z2S5bee5biCJyxcclxuICAgICAgMzcwNzgyOiAn6K+45Z+O5biCJyxcclxuICAgICAgMzcwNzgzOiAn5a+/5YWJ5biCJyxcclxuICAgICAgMzcwNzg0OiAn5a6J5LiY5biCJyxcclxuICAgICAgMzcwNzg1OiAn6auY5a+G5biCJyxcclxuICAgICAgMzcwNzg2OiAn5piM6YKR5biCJyxcclxuICAgICAgMzcwNzkwOiAn5byA5Y+R5Yy6JyxcclxuICAgICAgMzcwNzkxOiAn6auY5paw5Yy6JyxcclxuICAgICAgMzcwODExOiAn5Lu75Z+O5Yy6JyxcclxuICAgICAgMzcwODEyOiAn5YWW5bee5Yy6JyxcclxuICAgICAgMzcwODI2OiAn5b6u5bGx5Y6/JyxcclxuICAgICAgMzcwODI3OiAn6bG85Y+w5Y6/JyxcclxuICAgICAgMzcwODI4OiAn6YeR5Lmh5Y6/JyxcclxuICAgICAgMzcwODI5OiAn5ZiJ56Wl5Y6/JyxcclxuICAgICAgMzcwODMwOiAn5rG25LiK5Y6/JyxcclxuICAgICAgMzcwODMxOiAn5rOX5rC05Y6/JyxcclxuICAgICAgMzcwODMyOiAn5qKB5bGx5Y6/JyxcclxuICAgICAgMzcwODgxOiAn5puy6Zic5biCJyxcclxuICAgICAgMzcwODgzOiAn6YK55Z+O5biCJyxcclxuICAgICAgMzcwODkwOiAn6auY5paw5Yy6JyxcclxuICAgICAgMzcwOTAyOiAn5rOw5bGx5Yy6JyxcclxuICAgICAgMzcwOTExOiAn5bKx5bKz5Yy6JyxcclxuICAgICAgMzcwOTIxOiAn5a6B6Ziz5Y6/JyxcclxuICAgICAgMzcwOTIzOiAn5Lic5bmz5Y6/JyxcclxuICAgICAgMzcwOTgyOiAn5paw5rOw5biCJyxcclxuICAgICAgMzcwOTgzOiAn6IKl5Z+O5biCJyxcclxuICAgICAgMzcxMDAyOiAn546v57+g5Yy6JyxcclxuICAgICAgMzcxMDAzOiAn5paH55m75Yy6JyxcclxuICAgICAgMzcxMDgyOiAn6I2j5oiQ5biCJyxcclxuICAgICAgMzcxMDgzOiAn5Lmz5bGx5biCJyxcclxuICAgICAgMzcxMDkxOiAn57uP5rWO5oqA5pyv5byA5Y+R5Yy6JyxcclxuICAgICAgMzcxMTAyOiAn5Lic5riv5Yy6JyxcclxuICAgICAgMzcxMTAzOiAn5bKa5bGx5Yy6JyxcclxuICAgICAgMzcxMTIxOiAn5LqU6I6y5Y6/JyxcclxuICAgICAgMzcxMTIyOiAn6I6S5Y6/JyxcclxuICAgICAgMzcxMjAyOiAn6I6x5Z+O5Yy6JyxcclxuICAgICAgMzcxMjAzOiAn6ZKi5Z+O5Yy6JyxcclxuICAgICAgMzcxMzAyOiAn5YWw5bGx5Yy6JyxcclxuICAgICAgMzcxMzExOiAn572X5bqE5Yy6JyxcclxuICAgICAgMzcxMzEyOiAn5rKz5Lic5Yy6JyxcclxuICAgICAgMzcxMzIxOiAn5rKC5Y2X5Y6/JyxcclxuICAgICAgMzcxMzIyOiAn6YOv5Z+O5Y6/JyxcclxuICAgICAgMzcxMzIzOiAn5rKC5rC05Y6/JyxcclxuICAgICAgMzcxMzI0OiAn5YWw6Zm15Y6/JyxcclxuICAgICAgMzcxMzI1OiAn6LS55Y6/JyxcclxuICAgICAgMzcxMzI2OiAn5bmz6YKR5Y6/JyxcclxuICAgICAgMzcxMzI3OiAn6I6S5Y2X5Y6/JyxcclxuICAgICAgMzcxMzI4OiAn6JKZ6Zi05Y6/JyxcclxuICAgICAgMzcxMzI5OiAn5Li05rKt5Y6/JyxcclxuICAgICAgMzcxNDAyOiAn5b635Z+O5Yy6JyxcclxuICAgICAgMzcxNDAzOiAn6Zm15Z+O5Yy6JyxcclxuICAgICAgMzcxNDIyOiAn5a6B5rSl5Y6/JyxcclxuICAgICAgMzcxNDIzOiAn5bqG5LqR5Y6/JyxcclxuICAgICAgMzcxNDI0OiAn5Li06YKR5Y6/JyxcclxuICAgICAgMzcxNDI1OiAn6b2Q5rKz5Y6/JyxcclxuICAgICAgMzcxNDI2OiAn5bmz5Y6f5Y6/JyxcclxuICAgICAgMzcxNDI3OiAn5aSP5rSl5Y6/JyxcclxuICAgICAgMzcxNDI4OiAn5q2m5Z+O5Y6/JyxcclxuICAgICAgMzcxNDgxOiAn5LmQ6Zm15biCJyxcclxuICAgICAgMzcxNDgyOiAn56a55Z+O5biCJyxcclxuICAgICAgMzcxNTAyOiAn5Lic5piM5bqc5Yy6JyxcclxuICAgICAgMzcxNTIxOiAn6Ziz6LC35Y6/JyxcclxuICAgICAgMzcxNTIyOiAn6I6Y5Y6/JyxcclxuICAgICAgMzcxNTIzOiAn6IyM5bmz5Y6/JyxcclxuICAgICAgMzcxNTI0OiAn5Lic6Zi/5Y6/JyxcclxuICAgICAgMzcxNTI1OiAn5Yag5Y6/JyxcclxuICAgICAgMzcxNTI2OiAn6auY5ZSQ5Y6/JyxcclxuICAgICAgMzcxNTgxOiAn5Li05riF5biCJyxcclxuICAgICAgMzcxNjAyOiAn5ruo5Z+O5Yy6JyxcclxuICAgICAgMzcxNjAzOiAn5rK+5YyW5Yy6JyxcclxuICAgICAgMzcxNjIxOiAn5oOg5rCR5Y6/JyxcclxuICAgICAgMzcxNjIyOiAn6Ziz5L+h5Y6/JyxcclxuICAgICAgMzcxNjIzOiAn5peg5qOj5Y6/JyxcclxuICAgICAgMzcxNjI1OiAn5Y2a5YW05Y6/JyxcclxuICAgICAgMzcxNjgxOiAn6YK55bmz5biCJyxcclxuICAgICAgMzcxNzAyOiAn54mh5Li55Yy6JyxcclxuICAgICAgMzcxNzAzOiAn5a6a6Zm25Yy6JyxcclxuICAgICAgMzcxNzIxOiAn5pu55Y6/JyxcclxuICAgICAgMzcxNzIyOiAn5Y2V5Y6/JyxcclxuICAgICAgMzcxNzIzOiAn5oiQ5q2m5Y6/JyxcclxuICAgICAgMzcxNzI0OiAn5beo6YeO5Y6/JyxcclxuICAgICAgMzcxNzI1OiAn6YOT5Z+O5Y6/JyxcclxuICAgICAgMzcxNzI2OiAn6YSE5Z+O5Y6/JyxcclxuICAgICAgMzcxNzI4OiAn5Lic5piO5Y6/JyxcclxuICAgICAgNDEwMTAyOiAn5Lit5Y6f5Yy6JyxcclxuICAgICAgNDEwMTAzOiAn5LqM5LiD5Yy6JyxcclxuICAgICAgNDEwMTA0OiAn566h5Z+O5Zue5peP5Yy6JyxcclxuICAgICAgNDEwMTA1OiAn6YeR5rC05Yy6JyxcclxuICAgICAgNDEwMTA2OiAn5LiK6KGX5Yy6JyxcclxuICAgICAgNDEwMTA4OiAn5oOg5rWO5Yy6JyxcclxuICAgICAgNDEwMTIyOiAn5Lit54mf5Y6/JyxcclxuICAgICAgNDEwMTgxOiAn5bep5LmJ5biCJyxcclxuICAgICAgNDEwMTgyOiAn6I2l6Ziz5biCJyxcclxuICAgICAgNDEwMTgzOiAn5paw5a+G5biCJyxcclxuICAgICAgNDEwMTg0OiAn5paw6YOR5biCJyxcclxuICAgICAgNDEwMTg1OiAn55m75bCB5biCJyxcclxuICAgICAgNDEwMTkwOiAn6auY5paw5oqA5pyv5byA5Y+R5Yy6JyxcclxuICAgICAgNDEwMTkxOiAn57uP5rWO5oqA5pyv5byA5Y+R5Yy6JyxcclxuICAgICAgNDEwMjAyOiAn6b6Z5Lqt5Yy6JyxcclxuICAgICAgNDEwMjAzOiAn6aG65rKz5Zue5peP5Yy6JyxcclxuICAgICAgNDEwMjA0OiAn6byT5qW85Yy6JyxcclxuICAgICAgNDEwMjA1OiAn56a5546L5Y+w5Yy6JyxcclxuICAgICAgNDEwMjEyOiAn56Wl56ym5Yy6JyxcclxuICAgICAgNDEwMjIxOiAn5p2e5Y6/JyxcclxuICAgICAgNDEwMjIyOiAn6YCa6K645Y6/JyxcclxuICAgICAgNDEwMjIzOiAn5bCJ5rCP5Y6/JyxcclxuICAgICAgNDEwMjI1OiAn5YWw6ICD5Y6/JyxcclxuICAgICAgNDEwMzAyOiAn6ICB5Z+O5Yy6JyxcclxuICAgICAgNDEwMzAzOiAn6KW/5bel5Yy6JyxcclxuICAgICAgNDEwMzA0OiAn54CN5rKz5Zue5peP5Yy6JyxcclxuICAgICAgNDEwMzA1OiAn5ran6KW/5Yy6JyxcclxuICAgICAgNDEwMzA2OiAn5ZCJ5Yip5Yy6JyxcclxuICAgICAgNDEwMzExOiAn5rSb6b6Z5Yy6JyxcclxuICAgICAgNDEwMzIyOiAn5a2f5rSl5Y6/JyxcclxuICAgICAgNDEwMzIzOiAn5paw5a6J5Y6/JyxcclxuICAgICAgNDEwMzI0OiAn5qC+5bed5Y6/JyxcclxuICAgICAgNDEwMzI1OiAn5bWp5Y6/JyxcclxuICAgICAgNDEwMzI2OiAn5rGd6Ziz5Y6/JyxcclxuICAgICAgNDEwMzI3OiAn5a6c6Ziz5Y6/JyxcclxuICAgICAgNDEwMzI4OiAn5rSb5a6B5Y6/JyxcclxuICAgICAgNDEwMzI5OiAn5LyK5bed5Y6/JyxcclxuICAgICAgNDEwMzgxOiAn5YGD5biI5biCJyxcclxuICAgICAgNDEwNDAyOiAn5paw5Y2O5Yy6JyxcclxuICAgICAgNDEwNDAzOiAn5Y2r5Lic5Yy6JyxcclxuICAgICAgNDEwNDA0OiAn55+z6b6Z5Yy6JyxcclxuICAgICAgNDEwNDExOiAn5rmb5rKz5Yy6JyxcclxuICAgICAgNDEwNDIxOiAn5a6d5Liw5Y6/JyxcclxuICAgICAgNDEwNDIyOiAn5Y+25Y6/JyxcclxuICAgICAgNDEwNDIzOiAn6bKB5bGx5Y6/JyxcclxuICAgICAgNDEwNDI1OiAn6YOP5Y6/JyxcclxuICAgICAgNDEwNDgxOiAn6Iie6ZKi5biCJyxcclxuICAgICAgNDEwNDgyOiAn5rGd5bee5biCJyxcclxuICAgICAgNDEwNTAyOiAn5paH5bOw5Yy6JyxcclxuICAgICAgNDEwNTAzOiAn5YyX5YWz5Yy6JyxcclxuICAgICAgNDEwNTA1OiAn5q636YO95Yy6JyxcclxuICAgICAgNDEwNTA2OiAn6b6Z5a6J5Yy6JyxcclxuICAgICAgNDEwNTIyOiAn5a6J6Ziz5Y6/JyxcclxuICAgICAgNDEwNTIzOiAn5rGk6Zi05Y6/JyxcclxuICAgICAgNDEwNTI2OiAn5ruR5Y6/JyxcclxuICAgICAgNDEwNTI3OiAn5YaF6buE5Y6/JyxcclxuICAgICAgNDEwNTgxOiAn5p6X5bee5biCJyxcclxuICAgICAgNDEwNTkwOiAn5byA5Y+R5Yy6JyxcclxuICAgICAgNDEwNjAyOiAn6bmk5bGx5Yy6JyxcclxuICAgICAgNDEwNjAzOiAn5bGx5Z+O5Yy6JyxcclxuICAgICAgNDEwNjExOiAn5reH5ruo5Yy6JyxcclxuICAgICAgNDEwNjIxOiAn5rWa5Y6/JyxcclxuICAgICAgNDEwNjIyOiAn5reH5Y6/JyxcclxuICAgICAgNDEwNzAyOiAn57qi5peX5Yy6JyxcclxuICAgICAgNDEwNzAzOiAn5Y2r5ruo5Yy6JyxcclxuICAgICAgNDEwNzA0OiAn5Yek5rOJ5Yy6JyxcclxuICAgICAgNDEwNzExOiAn54mn6YeO5Yy6JyxcclxuICAgICAgNDEwNzIxOiAn5paw5Lmh5Y6/JyxcclxuICAgICAgNDEwNzI0OiAn6I635ZiJ5Y6/JyxcclxuICAgICAgNDEwNzI1OiAn5Y6f6Ziz5Y6/JyxcclxuICAgICAgNDEwNzI2OiAn5bu25rSl5Y6/JyxcclxuICAgICAgNDEwNzI3OiAn5bCB5LiY5Y6/JyxcclxuICAgICAgNDEwNzI4OiAn6ZW/5Z6j5Y6/JyxcclxuICAgICAgNDEwNzgxOiAn5Y2r6L6J5biCJyxcclxuICAgICAgNDEwNzgyOiAn6L6J5Y6/5biCJyxcclxuICAgICAgNDEwODAyOiAn6Kej5pS+5Yy6JyxcclxuICAgICAgNDEwODAzOiAn5Lit56uZ5Yy6JyxcclxuICAgICAgNDEwODA0OiAn6ams5p2R5Yy6JyxcclxuICAgICAgNDEwODExOiAn5bGx6Ziz5Yy6JyxcclxuICAgICAgNDEwODIxOiAn5L+u5q2m5Y6/JyxcclxuICAgICAgNDEwODIyOiAn5Y2a54ix5Y6/JyxcclxuICAgICAgNDEwODIzOiAn5q2m6Zmf5Y6/JyxcclxuICAgICAgNDEwODI1OiAn5rip5Y6/JyxcclxuICAgICAgNDEwODgyOiAn5rKB6Ziz5biCJyxcclxuICAgICAgNDEwODgzOiAn5a2f5bee5biCJyxcclxuICAgICAgNDEwOTAyOiAn5Y2O6b6Z5Yy6JyxcclxuICAgICAgNDEwOTIyOiAn5riF5Liw5Y6/JyxcclxuICAgICAgNDEwOTIzOiAn5Y2X5LmQ5Y6/JyxcclxuICAgICAgNDEwOTI2OiAn6IyD5Y6/JyxcclxuICAgICAgNDEwOTI3OiAn5Y+w5YmN5Y6/JyxcclxuICAgICAgNDEwOTI4OiAn5r+u6Ziz5Y6/JyxcclxuICAgICAgNDExMDAyOiAn6a2P6YO95Yy6JyxcclxuICAgICAgNDExMDAzOiAn5bu65a6J5Yy6JyxcclxuICAgICAgNDExMDI0OiAn6YSi6Zm15Y6/JyxcclxuICAgICAgNDExMDI1OiAn6KWE5Z+O5Y6/JyxcclxuICAgICAgNDExMDgxOiAn56a55bee5biCJyxcclxuICAgICAgNDExMDgyOiAn6ZW/6JGb5biCJyxcclxuICAgICAgNDExMTAyOiAn5rqQ5rGH5Yy6JyxcclxuICAgICAgNDExMTAzOiAn6YO+5Z+O5Yy6JyxcclxuICAgICAgNDExMTA0OiAn5Y+s6Zm15Yy6JyxcclxuICAgICAgNDExMTIxOiAn6Iie6Ziz5Y6/JyxcclxuICAgICAgNDExMTIyOiAn5Li06aKN5Y6/JyxcclxuICAgICAgNDExMjAyOiAn5rmW5ruo5Yy6JyxcclxuICAgICAgNDExMjAzOiAn6ZmV5bee5Yy6JyxcclxuICAgICAgNDExMjIxOiAn5riR5rGg5Y6/JyxcclxuICAgICAgNDExMjI0OiAn5Y2i5rCP5Y6/JyxcclxuICAgICAgNDExMjgxOiAn5LmJ6ams5biCJyxcclxuICAgICAgNDExMjgyOiAn54G15a6d5biCJyxcclxuICAgICAgNDExMzAyOiAn5a6b5Z+O5Yy6JyxcclxuICAgICAgNDExMzAzOiAn5Y2n6b6Z5Yy6JyxcclxuICAgICAgNDExMzIxOiAn5Y2X5Y+s5Y6/JyxcclxuICAgICAgNDExMzIyOiAn5pa55Z+O5Y6/JyxcclxuICAgICAgNDExMzIzOiAn6KW/5bOh5Y6/JyxcclxuICAgICAgNDExMzI0OiAn6ZWH5bmz5Y6/JyxcclxuICAgICAgNDExMzI1OiAn5YaF5Lmh5Y6/JyxcclxuICAgICAgNDExMzI2OiAn5reF5bed5Y6/JyxcclxuICAgICAgNDExMzI3OiAn56S+5peX5Y6/JyxcclxuICAgICAgNDExMzI4OiAn5ZSQ5rKz5Y6/JyxcclxuICAgICAgNDExMzI5OiAn5paw6YeO5Y6/JyxcclxuICAgICAgNDExMzMwOiAn5qGQ5p+P5Y6/JyxcclxuICAgICAgNDExMzgxOiAn6YKT5bee5biCJyxcclxuICAgICAgNDExNDAyOiAn5qKB5Zut5Yy6JyxcclxuICAgICAgNDExNDAzOiAn552i6Ziz5Yy6JyxcclxuICAgICAgNDExNDIxOiAn5rCR5p2D5Y6/JyxcclxuICAgICAgNDExNDIyOiAn552i5Y6/JyxcclxuICAgICAgNDExNDIzOiAn5a6B6Zm15Y6/JyxcclxuICAgICAgNDExNDI0OiAn5p+Y5Z+O5Y6/JyxcclxuICAgICAgNDExNDI1OiAn6Jme5Z+O5Y6/JyxcclxuICAgICAgNDExNDI2OiAn5aSP6YKR5Y6/JyxcclxuICAgICAgNDExNDgxOiAn5rC45Z+O5biCJyxcclxuICAgICAgNDExNTAyOiAn5rWJ5rKz5Yy6JyxcclxuICAgICAgNDExNTAzOiAn5bmz5qGl5Yy6JyxcclxuICAgICAgNDExNTIxOiAn572X5bGx5Y6/JyxcclxuICAgICAgNDExNTIyOiAn5YWJ5bGx5Y6/JyxcclxuICAgICAgNDExNTIzOiAn5paw5Y6/JyxcclxuICAgICAgNDExNTI0OiAn5ZWG5Z+O5Y6/JyxcclxuICAgICAgNDExNTI1OiAn5Zu65aeL5Y6/JyxcclxuICAgICAgNDExNTI2OiAn5r2i5bed5Y6/JyxcclxuICAgICAgNDExNTI3OiAn5reu5ruo5Y6/JyxcclxuICAgICAgNDExNTI4OiAn5oGv5Y6/JyxcclxuICAgICAgNDExNjAyOiAn5bed5rGH5Yy6JyxcclxuICAgICAgNDExNjIxOiAn5om25rKf5Y6/JyxcclxuICAgICAgNDExNjIyOiAn6KW/5Y2O5Y6/JyxcclxuICAgICAgNDExNjIzOiAn5ZWG5rC05Y6/JyxcclxuICAgICAgNDExNjI0OiAn5rKI5LiY5Y6/JyxcclxuICAgICAgNDExNjI1OiAn6YO45Z+O5Y6/JyxcclxuICAgICAgNDExNjI2OiAn5reu6Ziz5Y6/JyxcclxuICAgICAgNDExNjI3OiAn5aSq5bq35Y6/JyxcclxuICAgICAgNDExNjI4OiAn6bm/6YKR5Y6/JyxcclxuICAgICAgNDExNjgxOiAn6aG55Z+O5biCJyxcclxuICAgICAgNDExNjkwOiAn57uP5rWO5byA5Y+R5Yy6JyxcclxuICAgICAgNDExNzAyOiAn6am/5Z+O5Yy6JyxcclxuICAgICAgNDExNzIxOiAn6KW/5bmz5Y6/JyxcclxuICAgICAgNDExNzIyOiAn5LiK6JSh5Y6/JyxcclxuICAgICAgNDExNzIzOiAn5bmz6IiG5Y6/JyxcclxuICAgICAgNDExNzI0OiAn5q2j6Ziz5Y6/JyxcclxuICAgICAgNDExNzI1OiAn56Gu5bGx5Y6/JyxcclxuICAgICAgNDExNzI2OiAn5rOM6Ziz5Y6/JyxcclxuICAgICAgNDExNzI3OiAn5rGd5Y2X5Y6/JyxcclxuICAgICAgNDExNzI4OiAn6YGC5bmz5Y6/JyxcclxuICAgICAgNDExNzI5OiAn5paw6JSh5Y6/JyxcclxuICAgICAgNDE5MDAxOiAn5rWO5rqQ5biCJyxcclxuICAgICAgNDIwMTAyOiAn5rGf5bK45Yy6JyxcclxuICAgICAgNDIwMTAzOiAn5rGf5rGJ5Yy6JyxcclxuICAgICAgNDIwMTA0OiAn56Ga5Y+j5Yy6JyxcclxuICAgICAgNDIwMTA1OiAn5rGJ6Ziz5Yy6JyxcclxuICAgICAgNDIwMTA2OiAn5q2m5piM5Yy6JyxcclxuICAgICAgNDIwMTA3OiAn6Z2S5bGx5Yy6JyxcclxuICAgICAgNDIwMTExOiAn5rSq5bGx5Yy6JyxcclxuICAgICAgNDIwMTEyOiAn5Lic6KW/5rmW5Yy6JyxcclxuICAgICAgNDIwMTEzOiAn5rGJ5Y2X5Yy6JyxcclxuICAgICAgNDIwMTE0OiAn6JSh55S45Yy6JyxcclxuICAgICAgNDIwMTE1OiAn5rGf5aSP5Yy6JyxcclxuICAgICAgNDIwMTE2OiAn6buE6ZmC5Yy6JyxcclxuICAgICAgNDIwMTE3OiAn5paw5rSy5Yy6JyxcclxuICAgICAgNDIwMjAyOiAn6buE55+z5riv5Yy6JyxcclxuICAgICAgNDIwMjAzOiAn6KW/5aGe5bGx5Yy6JyxcclxuICAgICAgNDIwMjA0OiAn5LiL6ZmG5Yy6JyxcclxuICAgICAgNDIwMjA1OiAn6ZOB5bGx5Yy6JyxcclxuICAgICAgNDIwMjIyOiAn6Ziz5paw5Y6/JyxcclxuICAgICAgNDIwMjgxOiAn5aSn5Ya25biCJyxcclxuICAgICAgNDIwMzAyOiAn6IyF566t5Yy6JyxcclxuICAgICAgNDIwMzAzOiAn5byg5rm+5Yy6JyxcclxuICAgICAgNDIwMzA0OiAn6YOn6Ziz5Yy6JyxcclxuICAgICAgNDIwMzIyOiAn6YOn6KW/5Y6/JyxcclxuICAgICAgNDIwMzIzOiAn56u55bGx5Y6/JyxcclxuICAgICAgNDIwMzI0OiAn56u55rqq5Y6/JyxcclxuICAgICAgNDIwMzI1OiAn5oi/5Y6/JyxcclxuICAgICAgNDIwMzgxOiAn5Li55rGf5Y+j5biCJyxcclxuICAgICAgNDIwNTAyOiAn6KW/6Zm15Yy6JyxcclxuICAgICAgNDIwNTAzOiAn5LyN5a625bKX5Yy6JyxcclxuICAgICAgNDIwNTA0OiAn54K55Yab5Yy6JyxcclxuICAgICAgNDIwNTA1OiAn54yH5Lqt5Yy6JyxcclxuICAgICAgNDIwNTA2OiAn5aS36Zm15Yy6JyxcclxuICAgICAgNDIwNTI1OiAn6L+c5a6J5Y6/JyxcclxuICAgICAgNDIwNTI2OiAn5YW05bGx5Y6/JyxcclxuICAgICAgNDIwNTI3OiAn56et5b2S5Y6/JyxcclxuICAgICAgNDIwNTI4OiAn6ZW/6Ziz5Zyf5a625peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDIwNTI5OiAn5LqU5bOw5Zyf5a625peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDIwNTgxOiAn5a6c6YO95biCJyxcclxuICAgICAgNDIwNTgyOiAn5b2T6Ziz5biCJyxcclxuICAgICAgNDIwNTgzOiAn5p6d5rGf5biCJyxcclxuICAgICAgNDIwNTkwOiAn57uP5rWO5byA5Y+R5Yy6JyxcclxuICAgICAgNDIwNjAyOiAn6KWE5Z+O5Yy6JyxcclxuICAgICAgNDIwNjA2OiAn5qiK5Z+O5Yy6JyxcclxuICAgICAgNDIwNjA3OiAn6KWE5bee5Yy6JyxcclxuICAgICAgNDIwNjI0OiAn5Y2X5ryz5Y6/JyxcclxuICAgICAgNDIwNjI1OiAn6LC35Z+O5Y6/JyxcclxuICAgICAgNDIwNjI2OiAn5L+d5bq35Y6/JyxcclxuICAgICAgNDIwNjgyOiAn6ICB5rKz5Y+j5biCJyxcclxuICAgICAgNDIwNjgzOiAn5p6j6Ziz5biCJyxcclxuICAgICAgNDIwNjg0OiAn5a6c5Z+O5biCJyxcclxuICAgICAgNDIwNzAyOiAn5qKB5a2Q5rmW5Yy6JyxcclxuICAgICAgNDIwNzAzOiAn5Y2O5a655Yy6JyxcclxuICAgICAgNDIwNzA0OiAn6YSC5Z+O5Yy6JyxcclxuICAgICAgNDIwODAyOiAn5Lic5a6d5Yy6JyxcclxuICAgICAgNDIwODA0OiAn5o6H5YiA5Yy6JyxcclxuICAgICAgNDIwODIyOiAn5rKZ5rSL5Y6/JyxcclxuICAgICAgNDIwODgxOiAn6ZKf56Wl5biCJyxcclxuICAgICAgNDIwODgyOiAn5Lqs5bGx5biCJyxcclxuICAgICAgNDIwOTAyOiAn5a2d5Y2X5Yy6JyxcclxuICAgICAgNDIwOTIxOiAn5a2d5piM5Y6/JyxcclxuICAgICAgNDIwOTIyOiAn5aSn5oKf5Y6/JyxcclxuICAgICAgNDIwOTIzOiAn5LqR5qKm5Y6/JyxcclxuICAgICAgNDIwOTgxOiAn5bqU5Z+O5biCJyxcclxuICAgICAgNDIwOTgyOiAn5a6J6ZmG5biCJyxcclxuICAgICAgNDIwOTg0OiAn5rGJ5bed5biCJyxcclxuICAgICAgNDIxMDAyOiAn5rKZ5biC5Yy6JyxcclxuICAgICAgNDIxMDAzOiAn6I2G5bee5Yy6JyxcclxuICAgICAgNDIxMDIyOiAn5YWs5a6J5Y6/JyxcclxuICAgICAgNDIxMDIzOiAn55uR5Yip5Y6/JyxcclxuICAgICAgNDIxMDI0OiAn5rGf6Zm15Y6/JyxcclxuICAgICAgNDIxMDgxOiAn55+z6aaW5biCJyxcclxuICAgICAgNDIxMDgzOiAn5rSq5rmW5biCJyxcclxuICAgICAgNDIxMDg3OiAn5p2+5ruL5biCJyxcclxuICAgICAgNDIxMTAyOiAn6buE5bee5Yy6JyxcclxuICAgICAgNDIxMTIxOiAn5Zui6aOO5Y6/JyxcclxuICAgICAgNDIxMTIyOiAn57qi5a6J5Y6/JyxcclxuICAgICAgNDIxMTIzOiAn572X55Sw5Y6/JyxcclxuICAgICAgNDIxMTI0OiAn6Iux5bGx5Y6/JyxcclxuICAgICAgNDIxMTI1OiAn5rWg5rC05Y6/JyxcclxuICAgICAgNDIxMTI2OiAn6JWy5pil5Y6/JyxcclxuICAgICAgNDIxMTI3OiAn6buE5qKF5Y6/JyxcclxuICAgICAgNDIxMTgxOiAn6bq75Z+O5biCJyxcclxuICAgICAgNDIxMTgyOiAn5q2m56m05biCJyxcclxuICAgICAgNDIxMjAyOiAn5ZK45a6J5Yy6JyxcclxuICAgICAgNDIxMjIxOiAn5ZiJ6bG85Y6/JyxcclxuICAgICAgNDIxMjIyOiAn6YCa5Z+O5Y6/JyxcclxuICAgICAgNDIxMjIzOiAn5bSH6Ziz5Y6/JyxcclxuICAgICAgNDIxMjI0OiAn6YCa5bGx5Y6/JyxcclxuICAgICAgNDIxMjgxOiAn6LWk5aOB5biCJyxcclxuICAgICAgNDIxMzAzOiAn5pu+6YO95Yy6JyxcclxuICAgICAgNDIxMzIxOiAn6ZqP5Y6/JyxcclxuICAgICAgNDIxMzgxOiAn5bm/5rC05biCJyxcclxuICAgICAgNDIyODAxOiAn5oGp5pa95biCJyxcclxuICAgICAgNDIyODAyOiAn5Yip5bed5biCJyxcclxuICAgICAgNDIyODIyOiAn5bu65aeL5Y6/JyxcclxuICAgICAgNDIyODIzOiAn5be05Lic5Y6/JyxcclxuICAgICAgNDIyODI1OiAn5a6j5oGp5Y6/JyxcclxuICAgICAgNDIyODI2OiAn5ZK45Liw5Y6/JyxcclxuICAgICAgNDIyODI3OiAn5p2l5Yek5Y6/JyxcclxuICAgICAgNDIyODI4OiAn6bmk5bOw5Y6/JyxcclxuICAgICAgNDI5MDA0OiAn5LuZ5qGD5biCJyxcclxuICAgICAgNDI5MDA1OiAn5r2c5rGf5biCJyxcclxuICAgICAgNDI5MDA2OiAn5aSp6Zeo5biCJyxcclxuICAgICAgNDI5MDIxOiAn56We5Yac5p625p6X5Yy6JyxcclxuICAgICAgNDMwMTAyOiAn6IqZ6JOJ5Yy6JyxcclxuICAgICAgNDMwMTAzOiAn5aSp5b+D5Yy6JyxcclxuICAgICAgNDMwMTA0OiAn5bKz6bqT5Yy6JyxcclxuICAgICAgNDMwMTA1OiAn5byA56aP5Yy6JyxcclxuICAgICAgNDMwMTExOiAn6Zuo6Iqx5Yy6JyxcclxuICAgICAgNDMwMTEyOiAn5pyb5Z+O5Yy6JyxcclxuICAgICAgNDMwMTIxOiAn6ZW/5rKZ5Y6/JyxcclxuICAgICAgNDMwMTgxOiAn5rWP6Ziz5biCJyxcclxuICAgICAgNDMwMTgyOiAn5a6B5Lmh5biCJyxcclxuICAgICAgNDMwMjAyOiAn6I235aGY5Yy6JyxcclxuICAgICAgNDMwMjAzOiAn6Iqm5ree5Yy6JyxcclxuICAgICAgNDMwMjA0OiAn55+z5bOw5Yy6JyxcclxuICAgICAgNDMwMjExOiAn5aSp5YWD5Yy6JyxcclxuICAgICAgNDMwMjEyOiAn5riM5Y+j5Yy6JyxcclxuICAgICAgNDMwMjIzOiAn5pS45Y6/JyxcclxuICAgICAgNDMwMjI0OiAn6Iy26Zm15Y6/JyxcclxuICAgICAgNDMwMjI1OiAn54KO6Zm15Y6/JyxcclxuICAgICAgNDMwMjgxOiAn6Ya06Zm15biCJyxcclxuICAgICAgNDMwMzAyOiAn6Zuo5rmW5Yy6JyxcclxuICAgICAgNDMwMzA0OiAn5bKz5aGY5Yy6JyxcclxuICAgICAgNDMwMzIxOiAn5rmY5r2t5Y6/JyxcclxuICAgICAgNDMwMzgxOiAn5rmY5Lmh5biCJyxcclxuICAgICAgNDMwMzgyOiAn6Z+25bGx5biCJyxcclxuICAgICAgNDMwNDA1OiAn54+g5pmW5Yy6JyxcclxuICAgICAgNDMwNDA2OiAn6ZuB5bOw5Yy6JyxcclxuICAgICAgNDMwNDA3OiAn55+z6byT5Yy6JyxcclxuICAgICAgNDMwNDA4OiAn6JK45rmY5Yy6JyxcclxuICAgICAgNDMwNDEyOiAn5Y2X5bKz5Yy6JyxcclxuICAgICAgNDMwNDIxOiAn6KGh6Ziz5Y6/JyxcclxuICAgICAgNDMwNDIyOiAn6KGh5Y2X5Y6/JyxcclxuICAgICAgNDMwNDIzOiAn6KGh5bGx5Y6/JyxcclxuICAgICAgNDMwNDI0OiAn6KGh5Lic5Y6/JyxcclxuICAgICAgNDMwNDI2OiAn56WB5Lic5Y6/JyxcclxuICAgICAgNDMwNDgxOiAn6ICS6Ziz5biCJyxcclxuICAgICAgNDMwNDgyOiAn5bi45a6B5biCJyxcclxuICAgICAgNDMwNTAyOiAn5Y+M5riF5Yy6JyxcclxuICAgICAgNDMwNTAzOiAn5aSn56Wl5Yy6JyxcclxuICAgICAgNDMwNTExOiAn5YyX5aGU5Yy6JyxcclxuICAgICAgNDMwNTIxOiAn6YK15Lic5Y6/JyxcclxuICAgICAgNDMwNTIyOiAn5paw6YK15Y6/JyxcclxuICAgICAgNDMwNTIzOiAn6YK16Ziz5Y6/JyxcclxuICAgICAgNDMwNTI0OiAn6ZqG5Zue5Y6/JyxcclxuICAgICAgNDMwNTI1OiAn5rSe5Y+j5Y6/JyxcclxuICAgICAgNDMwNTI3OiAn57ul5a6B5Y6/JyxcclxuICAgICAgNDMwNTI4OiAn5paw5a6B5Y6/JyxcclxuICAgICAgNDMwNTI5OiAn5Z+O5q2l6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDMwNTgxOiAn5q2m5YaI5biCJyxcclxuICAgICAgNDMwNjAyOiAn5bKz6Ziz5qW85Yy6JyxcclxuICAgICAgNDMwNjAzOiAn5LqR5rqq5Yy6JyxcclxuICAgICAgNDMwNjExOiAn5ZCb5bGx5Yy6JyxcclxuICAgICAgNDMwNjIxOiAn5bKz6Ziz5Y6/JyxcclxuICAgICAgNDMwNjIzOiAn5Y2O5a655Y6/JyxcclxuICAgICAgNDMwNjI0OiAn5rmY6Zi05Y6/JyxcclxuICAgICAgNDMwNjI2OiAn5bmz5rGf5Y6/JyxcclxuICAgICAgNDMwNjgxOiAn5rGo572X5biCJyxcclxuICAgICAgNDMwNjgyOiAn5Li05rmY5biCJyxcclxuICAgICAgNDMwNzAyOiAn5q2m6Zm15Yy6JyxcclxuICAgICAgNDMwNzAzOiAn6byO5Z+O5Yy6JyxcclxuICAgICAgNDMwNzIxOiAn5a6J5Lmh5Y6/JyxcclxuICAgICAgNDMwNzIyOiAn5rGJ5a+/5Y6/JyxcclxuICAgICAgNDMwNzIzOiAn5r6n5Y6/JyxcclxuICAgICAgNDMwNzI0OiAn5Li05r6n5Y6/JyxcclxuICAgICAgNDMwNzI1OiAn5qGD5rqQ5Y6/JyxcclxuICAgICAgNDMwNzI2OiAn55+z6Zeo5Y6/JyxcclxuICAgICAgNDMwNzgxOiAn5rSl5biC5biCJyxcclxuICAgICAgNDMwODAyOiAn5rC45a6a5Yy6JyxcclxuICAgICAgNDMwODExOiAn5q2m6Zm15rqQ5Yy6JyxcclxuICAgICAgNDMwODIxOiAn5oWI5Yip5Y6/JyxcclxuICAgICAgNDMwODIyOiAn5qGR5qSN5Y6/JyxcclxuICAgICAgNDMwOTAyOiAn6LWE6Ziz5Yy6JyxcclxuICAgICAgNDMwOTAzOiAn6LWr5bGx5Yy6JyxcclxuICAgICAgNDMwOTIxOiAn5Y2X5Y6/JyxcclxuICAgICAgNDMwOTIyOiAn5qGD5rGf5Y6/JyxcclxuICAgICAgNDMwOTIzOiAn5a6J5YyW5Y6/JyxcclxuICAgICAgNDMwOTgxOiAn5rKF5rGf5biCJyxcclxuICAgICAgNDMxMDAyOiAn5YyX5rmW5Yy6JyxcclxuICAgICAgNDMxMDAzOiAn6IuP5LuZ5Yy6JyxcclxuICAgICAgNDMxMDIxOiAn5qGC6Ziz5Y6/JyxcclxuICAgICAgNDMxMDIyOiAn5a6c56ug5Y6/JyxcclxuICAgICAgNDMxMDIzOiAn5rC45YW05Y6/JyxcclxuICAgICAgNDMxMDI0OiAn5ZiJ56a+5Y6/JyxcclxuICAgICAgNDMxMDI1OiAn5Li05q2m5Y6/JyxcclxuICAgICAgNDMxMDI2OiAn5rGd5Z+O5Y6/JyxcclxuICAgICAgNDMxMDI3OiAn5qGC5Lic5Y6/JyxcclxuICAgICAgNDMxMDI4OiAn5a6J5LuB5Y6/JyxcclxuICAgICAgNDMxMDgxOiAn6LWE5YW05biCJyxcclxuICAgICAgNDMxMTAyOiAn6Zu26Zm15Yy6JyxcclxuICAgICAgNDMxMTAzOiAn5Ya35rC05rup5Yy6JyxcclxuICAgICAgNDMxMTIxOiAn56WB6Ziz5Y6/JyxcclxuICAgICAgNDMxMTIyOiAn5Lic5a6J5Y6/JyxcclxuICAgICAgNDMxMTIzOiAn5Y+M54mM5Y6/JyxcclxuICAgICAgNDMxMTI0OiAn6YGT5Y6/JyxcclxuICAgICAgNDMxMTI1OiAn5rGf5rC45Y6/JyxcclxuICAgICAgNDMxMTI2OiAn5a6B6L+c5Y6/JyxcclxuICAgICAgNDMxMTI3OiAn6JOd5bGx5Y6/JyxcclxuICAgICAgNDMxMTI4OiAn5paw55Sw5Y6/JyxcclxuICAgICAgNDMxMTI5OiAn5rGf5Y2O55G25peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDMxMjAyOiAn6bmk5Z+O5Yy6JyxcclxuICAgICAgNDMxMjIxOiAn5Lit5pa55Y6/JyxcclxuICAgICAgNDMxMjIyOiAn5rKF6Zm15Y6/JyxcclxuICAgICAgNDMxMjIzOiAn6L6w5rqq5Y6/JyxcclxuICAgICAgNDMxMjI0OiAn5rqG5rWm5Y6/JyxcclxuICAgICAgNDMxMjI1OiAn5Lya5ZCM5Y6/JyxcclxuICAgICAgNDMxMjI2OiAn6bq76Ziz6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDMxMjI3OiAn5paw5pmD5L6X5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDMxMjI4OiAn6Iq35rGf5L6X5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDMxMjI5OiAn6Z2W5bee6IuX5peP5L6X5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDMxMjMwOiAn6YCa6YGT5L6X5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDMxMjgxOiAn5rSq5rGf5biCJyxcclxuICAgICAgNDMxMzAyOiAn5aiE5pif5Yy6JyxcclxuICAgICAgNDMxMzIxOiAn5Y+M5bOw5Y6/JyxcclxuICAgICAgNDMxMzIyOiAn5paw5YyW5Y6/JyxcclxuICAgICAgNDMxMzgxOiAn5Ya35rC05rGf5biCJyxcclxuICAgICAgNDMxMzgyOiAn5raf5rqQ5biCJyxcclxuICAgICAgNDMzMTAxOiAn5ZCJ6aaW5biCJyxcclxuICAgICAgNDMzMTIyOiAn5rO45rqq5Y6/JyxcclxuICAgICAgNDMzMTIzOiAn5Yek5Yew5Y6/JyxcclxuICAgICAgNDMzMTI0OiAn6Iqx5Z6j5Y6/JyxcclxuICAgICAgNDMzMTI1OiAn5L+d6Z2W5Y6/JyxcclxuICAgICAgNDMzMTI2OiAn5Y+k5LiI5Y6/JyxcclxuICAgICAgNDMzMTI3OiAn5rC46aG65Y6/JyxcclxuICAgICAgNDMzMTMwOiAn6b6Z5bGx5Y6/JyxcclxuICAgICAgNDQwMTAzOiAn6I2U5rm+5Yy6JyxcclxuICAgICAgNDQwMTA0OiAn6LaK56eA5Yy6JyxcclxuICAgICAgNDQwMTA1OiAn5rW354+g5Yy6JyxcclxuICAgICAgNDQwMTA2OiAn5aSp5rKz5Yy6JyxcclxuICAgICAgNDQwMTExOiAn55m95LqR5Yy6JyxcclxuICAgICAgNDQwMTEyOiAn6buE5Z+U5Yy6JyxcclxuICAgICAgNDQwMTEzOiAn55Wq56a65Yy6JyxcclxuICAgICAgNDQwMTE0OiAn6Iqx6YO95Yy6JyxcclxuICAgICAgNDQwMTE1OiAn5Y2X5rKZ5Yy6JyxcclxuICAgICAgNDQwMTE3OiAn5LuO5YyW5Yy6JyxcclxuICAgICAgNDQwMTE4OiAn5aKe5Z+O5Yy6JyxcclxuICAgICAgNDQwMjAzOiAn5q2m5rGf5Yy6JyxcclxuICAgICAgNDQwMjA0OiAn5rWI5rGf5Yy6JyxcclxuICAgICAgNDQwMjA1OiAn5puy5rGf5Yy6JyxcclxuICAgICAgNDQwMjIyOiAn5aeL5YW05Y6/JyxcclxuICAgICAgNDQwMjI0OiAn5LuB5YyW5Y6/JyxcclxuICAgICAgNDQwMjI5OiAn57+B5rqQ5Y6/JyxcclxuICAgICAgNDQwMjMyOiAn5Lmz5rqQ55G25peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDQwMjMzOiAn5paw5Liw5Y6/JyxcclxuICAgICAgNDQwMjgxOiAn5LmQ5piM5biCJyxcclxuICAgICAgNDQwMjgyOiAn5Y2X6ZuE5biCJyxcclxuICAgICAgNDQwMzAzOiAn572X5rmW5Yy6JyxcclxuICAgICAgNDQwMzA0OiAn56aP55Sw5Yy6JyxcclxuICAgICAgNDQwMzA1OiAn5Y2X5bGx5Yy6JyxcclxuICAgICAgNDQwMzA2OiAn5a6d5a6J5Yy6JyxcclxuICAgICAgNDQwMzA3OiAn6b6Z5bKX5Yy6JyxcclxuICAgICAgNDQwMzA4OiAn55uQ55Sw5Yy6JyxcclxuICAgICAgNDQwMzA5OiAn6b6Z5Y2O5Yy6JyxcclxuICAgICAgNDQwMzEwOiAn5Z2q5bGx5Yy6JyxcclxuICAgICAgNDQwMzExOiAn5YWJ5piO5Yy6JyxcclxuICAgICAgNDQwNDAyOiAn6aaZ5rSy5Yy6JyxcclxuICAgICAgNDQwNDAzOiAn5paX6Zeo5Yy6JyxcclxuICAgICAgNDQwNDA0OiAn6YeR5rm+5Yy6JyxcclxuICAgICAgNDQwNTA3OiAn6b6Z5rmW5Yy6JyxcclxuICAgICAgNDQwNTExOiAn6YeR5bmz5Yy6JyxcclxuICAgICAgNDQwNTEyOiAn5r+g5rGf5Yy6JyxcclxuICAgICAgNDQwNTEzOiAn5r2u6Ziz5Yy6JyxcclxuICAgICAgNDQwNTE0OiAn5r2u5Y2X5Yy6JyxcclxuICAgICAgNDQwNTE1OiAn5r6E5rW35Yy6JyxcclxuICAgICAgNDQwNTIzOiAn5Y2X5r6z5Y6/JyxcclxuICAgICAgNDQwNjA0OiAn56aF5Z+O5Yy6JyxcclxuICAgICAgNDQwNjA1OiAn5Y2X5rW35Yy6JyxcclxuICAgICAgNDQwNjA2OiAn6aG65b635Yy6JyxcclxuICAgICAgNDQwNjA3OiAn5LiJ5rC05Yy6JyxcclxuICAgICAgNDQwNjA4OiAn6auY5piO5Yy6JyxcclxuICAgICAgNDQwNzAzOiAn6JOs5rGf5Yy6JyxcclxuICAgICAgNDQwNzA0OiAn5rGf5rW35Yy6JyxcclxuICAgICAgNDQwNzA1OiAn5paw5Lya5Yy6JyxcclxuICAgICAgNDQwNzgxOiAn5Y+w5bGx5biCJyxcclxuICAgICAgNDQwNzgzOiAn5byA5bmz5biCJyxcclxuICAgICAgNDQwNzg0OiAn6bmk5bGx5biCJyxcclxuICAgICAgNDQwNzg1OiAn5oGp5bmz5biCJyxcclxuICAgICAgNDQwODAyOiAn6LWk5Z2O5Yy6JyxcclxuICAgICAgNDQwODAzOiAn6Zye5bGx5Yy6JyxcclxuICAgICAgNDQwODA0OiAn5Z2h5aS05Yy6JyxcclxuICAgICAgNDQwODExOiAn6bq756ug5Yy6JyxcclxuICAgICAgNDQwODIzOiAn6YGC5rqq5Y6/JyxcclxuICAgICAgNDQwODI1OiAn5b6Q6Ze75Y6/JyxcclxuICAgICAgNDQwODgxOiAn5buJ5rGf5biCJyxcclxuICAgICAgNDQwODgyOiAn6Zu35bee5biCJyxcclxuICAgICAgNDQwODgzOiAn5ZC05bed5biCJyxcclxuICAgICAgNDQwODkwOiAn57uP5rWO5oqA5pyv5byA5Y+R5Yy6JyxcclxuICAgICAgNDQwOTAyOiAn6IyC5Y2X5Yy6JyxcclxuICAgICAgNDQwOTA0OiAn55S155m95Yy6JyxcclxuICAgICAgNDQwOTgxOiAn6auY5bee5biCJyxcclxuICAgICAgNDQwOTgyOiAn5YyW5bee5biCJyxcclxuICAgICAgNDQwOTgzOiAn5L+h5a6c5biCJyxcclxuICAgICAgNDQxMjAyOiAn56uv5bee5Yy6JyxcclxuICAgICAgNDQxMjAzOiAn6byO5rmW5Yy6JyxcclxuICAgICAgNDQxMjA0OiAn6auY6KaB5Yy6JyxcclxuICAgICAgNDQxMjIzOiAn5bm/5a6B5Y6/JyxcclxuICAgICAgNDQxMjI0OiAn5oCA6ZuG5Y6/JyxcclxuICAgICAgNDQxMjI1OiAn5bCB5byA5Y6/JyxcclxuICAgICAgNDQxMjI2OiAn5b635bqG5Y6/JyxcclxuICAgICAgNDQxMjg0OiAn5Zub5Lya5biCJyxcclxuICAgICAgNDQxMzAyOiAn5oOg5Z+O5Yy6JyxcclxuICAgICAgNDQxMzAzOiAn5oOg6Ziz5Yy6JyxcclxuICAgICAgNDQxMzIyOiAn5Y2a572X5Y6/JyxcclxuICAgICAgNDQxMzIzOiAn5oOg5Lic5Y6/JyxcclxuICAgICAgNDQxMzI0OiAn6b6Z6Zeo5Y6/JyxcclxuICAgICAgNDQxNDAyOiAn5qKF5rGf5Yy6JyxcclxuICAgICAgNDQxNDAzOiAn5qKF5Y6/5Yy6JyxcclxuICAgICAgNDQxNDIyOiAn5aSn5Z+U5Y6/JyxcclxuICAgICAgNDQxNDIzOiAn5Liw6aG65Y6/JyxcclxuICAgICAgNDQxNDI0OiAn5LqU5Y2O5Y6/JyxcclxuICAgICAgNDQxNDI2OiAn5bmz6L+c5Y6/JyxcclxuICAgICAgNDQxNDI3OiAn6JWJ5bKt5Y6/JyxcclxuICAgICAgNDQxNDgxOiAn5YW05a6B5biCJyxcclxuICAgICAgNDQxNTAyOiAn5Z+O5Yy6JyxcclxuICAgICAgNDQxNTIxOiAn5rW35Liw5Y6/JyxcclxuICAgICAgNDQxNTIzOiAn6ZmG5rKz5Y6/JyxcclxuICAgICAgNDQxNTgxOiAn6ZmG5Liw5biCJyxcclxuICAgICAgNDQxNjAyOiAn5rqQ5Z+O5Yy6JyxcclxuICAgICAgNDQxNjIxOiAn57Sr6YeR5Y6/JyxcclxuICAgICAgNDQxNjIyOiAn6b6Z5bed5Y6/JyxcclxuICAgICAgNDQxNjIzOiAn6L+e5bmz5Y6/JyxcclxuICAgICAgNDQxNjI0OiAn5ZKM5bmz5Y6/JyxcclxuICAgICAgNDQxNjI1OiAn5Lic5rqQ5Y6/JyxcclxuICAgICAgNDQxNzAyOiAn5rGf5Z+O5Yy6JyxcclxuICAgICAgNDQxNzA0OiAn6Ziz5Lic5Yy6JyxcclxuICAgICAgNDQxNzIxOiAn6Ziz6KW/5Y6/JyxcclxuICAgICAgNDQxNzgxOiAn6Ziz5pil5biCJyxcclxuICAgICAgNDQxODAyOiAn5riF5Z+O5Yy6JyxcclxuICAgICAgNDQxODAzOiAn5riF5paw5Yy6JyxcclxuICAgICAgNDQxODIxOiAn5L2b5YaI5Y6/JyxcclxuICAgICAgNDQxODIzOiAn6Ziz5bGx5Y6/JyxcclxuICAgICAgNDQxODI1OiAn6L+e5bGx5aOu5peP55G25peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDQxODI2OiAn6L+e5Y2X55G25peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDQxODgxOiAn6Iux5b635biCJyxcclxuICAgICAgNDQxODgyOiAn6L+e5bee5biCJyxcclxuICAgICAgNDQxOTAxOiAn5Lit5aCC6ZWHJyxcclxuICAgICAgNDQxOTAzOiAn5Y2X5Z+O6KGX6YGT5Yqe5LqL5aSEJyxcclxuICAgICAgNDQxOTA0OiAn6ZW/5a6J6ZWHJyxcclxuICAgICAgNDQxOTA1OiAn5Lic5Z2R6ZWHJyxcclxuICAgICAgNDQxOTA2OiAn5qif5pyo5aS06ZWHJyxcclxuICAgICAgNDQxOTA3OiAn6I6e5Z+O6KGX6YGT5Yqe5LqL5aSEJyxcclxuICAgICAgNDQxOTA4OiAn55+z6b6Z6ZWHJyxcclxuICAgICAgNDQxOTA5OiAn5qGl5aS06ZWHJyxcclxuICAgICAgNDQxOTEwOiAn5LiH5rGf6KGX6YGT5Yqe5LqL5aSEJyxcclxuICAgICAgNDQxOTExOiAn6bq75raM6ZWHJyxcclxuICAgICAgNDQxOTEyOiAn6JmO6Zeo6ZWHJyxcclxuICAgICAgNDQxOTEzOiAn6LCi5bKX6ZWHJyxcclxuICAgICAgNDQxOTE0OiAn55+z56Kj6ZWHJyxcclxuICAgICAgNDQxOTE1OiAn6Iy25bGx6ZWHJyxcclxuICAgICAgNDQxOTE2OiAn5Lic5Z+O6KGX6YGT5Yqe5LqL5aSEJyxcclxuICAgICAgNDQxOTE3OiAn5rSq5qKF6ZWHJyxcclxuICAgICAgNDQxOTE4OiAn6YGT5ruY6ZWHJyxcclxuICAgICAgNDQxOTE5OiAn6auY5Z+X6ZWHJyxcclxuICAgICAgNDQxOTIwOiAn5LyB55+z6ZWHJyxcclxuICAgICAgNDQxOTIxOiAn5Yek5bKX6ZWHJyxcclxuICAgICAgNDQxOTIyOiAn5aSn5bKt5bGx6ZWHJyxcclxuICAgICAgNDQxOTIzOiAn5p2+5bGx5rmW566h5aeU5LyaJyxcclxuICAgICAgNDQxOTI0OiAn5riF5rqq6ZWHJyxcclxuICAgICAgNDQxOTI1OiAn5pyb54mb5aKp6ZWHJyxcclxuICAgICAgNDQxOTI2OiAn5Y6a6KGX6ZWHJyxcclxuICAgICAgNDQxOTI3OiAn5bi45bmz6ZWHJyxcclxuICAgICAgNDQxOTI4OiAn5a+u5q2l6ZWHJyxcclxuICAgICAgNDQxOTI5OiAn55+z5o6S6ZWHJyxcclxuICAgICAgNDQxOTMwOiAn5qiq5rKl6ZWHJyxcclxuICAgICAgNDQxOTMxOiAn5aGY5Y6m6ZWHJyxcclxuICAgICAgNDQxOTMyOiAn6buE5rGf6ZWHJyxcclxuICAgICAgNDQxOTMzOiAn5aSn5pyX6ZWHJyxcclxuICAgICAgNDQxOTM0OiAn5Lic6I6e5rivJyxcclxuICAgICAgNDQxOTM1OiAn5Lic6I6e55Sf5oCB5ZutJyxcclxuICAgICAgNDQxOTkwOiAn5rKZ55Sw6ZWHJyxcclxuICAgICAgNDQyMDAxOiAn5Y2X5aS06ZWHJyxcclxuICAgICAgNDQyMDAyOiAn56We5rm+6ZWHJyxcclxuICAgICAgNDQyMDAzOiAn5Lic5Yek6ZWHJyxcclxuICAgICAgNDQyMDA0OiAn5LqU5qGC5bGx6KGX6YGT5Yqe5LqL5aSEJyxcclxuICAgICAgNDQyMDA1OiAn6buE5ZyD6ZWHJyxcclxuICAgICAgNDQyMDA2OiAn5bCP5qaE6ZWHJyxcclxuICAgICAgNDQyMDA3OiAn55+z5bKQ5Yy66KGX6YGT5Yqe5LqL5aSEJyxcclxuICAgICAgNDQyMDA4OiAn5qiq5qCP6ZWHJyxcclxuICAgICAgNDQyMDA5OiAn5LiJ6KeS6ZWHJyxcclxuICAgICAgNDQyMDEwOiAn5LiJ5Lmh6ZWHJyxcclxuICAgICAgNDQyMDExOiAn5riv5Y+j6ZWHJyxcclxuICAgICAgNDQyMDEyOiAn5rKZ5rqq6ZWHJyxcclxuICAgICAgNDQyMDEzOiAn5p2/6IqZ6ZWHJyxcclxuICAgICAgNDQyMDE1OiAn5Lic5Y2H6ZWHJyxcclxuICAgICAgNDQyMDE2OiAn6Zic5rKZ6ZWHJyxcclxuICAgICAgNDQyMDE3OiAn5rCR5LyX6ZWHJyxcclxuICAgICAgNDQyMDE4OiAn5Lic5Yy66KGX6YGT5Yqe5LqL5aSEJyxcclxuICAgICAgNDQyMDE5OiAn54Gr54Ks5byA5Y+R5Yy66KGX6YGT5Yqe5LqL5aSEJyxcclxuICAgICAgNDQyMDIwOiAn6KW/5Yy66KGX6YGT5Yqe5LqL5aSEJyxcclxuICAgICAgNDQyMDIxOiAn5Y2X5Yy66KGX6YGT5Yqe5LqL5aSEJyxcclxuICAgICAgNDQyMDIyOiAn5Y+k6ZWH6ZWHJyxcclxuICAgICAgNDQyMDIzOiAn5Z2m5rSy6ZWHJyxcclxuICAgICAgNDQyMDI0OiAn5aSn5raM6ZWHJyxcclxuICAgICAgNDQyMDI1OiAn5Y2X5pyX6ZWHJyxcclxuICAgICAgNDQ1MTAyOiAn5rmY5qGl5Yy6JyxcclxuICAgICAgNDQ1MTAzOiAn5r2u5a6J5Yy6JyxcclxuICAgICAgNDQ1MTIyOiAn6aW25bmz5Y6/JyxcclxuICAgICAgNDQ1MjAyOiAn5qaV5Z+O5Yy6JyxcclxuICAgICAgNDQ1MjAzOiAn5o+t5Lic5Yy6JyxcclxuICAgICAgNDQ1MjIyOiAn5o+t6KW/5Y6/JyxcclxuICAgICAgNDQ1MjI0OiAn5oOg5p2l5Y6/JyxcclxuICAgICAgNDQ1MjgxOiAn5pmu5a6B5biCJyxcclxuICAgICAgNDQ1MzAyOiAn5LqR5Z+O5Yy6JyxcclxuICAgICAgNDQ1MzAzOiAn5LqR5a6J5Yy6JyxcclxuICAgICAgNDQ1MzIxOiAn5paw5YW05Y6/JyxcclxuICAgICAgNDQ1MzIyOiAn6YOB5Y2X5Y6/JyxcclxuICAgICAgNDQ1MzgxOiAn572X5a6a5biCJyxcclxuICAgICAgNDUwMTAyOiAn5YW05a6B5Yy6JyxcclxuICAgICAgNDUwMTAzOiAn6Z2S56eA5Yy6JyxcclxuICAgICAgNDUwMTA1OiAn5rGf5Y2X5Yy6JyxcclxuICAgICAgNDUwMTA3OiAn6KW/5Lmh5aGY5Yy6JyxcclxuICAgICAgNDUwMTA4OiAn6Imv5bqG5Yy6JyxcclxuICAgICAgNDUwMTA5OiAn6YKV5a6B5Yy6JyxcclxuICAgICAgNDUwMTEwOiAn5q2m6bij5Yy6JyxcclxuICAgICAgNDUwMTIzOiAn6ZqG5a6J5Y6/JyxcclxuICAgICAgNDUwMTI0OiAn6ams5bGx5Y6/JyxcclxuICAgICAgNDUwMTI1OiAn5LiK5p6X5Y6/JyxcclxuICAgICAgNDUwMTI2OiAn5a6+6Ziz5Y6/JyxcclxuICAgICAgNDUwMTI3OiAn5qiq5Y6/JyxcclxuICAgICAgNDUwMjAyOiAn5Z+O5Lit5Yy6JyxcclxuICAgICAgNDUwMjAzOiAn6bG85bOw5Yy6JyxcclxuICAgICAgNDUwMjA0OiAn5p+z5Y2X5Yy6JyxcclxuICAgICAgNDUwMjA1OiAn5p+z5YyX5Yy6JyxcclxuICAgICAgNDUwMjA2OiAn5p+z5rGf5Yy6JyxcclxuICAgICAgNDUwMjIyOiAn5p+z5Z+O5Y6/JyxcclxuICAgICAgNDUwMjIzOiAn6bm/5a+o5Y6/JyxcclxuICAgICAgNDUwMjI0OiAn6J6N5a6J5Y6/JyxcclxuICAgICAgNDUwMjI1OiAn6J6N5rC06IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDUwMjI2OiAn5LiJ5rGf5L6X5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDUwMzAyOiAn56eA5bOw5Yy6JyxcclxuICAgICAgNDUwMzAzOiAn5Y+g5b2p5Yy6JyxcclxuICAgICAgNDUwMzA0OiAn6LGh5bGx5Yy6JyxcclxuICAgICAgNDUwMzA1OiAn5LiD5pif5Yy6JyxcclxuICAgICAgNDUwMzExOiAn6ZuB5bGx5Yy6JyxcclxuICAgICAgNDUwMzEyOiAn5Li05qGC5Yy6JyxcclxuICAgICAgNDUwMzIxOiAn6Ziz5pyU5Y6/JyxcclxuICAgICAgNDUwMzIzOiAn54G15bed5Y6/JyxcclxuICAgICAgNDUwMzI0OiAn5YWo5bee5Y6/JyxcclxuICAgICAgNDUwMzI1OiAn5YW05a6J5Y6/JyxcclxuICAgICAgNDUwMzI2OiAn5rC456aP5Y6/JyxcclxuICAgICAgNDUwMzI3OiAn54GM6Ziz5Y6/JyxcclxuICAgICAgNDUwMzI4OiAn6b6Z6IOc5ZCE5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDUwMzI5OiAn6LWE5rqQ5Y6/JyxcclxuICAgICAgNDUwMzMwOiAn5bmz5LmQ5Y6/JyxcclxuICAgICAgNDUwMzMyOiAn5oGt5Z+O55G25peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDUwMzgxOiAn6I2U5rWm5biCJyxcclxuICAgICAgNDUwNDAzOiAn5LiH56eA5Yy6JyxcclxuICAgICAgNDUwNDA1OiAn6ZW/5rSy5Yy6JyxcclxuICAgICAgNDUwNDA2OiAn6b6Z5Zyp5Yy6JyxcclxuICAgICAgNDUwNDIxOiAn6IuN5qKn5Y6/JyxcclxuICAgICAgNDUwNDIyOiAn6Jek5Y6/JyxcclxuICAgICAgNDUwNDIzOiAn6JKZ5bGx5Y6/JyxcclxuICAgICAgNDUwNDgxOiAn5bKR5rqq5biCJyxcclxuICAgICAgNDUwNTAyOiAn5rW35Z+O5Yy6JyxcclxuICAgICAgNDUwNTAzOiAn6ZO25rW35Yy6JyxcclxuICAgICAgNDUwNTEyOiAn6ZOB5bGx5riv5Yy6JyxcclxuICAgICAgNDUwNTIxOiAn5ZCI5rWm5Y6/JyxcclxuICAgICAgNDUwNjAyOiAn5riv5Y+j5Yy6JyxcclxuICAgICAgNDUwNjAzOiAn6Ziy5Z+O5Yy6JyxcclxuICAgICAgNDUwNjIxOiAn5LiK5oCd5Y6/JyxcclxuICAgICAgNDUwNjgxOiAn5Lic5YW05biCJyxcclxuICAgICAgNDUwNzAyOiAn6ZKm5Y2X5Yy6JyxcclxuICAgICAgNDUwNzAzOiAn6ZKm5YyX5Yy6JyxcclxuICAgICAgNDUwNzIxOiAn54G15bGx5Y6/JyxcclxuICAgICAgNDUwNzIyOiAn5rWm5YyX5Y6/JyxcclxuICAgICAgNDUwODAyOiAn5riv5YyX5Yy6JyxcclxuICAgICAgNDUwODAzOiAn5riv5Y2X5Yy6JyxcclxuICAgICAgNDUwODA0OiAn6KaD5aGY5Yy6JyxcclxuICAgICAgNDUwODIxOiAn5bmz5Y2X5Y6/JyxcclxuICAgICAgNDUwODgxOiAn5qGC5bmz5biCJyxcclxuICAgICAgNDUwOTAyOiAn546J5bee5Yy6JyxcclxuICAgICAgNDUwOTAzOiAn56aP57u15Yy6JyxcclxuICAgICAgNDUwOTIxOiAn5a655Y6/JyxcclxuICAgICAgNDUwOTIyOiAn6ZmG5bed5Y6/JyxcclxuICAgICAgNDUwOTIzOiAn5Y2a55m95Y6/JyxcclxuICAgICAgNDUwOTI0OiAn5YW05Lia5Y6/JyxcclxuICAgICAgNDUwOTgxOiAn5YyX5rWB5biCJyxcclxuICAgICAgNDUxMDAyOiAn5Y+z5rGf5Yy6JyxcclxuICAgICAgNDUxMDIxOiAn55Sw6Ziz5Y6/JyxcclxuICAgICAgNDUxMDIyOiAn55Sw5Lic5Y6/JyxcclxuICAgICAgNDUxMDIzOiAn5bmz5p6c5Y6/JyxcclxuICAgICAgNDUxMDI0OiAn5b635L+d5Y6/JyxcclxuICAgICAgNDUxMDI2OiAn6YKj5Z2h5Y6/JyxcclxuICAgICAgNDUxMDI3OiAn5YeM5LqR5Y6/JyxcclxuICAgICAgNDUxMDI4OiAn5LmQ5Lia5Y6/JyxcclxuICAgICAgNDUxMDI5OiAn55Sw5p6X5Y6/JyxcclxuICAgICAgNDUxMDMwOiAn6KW/5p6X5Y6/JyxcclxuICAgICAgNDUxMDMxOiAn6ZqG5p6X5ZCE5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDUxMDgxOiAn6Z2W6KW/5biCJyxcclxuICAgICAgNDUxMTAyOiAn5YWr5q2l5Yy6JyxcclxuICAgICAgNDUxMTAzOiAn5bmz5qGC5Yy6JyxcclxuICAgICAgNDUxMTIxOiAn5pit5bmz5Y6/JyxcclxuICAgICAgNDUxMTIyOiAn6ZKf5bGx5Y6/JyxcclxuICAgICAgNDUxMTIzOiAn5a+M5bed55G25peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDUxMjAyOiAn6YeR5Z+O5rGf5Yy6JyxcclxuICAgICAgNDUxMjAzOiAn5a6c5bee5Yy6JyxcclxuICAgICAgNDUxMjIxOiAn5Y2X5Li55Y6/JyxcclxuICAgICAgNDUxMjIyOiAn5aSp5bOo5Y6/JyxcclxuICAgICAgNDUxMjIzOiAn5Yek5bGx5Y6/JyxcclxuICAgICAgNDUxMjI0OiAn5Lic5YWw5Y6/JyxcclxuICAgICAgNDUxMjI1OiAn572X5Z+O5Lur5L2s5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDUxMjI2OiAn546v5rGf5q+b5Y2X5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDUxMjI3OiAn5be06ams55G25peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDUxMjI4OiAn6YO95a6J55G25peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDUxMjI5OiAn5aSn5YyW55G25peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDUxMzAyOiAn5YW05a6+5Yy6JyxcclxuICAgICAgNDUxMzIxOiAn5b+75Z+O5Y6/JyxcclxuICAgICAgNDUxMzIyOiAn6LGh5bee5Y6/JyxcclxuICAgICAgNDUxMzIzOiAn5q2m5a6j5Y6/JyxcclxuICAgICAgNDUxMzI0OiAn6YeR56eA55G25peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDUxMzgxOiAn5ZCI5bGx5biCJyxcclxuICAgICAgNDUxNDAyOiAn5rGf5bee5Yy6JyxcclxuICAgICAgNDUxNDIxOiAn5om257ul5Y6/JyxcclxuICAgICAgNDUxNDIyOiAn5a6B5piO5Y6/JyxcclxuICAgICAgNDUxNDIzOiAn6b6Z5bee5Y6/JyxcclxuICAgICAgNDUxNDI0OiAn5aSn5paw5Y6/JyxcclxuICAgICAgNDUxNDI1OiAn5aSp562J5Y6/JyxcclxuICAgICAgNDUxNDgxOiAn5Yet56Wl5biCJyxcclxuICAgICAgNDYwMTA1OiAn56eA6Iux5Yy6JyxcclxuICAgICAgNDYwMTA2OiAn6b6Z5Y2O5Yy6JyxcclxuICAgICAgNDYwMTA3OiAn55C85bGx5Yy6JyxcclxuICAgICAgNDYwMTA4OiAn576O5YWw5Yy6JyxcclxuICAgICAgNDYwMjAyOiAn5rW35qOg5Yy6JyxcclxuICAgICAgNDYwMjAzOiAn5ZCJ6Ziz5Yy6JyxcclxuICAgICAgNDYwMjA0OiAn5aSp5rav5Yy6JyxcclxuICAgICAgNDYwMjA1OiAn5bSW5bee5Yy6JyxcclxuICAgICAgNDYwMzIxOiAn6KW/5rKZ576k5bKbJyxcclxuICAgICAgNDYwMzIyOiAn5Y2X5rKZ576k5bKbJyxcclxuICAgICAgNDYwMzIzOiAn5Lit5rKZ576k5bKb55qE5bKb56SB5Y+K5YW25rW35Z+fJyxcclxuICAgICAgNDYwNDAxOiAn6YKj5aSn6ZWHJyxcclxuICAgICAgNDYwNDAyOiAn5ZKM5bqG6ZWHJyxcclxuICAgICAgNDYwNDAzOiAn5Y2X5Liw6ZWHJyxcclxuICAgICAgNDYwNDA0OiAn5aSn5oiQ6ZWHJyxcclxuICAgICAgNDYwNDA1OiAn6ZuF5pif6ZWHJyxcclxuICAgICAgNDYwNDA2OiAn5YWw5rSL6ZWHJyxcclxuICAgICAgNDYwNDA3OiAn5YWJ5p2R6ZWHJyxcclxuICAgICAgNDYwNDA4OiAn5pyo5qOg6ZWHJyxcclxuICAgICAgNDYwNDA5OiAn5rW35aS06ZWHJyxcclxuICAgICAgNDYwNDEwOiAn5bOo6JST6ZWHJyxcclxuICAgICAgNDYwNDExOiAn546L5LqU6ZWHJyxcclxuICAgICAgNDYwNDEyOiAn55m96ams5LqV6ZWHJyxcclxuICAgICAgNDYwNDEzOiAn5Lit5ZKM6ZWHJyxcclxuICAgICAgNDYwNDE0OiAn5o6S5rWm6ZWHJyxcclxuICAgICAgNDYwNDE1OiAn5Lic5oiQ6ZWHJyxcclxuICAgICAgNDYwNDE2OiAn5paw5bee6ZWHJyxcclxuICAgICAgNDYwNDE3OiAn5rSL5rWm57uP5rWO5byA5Y+R5Yy6JyxcclxuICAgICAgNDYwNDE4OiAn5Y2O5Y2X54Ot5L2c5a2m6ZmiJyxcclxuICAgICAgNDY5MDAxOiAn5LqU5oyH5bGx5biCJyxcclxuICAgICAgNDY5MDAyOiAn55C85rW35biCJyxcclxuICAgICAgNDY5MDA1OiAn5paH5piM5biCJyxcclxuICAgICAgNDY5MDA2OiAn5LiH5a6B5biCJyxcclxuICAgICAgNDY5MDA3OiAn5Lic5pa55biCJyxcclxuICAgICAgNDY5MDIxOiAn5a6a5a6J5Y6/JyxcclxuICAgICAgNDY5MDIyOiAn5bGv5piM5Y6/JyxcclxuICAgICAgNDY5MDIzOiAn5r6E6L+I5Y6/JyxcclxuICAgICAgNDY5MDI0OiAn5Li06auY5Y6/JyxcclxuICAgICAgNDY5MDI1OiAn55m95rKZ6buO5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDY5MDI2OiAn5piM5rGf6buO5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDY5MDI3OiAn5LmQ5Lic6buO5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDY5MDI4OiAn6Zm15rC06buO5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDY5MDI5OiAn5L+d5Lqt6buO5peP6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNDY5MDMwOiAn55C85Lit6buO5peP6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTAwMTAxOiAn5LiH5bee5Yy6JyxcclxuICAgICAgNTAwMTAyOiAn5raq6Zm15Yy6JyxcclxuICAgICAgNTAwMTAzOiAn5rid5Lit5Yy6JyxcclxuICAgICAgNTAwMTA0OiAn5aSn5rih5Y+j5Yy6JyxcclxuICAgICAgNTAwMTA1OiAn5rGf5YyX5Yy6JyxcclxuICAgICAgNTAwMTA2OiAn5rKZ5Z2q5Z2d5Yy6JyxcclxuICAgICAgNTAwMTA3OiAn5Lmd6b6Z5Z2h5Yy6JyxcclxuICAgICAgNTAwMTA4OiAn5Y2X5bK45Yy6JyxcclxuICAgICAgNTAwMTA5OiAn5YyX56Ka5Yy6JyxcclxuICAgICAgNTAwMTEwOiAn57am5rGf5Yy6JyxcclxuICAgICAgNTAwMTExOiAn5aSn6Laz5Yy6JyxcclxuICAgICAgNTAwMTEyOiAn5rid5YyX5Yy6JyxcclxuICAgICAgNTAwMTEzOiAn5be05Y2X5Yy6JyxcclxuICAgICAgNTAwMTE0OiAn6buU5rGf5Yy6JyxcclxuICAgICAgNTAwMTE1OiAn6ZW/5a+/5Yy6JyxcclxuICAgICAgNTAwMTE2OiAn5rGf5rSl5Yy6JyxcclxuICAgICAgNTAwMTE3OiAn5ZCI5bed5Yy6JyxcclxuICAgICAgNTAwMTE4OiAn5rC45bed5Yy6JyxcclxuICAgICAgNTAwMTE5OiAn5Y2X5bed5Yy6JyxcclxuICAgICAgNTAwMTIwOiAn55Kn5bGx5Yy6JyxcclxuICAgICAgNTAwMTUxOiAn6ZOc5qKB5Yy6JyxcclxuICAgICAgNTAwMTUyOiAn5r285Y2X5Yy6JyxcclxuICAgICAgNTAwMTUzOiAn6I2j5piM5Yy6JyxcclxuICAgICAgNTAwMTU0OiAn5byA5bee5Yy6JyxcclxuICAgICAgNTAwMTU1OiAn5qKB5bmz5Yy6JyxcclxuICAgICAgNTAwMTU2OiAn5q2m6ZqG5Yy6JyxcclxuICAgICAgNTAwMjI5OiAn5Z+O5Y+j5Y6/JyxcclxuICAgICAgNTAwMjMwOiAn5Liw6YO95Y6/JyxcclxuICAgICAgNTAwMjMxOiAn5Z6r5rGf5Y6/JyxcclxuICAgICAgNTAwMjMzOiAn5b+g5Y6/JyxcclxuICAgICAgNTAwMjM1OiAn5LqR6Ziz5Y6/JyxcclxuICAgICAgNTAwMjM2OiAn5aWJ6IqC5Y6/JyxcclxuICAgICAgNTAwMjM3OiAn5ber5bGx5Y6/JyxcclxuICAgICAgNTAwMjM4OiAn5ber5rqq5Y6/JyxcclxuICAgICAgNTAwMjQwOiAn55+z5p+x5Zyf5a625peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTAwMjQxOiAn56eA5bGx5Zyf5a625peP6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTAwMjQyOiAn6YWJ6Ziz5Zyf5a625peP6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTAwMjQzOiAn5b2t5rC06IuX5peP5Zyf5a625peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTEwMTA0OiAn6ZSm5rGf5Yy6JyxcclxuICAgICAgNTEwMTA1OiAn6Z2S576K5Yy6JyxcclxuICAgICAgNTEwMTA2OiAn6YeR54mb5Yy6JyxcclxuICAgICAgNTEwMTA3OiAn5q2m5L6v5Yy6JyxcclxuICAgICAgNTEwMTA4OiAn5oiQ5Y2O5Yy6JyxcclxuICAgICAgNTEwMTEyOiAn6b6Z5rOJ6am/5Yy6JyxcclxuICAgICAgNTEwMTEzOiAn6Z2S55m95rGf5Yy6JyxcclxuICAgICAgNTEwMTE0OiAn5paw6YO95Yy6JyxcclxuICAgICAgNTEwMTE1OiAn5rip5rGf5Yy6JyxcclxuICAgICAgNTEwMTE2OiAn5Y+M5rWB5Yy6JyxcclxuICAgICAgNTEwMTE3OiAn6YOr6YO95Yy6JyxcclxuICAgICAgNTEwMTIxOiAn6YeR5aCC5Y6/JyxcclxuICAgICAgNTEwMTI5OiAn5aSn6YKR5Y6/JyxcclxuICAgICAgNTEwMTMxOiAn6JKy5rGf5Y6/JyxcclxuICAgICAgNTEwMTMyOiAn5paw5rSl5Y6/JyxcclxuICAgICAgNTEwMTgxOiAn6YO95rGf5aCw5biCJyxcclxuICAgICAgNTEwMTgyOiAn5b2t5bee5biCJyxcclxuICAgICAgNTEwMTgzOiAn6YKb5bSD5biCJyxcclxuICAgICAgNTEwMTg0OiAn5bSH5bee5biCJyxcclxuICAgICAgNTEwMTg1OiAn566A6Ziz5biCJyxcclxuICAgICAgNTEwMTkxOiAn6auY5paw5Yy6JyxcclxuICAgICAgNTEwMzAyOiAn6Ieq5rWB5LqV5Yy6JyxcclxuICAgICAgNTEwMzAzOiAn6LSh5LqV5Yy6JyxcclxuICAgICAgNTEwMzA0OiAn5aSn5a6J5Yy6JyxcclxuICAgICAgNTEwMzExOiAn5rK/5rup5Yy6JyxcclxuICAgICAgNTEwMzIxOiAn6I2j5Y6/JyxcclxuICAgICAgNTEwMzIyOiAn5a+M6aG65Y6/JyxcclxuICAgICAgNTEwNDAyOiAn5Lic5Yy6JyxcclxuICAgICAgNTEwNDAzOiAn6KW/5Yy6JyxcclxuICAgICAgNTEwNDExOiAn5LuB5ZKM5Yy6JyxcclxuICAgICAgNTEwNDIxOiAn57Gz5piT5Y6/JyxcclxuICAgICAgNTEwNDIyOiAn55uQ6L655Y6/JyxcclxuICAgICAgNTEwNTAyOiAn5rGf6Ziz5Yy6JyxcclxuICAgICAgNTEwNTAzOiAn57qz5rqq5Yy6JyxcclxuICAgICAgNTEwNTA0OiAn6b6Z6ams5r2t5Yy6JyxcclxuICAgICAgNTEwNTIxOiAn5rO45Y6/JyxcclxuICAgICAgNTEwNTIyOiAn5ZCI5rGf5Y6/JyxcclxuICAgICAgNTEwNTI0OiAn5Y+Z5rC45Y6/JyxcclxuICAgICAgNTEwNTI1OiAn5Y+k6JS65Y6/JyxcclxuICAgICAgNTEwNjAzOiAn5peM6Ziz5Yy6JyxcclxuICAgICAgNTEwNjA0OiAn572X5rGf5Yy6JyxcclxuICAgICAgNTEwNjIzOiAn5Lit5rGf5Y6/JyxcclxuICAgICAgNTEwNjgxOiAn5bm/5rGJ5biCJyxcclxuICAgICAgNTEwNjgyOiAn5LuA6YKh5biCJyxcclxuICAgICAgNTEwNjgzOiAn57u156u55biCJyxcclxuICAgICAgNTEwNzAzOiAn5raq5Z+O5Yy6JyxcclxuICAgICAgNTEwNzA0OiAn5ri45LuZ5Yy6JyxcclxuICAgICAgNTEwNzA1OiAn5a6J5bee5Yy6JyxcclxuICAgICAgNTEwNzIyOiAn5LiJ5Y+w5Y6/JyxcclxuICAgICAgNTEwNzIzOiAn55uQ5Lqt5Y6/JyxcclxuICAgICAgNTEwNzI1OiAn5qKT5r285Y6/JyxcclxuICAgICAgNTEwNzI2OiAn5YyX5bed576M5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTEwNzI3OiAn5bmz5q2m5Y6/JyxcclxuICAgICAgNTEwNzgxOiAn5rGf5rK55biCJyxcclxuICAgICAgNTEwNzkxOiAn6auY5paw5Yy6JyxcclxuICAgICAgNTEwODAyOiAn5Yip5bee5Yy6JyxcclxuICAgICAgNTEwODExOiAn5pit5YyW5Yy6JyxcclxuICAgICAgNTEwODEyOiAn5pyd5aSp5Yy6JyxcclxuICAgICAgNTEwODIxOiAn5pe66IuN5Y6/JyxcclxuICAgICAgNTEwODIyOiAn6Z2S5bed5Y6/JyxcclxuICAgICAgNTEwODIzOiAn5YmR6ZiB5Y6/JyxcclxuICAgICAgNTEwODI0OiAn6IuN5rqq5Y6/JyxcclxuICAgICAgNTEwOTAzOiAn6Ii55bGx5Yy6JyxcclxuICAgICAgNTEwOTA0OiAn5a6J5bGF5Yy6JyxcclxuICAgICAgNTEwOTIxOiAn6JOs5rqq5Y6/JyxcclxuICAgICAgNTEwOTIyOiAn5bCE5rSq5Y6/JyxcclxuICAgICAgNTEwOTIzOiAn5aSn6Iux5Y6/JyxcclxuICAgICAgNTExMDAyOiAn5biC5Lit5Yy6JyxcclxuICAgICAgNTExMDExOiAn5Lic5YW05Yy6JyxcclxuICAgICAgNTExMDI0OiAn5aiB6L+c5Y6/JyxcclxuICAgICAgNTExMDI1OiAn6LWE5Lit5Y6/JyxcclxuICAgICAgNTExMDgzOiAn6ZqG5piM5biCJyxcclxuICAgICAgNTExMTAyOiAn5biC5Lit5Yy6JyxcclxuICAgICAgNTExMTExOiAn5rKZ5rm+5Yy6JyxcclxuICAgICAgNTExMTEyOiAn5LqU6YCa5qGl5Yy6JyxcclxuICAgICAgNTExMTEzOiAn6YeR5Y+j5rKz5Yy6JyxcclxuICAgICAgNTExMTIzOiAn54qN5Li65Y6/JyxcclxuICAgICAgNTExMTI0OiAn5LqV56CU5Y6/JyxcclxuICAgICAgNTExMTI2OiAn5aS55rGf5Y6/JyxcclxuICAgICAgNTExMTI5OiAn5rKQ5bed5Y6/JyxcclxuICAgICAgNTExMTMyOiAn5bOo6L655b2d5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTExMTMzOiAn6ams6L655b2d5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTExMTgxOiAn5bOo55yJ5bGx5biCJyxcclxuICAgICAgNTExMzAyOiAn6aG65bqG5Yy6JyxcclxuICAgICAgNTExMzAzOiAn6auY5Z2q5Yy6JyxcclxuICAgICAgNTExMzA0OiAn5ZiJ6Zm15Yy6JyxcclxuICAgICAgNTExMzIxOiAn5Y2X6YOo5Y6/JyxcclxuICAgICAgNTExMzIyOiAn6JCl5bGx5Y6/JyxcclxuICAgICAgNTExMzIzOiAn6JOs5a6J5Y6/JyxcclxuICAgICAgNTExMzI0OiAn5Luq6ZmH5Y6/JyxcclxuICAgICAgNTExMzI1OiAn6KW/5YWF5Y6/JyxcclxuICAgICAgNTExMzgxOiAn6ZiG5Lit5biCJyxcclxuICAgICAgNTExNDAyOiAn5Lic5Z2h5Yy6JyxcclxuICAgICAgNTExNDAzOiAn5b2t5bGx5Yy6JyxcclxuICAgICAgNTExNDIxOiAn5LuB5a+/5Y6/JyxcclxuICAgICAgNTExNDIzOiAn5rSq6ZuF5Y6/JyxcclxuICAgICAgNTExNDI0OiAn5Li55qOx5Y6/JyxcclxuICAgICAgNTExNDI1OiAn6Z2S56We5Y6/JyxcclxuICAgICAgNTExNTAyOiAn57+g5bGP5Yy6JyxcclxuICAgICAgNTExNTAzOiAn5Y2X5rqq5Yy6JyxcclxuICAgICAgNTExNTA0OiAn5Y+Z5bee5Yy6JyxcclxuICAgICAgNTExNTIzOiAn5rGf5a6J5Y6/JyxcclxuICAgICAgNTExNTI0OiAn6ZW/5a6B5Y6/JyxcclxuICAgICAgNTExNTI1OiAn6auY5Y6/JyxcclxuICAgICAgNTExNTI2OiAn54+Z5Y6/JyxcclxuICAgICAgNTExNTI3OiAn562g6L+e5Y6/JyxcclxuICAgICAgNTExNTI4OiAn5YW05paH5Y6/JyxcclxuICAgICAgNTExNTI5OiAn5bGP5bGx5Y6/JyxcclxuICAgICAgNTExNjAyOiAn5bm/5a6J5Yy6JyxcclxuICAgICAgNTExNjAzOiAn5YmN6ZSL5Yy6JyxcclxuICAgICAgNTExNjIxOiAn5bKz5rGg5Y6/JyxcclxuICAgICAgNTExNjIyOiAn5q2m6IOc5Y6/JyxcclxuICAgICAgNTExNjIzOiAn6YK75rC05Y6/JyxcclxuICAgICAgNTExNjgxOiAn5Y2O6JOl5biCJyxcclxuICAgICAgNTExNzAyOiAn6YCa5bed5Yy6JyxcclxuICAgICAgNTExNzAzOiAn6L6+5bed5Yy6JyxcclxuICAgICAgNTExNzIyOiAn5a6j5rGJ5Y6/JyxcclxuICAgICAgNTExNzIzOiAn5byA5rGf5Y6/JyxcclxuICAgICAgNTExNzI0OiAn5aSn56u55Y6/JyxcclxuICAgICAgNTExNzI1OiAn5rig5Y6/JyxcclxuICAgICAgNTExNzgxOiAn5LiH5rqQ5biCJyxcclxuICAgICAgNTExODAyOiAn6Zuo5Z+O5Yy6JyxcclxuICAgICAgNTExODAzOiAn5ZCN5bGx5Yy6JyxcclxuICAgICAgNTExODIyOiAn6I2l57uP5Y6/JyxcclxuICAgICAgNTExODIzOiAn5rGJ5rqQ5Y6/JyxcclxuICAgICAgNTExODI0OiAn55+z5qOJ5Y6/JyxcclxuICAgICAgNTExODI1OiAn5aSp5YWo5Y6/JyxcclxuICAgICAgNTExODI2OiAn6Iqm5bGx5Y6/JyxcclxuICAgICAgNTExODI3OiAn5a6d5YW05Y6/JyxcclxuICAgICAgNTExOTAyOiAn5be05bee5Yy6JyxcclxuICAgICAgNTExOTAzOiAn5oGp6Ziz5Yy6JyxcclxuICAgICAgNTExOTIxOiAn6YCa5rGf5Y6/JyxcclxuICAgICAgNTExOTIyOiAn5Y2X5rGf5Y6/JyxcclxuICAgICAgNTExOTIzOiAn5bmz5piM5Y6/JyxcclxuICAgICAgNTEyMDAyOiAn6ZuB5rGf5Yy6JyxcclxuICAgICAgNTEyMDIxOiAn5a6J5bKz5Y6/JyxcclxuICAgICAgNTEyMDIyOiAn5LmQ6Iez5Y6/JyxcclxuICAgICAgNTEzMjAxOiAn6ams5bCU5bq35biCJyxcclxuICAgICAgNTEzMjIxOiAn5rG25bed5Y6/JyxcclxuICAgICAgNTEzMjIyOiAn55CG5Y6/JyxcclxuICAgICAgNTEzMjIzOiAn6IyC5Y6/JyxcclxuICAgICAgNTEzMjI0OiAn5p2+5r2Y5Y6/JyxcclxuICAgICAgNTEzMjI1OiAn5Lmd5a+o5rKf5Y6/JyxcclxuICAgICAgNTEzMjI2OiAn6YeR5bed5Y6/JyxcclxuICAgICAgNTEzMjI3OiAn5bCP6YeR5Y6/JyxcclxuICAgICAgNTEzMjI4OiAn6buR5rC05Y6/JyxcclxuICAgICAgNTEzMjMwOiAn5aOk5aGY5Y6/JyxcclxuICAgICAgNTEzMjMxOiAn6Zi/5Z2d5Y6/JyxcclxuICAgICAgNTEzMjMyOiAn6Iul5bCU55uW5Y6/JyxcclxuICAgICAgNTEzMjMzOiAn57qi5Y6f5Y6/JyxcclxuICAgICAgNTEzMzAxOiAn5bq35a6a5biCJyxcclxuICAgICAgNTEzMzIyOiAn5rO45a6a5Y6/JyxcclxuICAgICAgNTEzMzIzOiAn5Li55be05Y6/JyxcclxuICAgICAgNTEzMzI0OiAn5Lmd6b6Z5Y6/JyxcclxuICAgICAgNTEzMzI1OiAn6ZuF5rGf5Y6/JyxcclxuICAgICAgNTEzMzI2OiAn6YGT5a2a5Y6/JyxcclxuICAgICAgNTEzMzI3OiAn54KJ6ZyN5Y6/JyxcclxuICAgICAgNTEzMzI4OiAn55SY5a2c5Y6/JyxcclxuICAgICAgNTEzMzI5OiAn5paw6b6Z5Y6/JyxcclxuICAgICAgNTEzMzMwOiAn5b635qC85Y6/JyxcclxuICAgICAgNTEzMzMxOiAn55m9546J5Y6/JyxcclxuICAgICAgNTEzMzMyOiAn55+z5rig5Y6/JyxcclxuICAgICAgNTEzMzMzOiAn6Imy6L6+5Y6/JyxcclxuICAgICAgNTEzMzM0OiAn55CG5aGY5Y6/JyxcclxuICAgICAgNTEzMzM1OiAn5be05aGY5Y6/JyxcclxuICAgICAgNTEzMzM2OiAn5Lmh5Z+O5Y6/JyxcclxuICAgICAgNTEzMzM3OiAn56i75Z+O5Y6/JyxcclxuICAgICAgNTEzMzM4OiAn5b6X6I2j5Y6/JyxcclxuICAgICAgNTEzNDAxOiAn6KW/5piM5biCJyxcclxuICAgICAgNTEzNDIyOiAn5pyo6YeM6JeP5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTEzNDIzOiAn55uQ5rqQ5Y6/JyxcclxuICAgICAgNTEzNDI0OiAn5b635piM5Y6/JyxcclxuICAgICAgNTEzNDI1OiAn5Lya55CG5Y6/JyxcclxuICAgICAgNTEzNDI2OiAn5Lya5Lic5Y6/JyxcclxuICAgICAgNTEzNDI3OiAn5a6B5Y2X5Y6/JyxcclxuICAgICAgNTEzNDI4OiAn5pmu5qC85Y6/JyxcclxuICAgICAgNTEzNDI5OiAn5biD5ouW5Y6/JyxcclxuICAgICAgNTEzNDMwOiAn6YeR6Ziz5Y6/JyxcclxuICAgICAgNTEzNDMxOiAn5pit6KeJ5Y6/JyxcclxuICAgICAgNTEzNDMyOiAn5Zac5b635Y6/JyxcclxuICAgICAgNTEzNDMzOiAn5YaV5a6B5Y6/JyxcclxuICAgICAgNTEzNDM0OiAn6LaK6KW/5Y6/JyxcclxuICAgICAgNTEzNDM1OiAn55SY5rSb5Y6/JyxcclxuICAgICAgNTEzNDM2OiAn576O5aeR5Y6/JyxcclxuICAgICAgNTEzNDM3OiAn6Zu35rOi5Y6/JyxcclxuICAgICAgNTIwMTAyOiAn5Y2X5piO5Yy6JyxcclxuICAgICAgNTIwMTAzOiAn5LqR5bKp5Yy6JyxcclxuICAgICAgNTIwMTExOiAn6Iqx5rqq5Yy6JyxcclxuICAgICAgNTIwMTEyOiAn5LmM5b2T5Yy6JyxcclxuICAgICAgNTIwMTEzOiAn55m95LqR5Yy6JyxcclxuICAgICAgNTIwMTE1OiAn6KeC5bGx5rmW5Yy6JyxcclxuICAgICAgNTIwMTIxOiAn5byA6Ziz5Y6/JyxcclxuICAgICAgNTIwMTIyOiAn5oGv54O95Y6/JyxcclxuICAgICAgNTIwMTIzOiAn5L+u5paH5Y6/JyxcclxuICAgICAgNTIwMTgxOiAn5riF6ZWH5biCJyxcclxuICAgICAgNTIwMjAxOiAn6ZKf5bGx5Yy6JyxcclxuICAgICAgNTIwMjAzOiAn5YWt5p6d54m55Yy6JyxcclxuICAgICAgNTIwMjIxOiAn5rC05Z+O5Y6/JyxcclxuICAgICAgNTIwMjgxOiAn55uY5bee5biCJyxcclxuICAgICAgNTIwMzAyOiAn57qi6Iqx5bKX5Yy6JyxcclxuICAgICAgNTIwMzAzOiAn5rGH5bed5Yy6JyxcclxuICAgICAgNTIwMzA0OiAn5pKt5bee5Yy6JyxcclxuICAgICAgNTIwMzIyOiAn5qGQ5qKT5Y6/JyxcclxuICAgICAgNTIwMzIzOiAn57ul6Ziz5Y6/JyxcclxuICAgICAgNTIwMzI0OiAn5q2j5a6J5Y6/JyxcclxuICAgICAgNTIwMzI1OiAn6YGT55yf5Luh5L2s5peP6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTIwMzI2OiAn5Yqh5bed5Luh5L2s5peP6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTIwMzI3OiAn5Yek5YaI5Y6/JyxcclxuICAgICAgNTIwMzI4OiAn5rmE5r2t5Y6/JyxcclxuICAgICAgNTIwMzI5OiAn5L2Z5bqG5Y6/JyxcclxuICAgICAgNTIwMzMwOiAn5Lmg5rC05Y6/JyxcclxuICAgICAgNTIwMzgxOiAn6LWk5rC05biCJyxcclxuICAgICAgNTIwMzgyOiAn5LuB5oCA5biCJyxcclxuICAgICAgNTIwNDAyOiAn6KW/56eA5Yy6JyxcclxuICAgICAgNTIwNDAzOiAn5bmz5Z2d5Yy6JyxcclxuICAgICAgNTIwNDIyOiAn5pmu5a6a5Y6/JyxcclxuICAgICAgNTIwNDIzOiAn6ZWH5a6B5biD5L6d5peP6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTIwNDI0OiAn5YWz5bKt5biD5L6d5peP6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTIwNDI1OiAn57Sr5LqR6IuX5peP5biD5L6d5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTIwNTAyOiAn5LiD5pif5YWz5Yy6JyxcclxuICAgICAgNTIwNTIxOiAn5aSn5pa55Y6/JyxcclxuICAgICAgNTIwNTIyOiAn6buU6KW/5Y6/JyxcclxuICAgICAgNTIwNTIzOiAn6YeR5rKZ5Y6/JyxcclxuICAgICAgNTIwNTI0OiAn57uH6YeR5Y6/JyxcclxuICAgICAgNTIwNTI1OiAn57qz6ZuN5Y6/JyxcclxuICAgICAgNTIwNTI2OiAn5aiB5a6B5b2d5peP5Zue5peP6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTIwNTI3OiAn6LWr56ug5Y6/JyxcclxuICAgICAgNTIwNjAyOiAn56Kn5rGf5Yy6JyxcclxuICAgICAgNTIwNjAzOiAn5LiH5bGx5Yy6JyxcclxuICAgICAgNTIwNjIxOiAn5rGf5Y+j5Y6/JyxcclxuICAgICAgNTIwNjIyOiAn546J5bGP5L6X5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTIwNjIzOiAn55+z6Zih5Y6/JyxcclxuICAgICAgNTIwNjI0OiAn5oCd5Y2X5Y6/JyxcclxuICAgICAgNTIwNjI1OiAn5Y2w5rGf5Zyf5a625peP6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTIwNjI2OiAn5b635rGf5Y6/JyxcclxuICAgICAgNTIwNjI3OiAn5rK/5rKz5Zyf5a625peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTIwNjI4OiAn5p2+5qGD6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTIyMzAxOiAn5YW05LmJ5biCJyxcclxuICAgICAgNTIyMzAyOiAn5YW05LuB5biCJyxcclxuICAgICAgNTIyMzIzOiAn5pmu5a6J5Y6/JyxcclxuICAgICAgNTIyMzI0OiAn5pm06ZqG5Y6/JyxcclxuICAgICAgNTIyMzI1OiAn6LSe5Liw5Y6/JyxcclxuICAgICAgNTIyMzI2OiAn5pyb6LCf5Y6/JyxcclxuICAgICAgNTIyMzI3OiAn5YaM5Lqo5Y6/JyxcclxuICAgICAgNTIyMzI4OiAn5a6J6b6Z5Y6/JyxcclxuICAgICAgNTIyNjAxOiAn5Yev6YeM5biCJyxcclxuICAgICAgNTIyNjIyOiAn6buE5bmz5Y6/JyxcclxuICAgICAgNTIyNjIzOiAn5pa956eJ5Y6/JyxcclxuICAgICAgNTIyNjI0OiAn5LiJ56mX5Y6/JyxcclxuICAgICAgNTIyNjI1OiAn6ZWH6L+c5Y6/JyxcclxuICAgICAgNTIyNjI2OiAn5bKR5bep5Y6/JyxcclxuICAgICAgNTIyNjI3OiAn5aSp5p+x5Y6/JyxcclxuICAgICAgNTIyNjI4OiAn6ZSm5bGP5Y6/JyxcclxuICAgICAgNTIyNjI5OiAn5YmR5rKz5Y6/JyxcclxuICAgICAgNTIyNjMwOiAn5Y+w5rGf5Y6/JyxcclxuICAgICAgNTIyNjMxOiAn6buO5bmz5Y6/JyxcclxuICAgICAgNTIyNjMyOiAn5qaV5rGf5Y6/JyxcclxuICAgICAgNTIyNjMzOiAn5LuO5rGf5Y6/JyxcclxuICAgICAgNTIyNjM0OiAn6Zu35bGx5Y6/JyxcclxuICAgICAgNTIyNjM1OiAn6bq75rGf5Y6/JyxcclxuICAgICAgNTIyNjM2OiAn5Li55a+o5Y6/JyxcclxuICAgICAgNTIyNzAxOiAn6YO95YyA5biCJyxcclxuICAgICAgNTIyNzAyOiAn56aP5rOJ5biCJyxcclxuICAgICAgNTIyNzIyOiAn6I2U5rOi5Y6/JyxcclxuICAgICAgNTIyNzIzOiAn6LS15a6a5Y6/JyxcclxuICAgICAgNTIyNzI1OiAn55Ou5a6J5Y6/JyxcclxuICAgICAgNTIyNzI2OiAn54us5bGx5Y6/JyxcclxuICAgICAgNTIyNzI3OiAn5bmz5aGY5Y6/JyxcclxuICAgICAgNTIyNzI4OiAn572X55S45Y6/JyxcclxuICAgICAgNTIyNzI5OiAn6ZW/6aG65Y6/JyxcclxuICAgICAgNTIyNzMwOiAn6b6Z6YeM5Y6/JyxcclxuICAgICAgNTIyNzMxOiAn5oOg5rC05Y6/JyxcclxuICAgICAgNTIyNzMyOiAn5LiJ6YO95rC05peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwMTAyOiAn5LqU5Y2O5Yy6JyxcclxuICAgICAgNTMwMTAzOiAn55uY6b6Z5Yy6JyxcclxuICAgICAgNTMwMTExOiAn5a6Y5rih5Yy6JyxcclxuICAgICAgNTMwMTEyOiAn6KW/5bGx5Yy6JyxcclxuICAgICAgNTMwMTEzOiAn5Lic5bed5Yy6JyxcclxuICAgICAgNTMwMTE0OiAn5ZGI6LSh5Yy6JyxcclxuICAgICAgNTMwMTE1OiAn5pmL5a6B5Yy6JyxcclxuICAgICAgNTMwMTI0OiAn5a+M5rCR5Y6/JyxcclxuICAgICAgNTMwMTI1OiAn5a6c6Imv5Y6/JyxcclxuICAgICAgNTMwMTI2OiAn55+z5p6X5b2d5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwMTI3OiAn5bWp5piO5Y6/JyxcclxuICAgICAgNTMwMTI4OiAn56aE5Yqd5b2d5peP6IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwMTI5OiAn5a+755S45Zue5peP5b2d5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwMTgxOiAn5a6J5a6B5biCJyxcclxuICAgICAgNTMwMzAyOiAn6bqS6bqf5Yy6JyxcclxuICAgICAgNTMwMzAzOiAn5rK+55uK5Yy6JyxcclxuICAgICAgNTMwMzA0OiAn6ams6b6Z5Yy6JyxcclxuICAgICAgNTMwMzIyOiAn6ZmG6Imv5Y6/JyxcclxuICAgICAgNTMwMzIzOiAn5biI5a6X5Y6/JyxcclxuICAgICAgNTMwMzI0OiAn572X5bmz5Y6/JyxcclxuICAgICAgNTMwMzI1OiAn5a+M5rqQ5Y6/JyxcclxuICAgICAgNTMwMzI2OiAn5Lya5rO95Y6/JyxcclxuICAgICAgNTMwMzgxOiAn5a6j5aiB5biCJyxcclxuICAgICAgNTMwNDAyOiAn57qi5aGU5Yy6JyxcclxuICAgICAgNTMwNDAzOiAn5rGf5bed5Yy6JyxcclxuICAgICAgNTMwNDIyOiAn5r6E5rGf5Y6/JyxcclxuICAgICAgNTMwNDIzOiAn6YCa5rW35Y6/JyxcclxuICAgICAgNTMwNDI0OiAn5Y2O5a6B5Y6/JyxcclxuICAgICAgNTMwNDI1OiAn5piT6Zeo5Y6/JyxcclxuICAgICAgNTMwNDI2OiAn5bOo5bGx5b2d5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwNDI3OiAn5paw5bmz5b2d5peP5YKj5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwNDI4OiAn5YWD5rGf5ZOI5bC85peP5b2d5peP5YKj5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwNTAyOiAn6ZqG6Ziz5Yy6JyxcclxuICAgICAgNTMwNTIxOiAn5pa955S45Y6/JyxcclxuICAgICAgNTMwNTIzOiAn6b6Z6Zm15Y6/JyxcclxuICAgICAgNTMwNTI0OiAn5piM5a6B5Y6/JyxcclxuICAgICAgNTMwNTgxOiAn6IW+5Yay5biCJyxcclxuICAgICAgNTMwNjAyOiAn5pit6Ziz5Yy6JyxcclxuICAgICAgNTMwNjIxOiAn6bKB55S45Y6/JyxcclxuICAgICAgNTMwNjIyOiAn5ben5a625Y6/JyxcclxuICAgICAgNTMwNjIzOiAn55uQ5rSl5Y6/JyxcclxuICAgICAgNTMwNjI0OiAn5aSn5YWz5Y6/JyxcclxuICAgICAgNTMwNjI1OiAn5rC45ZaE5Y6/JyxcclxuICAgICAgNTMwNjI2OiAn57ul5rGf5Y6/JyxcclxuICAgICAgNTMwNjI3OiAn6ZWH6ZuE5Y6/JyxcclxuICAgICAgNTMwNjI4OiAn5b2d6Imv5Y6/JyxcclxuICAgICAgNTMwNjI5OiAn5aiB5L+h5Y6/JyxcclxuICAgICAgNTMwNjgxOiAn5rC05a+M5biCJyxcclxuICAgICAgNTMwNzAyOiAn5Y+k5Z+O5Yy6JyxcclxuICAgICAgNTMwNzIxOiAn546J6b6Z57qz6KW/5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwNzIyOiAn5rC46IOc5Y6/JyxcclxuICAgICAgNTMwNzIzOiAn5Y2O5Z2q5Y6/JyxcclxuICAgICAgNTMwNzI0OiAn5a6B6JKX5b2d5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwODAyOiAn5oCd6IyF5Yy6JyxcclxuICAgICAgNTMwODIxOiAn5a6B5rSx5ZOI5bC85peP5b2d5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwODIyOiAn5aKo5rGf5ZOI5bC85peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwODIzOiAn5pmv5Lic5b2d5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwODI0OiAn5pmv6LC35YKj5peP5b2d5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwODI1OiAn6ZWH5rKF5b2d5peP5ZOI5bC85peP5ouJ56Wc5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwODI2OiAn5rGf5Z+O5ZOI5bC85peP5b2d5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwODI3OiAn5a2f6L+e5YKj5peP5ouJ56Wc5peP5L2k5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwODI4OiAn5r6c5rKn5ouJ56Wc5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwODI5OiAn6KW/55uf5L2k5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwOTAyOiAn5Li057+U5Yy6JyxcclxuICAgICAgNTMwOTIxOiAn5Yek5bqG5Y6/JyxcclxuICAgICAgNTMwOTIyOiAn5LqR5Y6/JyxcclxuICAgICAgNTMwOTIzOiAn5rC45b635Y6/JyxcclxuICAgICAgNTMwOTI0OiAn6ZWH5bq35Y6/JyxcclxuICAgICAgNTMwOTI1OiAn5Y+M5rGf5ouJ56Wc5peP5L2k5peP5biD5pyX5peP5YKj5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwOTI2OiAn6IC/6ams5YKj5peP5L2k5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMwOTI3OiAn5rKn5rqQ5L2k5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMyMzAxOiAn5qWa6ZuE5biCJyxcclxuICAgICAgNTMyMzIyOiAn5Y+M5p+P5Y6/JyxcclxuICAgICAgNTMyMzIzOiAn54mf5a6a5Y6/JyxcclxuICAgICAgNTMyMzI0OiAn5Y2X5Y2O5Y6/JyxcclxuICAgICAgNTMyMzI1OiAn5aea5a6J5Y6/JyxcclxuICAgICAgNTMyMzI2OiAn5aSn5aea5Y6/JyxcclxuICAgICAgNTMyMzI3OiAn5rC45LuB5Y6/JyxcclxuICAgICAgNTMyMzI4OiAn5YWD6LCL5Y6/JyxcclxuICAgICAgNTMyMzI5OiAn5q2m5a6a5Y6/JyxcclxuICAgICAgNTMyMzMxOiAn56aE5Liw5Y6/JyxcclxuICAgICAgNTMyNTAxOiAn5Liq5pen5biCJyxcclxuICAgICAgNTMyNTAyOiAn5byA6L+c5biCJyxcclxuICAgICAgNTMyNTAzOiAn6JKZ6Ieq5biCJyxcclxuICAgICAgNTMyNTA0OiAn5byl5YuS5biCJyxcclxuICAgICAgNTMyNTIzOiAn5bGP6L656IuX5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMyNTI0OiAn5bu65rC05Y6/JyxcclxuICAgICAgNTMyNTI1OiAn55+z5bGP5Y6/JyxcclxuICAgICAgNTMyNTI3OiAn5rO46KW/5Y6/JyxcclxuICAgICAgNTMyNTI4OiAn5YWD6Ziz5Y6/JyxcclxuICAgICAgNTMyNTI5OiAn57qi5rKz5Y6/JyxcclxuICAgICAgNTMyNTMwOiAn6YeR5bmz6IuX5peP55G25peP5YKj5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMyNTMxOiAn57u/5pil5Y6/JyxcclxuICAgICAgNTMyNTMyOiAn5rKz5Y+j55G25peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMyNjAxOiAn5paH5bGx5biCJyxcclxuICAgICAgNTMyNjIyOiAn56Ca5bGx5Y6/JyxcclxuICAgICAgNTMyNjIzOiAn6KW/55W05Y6/JyxcclxuICAgICAgNTMyNjI0OiAn6bq75qCX5Z2h5Y6/JyxcclxuICAgICAgNTMyNjI1OiAn6ams5YWz5Y6/JyxcclxuICAgICAgNTMyNjI2OiAn5LiY5YyX5Y6/JyxcclxuICAgICAgNTMyNjI3OiAn5bm/5Y2X5Y6/JyxcclxuICAgICAgNTMyNjI4OiAn5a+M5a6B5Y6/JyxcclxuICAgICAgNTMyODAxOiAn5pmv5rSq5biCJyxcclxuICAgICAgNTMyODIyOiAn5YuQ5rW35Y6/JyxcclxuICAgICAgNTMyODIzOiAn5YuQ6IWK5Y6/JyxcclxuICAgICAgNTMyOTAxOiAn5aSn55CG5biCJyxcclxuICAgICAgNTMyOTIyOiAn5ry+5r+e5b2d5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMyOTIzOiAn56Wl5LqR5Y6/JyxcclxuICAgICAgNTMyOTI0OiAn5a6+5bed5Y6/JyxcclxuICAgICAgNTMyOTI1OiAn5byl5rih5Y6/JyxcclxuICAgICAgNTMyOTI2OiAn5Y2X5ran5b2d5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMyOTI3OiAn5beN5bGx5b2d5peP5Zue5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMyOTI4OiAn5rC45bmz5Y6/JyxcclxuICAgICAgNTMyOTI5OiAn5LqR6b6Z5Y6/JyxcclxuICAgICAgNTMyOTMwOiAn5rSx5rqQ5Y6/JyxcclxuICAgICAgNTMyOTMxOiAn5YmR5bed5Y6/JyxcclxuICAgICAgNTMyOTMyOiAn6bmk5bqG5Y6/JyxcclxuICAgICAgNTMzMTAyOiAn55Ge5Li95biCJyxcclxuICAgICAgNTMzMTAzOiAn6IqS5biCJyxcclxuICAgICAgNTMzMTIyOiAn5qKB5rKz5Y6/JyxcclxuICAgICAgNTMzMTIzOiAn55uI5rGf5Y6/JyxcclxuICAgICAgNTMzMTI0OiAn6ZmH5bed5Y6/JyxcclxuICAgICAgNTMzMzAxOiAn5rO45rC05biCJyxcclxuICAgICAgNTMzMzIzOiAn56aP6LSh5Y6/JyxcclxuICAgICAgNTMzMzI0OiAn6LSh5bGx54us6b6Z5peP5oCS5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMzMzI1OiAn5YWw5Z2q55m95peP5pmu57Gz5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTMzNDAxOiAn6aaZ5qC86YeM5ouJ5biCJyxcclxuICAgICAgNTMzNDIyOiAn5b636ZKm5Y6/JyxcclxuICAgICAgNTMzNDIzOiAn57u06KW/5YKI5YOz5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNTQwMTAyOiAn5Z+O5YWz5Yy6JyxcclxuICAgICAgNTQwMTAzOiAn5aCG6b6Z5b635bqG5Yy6JyxcclxuICAgICAgNTQwMTA0OiAn6L6+5a2c5Yy6JyxcclxuICAgICAgNTQwMTIxOiAn5p6X5ZGo5Y6/JyxcclxuICAgICAgNTQwMTIyOiAn5b2T6ZuE5Y6/JyxcclxuICAgICAgNTQwMTIzOiAn5bC85pyo5Y6/JyxcclxuICAgICAgNTQwMTI0OiAn5puy5rC05Y6/JyxcclxuICAgICAgNTQwMTI3OiAn5aKo56u55bel5Y2h5Y6/JyxcclxuICAgICAgNTQwMjAyOiAn5qGR54+g5a2c5Yy6JyxcclxuICAgICAgNTQwMjIxOiAn5Y2X5pyo5p6X5Y6/JyxcclxuICAgICAgNTQwMjIyOiAn5rGf5a2c5Y6/JyxcclxuICAgICAgNTQwMjIzOiAn5a6a5pel5Y6/JyxcclxuICAgICAgNTQwMjI0OiAn6JCo6L+m5Y6/JyxcclxuICAgICAgNTQwMjI1OiAn5ouJ5a2c5Y6/JyxcclxuICAgICAgNTQwMjI2OiAn5piC5LuB5Y6/JyxcclxuICAgICAgNTQwMjI3OiAn6LCi6YCa6Zeo5Y6/JyxcclxuICAgICAgNTQwMjI4OiAn55m95pyX5Y6/JyxcclxuICAgICAgNTQwMjI5OiAn5LuB5biD5Y6/JyxcclxuICAgICAgNTQwMjMwOiAn5bq36ams5Y6/JyxcclxuICAgICAgNTQwMjMxOiAn5a6a57uT5Y6/JyxcclxuICAgICAgNTQwMjMyOiAn5Luy5be05Y6/JyxcclxuICAgICAgNTQwMjMzOiAn5Lqa5Lic5Y6/JyxcclxuICAgICAgNTQwMjM0OiAn5ZCJ6ZqG5Y6/JyxcclxuICAgICAgNTQwMjM1OiAn6IGC5ouJ5pyo5Y6/JyxcclxuICAgICAgNTQwMjM2OiAn6JCo5ZiO5Y6/JyxcclxuICAgICAgNTQwMjM3OiAn5bKX5be05Y6/JyxcclxuICAgICAgNTQwMzAyOiAn5Y2h6Iul5Yy6JyxcclxuICAgICAgNTQwMzIxOiAn5rGf6L6+5Y6/JyxcclxuICAgICAgNTQwMzIyOiAn6LSh6KeJ5Y6/JyxcclxuICAgICAgNTQwMzIzOiAn57G75LmM6b2Q5Y6/JyxcclxuICAgICAgNTQwMzI0OiAn5LiB6Z2S5Y6/JyxcclxuICAgICAgNTQwMzI1OiAn5a+f6ZuF5Y6/JyxcclxuICAgICAgNTQwMzI2OiAn5YWr5a6/5Y6/JyxcclxuICAgICAgNTQwMzI3OiAn5bem6LSh5Y6/JyxcclxuICAgICAgNTQwMzI4OiAn6IqS5bq35Y6/JyxcclxuICAgICAgNTQwMzI5OiAn5rSb6ZqG5Y6/JyxcclxuICAgICAgNTQwMzMwOiAn6L655Z2d5Y6/JyxcclxuICAgICAgNTQwNDAyOiAn5be05a6c5Yy6JyxcclxuICAgICAgNTQwNDIxOiAn5bel5biD5rGf6L6+5Y6/JyxcclxuICAgICAgNTQwNDIyOiAn57Gz5p6X5Y6/JyxcclxuICAgICAgNTQwNDIzOiAn5aKo6ISx5Y6/JyxcclxuICAgICAgNTQwNDI0OiAn5rOi5a+G5Y6/JyxcclxuICAgICAgNTQwNDI1OiAn5a+f6ZqF5Y6/JyxcclxuICAgICAgNTQwNDI2OiAn5pyX5Y6/JyxcclxuICAgICAgNTQwNTAyOiAn5LmD5Lic5Yy6JyxcclxuICAgICAgNTQwNTIxOiAn5omO5ZuK5Y6/JyxcclxuICAgICAgNTQwNTIyOiAn6LSh5ZiO5Y6/JyxcclxuICAgICAgNTQwNTIzOiAn5qGR5pel5Y6/JyxcclxuICAgICAgNTQwNTI0OiAn55C857uT5Y6/JyxcclxuICAgICAgNTQwNTI1OiAn5puy5p2+5Y6/JyxcclxuICAgICAgNTQwNTI2OiAn5o6q576O5Y6/JyxcclxuICAgICAgNTQwNTI3OiAn5rSb5omO5Y6/JyxcclxuICAgICAgNTQwNTI4OiAn5Yqg5p+l5Y6/JyxcclxuICAgICAgNTQwNTI5OiAn6ZqG5a2Q5Y6/JyxcclxuICAgICAgNTQwNTMwOiAn6ZSZ6YKj5Y6/JyxcclxuICAgICAgNTQwNTMxOiAn5rWq5Y2h5a2Q5Y6/JyxcclxuICAgICAgNTQwNjAyOiAn6Imy5bC85Yy6JyxcclxuICAgICAgNTQwNjIxOiAn5ZiJ6buO5Y6/JyxcclxuICAgICAgNTQwNjIyOiAn5q+U5aaC5Y6/JyxcclxuICAgICAgNTQwNjIzOiAn6IGC6I2j5Y6/JyxcclxuICAgICAgNTQwNjI0OiAn5a6J5aSa5Y6/JyxcclxuICAgICAgNTQwNjI1OiAn55Sz5omO5Y6/JyxcclxuICAgICAgNTQwNjI2OiAn57Si5Y6/JyxcclxuICAgICAgNTQwNjI3OiAn54+t5oiI5Y6/JyxcclxuICAgICAgNTQwNjI4OiAn5be06Z2S5Y6/JyxcclxuICAgICAgNTQwNjI5OiAn5bC8546b5Y6/JyxcclxuICAgICAgNTQwNjMwOiAn5Y+M5rmW5Y6/JyxcclxuICAgICAgNTQyNTIxOiAn5pmu5YWw5Y6/JyxcclxuICAgICAgNTQyNTIyOiAn5pyt6L6+5Y6/JyxcclxuICAgICAgNTQyNTIzOiAn5Zm25bCU5Y6/JyxcclxuICAgICAgNTQyNTI0OiAn5pel5Zyf5Y6/JyxcclxuICAgICAgNTQyNTI1OiAn6Z2p5ZCJ5Y6/JyxcclxuICAgICAgNTQyNTI2OiAn5pS55YiZ5Y6/JyxcclxuICAgICAgNTQyNTI3OiAn5o6q5Yuk5Y6/JyxcclxuICAgICAgNjEwMTAyOiAn5paw5Z+O5Yy6JyxcclxuICAgICAgNjEwMTAzOiAn56KR5p6X5Yy6JyxcclxuICAgICAgNjEwMTA0OiAn6I6y5rmW5Yy6JyxcclxuICAgICAgNjEwMTExOiAn54Ge5qGl5Yy6JyxcclxuICAgICAgNjEwMTEyOiAn5pyq5aSu5Yy6JyxcclxuICAgICAgNjEwMTEzOiAn6ZuB5aGU5Yy6JyxcclxuICAgICAgNjEwMTE0OiAn6ZiO6Imv5Yy6JyxcclxuICAgICAgNjEwMTE1OiAn5Li05r285Yy6JyxcclxuICAgICAgNjEwMTE2OiAn6ZW/5a6J5Yy6JyxcclxuICAgICAgNjEwMTE3OiAn6auY6Zm15Yy6JyxcclxuICAgICAgNjEwMTE4OiAn6YSg6YKR5Yy6JyxcclxuICAgICAgNjEwMTIyOiAn6JOd55Sw5Y6/JyxcclxuICAgICAgNjEwMTI0OiAn5ZGo6Iez5Y6/JyxcclxuICAgICAgNjEwMjAyOiAn546L55uK5Yy6JyxcclxuICAgICAgNjEwMjAzOiAn5Y2w5Y+w5Yy6JyxcclxuICAgICAgNjEwMjA0OiAn6ICA5bee5Yy6JyxcclxuICAgICAgNjEwMjIyOiAn5a6c5ZCb5Y6/JyxcclxuICAgICAgNjEwMzAyOiAn5rit5ruo5Yy6JyxcclxuICAgICAgNjEwMzAzOiAn6YeR5Y+w5Yy6JyxcclxuICAgICAgNjEwMzA0OiAn6ZmI5LuT5Yy6JyxcclxuICAgICAgNjEwMzIyOiAn5Yek57+U5Y6/JyxcclxuICAgICAgNjEwMzIzOiAn5bKQ5bGx5Y6/JyxcclxuICAgICAgNjEwMzI0OiAn5om26aOO5Y6/JyxcclxuICAgICAgNjEwMzI2OiAn55yJ5Y6/JyxcclxuICAgICAgNjEwMzI3OiAn6ZmH5Y6/JyxcclxuICAgICAgNjEwMzI4OiAn5Y2D6Ziz5Y6/JyxcclxuICAgICAgNjEwMzI5OiAn6bqf5ri45Y6/JyxcclxuICAgICAgNjEwMzMwOiAn5Yek5Y6/JyxcclxuICAgICAgNjEwMzMxOiAn5aSq55m95Y6/JyxcclxuICAgICAgNjEwNDAyOiAn56em6YO95Yy6JyxcclxuICAgICAgNjEwNDAzOiAn5p2o6Zm15Yy6JyxcclxuICAgICAgNjEwNDA0OiAn5rit5Z+O5Yy6JyxcclxuICAgICAgNjEwNDIyOiAn5LiJ5Y6f5Y6/JyxcclxuICAgICAgNjEwNDIzOiAn5rO+6Ziz5Y6/JyxcclxuICAgICAgNjEwNDI0OiAn5Lm+5Y6/JyxcclxuICAgICAgNjEwNDI1OiAn56S85rOJ5Y6/JyxcclxuICAgICAgNjEwNDI2OiAn5rC45a+/5Y6/JyxcclxuICAgICAgNjEwNDI4OiAn6ZW/5q2m5Y6/JyxcclxuICAgICAgNjEwNDI5OiAn5pes6YKR5Y6/JyxcclxuICAgICAgNjEwNDMwOiAn5rez5YyW5Y6/JyxcclxuICAgICAgNjEwNDMxOiAn5q2m5Yqf5Y6/JyxcclxuICAgICAgNjEwNDgxOiAn5YW05bmz5biCJyxcclxuICAgICAgNjEwNDgyOiAn5b2s5bee5biCJyxcclxuICAgICAgNjEwNTAyOiAn5Li05rit5Yy6JyxcclxuICAgICAgNjEwNTAzOiAn5Y2O5bee5Yy6JyxcclxuICAgICAgNjEwNTIyOiAn5r285YWz5Y6/JyxcclxuICAgICAgNjEwNTIzOiAn5aSn6I2U5Y6/JyxcclxuICAgICAgNjEwNTI0OiAn5ZCI6Ziz5Y6/JyxcclxuICAgICAgNjEwNTI1OiAn5r6E5Z+O5Y6/JyxcclxuICAgICAgNjEwNTI2OiAn6JKy5Z+O5Y6/JyxcclxuICAgICAgNjEwNTI3OiAn55m95rC05Y6/JyxcclxuICAgICAgNjEwNTI4OiAn5a+M5bmz5Y6/JyxcclxuICAgICAgNjEwNTgxOiAn6Z+p5Z+O5biCJyxcclxuICAgICAgNjEwNTgyOiAn5Y2O6Zi05biCJyxcclxuICAgICAgNjEwNjAyOiAn5a6d5aGU5Yy6JyxcclxuICAgICAgNjEwNjAzOiAn5a6J5aGe5Yy6JyxcclxuICAgICAgNjEwNjIxOiAn5bu26ZW/5Y6/JyxcclxuICAgICAgNjEwNjIyOiAn5bu25bed5Y6/JyxcclxuICAgICAgNjEwNjIzOiAn5a2Q6ZW/5Y6/JyxcclxuICAgICAgNjEwNjI1OiAn5b+X5Li55Y6/JyxcclxuICAgICAgNjEwNjI2OiAn5ZC06LW35Y6/JyxcclxuICAgICAgNjEwNjI3OiAn55SY5rOJ5Y6/JyxcclxuICAgICAgNjEwNjI4OiAn5a+M5Y6/JyxcclxuICAgICAgNjEwNjI5OiAn5rSb5bed5Y6/JyxcclxuICAgICAgNjEwNjMwOiAn5a6c5bed5Y6/JyxcclxuICAgICAgNjEwNjMxOiAn6buE6b6Z5Y6/JyxcclxuICAgICAgNjEwNjMyOiAn6buE6Zm15Y6/JyxcclxuICAgICAgNjEwNzAyOiAn5rGJ5Y+w5Yy6JyxcclxuICAgICAgNjEwNzAzOiAn5Y2X6YOR5Yy6JyxcclxuICAgICAgNjEwNzIyOiAn5Z+O5Zu65Y6/JyxcclxuICAgICAgNjEwNzIzOiAn5rSL5Y6/JyxcclxuICAgICAgNjEwNzI0OiAn6KW/5Lmh5Y6/JyxcclxuICAgICAgNjEwNzI1OiAn5YuJ5Y6/JyxcclxuICAgICAgNjEwNzI2OiAn5a6B5by65Y6/JyxcclxuICAgICAgNjEwNzI3OiAn55Wl6Ziz5Y6/JyxcclxuICAgICAgNjEwNzI4OiAn6ZWH5be05Y6/JyxcclxuICAgICAgNjEwNzI5OiAn55WZ5Z2d5Y6/JyxcclxuICAgICAgNjEwNzMwOiAn5L2b5Z2q5Y6/JyxcclxuICAgICAgNjEwODAyOiAn5qaG6Ziz5Yy6JyxcclxuICAgICAgNjEwODAzOiAn5qiq5bGx5Yy6JyxcclxuICAgICAgNjEwODIyOiAn5bqc6LC35Y6/JyxcclxuICAgICAgNjEwODI0OiAn6Z2W6L655Y6/JyxcclxuICAgICAgNjEwODI1OiAn5a6a6L655Y6/JyxcclxuICAgICAgNjEwODI2OiAn57ul5b635Y6/JyxcclxuICAgICAgNjEwODI3OiAn57Gz6ISC5Y6/JyxcclxuICAgICAgNjEwODI4OiAn5L2z5Y6/JyxcclxuICAgICAgNjEwODI5OiAn5ZC05aCh5Y6/JyxcclxuICAgICAgNjEwODMwOiAn5riF5ran5Y6/JyxcclxuICAgICAgNjEwODMxOiAn5a2Q5rSy5Y6/JyxcclxuICAgICAgNjEwODgxOiAn56We5pyo5biCJyxcclxuICAgICAgNjEwOTAyOiAn5rGJ5ruo5Yy6JyxcclxuICAgICAgNjEwOTIxOiAn5rGJ6Zi05Y6/JyxcclxuICAgICAgNjEwOTIyOiAn55+z5rOJ5Y6/JyxcclxuICAgICAgNjEwOTIzOiAn5a6B6ZmV5Y6/JyxcclxuICAgICAgNjEwOTI0OiAn57Sr6Ziz5Y6/JyxcclxuICAgICAgNjEwOTI1OiAn5bKa55qL5Y6/JyxcclxuICAgICAgNjEwOTI2OiAn5bmz5Yip5Y6/JyxcclxuICAgICAgNjEwOTI3OiAn6ZWH5Z2q5Y6/JyxcclxuICAgICAgNjEwOTI4OiAn5pes6Ziz5Y6/JyxcclxuICAgICAgNjEwOTI5OiAn55m95rKz5Y6/JyxcclxuICAgICAgNjExMDAyOiAn5ZWG5bee5Yy6JyxcclxuICAgICAgNjExMDIxOiAn5rSb5Y2X5Y6/JyxcclxuICAgICAgNjExMDIyOiAn5Li55Yek5Y6/JyxcclxuICAgICAgNjExMDIzOiAn5ZWG5Y2X5Y6/JyxcclxuICAgICAgNjExMDI0OiAn5bGx6Ziz5Y6/JyxcclxuICAgICAgNjExMDI1OiAn6ZWH5a6J5Y6/JyxcclxuICAgICAgNjExMDI2OiAn5p+e5rC05Y6/JyxcclxuICAgICAgNjIwMTAyOiAn5Z+O5YWz5Yy6JyxcclxuICAgICAgNjIwMTAzOiAn5LiD6YeM5rKz5Yy6JyxcclxuICAgICAgNjIwMTA0OiAn6KW/5Zu65Yy6JyxcclxuICAgICAgNjIwMTA1OiAn5a6J5a6B5Yy6JyxcclxuICAgICAgNjIwMTExOiAn57qi5Y+k5Yy6JyxcclxuICAgICAgNjIwMTIxOiAn5rC455m75Y6/JyxcclxuICAgICAgNjIwMTIyOiAn55qL5YWw5Y6/JyxcclxuICAgICAgNjIwMTIzOiAn5qaG5Lit5Y6/JyxcclxuICAgICAgNjIwMjAxOiAn5biC6L6W5Yy6JyxcclxuICAgICAgNjIwMjkwOiAn6ZuE5YWz5Yy6JyxcclxuICAgICAgNjIwMjkxOiAn6ZW/5Z+O5Yy6JyxcclxuICAgICAgNjIwMjkyOiAn6ZWc6ZOB5Yy6JyxcclxuICAgICAgNjIwMjkzOiAn5paw5Z+O6ZWHJyxcclxuICAgICAgNjIwMjk0OiAn5bOq5rOJ6ZWHJyxcclxuICAgICAgNjIwMjk1OiAn5paH5q6K6ZWHJyxcclxuICAgICAgNjIwMzAyOiAn6YeR5bed5Yy6JyxcclxuICAgICAgNjIwMzIxOiAn5rC45piM5Y6/JyxcclxuICAgICAgNjIwNDAyOiAn55m96ZO25Yy6JyxcclxuICAgICAgNjIwNDAzOiAn5bmz5bed5Yy6JyxcclxuICAgICAgNjIwNDIxOiAn6Z2W6L+c5Y6/JyxcclxuICAgICAgNjIwNDIyOiAn5Lya5a6B5Y6/JyxcclxuICAgICAgNjIwNDIzOiAn5pmv5rOw5Y6/JyxcclxuICAgICAgNjIwNTAyOiAn56em5bee5Yy6JyxcclxuICAgICAgNjIwNTAzOiAn6bqm56ev5Yy6JyxcclxuICAgICAgNjIwNTIxOiAn5riF5rC05Y6/JyxcclxuICAgICAgNjIwNTIyOiAn56em5a6J5Y6/JyxcclxuICAgICAgNjIwNTIzOiAn55SY6LC35Y6/JyxcclxuICAgICAgNjIwNTI0OiAn5q2m5bGx5Y6/JyxcclxuICAgICAgNjIwNTI1OiAn5byg5a625bed5Zue5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjIwNjAyOiAn5YeJ5bee5Yy6JyxcclxuICAgICAgNjIwNjIxOiAn5rCR5Yuk5Y6/JyxcclxuICAgICAgNjIwNjIyOiAn5Y+k5rWq5Y6/JyxcclxuICAgICAgNjIwNjIzOiAn5aSp56Wd6JeP5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjIwNzAyOiAn55SY5bee5Yy6JyxcclxuICAgICAgNjIwNzIxOiAn6IKD5Y2X6KOV5Zu65peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjIwNzIyOiAn5rCR5LmQ5Y6/JyxcclxuICAgICAgNjIwNzIzOiAn5Li05rO95Y6/JyxcclxuICAgICAgNjIwNzI0OiAn6auY5Y+w5Y6/JyxcclxuICAgICAgNjIwNzI1OiAn5bGx5Li55Y6/JyxcclxuICAgICAgNjIwODAyOiAn5bSG5bOS5Yy6JyxcclxuICAgICAgNjIwODIxOiAn5rO+5bed5Y6/JyxcclxuICAgICAgNjIwODIyOiAn54G15Y+w5Y6/JyxcclxuICAgICAgNjIwODIzOiAn5bSH5L+h5Y6/JyxcclxuICAgICAgNjIwODI1OiAn5bqE5rWq5Y6/JyxcclxuICAgICAgNjIwODI2OiAn6Z2Z5a6B5Y6/JyxcclxuICAgICAgNjIwODgxOiAn5Y2O5Lqt5biCJyxcclxuICAgICAgNjIwOTAyOiAn6IKD5bee5Yy6JyxcclxuICAgICAgNjIwOTIxOiAn6YeR5aGU5Y6/JyxcclxuICAgICAgNjIwOTIyOiAn55Oc5bee5Y6/JyxcclxuICAgICAgNjIwOTIzOiAn6IKD5YyX6JKZ5Y+k5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjIwOTI0OiAn6Zi/5YWL5aGe5ZOI6JCo5YWL5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjIwOTgxOiAn546J6Zeo5biCJyxcclxuICAgICAgNjIwOTgyOiAn5pWm54WM5biCJyxcclxuICAgICAgNjIxMDAyOiAn6KW/5bOw5Yy6JyxcclxuICAgICAgNjIxMDIxOiAn5bqG5Z+O5Y6/JyxcclxuICAgICAgNjIxMDIyOiAn546v5Y6/JyxcclxuICAgICAgNjIxMDIzOiAn5Y2O5rGg5Y6/JyxcclxuICAgICAgNjIxMDI0OiAn5ZCI5rC05Y6/JyxcclxuICAgICAgNjIxMDI1OiAn5q2j5a6B5Y6/JyxcclxuICAgICAgNjIxMDI2OiAn5a6B5Y6/JyxcclxuICAgICAgNjIxMDI3OiAn6ZWH5Y6f5Y6/JyxcclxuICAgICAgNjIxMTAyOiAn5a6J5a6a5Yy6JyxcclxuICAgICAgNjIxMTIxOiAn6YCa5rit5Y6/JyxcclxuICAgICAgNjIxMTIyOiAn6ZmH6KW/5Y6/JyxcclxuICAgICAgNjIxMTIzOiAn5rit5rqQ5Y6/JyxcclxuICAgICAgNjIxMTI0OiAn5Li05rSu5Y6/JyxcclxuICAgICAgNjIxMTI1OiAn5ryz5Y6/JyxcclxuICAgICAgNjIxMTI2OiAn5bK35Y6/JyxcclxuICAgICAgNjIxMjAyOiAn5q2m6YO95Yy6JyxcclxuICAgICAgNjIxMjIxOiAn5oiQ5Y6/JyxcclxuICAgICAgNjIxMjIyOiAn5paH5Y6/JyxcclxuICAgICAgNjIxMjIzOiAn5a6V5piM5Y6/JyxcclxuICAgICAgNjIxMjI0OiAn5bq35Y6/JyxcclxuICAgICAgNjIxMjI1OiAn6KW/5ZKM5Y6/JyxcclxuICAgICAgNjIxMjI2OiAn56S85Y6/JyxcclxuICAgICAgNjIxMjI3OiAn5b695Y6/JyxcclxuICAgICAgNjIxMjI4OiAn5Lik5b2T5Y6/JyxcclxuICAgICAgNjIyOTAxOiAn5Li05aSP5biCJyxcclxuICAgICAgNjIyOTIxOiAn5Li05aSP5Y6/JyxcclxuICAgICAgNjIyOTIyOiAn5bq35LmQ5Y6/JyxcclxuICAgICAgNjIyOTIzOiAn5rC46Z2W5Y6/JyxcclxuICAgICAgNjIyOTI0OiAn5bm/5rKz5Y6/JyxcclxuICAgICAgNjIyOTI1OiAn5ZKM5pS/5Y6/JyxcclxuICAgICAgNjIyOTI2OiAn5Lic5Lmh5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjIyOTI3OiAn56ev55+z5bGx5L+d5a6J5peP5Lic5Lmh5peP5pKS5ouJ5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjIzMDAxOiAn5ZCI5L2c5biCJyxcclxuICAgICAgNjIzMDIxOiAn5Li05r2t5Y6/JyxcclxuICAgICAgNjIzMDIyOiAn5Y2T5bC85Y6/JyxcclxuICAgICAgNjIzMDIzOiAn6Iif5puy5Y6/JyxcclxuICAgICAgNjIzMDI0OiAn6L+t6YOo5Y6/JyxcclxuICAgICAgNjIzMDI1OiAn546b5puy5Y6/JyxcclxuICAgICAgNjIzMDI2OiAn56KM5puy5Y6/JyxcclxuICAgICAgNjIzMDI3OiAn5aSP5rKz5Y6/JyxcclxuICAgICAgNjMwMTAyOiAn5Z+O5Lic5Yy6JyxcclxuICAgICAgNjMwMTAzOiAn5Z+O5Lit5Yy6JyxcclxuICAgICAgNjMwMTA0OiAn5Z+O6KW/5Yy6JyxcclxuICAgICAgNjMwMTA1OiAn5Z+O5YyX5Yy6JyxcclxuICAgICAgNjMwMTIxOiAn5aSn6YCa5Zue5peP5Zyf5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjMwMTIyOiAn5rmf5Lit5Y6/JyxcclxuICAgICAgNjMwMTIzOiAn5rmf5rqQ5Y6/JyxcclxuICAgICAgNjMwMjAyOiAn5LmQ6YO95Yy6JyxcclxuICAgICAgNjMwMjAzOiAn5bmz5a6J5Yy6JyxcclxuICAgICAgNjMwMjIyOiAn5rCR5ZKM5Zue5peP5Zyf5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjMwMjIzOiAn5LqS5Yqp5Zyf5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjMwMjI0OiAn5YyW6ZqG5Zue5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjMwMjI1OiAn5b6q5YyW5pKS5ouJ5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjMyMjIxOiAn6Zeo5rqQ5Zue5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjMyMjIyOiAn56WB6L+e5Y6/JyxcclxuICAgICAgNjMyMjIzOiAn5rW35pmP5Y6/JyxcclxuICAgICAgNjMyMjI0OiAn5Yia5a+f5Y6/JyxcclxuICAgICAgNjMyMzIxOiAn5ZCM5LuB5Y6/JyxcclxuICAgICAgNjMyMzIyOiAn5bCW5omO5Y6/JyxcclxuICAgICAgNjMyMzIzOiAn5rO95bqT5Y6/JyxcclxuICAgICAgNjMyMzI0OiAn5rKz5Y2X6JKZ5Y+k5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjMyNTIxOiAn5YWx5ZKM5Y6/JyxcclxuICAgICAgNjMyNTIyOiAn5ZCM5b635Y6/JyxcclxuICAgICAgNjMyNTIzOiAn6LS15b635Y6/JyxcclxuICAgICAgNjMyNTI0OiAn5YW05rW35Y6/JyxcclxuICAgICAgNjMyNTI1OiAn6LS15Y2X5Y6/JyxcclxuICAgICAgNjMyNjIxOiAn546b5rKB5Y6/JyxcclxuICAgICAgNjMyNjIyOiAn54+t546b5Y6/JyxcclxuICAgICAgNjMyNjIzOiAn55SY5b635Y6/JyxcclxuICAgICAgNjMyNjI0OiAn6L6+5pel5Y6/JyxcclxuICAgICAgNjMyNjI1OiAn5LmF5rK75Y6/JyxcclxuICAgICAgNjMyNjI2OiAn546b5aSa5Y6/JyxcclxuICAgICAgNjMyNzAxOiAn546J5qCR5biCJyxcclxuICAgICAgNjMyNzIyOiAn5p2C5aSa5Y6/JyxcclxuICAgICAgNjMyNzIzOiAn56ew5aSa5Y6/JyxcclxuICAgICAgNjMyNzI0OiAn5rK75aSa5Y6/JyxcclxuICAgICAgNjMyNzI1OiAn5ZuK6LCm5Y6/JyxcclxuICAgICAgNjMyNzI2OiAn5puy6bq76I6x5Y6/JyxcclxuICAgICAgNjMyODAxOiAn5qC85bCU5pyo5biCJyxcclxuICAgICAgNjMyODAyOiAn5b635Luk5ZOI5biCJyxcclxuICAgICAgNjMyODAzOiAn6Iyr5bSW5biCJyxcclxuICAgICAgNjMyODIxOiAn5LmM5YWw5Y6/JyxcclxuICAgICAgNjMyODIyOiAn6YO95YWw5Y6/JyxcclxuICAgICAgNjMyODIzOiAn5aSp5bO75Y6/JyxcclxuICAgICAgNjQwMTA0OiAn5YW05bqG5Yy6JyxcclxuICAgICAgNjQwMTA1OiAn6KW/5aSP5Yy6JyxcclxuICAgICAgNjQwMTA2OiAn6YeR5Yek5Yy6JyxcclxuICAgICAgNjQwMTIxOiAn5rC45a6B5Y6/JyxcclxuICAgICAgNjQwMTIyOiAn6LS65YWw5Y6/JyxcclxuICAgICAgNjQwMTgxOiAn54G15q2m5biCJyxcclxuICAgICAgNjQwMjAyOiAn5aSn5q2m5Y+j5Yy6JyxcclxuICAgICAgNjQwMjA1OiAn5oOg5Yac5Yy6JyxcclxuICAgICAgNjQwMjIxOiAn5bmz572X5Y6/JyxcclxuICAgICAgNjQwMzAyOiAn5Yip6YCa5Yy6JyxcclxuICAgICAgNjQwMzAzOiAn57qi5a+65aCh5Yy6JyxcclxuICAgICAgNjQwMzIzOiAn55uQ5rGg5Y6/JyxcclxuICAgICAgNjQwMzI0OiAn5ZCM5b+D5Y6/JyxcclxuICAgICAgNjQwMzgxOiAn6Z2S6ZOc5bOh5biCJyxcclxuICAgICAgNjQwNDAyOiAn5Y6f5bee5Yy6JyxcclxuICAgICAgNjQwNDIyOiAn6KW/5ZCJ5Y6/JyxcclxuICAgICAgNjQwNDIzOiAn6ZqG5b635Y6/JyxcclxuICAgICAgNjQwNDI0OiAn5rO+5rqQ5Y6/JyxcclxuICAgICAgNjQwNDI1OiAn5b2t6Ziz5Y6/JyxcclxuICAgICAgNjQwNTAyOiAn5rKZ5Z2h5aS05Yy6JyxcclxuICAgICAgNjQwNTIxOiAn5Lit5a6B5Y6/JyxcclxuICAgICAgNjQwNTIyOiAn5rW35Y6f5Y6/JyxcclxuICAgICAgNjUwMTAyOiAn5aSp5bGx5Yy6JyxcclxuICAgICAgNjUwMTAzOiAn5rKZ5L6d5be05YWL5Yy6JyxcclxuICAgICAgNjUwMTA0OiAn5paw5biC5Yy6JyxcclxuICAgICAgNjUwMTA1OiAn5rC056Oo5rKf5Yy6JyxcclxuICAgICAgNjUwMTA2OiAn5aS05bGv5rKz5Yy6JyxcclxuICAgICAgNjUwMTA3OiAn6L6+5Z2C5Z+O5Yy6JyxcclxuICAgICAgNjUwMTA5OiAn57Gz5Lic5Yy6JyxcclxuICAgICAgNjUwMTIxOiAn5LmM6bKB5pyo6b2Q5Y6/JyxcclxuICAgICAgNjUwMjAyOiAn54us5bGx5a2Q5Yy6JyxcclxuICAgICAgNjUwMjAzOiAn5YWL5ouJ546b5L6d5Yy6JyxcclxuICAgICAgNjUwMjA0OiAn55m956Kx5rup5Yy6JyxcclxuICAgICAgNjUwMjA1OiAn5LmM5bCU56a+5Yy6JyxcclxuICAgICAgNjUwNDAyOiAn6auY5piM5Yy6JyxcclxuICAgICAgNjUwNDIxOiAn6YSv5ZaE5Y6/JyxcclxuICAgICAgNjUwNDIyOiAn5omY5YWL6YCK5Y6/JyxcclxuICAgICAgNjUwNTAyOiAn5LyK5bee5Yy6JyxcclxuICAgICAgNjUwNTIxOiAn5be06YeM5Z2k5ZOI6JCo5YWL6Ieq5rK75Y6/JyxcclxuICAgICAgNjUwNTIyOiAn5LyK5ZC+5Y6/JyxcclxuICAgICAgNjUyMzAxOiAn5piM5ZCJ5biCJyxcclxuICAgICAgNjUyMzAyOiAn6Zic5bq35biCJyxcclxuICAgICAgNjUyMzIzOiAn5ZG85Zu+5aOB5Y6/JyxcclxuICAgICAgNjUyMzI0OiAn546b57qz5pav5Y6/JyxcclxuICAgICAgNjUyMzI1OiAn5aWH5Y+w5Y6/JyxcclxuICAgICAgNjUyMzI3OiAn5ZCJ5pyo6JCo5bCU5Y6/JyxcclxuICAgICAgNjUyMzI4OiAn5pyo5Z6S5ZOI6JCo5YWL6Ieq5rK75Y6/JyxcclxuICAgICAgNjUyNzAxOiAn5Y2a5LmQ5biCJyxcclxuICAgICAgNjUyNzAyOiAn6Zi/5ouJ5bGx5Y+j5biCJyxcclxuICAgICAgNjUyNzIyOiAn57K+5rKz5Y6/JyxcclxuICAgICAgNjUyNzIzOiAn5rip5rOJ5Y6/JyxcclxuICAgICAgNjUyODAxOiAn5bqT5bCU5YuS5biCJyxcclxuICAgICAgNjUyODIyOiAn6L2u5Y+w5Y6/JyxcclxuICAgICAgNjUyODIzOiAn5bCJ54qB5Y6/JyxcclxuICAgICAgNjUyODI0OiAn6Iul576M5Y6/JyxcclxuICAgICAgNjUyODI1OiAn5LiU5pyr5Y6/JyxcclxuICAgICAgNjUyODI2OiAn54SJ6ICG5Zue5peP6Ieq5rK75Y6/JyxcclxuICAgICAgNjUyODI3OiAn5ZKM6Z2Z5Y6/JyxcclxuICAgICAgNjUyODI4OiAn5ZKM56GV5Y6/JyxcclxuICAgICAgNjUyODI5OiAn5Y2a5rmW5Y6/JyxcclxuICAgICAgNjUyOTAxOiAn6Zi/5YWL6IuP5biCJyxcclxuICAgICAgNjUyOTIyOiAn5rip5a6/5Y6/JyxcclxuICAgICAgNjUyOTIzOiAn5bqT6L2m5Y6/JyxcclxuICAgICAgNjUyOTI0OiAn5rKZ6ZuF5Y6/JyxcclxuICAgICAgNjUyOTI1OiAn5paw5ZKM5Y6/JyxcclxuICAgICAgNjUyOTI2OiAn5ouc5Z+O5Y6/JyxcclxuICAgICAgNjUyOTI3OiAn5LmM5LuA5Y6/JyxcclxuICAgICAgNjUyOTI4OiAn6Zi/55Om5o+Q5Y6/JyxcclxuICAgICAgNjUyOTI5OiAn5p+v5Z2q5Y6/JyxcclxuICAgICAgNjUzMDAxOiAn6Zi/5Zu+5LuA5biCJyxcclxuICAgICAgNjUzMDIyOiAn6Zi/5YWL6Zm25Y6/JyxcclxuICAgICAgNjUzMDIzOiAn6Zi/5ZCI5aWH5Y6/JyxcclxuICAgICAgNjUzMDI0OiAn5LmM5oGw5Y6/JyxcclxuICAgICAgNjUzMTAxOiAn5ZaA5LuA5biCJyxcclxuICAgICAgNjUzMTIxOiAn55aP6ZmE5Y6/JyxcclxuICAgICAgNjUzMTIyOiAn55aP5YuS5Y6/JyxcclxuICAgICAgNjUzMTIzOiAn6Iux5ZCJ5rKZ5Y6/JyxcclxuICAgICAgNjUzMTI0OiAn5rO95pmu5Y6/JyxcclxuICAgICAgNjUzMTI1OiAn6I6O6L2m5Y6/JyxcclxuICAgICAgNjUzMTI2OiAn5Y+25Z+O5Y6/JyxcclxuICAgICAgNjUzMTI3OiAn6bqm55uW5o+Q5Y6/JyxcclxuICAgICAgNjUzMTI4OiAn5bKz5pmu5rmW5Y6/JyxcclxuICAgICAgNjUzMTI5OiAn5Ly95biI5Y6/JyxcclxuICAgICAgNjUzMTMwOiAn5be05qWa5Y6/JyxcclxuICAgICAgNjUzMTMxOiAn5aGU5LuA5bqT5bCU5bmy5aGU5ZCJ5YWL6Ieq5rK75Y6/JyxcclxuICAgICAgNjUzMjAxOiAn5ZKM55Sw5biCJyxcclxuICAgICAgNjUzMjIxOiAn5ZKM55Sw5Y6/JyxcclxuICAgICAgNjUzMjIyOiAn5aKo546J5Y6/JyxcclxuICAgICAgNjUzMjIzOiAn55qu5bGx5Y6/JyxcclxuICAgICAgNjUzMjI0OiAn5rSb5rWm5Y6/JyxcclxuICAgICAgNjUzMjI1OiAn562W5YuS5Y6/JyxcclxuICAgICAgNjUzMjI2OiAn5LqO55Sw5Y6/JyxcclxuICAgICAgNjUzMjI3OiAn5rCR5Liw5Y6/JyxcclxuICAgICAgNjU0MDAyOiAn5LyK5a6B5biCJyxcclxuICAgICAgNjU0MDAzOiAn5aWO5bGv5biCJyxcclxuICAgICAgNjU0MDA0OiAn6ZyN5bCU5p6c5pav5biCJyxcclxuICAgICAgNjU0MDIxOiAn5LyK5a6B5Y6/JyxcclxuICAgICAgNjU0MDIyOiAn5a+f5biD5p+l5bCU6ZSh5Lyv6Ieq5rK75Y6/JyxcclxuICAgICAgNjU0MDIzOiAn6ZyN5Z+O5Y6/JyxcclxuICAgICAgNjU0MDI0OiAn5bep55WZ5Y6/JyxcclxuICAgICAgNjU0MDI1OiAn5paw5rqQ5Y6/JyxcclxuICAgICAgNjU0MDI2OiAn5pit6IuP5Y6/JyxcclxuICAgICAgNjU0MDI3OiAn54m55YWL5pav5Y6/JyxcclxuICAgICAgNjU0MDI4OiAn5bC85YuS5YWL5Y6/JyxcclxuICAgICAgNjU0MjAxOiAn5aGU5Z+O5biCJyxcclxuICAgICAgNjU0MjAyOiAn5LmM6IuP5biCJyxcclxuICAgICAgNjU0MjIxOiAn6aKd5pWP5Y6/JyxcclxuICAgICAgNjU0MjIzOiAn5rKZ5rm+5Y6/JyxcclxuICAgICAgNjU0MjI0OiAn5omY6YeM5Y6/JyxcclxuICAgICAgNjU0MjI1OiAn6KOV5rCR5Y6/JyxcclxuICAgICAgNjU0MjI2OiAn5ZKM5biD5YWL6LWb5bCU6JKZ5Y+k6Ieq5rK75Y6/JyxcclxuICAgICAgNjU0MzAxOiAn6Zi/5YuS5rOw5biCJyxcclxuICAgICAgNjU0MzIxOiAn5biD5bCU5rSl5Y6/JyxcclxuICAgICAgNjU0MzIyOiAn5a+M6JW05Y6/JyxcclxuICAgICAgNjU0MzIzOiAn56aP5rW35Y6/JyxcclxuICAgICAgNjU0MzI0OiAn5ZOI5be05rKz5Y6/JyxcclxuICAgICAgNjU0MzI1OiAn6Z2S5rKz5Y6/JyxcclxuICAgICAgNjU0MzI2OiAn5ZCJ5pyo5LmD5Y6/JyxcclxuICAgICAgNjU5MDAxOiAn55+z5rKz5a2Q5biCJyxcclxuICAgICAgNjU5MDAyOiAn6Zi/5ouJ5bCU5biCJyxcclxuICAgICAgNjU5MDAzOiAn5Zu+5pyo6IiS5YWL5biCJyxcclxuICAgICAgNjU5MDA0OiAn5LqU5a625rig5biCJyxcclxuICAgICAgNjU5MDA1OiAn5YyX5bGv5biCJyxcclxuICAgICAgNjU5MDA2OiAn6ZOB6Zeo5YWz5biCJyxcclxuICAgICAgNjU5MDA3OiAn5Y+M5rKz5biCJyxcclxuICAgICAgNjU5MDA4OiAn5Y+v5YWL6L6+5ouJ5biCJyxcclxuICAgICAgNjU5MDA5OiAn5piG546J5biCJyxcclxuICAgICAgNzEwMTAxOiAn5Lit5q2j5Yy6JyxcclxuICAgICAgNzEwMTAyOiAn5aSn5ZCM5Yy6JyxcclxuICAgICAgNzEwMTAzOiAn5Lit5bGx5Yy6JyxcclxuICAgICAgNzEwMTA0OiAn5p2+5bGx5Yy6JyxcclxuICAgICAgNzEwMTA1OiAn5aSn5a6J5Yy6JyxcclxuICAgICAgNzEwMTA2OiAn5LiH5Y2O5Yy6JyxcclxuICAgICAgNzEwMTA3OiAn5L+h5LmJ5Yy6JyxcclxuICAgICAgNzEwMTA4OiAn5aOr5p6X5Yy6JyxcclxuICAgICAgNzEwMTA5OiAn5YyX5oqV5Yy6JyxcclxuICAgICAgNzEwMTEwOiAn5YaF5rmW5Yy6JyxcclxuICAgICAgNzEwMTExOiAn5Y2X5riv5Yy6JyxcclxuICAgICAgNzEwMTEyOiAn5paH5bGx5Yy6JyxcclxuICAgICAgNzEwMTk5OiAn5YW25a6D5Yy6JyxcclxuICAgICAgNzEwMjAxOiAn5paw5YW05Yy6JyxcclxuICAgICAgNzEwMjAyOiAn5YmN6YeR5Yy6JyxcclxuICAgICAgNzEwMjAzOiAn6Iqp6ZuF5Yy6JyxcclxuICAgICAgNzEwMjA0OiAn55uQ5Z+V5Yy6JyxcclxuICAgICAgNzEwMjA1OiAn6byT5bGx5Yy6JyxcclxuICAgICAgNzEwMjA2OiAn5peX5rSl5Yy6JyxcclxuICAgICAgNzEwMjA3OiAn5YmN6ZWH5Yy6JyxcclxuICAgICAgNzEwMjA4OiAn5LiJ5rCR5Yy6JyxcclxuICAgICAgNzEwMjA5OiAn5bem6JCl5Yy6JyxcclxuICAgICAgNzEwMjEwOiAn5qWg5qKT5Yy6JyxcclxuICAgICAgNzEwMjExOiAn5bCP5riv5Yy6JyxcclxuICAgICAgNzEwMjQxOiAn6IuT6ZuF5Yy6JyxcclxuICAgICAgNzEwMjQyOiAn5LuB5q2m5Yy6JyxcclxuICAgICAgNzEwMjQzOiAn5aSn56S+5Yy6JyxcclxuICAgICAgNzEwMjQ0OiAn5YaI5bGx5Yy6JyxcclxuICAgICAgNzEwMjQ1OiAn6Lev56u55Yy6JyxcclxuICAgICAgNzEwMjQ2OiAn6Zi/6I6y5Yy6JyxcclxuICAgICAgNzEwMjQ3OiAn55Sw5a+u5Yy6JyxcclxuICAgICAgNzEwMjQ4OiAn54eV5bei5Yy6JyxcclxuICAgICAgNzEwMjQ5OiAn5qGl5aS05Yy6JyxcclxuICAgICAgNzEwMjUwOiAn5qKT5a6Y5Yy6JyxcclxuICAgICAgNzEwMjUxOiAn5byl6ZmA5Yy6JyxcclxuICAgICAgNzEwMjUyOiAn5rC45a6J5Yy6JyxcclxuICAgICAgNzEwMjUzOiAn5rmW5YaF5Yy6JyxcclxuICAgICAgNzEwMjU0OiAn5Yek5bGx5Yy6JyxcclxuICAgICAgNzEwMjU1OiAn5aSn5a+u5Yy6JyxcclxuICAgICAgNzEwMjU2OiAn5p6X5Zut5Yy6JyxcclxuICAgICAgNzEwMjU3OiAn6bif5p2+5Yy6JyxcclxuICAgICAgNzEwMjU4OiAn5aSn5qCR5Yy6JyxcclxuICAgICAgNzEwMjU5OiAn5peX5bGx5Yy6JyxcclxuICAgICAgNzEwMjYwOiAn576O5rWT5Yy6JyxcclxuICAgICAgNzEwMjYxOiAn5YWt6b6f5Yy6JyxcclxuICAgICAgNzEwMjYyOiAn5YaF6Zeo5Yy6JyxcclxuICAgICAgNzEwMjYzOiAn5p2J5p6X5Yy6JyxcclxuICAgICAgNzEwMjY0OiAn55Sy5LuZ5Yy6JyxcclxuICAgICAgNzEwMjY1OiAn5qGD5rqQ5Yy6JyxcclxuICAgICAgNzEwMjY2OiAn6YKj546b5aSP5Yy6JyxcclxuICAgICAgNzEwMjY3OiAn6IyC5p6X5Yy6JyxcclxuICAgICAgNzEwMjY4OiAn6IyE6JCj5Yy6JyxcclxuICAgICAgNzEwMjk5OiAn5YW25a6D5Yy6JyxcclxuICAgICAgNzEwMzAxOiAn5Lit6KW/5Yy6JyxcclxuICAgICAgNzEwMzAyOiAn5Lic5Yy6JyxcclxuICAgICAgNzEwMzAzOiAn5Y2X5Yy6JyxcclxuICAgICAgNzEwMzA0OiAn5YyX5Yy6JyxcclxuICAgICAgNzEwMzA1OiAn5a6J5bmz5Yy6JyxcclxuICAgICAgNzEwMzA2OiAn5a6J5Y2X5Yy6JyxcclxuICAgICAgNzEwMzM5OiAn5rC45bq35Yy6JyxcclxuICAgICAgNzEwMzQwOiAn5b2S5LuB5Yy6JyxcclxuICAgICAgNzEwMzQxOiAn5paw5YyW5Yy6JyxcclxuICAgICAgNzEwMzQyOiAn5bem6ZWH5Yy6JyxcclxuICAgICAgNzEwMzQzOiAn546J5LqV5Yy6JyxcclxuICAgICAgNzEwMzQ0OiAn5qWg6KW/5Yy6JyxcclxuICAgICAgNzEwMzQ1OiAn5Y2X5YyW5Yy6JyxcclxuICAgICAgNzEwMzQ2OiAn5LuB5b635Yy6JyxcclxuICAgICAgNzEwMzQ3OiAn5YWz5bqZ5Yy6JyxcclxuICAgICAgNzEwMzQ4OiAn6b6Z5bSO5Yy6JyxcclxuICAgICAgNzEwMzQ5OiAn5a6Y55Sw5Yy6JyxcclxuICAgICAgNzEwMzUwOiAn6bq76LGG5Yy6JyxcclxuICAgICAgNzEwMzUxOiAn5L2z6YeM5Yy6JyxcclxuICAgICAgNzEwMzUyOiAn6KW/5riv5Yy6JyxcclxuICAgICAgNzEwMzUzOiAn5LiD6IKh5Yy6JyxcclxuICAgICAgNzEwMzU0OiAn5bCG5Yab5Yy6JyxcclxuICAgICAgNzEwMzU1OiAn5a2m55Sy5Yy6JyxcclxuICAgICAgNzEwMzU2OiAn5YyX6Zeo5Yy6JyxcclxuICAgICAgNzEwMzU3OiAn5paw6JCl5Yy6JyxcclxuICAgICAgNzEwMzU4OiAn5ZCO5aOB5Yy6JyxcclxuICAgICAgNzEwMzU5OiAn55m95rKz5Yy6JyxcclxuICAgICAgNzEwMzYwOiAn5Lic5bGx5Yy6JyxcclxuICAgICAgNzEwMzYxOiAn5YWt55Sy5Yy6JyxcclxuICAgICAgNzEwMzYyOiAn5LiL6JCl5Yy6JyxcclxuICAgICAgNzEwMzYzOiAn5p+z6JCl5Yy6JyxcclxuICAgICAgNzEwMzY0OiAn55uQ5rC05Yy6JyxcclxuICAgICAgNzEwMzY1OiAn5ZaE5YyW5Yy6JyxcclxuICAgICAgNzEwMzY2OiAn5aSn5YaF5Yy6JyxcclxuICAgICAgNzEwMzY3OiAn5bGx5LiK5Yy6JyxcclxuICAgICAgNzEwMzY4OiAn5paw5biC5Yy6JyxcclxuICAgICAgNzEwMzY5OiAn5a6J5a6a5Yy6JyxcclxuICAgICAgNzEwMzk5OiAn5YW25a6D5Yy6JyxcclxuICAgICAgNzEwNDAxOiAn5Lit5Yy6JyxcclxuICAgICAgNzEwNDAyOiAn5Lic5Yy6JyxcclxuICAgICAgNzEwNDAzOiAn5Y2X5Yy6JyxcclxuICAgICAgNzEwNDA0OiAn6KW/5Yy6JyxcclxuICAgICAgNzEwNDA1OiAn5YyX5Yy6JyxcclxuICAgICAgNzEwNDA2OiAn5YyX5bGv5Yy6JyxcclxuICAgICAgNzEwNDA3OiAn6KW/5bGv5Yy6JyxcclxuICAgICAgNzEwNDA4OiAn5Y2X5bGv5Yy6JyxcclxuICAgICAgNzEwNDMxOiAn5aSq5bmz5Yy6JyxcclxuICAgICAgNzEwNDMyOiAn5aSn6YeM5Yy6JyxcclxuICAgICAgNzEwNDMzOiAn6Zu+5bOw5Yy6JyxcclxuICAgICAgNzEwNDM0OiAn5LmM5pel5Yy6JyxcclxuICAgICAgNzEwNDM1OiAn5Liw5Y6f5Yy6JyxcclxuICAgICAgNzEwNDM2OiAn5ZCO6YeM5Yy6JyxcclxuICAgICAgNzEwNDM3OiAn55+z5YaI5Yy6JyxcclxuICAgICAgNzEwNDM4OiAn5Lic5Yq/5Yy6JyxcclxuICAgICAgNzEwNDM5OiAn5ZKM5bmz5Yy6JyxcclxuICAgICAgNzEwNDQwOiAn5paw56S+5Yy6JyxcclxuICAgICAgNzEwNDQxOiAn5r2t5a2Q5Yy6JyxcclxuICAgICAgNzEwNDQyOiAn5aSn6ZuF5Yy6JyxcclxuICAgICAgNzEwNDQzOiAn56We5YaI5Yy6JyxcclxuICAgICAgNzEwNDQ0OiAn5aSn6IKa5Yy6JyxcclxuICAgICAgNzEwNDQ1OiAn5rKZ6bm/5Yy6JyxcclxuICAgICAgNzEwNDQ2OiAn6b6Z5LqV5Yy6JyxcclxuICAgICAgNzEwNDQ3OiAn5qKn5qCW5Yy6JyxcclxuICAgICAgNzEwNDQ4OiAn5riF5rC05Yy6JyxcclxuICAgICAgNzEwNDQ5OiAn5aSn55Sy5Yy6JyxcclxuICAgICAgNzEwNDUwOiAn5aSW5Z+U5Yy6JyxcclxuICAgICAgNzEwNDUxOiAn5aSn5a6J5Yy6JyxcclxuICAgICAgNzEwNDk5OiAn5YW25a6D5Yy6JyxcclxuICAgICAgNzEwNTA3OiAn6YeR5rKZ6ZWHJyxcclxuICAgICAgNzEwNTA4OiAn6YeR5rmW6ZWHJyxcclxuICAgICAgNzEwNTA5OiAn6YeR5a6B5LmhJyxcclxuICAgICAgNzEwNTEwOiAn6YeR5Z+O6ZWHJyxcclxuICAgICAgNzEwNTExOiAn54OI5bG/5LmhJyxcclxuICAgICAgNzEwNTEyOiAn5LmM5Z215LmhJyxcclxuICAgICAgNzEwNjE0OiAn5Y2X5oqV5biCJyxcclxuICAgICAgNzEwNjE1OiAn5Lit5a+u5LmhJyxcclxuICAgICAgNzEwNjE2OiAn6I2J5bGv6ZWHJyxcclxuICAgICAgNzEwNjE3OiAn5Zu95aeT5LmhJyxcclxuICAgICAgNzEwNjE4OiAn5Z+U6YeM6ZWHJyxcclxuICAgICAgNzEwNjE5OiAn5LuB54ix5LmhJyxcclxuICAgICAgNzEwNjIwOiAn5ZCN6Ze05LmhJyxcclxuICAgICAgNzEwNjIxOiAn6ZuG6ZuG6ZWHJyxcclxuICAgICAgNzEwNjIyOiAn5rC06YeM5LmhJyxcclxuICAgICAgNzEwNjIzOiAn6bG85rGg5LmhJyxcclxuICAgICAgNzEwNjI0OiAn5L+h5LmJ5LmhJyxcclxuICAgICAgNzEwNjI1OiAn56u55bGx6ZWHJyxcclxuICAgICAgNzEwNjI2OiAn6bm/6LC35LmhJyxcclxuICAgICAgNzEwNzAxOiAn5LuB54ix5Yy6JyxcclxuICAgICAgNzEwNzAyOiAn5L+h5LmJ5Yy6JyxcclxuICAgICAgNzEwNzAzOiAn5Lit5q2j5Yy6JyxcclxuICAgICAgNzEwNzA0OiAn5Lit5bGx5Yy6JyxcclxuICAgICAgNzEwNzA1OiAn5a6J5LmQ5Yy6JyxcclxuICAgICAgNzEwNzA2OiAn5pqW5pqW5Yy6JyxcclxuICAgICAgNzEwNzA3OiAn5LiD5aC15Yy6JyxcclxuICAgICAgNzEwNzk5OiAn5YW25a6D5Yy6JyxcclxuICAgICAgNzEwODAxOiAn5Lic5Yy6JyxcclxuICAgICAgNzEwODAyOiAn5YyX5Yy6JyxcclxuICAgICAgNzEwODAzOiAn6aaZ5bGx5Yy6JyxcclxuICAgICAgNzEwODk5OiAn5YW25a6D5Yy6JyxcclxuICAgICAgNzEwOTAxOiAn5Lic5Yy6JyxcclxuICAgICAgNzEwOTAyOiAn6KW/5Yy6JyxcclxuICAgICAgNzEwOTk5OiAn5YW25a6D5Yy6JyxcclxuICAgICAgNzExMTMwOiAn5LiH6YeM5Yy6JyxcclxuICAgICAgNzExMTMyOiAn5p2/5qGl5Yy6JyxcclxuICAgICAgNzExMTMzOiAn5rGQ5q2i5Yy6JyxcclxuICAgICAgNzExMTM0OiAn5rex5Z2R5Yy6JyxcclxuICAgICAgNzExMTM1OiAn55+z56KH5Yy6JyxcclxuICAgICAgNzExMTM2OiAn55Ge6Iqz5Yy6JyxcclxuICAgICAgNzExMTM3OiAn5bmz5rqq5Yy6JyxcclxuICAgICAgNzExMTM4OiAn5Y+M5rqq5Yy6JyxcclxuICAgICAgNzExMTM5OiAn6LSh5a+u5Yy6JyxcclxuICAgICAgNzExMTQwOiAn5paw5bqX5Yy6JyxcclxuICAgICAgNzExMTQxOiAn5Z2q5p6X5Yy6JyxcclxuICAgICAgNzExMTQyOiAn5LmM5p2l5Yy6JyxcclxuICAgICAgNzExMTQzOiAn5rC45ZKM5Yy6JyxcclxuICAgICAgNzExMTQ0OiAn5Lit5ZKM5Yy6JyxcclxuICAgICAgNzExMTQ1OiAn5Zyf5Z+O5Yy6JyxcclxuICAgICAgNzExMTQ2OiAn5LiJ5bOh5Yy6JyxcclxuICAgICAgNzExMTQ3OiAn5qCR5p6X5Yy6JyxcclxuICAgICAgNzExMTQ4OiAn6I665q2M5Yy6JyxcclxuICAgICAgNzExMTQ5OiAn5LiJ6YeN5Yy6JyxcclxuICAgICAgNzExMTUwOiAn5paw5bqE5Yy6JyxcclxuICAgICAgNzExMTUxOiAn5rOw5bGx5Yy6JyxcclxuICAgICAgNzExMTUyOiAn5p6X5Y+j5Yy6JyxcclxuICAgICAgNzExMTUzOiAn6Iqm5rSy5Yy6JyxcclxuICAgICAgNzExMTU0OiAn5LqU6IKh5Yy6JyxcclxuICAgICAgNzExMTU1OiAn5YWr6YeM5Yy6JyxcclxuICAgICAgNzExMTU2OiAn5reh5rC05Yy6JyxcclxuICAgICAgNzExMTU3OiAn5LiJ6Iqd5Yy6JyxcclxuICAgICAgNzExMTU4OiAn55+z6Zeo5Yy6JyxcclxuICAgICAgNzExMjg3OiAn5a6c5YWw5biCJyxcclxuICAgICAgNzExMjg4OiAn5aS05Z+O6ZWHJyxcclxuICAgICAgNzExMjg5OiAn56SB5rqq5LmhJyxcclxuICAgICAgNzExMjkwOiAn5aOu5Zu05LmhJyxcclxuICAgICAgNzExMjkxOiAn5ZGY5bGx5LmhJyxcclxuICAgICAgNzExMjkyOiAn572X5Lic6ZWHJyxcclxuICAgICAgNzExMjkzOiAn5LiJ5pif5LmhJyxcclxuICAgICAgNzExMjk0OiAn5aSn5ZCM5LmhJyxcclxuICAgICAgNzExMjk1OiAn5LqU57uT5LmhJyxcclxuICAgICAgNzExMjk2OiAn5Yas5bGx5LmhJyxcclxuICAgICAgNzExMjk3OiAn6IuP5r6z6ZWHJyxcclxuICAgICAgNzExMjk4OiAn5Y2X5r6z5LmhJyxcclxuICAgICAgNzExMjk5OiAn6ZKT6bG85Y+wJyxcclxuICAgICAgNzExMzg3OiAn56u55YyX5biCJyxcclxuICAgICAgNzExMzg4OiAn5rmW5Y+j5LmhJyxcclxuICAgICAgNzExMzg5OiAn5paw5Liw5LmhJyxcclxuICAgICAgNzExMzkwOiAn5paw5Z+U6ZWHJyxcclxuICAgICAgNzExMzkxOiAn5YWz6KW/6ZWHJyxcclxuICAgICAgNzExMzkyOiAn6IqO5p6X5LmhJyxcclxuICAgICAgNzExMzkzOiAn5a6d5bGx5LmhJyxcclxuICAgICAgNzExMzk0OiAn56u55Lic6ZWHJyxcclxuICAgICAgNzExMzk1OiAn5LqU5bOw5LmhJyxcclxuICAgICAgNzExMzk2OiAn5qiq5bGx5LmhJyxcclxuICAgICAgNzExMzk3OiAn5bCW55+z5LmhJyxcclxuICAgICAgNzExMzk4OiAn5YyX5Z+U5LmhJyxcclxuICAgICAgNzExMzk5OiAn5bOo55yJ5LmhJyxcclxuICAgICAgNzExNDE0OiAn5Lit5Z2c5Yy6JyxcclxuICAgICAgNzExNDE1OiAn5bmz6ZWH5Yy6JyxcclxuICAgICAgNzExNDE3OiAn5p2o5qKF5Yy6JyxcclxuICAgICAgNzExNDE4OiAn5paw5bGL5Yy6JyxcclxuICAgICAgNzExNDE5OiAn6KeC6Z+z5Yy6JyxcclxuICAgICAgNzExNDIwOiAn5qGD5Zut5Yy6JyxcclxuICAgICAgNzExNDIxOiAn6b6f5bGx5Yy6JyxcclxuICAgICAgNzExNDIyOiAn5YWr5b635Yy6JyxcclxuICAgICAgNzExNDIzOiAn5aSn5rqq5Yy6JyxcclxuICAgICAgNzExNDI1OiAn5aSn5Zut5Yy6JyxcclxuICAgICAgNzExNDI2OiAn6Iqm56u55Yy6JyxcclxuICAgICAgNzExNDg3OiAn5Lit5Z2c5biCJyxcclxuICAgICAgNzExNDg4OiAn5bmz6ZWH5biCJyxcclxuICAgICAgNzExNDg5OiAn6b6Z5r2t5LmhJyxcclxuICAgICAgNzExNDkwOiAn5p2o5qKF5biCJyxcclxuICAgICAgNzExNDkxOiAn5paw5bGL5LmhJyxcclxuICAgICAgNzExNDkyOiAn6KeC6Z+z5LmhJyxcclxuICAgICAgNzExNDkzOiAn5qGD5Zut5biCJyxcclxuICAgICAgNzExNDk0OiAn6b6f5bGx5LmhJyxcclxuICAgICAgNzExNDk1OiAn5YWr5b635biCJyxcclxuICAgICAgNzExNDk2OiAn5aSn5rqq6ZWHJyxcclxuICAgICAgNzExNDk3OiAn5aSN5YW05LmhJyxcclxuICAgICAgNzExNDk4OiAn5aSn5Zut5LmhJyxcclxuICAgICAgNzExNDk5OiAn6Iqm56u55LmhJyxcclxuICAgICAgNzExNTIwOiAn5aS05Lu95biCJyxcclxuICAgICAgNzExNTgyOiAn56u55Y2X6ZWHJyxcclxuICAgICAgNzExNTgzOiAn5aS05Lu96ZWHJyxcclxuICAgICAgNzExNTg0OiAn5LiJ5rm+5LmhJyxcclxuICAgICAgNzExNTg1OiAn5Y2X5bqE5LmhJyxcclxuICAgICAgNzExNTg2OiAn54uu5r2t5LmhJyxcclxuICAgICAgNzExNTg3OiAn5ZCO6b6Z6ZWHJyxcclxuICAgICAgNzExNTg4OiAn6YCa6ZyE6ZWHJyxcclxuICAgICAgNzExNTg5OiAn6IuR6YeM6ZWHJyxcclxuICAgICAgNzExNTkwOiAn6IuX5qCX5biCJyxcclxuICAgICAgNzExNTkxOiAn6YCg5qGl5LmhJyxcclxuICAgICAgNzExNTkyOiAn5aS05bGL5LmhJyxcclxuICAgICAgNzExNTkzOiAn5YWs6aaG5LmhJyxcclxuICAgICAgNzExNTk0OiAn5aSn5rmW5LmhJyxcclxuICAgICAgNzExNTk1OiAn5rOw5a6J5LmhJyxcclxuICAgICAgNzExNTk2OiAn6ZOc6ZSj5LmhJyxcclxuICAgICAgNzExNTk3OiAn5LiJ5LmJ5LmhJyxcclxuICAgICAgNzExNTk4OiAn6KW/5rmW5LmhJyxcclxuICAgICAgNzExNTk5OiAn5Y2T5YWw6ZWHJyxcclxuICAgICAgNzExNzM2OiAn5ZGY5p6X5biCJyxcclxuICAgICAgNzExNzc0OiAn5b2w5YyW5biCJyxcclxuICAgICAgNzExNzc1OiAn6Iqs5Zut5LmhJyxcclxuICAgICAgNzExNzc2OiAn6Iqx5Z2b5LmhJyxcclxuICAgICAgNzExNzc3OiAn56eA5rC05LmhJyxcclxuICAgICAgNzExNzc4OiAn6bm/5riv6ZWHJyxcclxuICAgICAgNzExNzc5OiAn56aP5YW05LmhJyxcclxuICAgICAgNzExNzgwOiAn57q/6KW/5LmhJyxcclxuICAgICAgNzExNzgxOiAn5ZKM576O6ZWHJyxcclxuICAgICAgNzExNzgyOiAn5Ly45riv5LmhJyxcclxuICAgICAgNzExNzgzOiAn5ZGY5p6X6ZWHJyxcclxuICAgICAgNzExNzg0OiAn56S+5aS05LmhJyxcclxuICAgICAgNzExNzg1OiAn5rC46Z2W5LmhJyxcclxuICAgICAgNzExNzg2OiAn5Z+U5b+D5LmhJyxcclxuICAgICAgNzExNzg3OiAn5rqq5rmW6ZWHJyxcclxuICAgICAgNzExNzg4OiAn5aSn5p2R5LmhJyxcclxuICAgICAgNzExNzg5OiAn5Z+U55uQ5LmhJyxcclxuICAgICAgNzExNzkwOiAn55Sw5Lit6ZWHJyxcclxuICAgICAgNzExNzkxOiAn5YyX5paX6ZWHJyxcclxuICAgICAgNzExNzkyOiAn55Sw5bC+5LmhJyxcclxuICAgICAgNzExNzkzOiAn5Z+k5aS05LmhJyxcclxuICAgICAgNzExNzk0OiAn5rqq5bee5LmhJyxcclxuICAgICAgNzExNzk1OiAn56u55aGY5LmhJyxcclxuICAgICAgNzExNzk2OiAn5LqM5p6X6ZWHJyxcclxuICAgICAgNzExNzk3OiAn5aSn5Z+O5LmhJyxcclxuICAgICAgNzExNzk4OiAn6Iqz6IuR5LmhJyxcclxuICAgICAgNzExNzk5OiAn5LqM5rC05LmhJyxcclxuICAgICAgNzExOTgyOiAn55Wq6Lev5LmhJyxcclxuICAgICAgNzExOTgzOiAn5qKF5bGx5LmhJyxcclxuICAgICAgNzExOTg0OiAn56u55bSO5LmhJyxcclxuICAgICAgNzExOTg1OiAn6Zi/6YeM5bGx5LmhJyxcclxuICAgICAgNzExOTg2OiAn5Lit5Z+U5LmhJyxcclxuICAgICAgNzExOTg3OiAn5aSn5Z+U5LmhJyxcclxuICAgICAgNzExOTg4OiAn5rC05LiK5LmhJyxcclxuICAgICAgNzExOTg5OiAn6bm/6I2J5LmhJyxcclxuICAgICAgNzExOTkwOiAn5aSq5L+d5biCJyxcclxuICAgICAgNzExOTkxOiAn5py05a2Q5biCJyxcclxuICAgICAgNzExOTkyOiAn5Lic55+z5LmhJyxcclxuICAgICAgNzExOTkzOiAn5YWt6ISa5LmhJyxcclxuICAgICAgNzExOTk0OiAn5paw5riv5LmhJyxcclxuICAgICAgNzExOTk1OiAn5rCR6ZuE5LmhJyxcclxuICAgICAgNzExOTk2OiAn5aSn5p6X6ZWHJyxcclxuICAgICAgNzExOTk3OiAn5rqq5Y+j5LmhJyxcclxuICAgICAgNzExOTk4OiAn5LmJ56u55LmhJyxcclxuICAgICAgNzExOTk5OiAn5biD6KKL6ZWHJyxcclxuICAgICAgNzEyMTgwOiAn5paX5Y2X6ZWHJyxcclxuICAgICAgNzEyMTgxOiAn5aSn5Z+k5LmhJyxcclxuICAgICAgNzEyMTgyOiAn6JmO5bC+6ZWHJyxcclxuICAgICAgNzEyMTgzOiAn5Zyf5bqT6ZWHJyxcclxuICAgICAgNzEyMTg0OiAn6KSS5b+g5LmhJyxcclxuICAgICAgNzEyMTg1OiAn5Lic5Yq/5LmhJyxcclxuICAgICAgNzEyMTg2OiAn5Y+w6KW/5LmhJyxcclxuICAgICAgNzEyMTg3OiAn5LuR6IOM5LmhJyxcclxuICAgICAgNzEyMTg4OiAn6bqm5a+u5LmhJyxcclxuICAgICAgNzEyMTg5OiAn5paX5YWt5biCJyxcclxuICAgICAgNzEyMTkwOiAn5p6X5YaF5LmhJyxcclxuICAgICAgNzEyMTkxOiAn5Y+k5Z2R5LmhJyxcclxuICAgICAgNzEyMTkyOiAn6I6/5qGQ5LmhJyxcclxuICAgICAgNzEyMTkzOiAn6KW/6J666ZWHJyxcclxuICAgICAgNzEyMTk0OiAn5LqM5LuR5LmhJyxcclxuICAgICAgNzEyMTk1OiAn5YyX5riv6ZWHJyxcclxuICAgICAgNzEyMTk2OiAn5rC05p6X5LmhJyxcclxuICAgICAgNzEyMTk3OiAn5Y+j5rmW5LmhJyxcclxuICAgICAgNzEyMTk4OiAn5Zub5rmW5LmhJyxcclxuICAgICAgNzEyMTk5OiAn5YWD6ZW/5LmhJyxcclxuICAgICAgNzEyNDUxOiAn5bSB6aG25LmhJyxcclxuICAgICAgNzEyNDY3OiAn5bGP5Lic5biCJyxcclxuICAgICAgNzEyNDY4OiAn5LiJ5Zyw6Zeo5LmhJyxcclxuICAgICAgNzEyNDY5OiAn6Zu+5Y+w5LmhJyxcclxuICAgICAgNzEyNDcwOiAn546b5a625LmhJyxcclxuICAgICAgNzEyNDcxOiAn5Lmd5aaC5LmhJyxcclxuICAgICAgNzEyNDcyOiAn6YeM5riv5LmhJyxcclxuICAgICAgNzEyNDczOiAn6auY5qCR5LmhJyxcclxuICAgICAgNzEyNDc0OiAn55uQ5Z+U5LmhJyxcclxuICAgICAgNzEyNDc1OiAn6ZW/5rK75LmhJyxcclxuICAgICAgNzEyNDc2OiAn6bqf5rSb5LmhJyxcclxuICAgICAgNzEyNDc3OiAn56u555Sw5LmhJyxcclxuICAgICAgNzEyNDc4OiAn5YaF5Z+U5LmhJyxcclxuICAgICAgNzEyNDc5OiAn5LiH5Li55LmhJyxcclxuICAgICAgNzEyNDgwOiAn5r2u5bee6ZWHJyxcclxuICAgICAgNzEyNDgxOiAn5rOw5q2m5LmhJyxcclxuICAgICAgNzEyNDgyOiAn5p2l5LmJ5LmhJyxcclxuICAgICAgNzEyNDgzOiAn5LiH5bOm5LmhJyxcclxuICAgICAgNzEyNDg0OiAn6I6w6aG25LmhJyxcclxuICAgICAgNzEyNDg1OiAn5paw5Z+k5LmhJyxcclxuICAgICAgNzEyNDg2OiAn5Y2X5bee5LmhJyxcclxuICAgICAgNzEyNDg3OiAn5p6X6L655LmhJyxcclxuICAgICAgNzEyNDg4OiAn5Lic5riv6ZWHJyxcclxuICAgICAgNzEyNDg5OiAn55CJ55CD5LmhJyxcclxuICAgICAgNzEyNDkwOiAn5L2z5Yas5LmhJyxcclxuICAgICAgNzEyNDkxOiAn5paw5Zut5LmhJyxcclxuICAgICAgNzEyNDkyOiAn5p6L5a+u5LmhJyxcclxuICAgICAgNzEyNDkzOiAn5p6L5bGx5LmhJyxcclxuICAgICAgNzEyNDk0OiAn5pil5pel5LmhJyxcclxuICAgICAgNzEyNDk1OiAn54uu5a2Q5LmhJyxcclxuICAgICAgNzEyNDk2OiAn6L2m5Z+O5LmhJyxcclxuICAgICAgNzEyNDk3OiAn54mh5Li55LmhJyxcclxuICAgICAgNzEyNDk4OiAn5oGS5pil6ZWHJyxcclxuICAgICAgNzEyNDk5OiAn5ruh5bee5LmhJyxcclxuICAgICAgNzEyNTg0OiAn5Y+w5Lic5biCJyxcclxuICAgICAgNzEyNTg1OiAn57u/5bKb5LmhJyxcclxuICAgICAgNzEyNTg2OiAn5YWw5bG/5LmhJyxcclxuICAgICAgNzEyNTg3OiAn5bu25bmz5LmhJyxcclxuICAgICAgNzEyNTg4OiAn5Y2R5Y2X5LmhJyxcclxuICAgICAgNzEyNTg5OiAn6bm/6YeO5LmhJyxcclxuICAgICAgNzEyNTkwOiAn5YWz5bGx6ZWHJyxcclxuICAgICAgNzEyNTkxOiAn5rW356uv5LmhJyxcclxuICAgICAgNzEyNTkyOiAn5rGg5LiK5LmhJyxcclxuICAgICAgNzEyNTkzOiAn5Lic5rKz5LmhJyxcclxuICAgICAgNzEyNTk0OiAn5oiQ5Yqf6ZWHJyxcclxuICAgICAgNzEyNTk1OiAn6ZW/5ruo5LmhJyxcclxuICAgICAgNzEyNTk2OiAn6YeR5bOw5LmhJyxcclxuICAgICAgNzEyNTk3OiAn5aSn5q2m5LmhJyxcclxuICAgICAgNzEyNTk4OiAn6L6+5LuB5LmhJyxcclxuICAgICAgNzEyNTk5OiAn5aSq6bq76YeM5LmhJyxcclxuICAgICAgNzEyNjg2OiAn6Iqx6I6y5biCJyxcclxuICAgICAgNzEyNjg3OiAn5paw5Z+O5LmhJyxcclxuICAgICAgNzEyNjg4OiAn5aSq6bKB6ZiBJyxcclxuICAgICAgNzEyNjg5OiAn56eA5p6X5LmhJyxcclxuICAgICAgNzEyNjkwOiAn5ZCJ5a6J5LmhJyxcclxuICAgICAgNzEyNjkxOiAn5a+/5Liw5LmhJyxcclxuICAgICAgNzEyNjkyOiAn5Yek5p6X6ZWHJyxcclxuICAgICAgNzEyNjkzOiAn5YWJ5aSN5LmhJyxcclxuICAgICAgNzEyNjk0OiAn5Liw5ruo5LmhJyxcclxuICAgICAgNzEyNjk1OiAn55Ge56mX5LmhJyxcclxuICAgICAgNzEyNjk2OiAn5LiH6I2j5LmhJyxcclxuICAgICAgNzEyNjk3OiAn546J6YeM6ZWHJyxcclxuICAgICAgNzEyNjk4OiAn5Y2T5rqq5LmhJyxcclxuICAgICAgNzEyNjk5OiAn5a+M6YeM5LmhJyxcclxuICAgICAgNzEyNzk0OiAn6ams5YWs5biCJyxcclxuICAgICAgNzEyNzk1OiAn6KW/5bG/5LmhJyxcclxuICAgICAgNzEyNzk2OiAn5pyb5a6J5LmhJyxcclxuICAgICAgNzEyNzk3OiAn5LiD576O5LmhJyxcclxuICAgICAgNzEyNzk4OiAn55m95rKZ5LmhJyxcclxuICAgICAgNzEyNzk5OiAn5rmW6KW/5LmhJyxcclxuICAgICAgNzEyODk2OiAn5Y2X56u/5LmhJyxcclxuICAgICAgNzEyODk3OiAn5YyX56u/5LmhJyxcclxuICAgICAgNzEyODk4OiAn5Lic5byV5LmhJyxcclxuICAgICAgNzEyODk5OiAn6I6S5YWJ5LmhJyxcclxuICAgICAgODEwMTAxOiAn5Lit6KW/5Yy6JyxcclxuICAgICAgODEwMTAyOiAn5rm+5LuU5Yy6JyxcclxuICAgICAgODEwMTAzOiAn5Lic5Yy6JyxcclxuICAgICAgODEwMTA0OiAn5Y2X5Yy6JyxcclxuICAgICAgODEwMjAxOiAn5Lmd6b6Z5Z+O5Yy6JyxcclxuICAgICAgODEwMjAyOiAn5rK55bCW5pe65Yy6JyxcclxuICAgICAgODEwMjAzOiAn5rex5rC05Z+X5Yy6JyxcclxuICAgICAgODEwMjA0OiAn6buE5aSn5LuZ5Yy6JyxcclxuICAgICAgODEwMjA1OiAn6KeC5aGY5Yy6JyxcclxuICAgICAgODEwMzAxOiAn5YyX5Yy6JyxcclxuICAgICAgODEwMzAyOiAn5aSn5Z+U5Yy6JyxcclxuICAgICAgODEwMzAzOiAn5rKZ55Sw5Yy6JyxcclxuICAgICAgODEwMzA0OiAn6KW/6LSh5Yy6JyxcclxuICAgICAgODEwMzA1OiAn5YWD5pyX5Yy6JyxcclxuICAgICAgODEwMzA2OiAn5bGv6Zeo5Yy6JyxcclxuICAgICAgODEwMzA3OiAn6I2D5rm+5Yy6JyxcclxuICAgICAgODEwMzA4OiAn6JG16Z2S5Yy6JyxcclxuICAgICAgODEwMzA5OiAn56a75bKb5Yy6JyxcclxuICAgICAgODIwMTAxOiAn5r6z6Zeo5Y2K5bKbJyxcclxuICAgICAgODIwMjAxOiAn56a75bKbJ1xyXG4gICAgICAvLyAxMTAxMDA6ICcnLFxyXG4gICAgICAvLyAxMjAxMDA6ICcnLFxyXG4gICAgICAvLyAxMzAxMDA6ICcnLFxyXG4gICAgICAvLyAxMzAyMDA6ICcnLFxyXG4gICAgICAvLyAxMzAzMDA6ICcnLFxyXG4gICAgICAvLyAxMzA0MDA6ICcnLFxyXG4gICAgICAvLyAxMzA1MDA6ICcnLFxyXG4gICAgICAvLyAxMzA2MDA6ICcnLFxyXG4gICAgICAvLyAxMzA3MDA6ICcnLFxyXG4gICAgICAvLyAxMzA4MDA6ICcnLFxyXG4gICAgICAvLyAxMzA5MDA6ICcnLFxyXG4gICAgICAvLyAxMzEwMDA6ICcnLFxyXG4gICAgICAvLyAxMzExMDA6ICcnLFxyXG4gICAgICAvLyAxNDAxMDA6ICcnLFxyXG4gICAgICAvLyAxNDAyMDA6ICcnLFxyXG4gICAgICAvLyAxNDAzMDA6ICcnLFxyXG4gICAgICAvLyAxNDA0MDA6ICcnLFxyXG4gICAgICAvLyAxNDA1MDA6ICcnLFxyXG4gICAgICAvLyAxNDA2MDA6ICcnLFxyXG4gICAgICAvLyAxNDA3MDA6ICcnLFxyXG4gICAgICAvLyAxNDA4MDA6ICcnLFxyXG4gICAgICAvLyAxNDA5MDA6ICcnLFxyXG4gICAgICAvLyAxNDEwMDA6ICcnLFxyXG4gICAgICAvLyAxNDExMDA6ICcnLFxyXG4gICAgICAvLyAxNTAxMDA6ICcnLFxyXG4gICAgICAvLyAxNTAyMDA6ICcnLFxyXG4gICAgICAvLyAxNTAzMDA6ICcnLFxyXG4gICAgICAvLyAxNTA0MDA6ICcnLFxyXG4gICAgICAvLyAxNTA1MDA6ICcnLFxyXG4gICAgICAvLyAxNTA2MDA6ICcnLFxyXG4gICAgICAvLyAxNTA3MDA6ICcnLFxyXG4gICAgICAvLyAxNTA4MDA6ICcnLFxyXG4gICAgICAvLyAxNTA5MDA6ICcnLFxyXG4gICAgICAvLyAxNTIyMDA6ICcnLFxyXG4gICAgICAvLyAxNTI1MDA6ICcnLFxyXG4gICAgICAvLyAxNTI5MDA6ICcnLFxyXG4gICAgICAvLyAyMTAxMDA6ICcnLFxyXG4gICAgICAvLyAyMTAyMDA6ICcnLFxyXG4gICAgICAvLyAyMTAzMDA6ICcnLFxyXG4gICAgICAvLyAyMTA0MDA6ICcnLFxyXG4gICAgICAvLyAyMTA1MDA6ICcnLFxyXG4gICAgICAvLyAyMTA2MDA6ICcnLFxyXG4gICAgICAvLyAyMTA3MDA6ICcnLFxyXG4gICAgICAvLyAyMTA4MDA6ICcnLFxyXG4gICAgICAvLyAyMTA5MDA6ICcnLFxyXG4gICAgICAvLyAyMTEwMDA6ICcnLFxyXG4gICAgICAvLyAyMTExMDA6ICcnLFxyXG4gICAgICAvLyAyMTEyMDA6ICcnLFxyXG4gICAgICAvLyAyMTEzMDA6ICcnLFxyXG4gICAgICAvLyAyMTE0MDA6ICcnLFxyXG4gICAgICAvLyAyMjAxMDA6ICcnLFxyXG4gICAgICAvLyAyMjAyMDA6ICcnLFxyXG4gICAgICAvLyAyMjAzMDA6ICcnLFxyXG4gICAgICAvLyAyMjA0MDA6ICcnLFxyXG4gICAgICAvLyAyMjA1MDA6ICcnLFxyXG4gICAgICAvLyAyMjA2MDA6ICcnLFxyXG4gICAgICAvLyAyMjA3MDA6ICcnLFxyXG4gICAgICAvLyAyMjA4MDA6ICcnLFxyXG4gICAgICAvLyAyMjI0MDA6ICcnLFxyXG4gICAgICAvLyAyMzAxMDA6ICcnLFxyXG4gICAgICAvLyAyMzAyMDA6ICcnLFxyXG4gICAgICAvLyAyMzAzMDA6ICcnLFxyXG4gICAgICAvLyAyMzA0MDA6ICcnLFxyXG4gICAgICAvLyAyMzA1MDA6ICcnLFxyXG4gICAgICAvLyAyMzA2MDA6ICcnLFxyXG4gICAgICAvLyAyMzA3MDA6ICcnLFxyXG4gICAgICAvLyAyMzA4MDA6ICcnLFxyXG4gICAgICAvLyAyMzA5MDA6ICcnLFxyXG4gICAgICAvLyAyMzEwMDA6ICcnLFxyXG4gICAgICAvLyAyMzExMDA6ICcnLFxyXG4gICAgICAvLyAyMzEyMDA6ICcnLFxyXG4gICAgICAvLyAyMzI3MDA6ICcnLFxyXG4gICAgICAvLyAzMTAxMDA6ICcnLFxyXG4gICAgICAvLyAzMjAxMDA6ICcnLFxyXG4gICAgICAvLyAzMjAyMDA6ICcnLFxyXG4gICAgICAvLyAzMjAzMDA6ICcnLFxyXG4gICAgICAvLyAzMjA0MDA6ICcnLFxyXG4gICAgICAvLyAzMjA1MDA6ICcnLFxyXG4gICAgICAvLyAzMjA2MDA6ICcnLFxyXG4gICAgICAvLyAzMjA3MDA6ICcnLFxyXG4gICAgICAvLyAzMjA4MDA6ICcnLFxyXG4gICAgICAvLyAzMjA5MDA6ICcnLFxyXG4gICAgICAvLyAzMjEwMDA6ICcnLFxyXG4gICAgICAvLyAzMjExMDA6ICcnLFxyXG4gICAgICAvLyAzMjEyMDA6ICcnLFxyXG4gICAgICAvLyAzMjEzMDA6ICcnLFxyXG4gICAgICAvLyAzMzAxMDA6ICcnLFxyXG4gICAgICAvLyAzMzAyMDA6ICcnLFxyXG4gICAgICAvLyAzMzAzMDA6ICcnLFxyXG4gICAgICAvLyAzMzA0MDA6ICcnLFxyXG4gICAgICAvLyAzMzA1MDA6ICcnLFxyXG4gICAgICAvLyAzMzA2MDA6ICcnLFxyXG4gICAgICAvLyAzMzA3MDA6ICcnLFxyXG4gICAgICAvLyAzMzA4MDA6ICcnLFxyXG4gICAgICAvLyAzMzA5MDA6ICcnLFxyXG4gICAgICAvLyAzMzEwMDA6ICcnLFxyXG4gICAgICAvLyAzMzExMDA6ICcnLFxyXG4gICAgICAvLyAzNDAxMDA6ICcnLFxyXG4gICAgICAvLyAzNDAyMDA6ICcnLFxyXG4gICAgICAvLyAzNDAzMDA6ICcnLFxyXG4gICAgICAvLyAzNDA0MDA6ICcnLFxyXG4gICAgICAvLyAzNDA1MDA6ICcnLFxyXG4gICAgICAvLyAzNDA2MDA6ICcnLFxyXG4gICAgICAvLyAzNDA3MDA6ICcnLFxyXG4gICAgICAvLyAzNDA4MDA6ICcnLFxyXG4gICAgICAvLyAzNDEwMDA6ICcnLFxyXG4gICAgICAvLyAzNDExMDA6ICcnLFxyXG4gICAgICAvLyAzNDEyMDA6ICcnLFxyXG4gICAgICAvLyAzNDEzMDA6ICcnLFxyXG4gICAgICAvLyAzNDE1MDA6ICcnLFxyXG4gICAgICAvLyAzNDE2MDA6ICcnLFxyXG4gICAgICAvLyAzNDE3MDA6ICcnLFxyXG4gICAgICAvLyAzNDE4MDA6ICcnLFxyXG4gICAgICAvLyAzNTAxMDA6ICcnLFxyXG4gICAgICAvLyAzNTAyMDA6ICcnLFxyXG4gICAgICAvLyAzNTAzMDA6ICcnLFxyXG4gICAgICAvLyAzNTA0MDA6ICcnLFxyXG4gICAgICAvLyAzNTA1MDA6ICcnLFxyXG4gICAgICAvLyAzNTA2MDA6ICcnLFxyXG4gICAgICAvLyAzNTA3MDA6ICcnLFxyXG4gICAgICAvLyAzNTA4MDA6ICcnLFxyXG4gICAgICAvLyAzNTA5MDA6ICcnLFxyXG4gICAgICAvLyAzNjAxMDA6ICcnLFxyXG4gICAgICAvLyAzNjAyMDA6ICcnLFxyXG4gICAgICAvLyAzNjAzMDA6ICcnLFxyXG4gICAgICAvLyAzNjA0MDA6ICcnLFxyXG4gICAgICAvLyAzNjA1MDA6ICcnLFxyXG4gICAgICAvLyAzNjA2MDA6ICcnLFxyXG4gICAgICAvLyAzNjA3MDA6ICcnLFxyXG4gICAgICAvLyAzNjA4MDA6ICcnLFxyXG4gICAgICAvLyAzNjA5MDA6ICcnLFxyXG4gICAgICAvLyAzNjEwMDA6ICcnLFxyXG4gICAgICAvLyAzNjExMDA6ICcnLFxyXG4gICAgICAvLyAzNzAxMDA6ICcnLFxyXG4gICAgICAvLyAzNzAyMDA6ICcnLFxyXG4gICAgICAvLyAzNzAzMDA6ICcnLFxyXG4gICAgICAvLyAzNzA0MDA6ICcnLFxyXG4gICAgICAvLyAzNzA1MDA6ICcnLFxyXG4gICAgICAvLyAzNzA2MDA6ICcnLFxyXG4gICAgICAvLyAzNzA3MDA6ICcnLFxyXG4gICAgICAvLyAzNzA4MDA6ICcnLFxyXG4gICAgICAvLyAzNzA5MDA6ICcnLFxyXG4gICAgICAvLyAzNzEwMDA6ICcnLFxyXG4gICAgICAvLyAzNzExMDA6ICcnLFxyXG4gICAgICAvLyAzNzEyMDA6ICcnLFxyXG4gICAgICAvLyAzNzEzMDA6ICcnLFxyXG4gICAgICAvLyAzNzE0MDA6ICcnLFxyXG4gICAgICAvLyAzNzE1MDA6ICcnLFxyXG4gICAgICAvLyAzNzE2MDA6ICcnLFxyXG4gICAgICAvLyAzNzE3MDA6ICcnLFxyXG4gICAgICAvLyA0MTAxMDA6ICcnLFxyXG4gICAgICAvLyA0MTAyMDA6ICcnLFxyXG4gICAgICAvLyA0MTAzMDA6ICcnLFxyXG4gICAgICAvLyA0MTA0MDA6ICcnLFxyXG4gICAgICAvLyA0MTA1MDA6ICcnLFxyXG4gICAgICAvLyA0MTA2MDA6ICcnLFxyXG4gICAgICAvLyA0MTA3MDA6ICcnLFxyXG4gICAgICAvLyA0MTA4MDA6ICcnLFxyXG4gICAgICAvLyA0MTA5MDA6ICcnLFxyXG4gICAgICAvLyA0MTEwMDA6ICcnLFxyXG4gICAgICAvLyA0MTExMDA6ICcnLFxyXG4gICAgICAvLyA0MTEyMDA6ICcnLFxyXG4gICAgICAvLyA0MTEzMDA6ICcnLFxyXG4gICAgICAvLyA0MTE0MDA6ICcnLFxyXG4gICAgICAvLyA0MTE1MDA6ICcnLFxyXG4gICAgICAvLyA0MTE2MDA6ICcnLFxyXG4gICAgICAvLyA0MTE3MDA6ICcnLFxyXG4gICAgICAvLyA0MTkwMDA6ICcnLFxyXG4gICAgICAvLyA0MjAxMDA6ICcnLFxyXG4gICAgICAvLyA0MjAyMDA6ICcnLFxyXG4gICAgICAvLyA0MjAzMDA6ICcnLFxyXG4gICAgICAvLyA0MjA1MDA6ICcnLFxyXG4gICAgICAvLyA0MjA2MDA6ICcnLFxyXG4gICAgICAvLyA0MjA3MDA6ICcnLFxyXG4gICAgICAvLyA0MjA4MDA6ICcnLFxyXG4gICAgICAvLyA0MjA5MDA6ICcnLFxyXG4gICAgICAvLyA0MjEwMDA6ICcnLFxyXG4gICAgICAvLyA0MjExMDA6ICcnLFxyXG4gICAgICAvLyA0MjEyMDA6ICcnLFxyXG4gICAgICAvLyA0MjEzMDA6ICcnLFxyXG4gICAgICAvLyA0MjI4MDA6ICcnLFxyXG4gICAgICAvLyA0MjkwMDA6ICcnLFxyXG4gICAgICAvLyA0MzAxMDA6ICcnLFxyXG4gICAgICAvLyA0MzAyMDA6ICcnLFxyXG4gICAgICAvLyA0MzAzMDA6ICcnLFxyXG4gICAgICAvLyA0MzA0MDA6ICcnLFxyXG4gICAgICAvLyA0MzA1MDA6ICcnLFxyXG4gICAgICAvLyA0MzA2MDA6ICcnLFxyXG4gICAgICAvLyA0MzA3MDA6ICcnLFxyXG4gICAgICAvLyA0MzA4MDA6ICcnLFxyXG4gICAgICAvLyA0MzA5MDA6ICcnLFxyXG4gICAgICAvLyA0MzEwMDA6ICcnLFxyXG4gICAgICAvLyA0MzExMDA6ICcnLFxyXG4gICAgICAvLyA0MzEyMDA6ICcnLFxyXG4gICAgICAvLyA0MzEzMDA6ICcnLFxyXG4gICAgICAvLyA0MzMxMDA6ICcnLFxyXG4gICAgICAvLyA0NDAxMDA6ICcnLFxyXG4gICAgICAvLyA0NDAyMDA6ICcnLFxyXG4gICAgICAvLyA0NDAzMDA6ICcnLFxyXG4gICAgICAvLyA0NDA0MDA6ICcnLFxyXG4gICAgICAvLyA0NDA1MDA6ICcnLFxyXG4gICAgICAvLyA0NDA2MDA6ICcnLFxyXG4gICAgICAvLyA0NDA3MDA6ICcnLFxyXG4gICAgICAvLyA0NDA4MDA6ICcnLFxyXG4gICAgICAvLyA0NDA5MDA6ICcnLFxyXG4gICAgICAvLyA0NDEyMDA6ICcnLFxyXG4gICAgICAvLyA0NDEzMDA6ICcnLFxyXG4gICAgICAvLyA0NDE0MDA6ICcnLFxyXG4gICAgICAvLyA0NDE1MDA6ICcnLFxyXG4gICAgICAvLyA0NDE2MDA6ICcnLFxyXG4gICAgICAvLyA0NDE3MDA6ICcnLFxyXG4gICAgICAvLyA0NDE4MDA6ICcnLFxyXG4gICAgICAvLyA0NDE5MDA6ICcnLFxyXG4gICAgICAvLyA0NDIwMDA6ICcnLFxyXG4gICAgICAvLyA0NDUxMDA6ICcnLFxyXG4gICAgICAvLyA0NDUyMDA6ICcnLFxyXG4gICAgICAvLyA0NDUzMDA6ICcnLFxyXG4gICAgICAvLyA0NTAxMDA6ICcnLFxyXG4gICAgICAvLyA0NTAyMDA6ICcnLFxyXG4gICAgICAvLyA0NTAzMDA6ICcnLFxyXG4gICAgICAvLyA0NTA0MDA6ICcnLFxyXG4gICAgICAvLyA0NTA1MDA6ICcnLFxyXG4gICAgICAvLyA0NTA2MDA6ICcnLFxyXG4gICAgICAvLyA0NTA3MDA6ICcnLFxyXG4gICAgICAvLyA0NTA4MDA6ICcnLFxyXG4gICAgICAvLyA0NTA5MDA6ICcnLFxyXG4gICAgICAvLyA0NTEwMDA6ICcnLFxyXG4gICAgICAvLyA0NTExMDA6ICcnLFxyXG4gICAgICAvLyA0NTEyMDA6ICcnLFxyXG4gICAgICAvLyA0NTEzMDA6ICcnLFxyXG4gICAgICAvLyA0NTE0MDA6ICcnLFxyXG4gICAgICAvLyA0NjAxMDA6ICcnLFxyXG4gICAgICAvLyA0NjAyMDA6ICcnLFxyXG4gICAgICAvLyA0NjAzMDA6ICcnLFxyXG4gICAgICAvLyA0NjA0MDA6ICcnLFxyXG4gICAgICAvLyA0NjkwMDA6ICcnLFxyXG4gICAgICAvLyA1MDAxMDA6ICcnLFxyXG4gICAgICAvLyA1MDAyMDA6ICcnLFxyXG4gICAgICAvLyA1MTAxMDA6ICcnLFxyXG4gICAgICAvLyA1MTAzMDA6ICcnLFxyXG4gICAgICAvLyA1MTA0MDA6ICcnLFxyXG4gICAgICAvLyA1MTA1MDA6ICcnLFxyXG4gICAgICAvLyA1MTA2MDA6ICcnLFxyXG4gICAgICAvLyA1MTA3MDA6ICcnLFxyXG4gICAgICAvLyA1MTA4MDA6ICcnLFxyXG4gICAgICAvLyA1MTA5MDA6ICcnLFxyXG4gICAgICAvLyA1MTEwMDA6ICcnLFxyXG4gICAgICAvLyA1MTExMDA6ICcnLFxyXG4gICAgICAvLyA1MTEzMDA6ICcnLFxyXG4gICAgICAvLyA1MTE0MDA6ICcnLFxyXG4gICAgICAvLyA1MTE1MDA6ICcnLFxyXG4gICAgICAvLyA1MTE2MDA6ICcnLFxyXG4gICAgICAvLyA1MTE3MDA6ICcnLFxyXG4gICAgICAvLyA1MTE4MDA6ICcnLFxyXG4gICAgICAvLyA1MTE5MDA6ICcnLFxyXG4gICAgICAvLyA1MTIwMDA6ICcnLFxyXG4gICAgICAvLyA1MTMyMDA6ICcnLFxyXG4gICAgICAvLyA1MTMzMDA6ICcnLFxyXG4gICAgICAvLyA1MTM0MDA6ICcnLFxyXG4gICAgICAvLyA1MjAxMDA6ICcnLFxyXG4gICAgICAvLyA1MjAyMDA6ICcnLFxyXG4gICAgICAvLyA1MjAzMDA6ICcnLFxyXG4gICAgICAvLyA1MjA0MDA6ICcnLFxyXG4gICAgICAvLyA1MjA1MDA6ICcnLFxyXG4gICAgICAvLyA1MjA2MDA6ICcnLFxyXG4gICAgICAvLyA1MjIzMDA6ICcnLFxyXG4gICAgICAvLyA1MjI2MDA6ICcnLFxyXG4gICAgICAvLyA1MjI3MDA6ICcnLFxyXG4gICAgICAvLyA1MzAxMDA6ICcnLFxyXG4gICAgICAvLyA1MzAzMDA6ICcnLFxyXG4gICAgICAvLyA1MzA0MDA6ICcnLFxyXG4gICAgICAvLyA1MzA1MDA6ICcnLFxyXG4gICAgICAvLyA1MzA2MDA6ICcnLFxyXG4gICAgICAvLyA1MzA3MDA6ICcnLFxyXG4gICAgICAvLyA1MzA4MDA6ICcnLFxyXG4gICAgICAvLyA1MzA5MDA6ICcnLFxyXG4gICAgICAvLyA1MzIzMDA6ICcnLFxyXG4gICAgICAvLyA1MzI1MDA6ICcnLFxyXG4gICAgICAvLyA1MzI2MDA6ICcnLFxyXG4gICAgICAvLyA1MzI4MDA6ICcnLFxyXG4gICAgICAvLyA1MzI5MDA6ICcnLFxyXG4gICAgICAvLyA1MzMxMDA6ICcnLFxyXG4gICAgICAvLyA1MzMzMDA6ICcnLFxyXG4gICAgICAvLyA1MzM0MDA6ICcnLFxyXG4gICAgICAvLyA1NDAxMDA6ICcnLFxyXG4gICAgICAvLyA1NDAyMDA6ICcnLFxyXG4gICAgICAvLyA1NDAzMDA6ICcnLFxyXG4gICAgICAvLyA1NDA0MDA6ICcnLFxyXG4gICAgICAvLyA1NDA1MDA6ICcnLFxyXG4gICAgICAvLyA1NDA2MDA6ICcnLFxyXG4gICAgICAvLyA1NDI1MDA6ICcnLFxyXG4gICAgICAvLyA2MTAxMDA6ICcnLFxyXG4gICAgICAvLyA2MTAyMDA6ICcnLFxyXG4gICAgICAvLyA2MTAzMDA6ICcnLFxyXG4gICAgICAvLyA2MTA0MDA6ICcnLFxyXG4gICAgICAvLyA2MTA1MDA6ICcnLFxyXG4gICAgICAvLyA2MTA2MDA6ICcnLFxyXG4gICAgICAvLyA2MTA3MDA6ICcnLFxyXG4gICAgICAvLyA2MTA4MDA6ICcnLFxyXG4gICAgICAvLyA2MTA5MDA6ICcnLFxyXG4gICAgICAvLyA2MTEwMDA6ICcnLFxyXG4gICAgICAvLyA2MjAxMDA6ICcnLFxyXG4gICAgICAvLyA2MjAyMDA6ICcnLFxyXG4gICAgICAvLyA2MjAzMDA6ICcnLFxyXG4gICAgICAvLyA2MjA0MDA6ICcnLFxyXG4gICAgICAvLyA2MjA1MDA6ICcnLFxyXG4gICAgICAvLyA2MjA2MDA6ICcnLFxyXG4gICAgICAvLyA2MjA3MDA6ICcnLFxyXG4gICAgICAvLyA2MjA4MDA6ICcnLFxyXG4gICAgICAvLyA2MjA5MDA6ICcnLFxyXG4gICAgICAvLyA2MjEwMDA6ICcnLFxyXG4gICAgICAvLyA2MjExMDA6ICcnLFxyXG4gICAgICAvLyA2MjEyMDA6ICcnLFxyXG4gICAgICAvLyA2MjI5MDA6ICcnLFxyXG4gICAgICAvLyA2MjMwMDA6ICcnLFxyXG4gICAgICAvLyA2MzAxMDA6ICcnLFxyXG4gICAgICAvLyA2MzAyMDA6ICcnLFxyXG4gICAgICAvLyA2MzIyMDA6ICcnLFxyXG4gICAgICAvLyA2MzIzMDA6ICcnLFxyXG4gICAgICAvLyA2MzI1MDA6ICcnLFxyXG4gICAgICAvLyA2MzI2MDA6ICcnLFxyXG4gICAgICAvLyA2MzI3MDA6ICcnLFxyXG4gICAgICAvLyA2MzI4MDA6ICcnLFxyXG4gICAgICAvLyA2NDAxMDA6ICcnLFxyXG4gICAgICAvLyA2NDAyMDA6ICcnLFxyXG4gICAgICAvLyA2NDAzMDA6ICcnLFxyXG4gICAgICAvLyA2NDA0MDA6ICcnLFxyXG4gICAgICAvLyA2NDA1MDA6ICcnLFxyXG4gICAgICAvLyA2NTAxMDA6ICcnLFxyXG4gICAgICAvLyA2NTAyMDA6ICcnLFxyXG4gICAgICAvLyA2NTA0MDA6ICcnLFxyXG4gICAgICAvLyA2NTA1MDA6ICcnLFxyXG4gICAgICAvLyA2NTIzMDA6ICcnLFxyXG4gICAgICAvLyA2NTI3MDA6ICcnLFxyXG4gICAgICAvLyA2NTI4MDA6ICcnLFxyXG4gICAgICAvLyA2NTI5MDA6ICcnLFxyXG4gICAgICAvLyA2NTMwMDA6ICcnLFxyXG4gICAgICAvLyA2NTMxMDA6ICcnLFxyXG4gICAgICAvLyA2NTMyMDA6ICcnLFxyXG4gICAgICAvLyA2NTQwMDA6ICcnLFxyXG4gICAgICAvLyA2NTQyMDA6ICcnLFxyXG4gICAgICAvLyA2NTQzMDA6ICcnLFxyXG4gICAgICAvLyA2NTkwMDA6ICcnLFxyXG4gICAgICAvLyA3MTAxMDA6ICcnLFxyXG4gICAgICAvLyA3MTAyMDA6ICcnLFxyXG4gICAgICAvLyA3MTAzMDA6ICcnLFxyXG4gICAgICAvLyA3MTA0MDA6ICcnLFxyXG4gICAgICAvLyA3MTA1MDA6ICcnLFxyXG4gICAgICAvLyA3MTA2MDA6ICcnLFxyXG4gICAgICAvLyA3MTA3MDA6ICcnLFxyXG4gICAgICAvLyA3MTA4MDA6ICcnLFxyXG4gICAgICAvLyA3MTA5MDA6ICcnLFxyXG4gICAgICAvLyA3MTExMDA6ICcnLFxyXG4gICAgICAvLyA3MTEyMDA6ICcnLFxyXG4gICAgICAvLyA3MTEzMDA6ICcnLFxyXG4gICAgICAvLyA3MTE0MDA6ICcnLFxyXG4gICAgICAvLyA3MTE1MDA6ICcnLFxyXG4gICAgICAvLyA3MTE3MDA6ICcnLFxyXG4gICAgICAvLyA3MTE5MDA6ICcnLFxyXG4gICAgICAvLyA3MTIxMDA6ICcnLFxyXG4gICAgICAvLyA3MTI0MDA6ICcnLFxyXG4gICAgICAvLyA3MTI1MDA6ICcnLFxyXG4gICAgICAvLyA3MTI2MDA6ICcnLFxyXG4gICAgICAvLyA3MTI3MDA6ICcnLFxyXG4gICAgICAvLyA3MTI4MDA6ICcnLFxyXG4gICAgICAvLyA4MTAxMDA6ICcnLFxyXG4gICAgICAvLyA4MTAyMDA6ICcnLFxyXG4gICAgICAvLyA4MTAzMDA6ICcnLFxyXG4gICAgICAvLyA4MjAxMDA6ICcnLFxyXG4gICAgICAvLyA4MjAyMDA6ICcnLFxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuIiwiPCEtLeWbveWGheWcsOWMui0tPlxyXG48dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyc1wiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJzXCI+XHJcbiAgICAgICAgICAgIDxkaXYgOnN0eWxlPVwie3dpZHRoOiBsZXZlbCA9PT0gMSA/ICcxMDAlJyA6ICc3MCUnfVwiPlxyXG4gICAgICAgICAgICAgICAgPFRhYnMgICAgIHYtbW9kZWw9XCJhY3RpdmVcIiBjb2xvcj1cIiMxOTg5ZmFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlLWluYWN0aXZlLWNvbG9yPVwiIzMzMzMzM1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUtYWN0aXZlLWNvbG9yPVwiIzAwODRmZlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiZ2V0Q2l0eVwiID5cclxuICAgICAgICAgICAgICAgICAgICA8VGFiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJ2cy5uYW1lXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPVwiKHZzLGluZGV4KSBpbiBjaXR5VGFiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgOmtleT1cImluZGV4XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPVwiZGlzYWJsZWQoaW5kZXgpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9UYWI+XHJcbiAgICAgICAgICAgICAgICA8L1RhYnM+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgdi1pZj1cImNpdHlUYWIubGVuZ3RoID4gMSAmJiBjaXR5VGFiWzFdLmlkPT09JydcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwibm9CdG5cIj7noa7lrpo8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIHYtZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImNvbmZpcm1cIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwib2tCdG5cIj7noa7lrpo8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiYm9keXNcIiA6Y2xhc3M9XCJ7J2JvZHlWaWV3Jzp2aWV3VHlwZT09PSdhbGwnfVwiIHJlZj1cIm1haW5cIj5cclxuICAgICAgICAgICAgPGRpdiB2LWlmPVwiYWN0aXZlPT09MlwiIHN0eWxlPVwicGFkZGluZzogMTBweCAyMHB4XCIgQGNsaWNrPVwic2VsSXRlbSgn6K+36YCJ5oupJywnJylcIiA6Y2xhc3M9XCJ7J3NlbENvbG9yJzpjaXR5VGFiW2FjdGl2ZV0uaWQ9PT0nJ31cIj5cclxuICAgICAgICAgICAgICAgIOivt+mAieaLqVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsnc2VsQ29sb3InOiBjaXR5VGFiW2FjdGl2ZV0uaWQgPT09IGluZH1cIlxyXG4gICAgICAgICAgICAgICAgICAgIHYtZm9yPVwiKGl0ZW0saW5kKSBpbiBtYXBBcmVhXCIgOmtleT1cImluZFwiIHN0eWxlPVwicGFkZGluZzogMTBweCAyMHB4XCIgQGNsaWNrPVwic2VsSXRlbShpdGVtLGluZClcIj5cclxuICAgICAgICAgICAgICAgIHt7aXRlbX19XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcblxyXG4gICAgaW1wb3J0IHtUYWJzLFRhYn0gZnJvbSAndmFudCdcclxuXHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogXCJEb21lc3RpY0NpdHlcIixcclxuICAgICAgICBjb21wb25lbnRzOntUYWJzLFRhYn0sXHJcbiAgICAgICAgbW9kZWw6IHtcclxuICAgICAgICAgICAgcHJvcDogJ3NlbElkJyxcclxuICAgICAgICAgICAgZXZlbnQ6ICdpbnB1dCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHByb3BzOntcclxuICAgICAgICAgICAgLy8g5Zyw5Yy66LWE5rqQXHJcbiAgICAgICAgICAgIGFyZWE6e1xyXG4gICAgICAgICAgICAgICAgdHlwZTpPYmplY3QsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0Ont9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIOmAieaLqeeahGlk77yM6LSf6LSj5Zue5pi+XHJcbiAgICAgICAgICAgIHNlbElkOntcclxuICAgICAgICAgICAgICAgIHR5cGU6U3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDonJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyDmmL7npLrnmoTnsbvlnotcclxuICAgICAgICAgICAgdmlld1R5cGU6e1xyXG4gICAgICAgICAgICAgICAgdHlwZTpTdHJpbmcsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OicnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlbGVjdExldmVsOntcclxuICAgICAgICAgICAgICAgIHR5cGU6W1N0cmluZyxOdW1iZXJdLFxyXG4gICAgICAgICAgICAgICAgLy/pgInmi6nnnIHluILljr9cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6JzMnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbXB1dGVkOntcclxuICAgICAgICAgICAgbGV2ZWwoKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLnNlbGVjdExldmVsKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRhKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlOjAsXHJcbiAgICAgICAgICAgICAgICAvL+WktOmDqOmAieaLqeagj1xyXG4gICAgICAgICAgICAgICAgY2l0eVRhYjpbXSxcclxuICAgICAgICAgICAgICAgIG1hcEFyZWE6e30sXHJcbiAgICAgICAgICAgICAgICB0YWc6MFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcmVhdGVkKCkge1xyXG4gICAgICAgICAgICBpZih0aGlzLmxldmVsID09PSAxKXtcclxuICAgICAgICAgICAgICAgIC8v5Y+q6YCJ5oup55yB5Lu9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNpdHlUYWIgPSBbe25hbWU6J+ivt+mAieaLqeecgeS7vScsaWQ6Jyd9XVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubGV2ZWwgPT09IDIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2l0eVRhYiA9IFtcclxuICAgICAgICAgICAgICAgICAgICB7bmFtZTon6K+36YCJ5oupJyxpZDonJ30sXHJcbiAgICAgICAgICAgICAgICAgICAge25hbWU6J+ivt+mAieaLqScsaWQ6Jyd9XHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNpdHlUYWI9W1xyXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOifor7fpgInmi6knLCBpZDonJ30sXHJcbiAgICAgICAgICAgICAgICAgICAge25hbWU6J+ivt+mAieaLqScsIGlkOicnfSxcclxuICAgICAgICAgICAgICAgICAgICB7bmFtZTon6K+36YCJ5oupJywgaWQ6Jyd9LFxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb3VudGVkKCkge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZT0wXHJcbiAgICAgICAgICAgIGlmKHRoaXMuYWN0aXZlPT09MCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcEFyZWE9dGhpcy5hcmVhLnByb3ZpbmNlX2xpc3RcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmxldmVsID4gMSAmJiB0aGlzLmVjaG8oKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgICBkaXNhYmxlZChpbmRleCl7XHJcbiAgICAgICAgICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoIShpbmRleCA9PT0gMCB8fCAoaW5kZXggIT09IDAgJiYgdGhpcy5jaXR5VGFiW2luZGV4IC0gMV0uaWQgIT09ICcnKSkpXHJcbiAgICAgICAgICAgICAgICB9Y2F0Y2goZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyDnoa7orqTlm57osIPmlrnms5VcclxuICAgICAgICAgICAgY29uZmlybSgpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHNlbmRBcnI9W11cclxuICAgICAgICAgICAgICAgIGxldCBpbnB1dFN0cj0nJ1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaXR5VGFiLmZvckVhY2goKGVsLGluZGV4KT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBlbC5pZCA9PT0gJycgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZEFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6JycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDonJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6JydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRBcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOmVsLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ZWwuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOmVsLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPHNlbmRBcnIubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBzZW5kQXJyW2ldLmNvZGUgIT09ICcnIHx8IHNlbmRBcnJbaV0uaWQgIT09ICcnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRTdHI9c2VuZEFycltpXS5jb2RlIHx8IHNlbmRBcnJbaV0uaWRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdjb25maXJtJyxzZW5kQXJyKVxyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLGlucHV0U3RyKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog6YeN572u5pWw5o2uXHJcbiAgICAgICAgICAgICAqIEBwYXJhbSBpIOmAieaLqXRhYuWAvFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcmVzZXQoaSl7XHJcbiAgICAgICAgICAgICAgICBpZiggaSA9PT0gMCApe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOesrOS4gOe6p1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuY2l0eVRhYlswXS5pZC5zdWJzdHJpbmcoMCwzKSAhPT0gdGhpcy5jaXR5VGFiWzFdLmlkLnN1YnN0cmluZygwLDMpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaXR5VGFiWzFdLmlkPScnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2l0eVRhYlsxXS5uYW1lPSfor7fpgInmi6knXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNpdHlUYWJbMl0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaXR5VGFiWzJdLmlkPScnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNpdHlUYWJbMl0ubmFtZT0n6K+36YCJ5oupJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfWVsc2UgaWYoIGkgPT09IDEgJiYgdGhpcy5jaXR5VGFiWzJdICl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g56ys5LqM57qnXHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5jaXR5VGFiWzFdLmlkLnN1YnN0cmluZygwLDQpICE9PSB0aGlzLmNpdHlUYWJbMl0uaWQuc3Vic3RyaW5nKDAsNCkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNpdHlUYWJbMl0uaWQ9JydcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaXR5VGFiWzJdLm5hbWU9J+ivt+mAieaLqSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiDojrflj5blnLDljLrliJfooahcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldENpdHkoKXtcclxuICAgICAgICAgICAgICAgIGxldCBzZWxmPXRoaXNcclxuICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLiRyZWZzLm1haW4uc2Nyb2xsVG9wPTBcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmFjdGl2ZSA9PT0gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBBcmVhPXRoaXMuYXJlYS5wcm92aW5jZV9saXN0XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RMZXZlbCA9PT0gIFwiMVwiIHx8IHRoaXMuc2VsZWN0TGV2ZWwgPT09IDEgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXQodGhpcy5hY3RpdmUpXHJcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiggdGhpcy5hY3RpdmUgPT09IDEgKXtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn55yB57qnaWQnLCB0aGlzLmNpdHlUYWJbMF0uaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBBcmVhPXt9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBrZXkgIGluIHRoaXMuYXJlYS5jaXR5X2xpc3Qpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihrZXkuc3Vic3RyaW5nKDAsMik9PT10aGlzLmNpdHlUYWJbMF0uaWQuc3Vic3RyaW5nKDAsMikpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBBcmVhW2tleV09IHRoaXMuYXJlYS5jaXR5X2xpc3Rba2V5XVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXQodGhpcy5hY3RpdmUpXHJcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZih0aGlzLmFjdGl2ZT09PTIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfluILnuqdpZCcsIHRoaXMuY2l0eVRhYlsxXS5pZClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcEFyZWE9e31cclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGtleSAgaW4gdGhpcy5hcmVhLmNvdW50eV9saXN0KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoa2V5LnN1YnN0cmluZygwLDQpPT09dGhpcy5jaXR5VGFiWzFdLmlkLnN1YnN0cmluZygwLDQpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwQXJlYVtrZXldPSB0aGlzLmFyZWEuY291bnR5X2xpc3Rba2V5XVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMubWFwQXJlYT10aGlzLmFyZWEuY291bnR5X2xpc3RcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIOmAieaLqeWcsOWMulxyXG4gICAgICAgICAgICBzZWxJdGVtKGl0ZW0saWQpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+mAieaLqeeahGl0ZW0nLGl0ZW0pXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn6YCJ5oup55qEaWQnLGlkKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaXR5VGFiW3RoaXMuYWN0aXZlXS5pZD1pZFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaXR5VGFiW3RoaXMuYWN0aXZlXS5uYW1lPWl0ZW1cclxuICAgICAgICAgICAgICAgIGlmKCB0aGlzLmxldmVsICE9PSAxICYmICEodGhpcy5sZXZlbCA9PT0gMiAmJiB0aGlzLmFjdGl2ZSA9PT0gMSkgKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KHRoaXMuYWN0aXZlKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCB0aGlzLmFjdGl2ZSlcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuYWN0aXZlID49IDEgJiYgdGhpcy5jaXR5VGFiWzJdKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlPSAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlPXRoaXMuYWN0aXZlKzFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldENpdHkoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sMzAwKSAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIOWbnuaYvuaVsOaNrlxyXG4gICAgICAgICAgICBlY2hvKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhZyA9IDBcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxldmVsID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBrZXkgIGluIHRoaXMuYXJlYS5jb3VudHlfbGlzdCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGtleSA9PT0gdGhpcy5zZWxJZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhZyA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2l0eVRhYlsyXS5uYW1lPSB0aGlzLmFyZWEuY291bnR5X2xpc3Rba2V5XVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaXR5VGFiWzJdLmlkPSBrZXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQga2V5cyAgaW4gdGhpcy5hcmVhLmNpdHlfbGlzdCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoa2V5cy5zdWJzdHJpbmcoMCw0KSA9PT0gdGhpcy5zZWxJZC5zdWJzdHJpbmcoMCw0KSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2l0eVRhYlsxXS5uYW1lPSB0aGlzLmFyZWEuY2l0eV9saXN0W2tleXNdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2l0eVRhYlsxXS5pZD0ga2V5c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGtleXNzICBpbiB0aGlzLmFyZWEucHJvdmluY2VfbGlzdCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihrZXlzcy5zdWJzdHJpbmcoMCwyKT09PWtleXMuc3Vic3RyaW5nKDAsMikpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2l0eVRhYlswXS5uYW1lPSB0aGlzLmFyZWEucHJvdmluY2VfbGlzdFtrZXlzc11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNpdHlUYWJbMF0uaWQ9IGtleXNzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGtleXMgIGluIHRoaXMuYXJlYS5jaXR5X2xpc3Qpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGtleXMgPT09IHRoaXMuc2VsSWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhZyA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaXR5VGFiWzFdLm5hbWU9IHRoaXMuYXJlYS5jaXR5X2xpc3Rba2V5c11cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaXR5VGFiWzFdLmlkPSBrZXlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQga2V5c3MgIGluIHRoaXMuYXJlYS5wcm92aW5jZV9saXN0KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGtleXNzLnN1YnN0cmluZygwLDIpPT09a2V5cy5zdWJzdHJpbmcoMCwyKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaXR5VGFiWzBdLm5hbWU9IHRoaXMuYXJlYS5wcm92aW5jZV9saXN0W2tleXNzXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2l0eVRhYlswXS5pZD0ga2V5c3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvcihsZXQga2V5c3MgIGluIHRoaXMuYXJlYS5wcm92aW5jZV9saXN0KXtcclxuICAgICAgICAgICAgICAgICAgICBpZihrZXlzcz09PXRoaXMuc2VsSWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhZyA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaXR5VGFiWzBdLm5hbWU9IHRoaXMuYXJlYS5wcm92aW5jZV9saXN0W2tleXNzXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNpdHlUYWJbMF0uaWQ9IGtleXNzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoIHRoaXMudGFnID09PSAwICl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmU9MFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB3YXRjaDoge1xyXG4gICAgICAgICAgICBzZWxJZDoge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlciAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ29iaiBjaGFuZ2VkJylcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZT0wXHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5hY3RpdmUgPT09IDApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcEFyZWE9dGhpcy5hcmVhLnByb3ZpbmNlX2xpc3RcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbCA+IDEgJiYgdGhpcy5lY2hvKClcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmNpdHksJ3RoaXMuY2l0eScpXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGVlcDogdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBzY29wZWQgbGFuZz1cImxlc3NcIj5cclxuICAgIC5jb250YWluZXJze1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICAgIC5oZWFkZXJze1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICAgICAgICAgIHdpZHRoOiAxMDB2dztcclxuICAgICAgICB9XHJcbiAgICAgICAgLmJvZHlze1xyXG4gICAgICAgICAgICB3aWR0aDogMTAwdnc7ZGlzcGxheTogZmxleDtmbGV4LWRpcmVjdGlvbjogY29sdW1uOztvdmVyZmxvdy15OiBzY3JvbGw7XHJcbiAgICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZWVlO2ZvbnQtc2l6ZTogMTRweDsgIGhlaWdodDogNTB2aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmJvZHlWaWV3e1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDgwdmhcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAuc2VsQ29sb3J7XHJcbiAgICAgICAgY29sb3I6ICMwMDg0ZmY7XHJcbiAgICB9XHJcbiAgICAub2tCdG57XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAyMHB4O2ZvbnQtc2l6ZTogMTRweDtjb2xvcjogIzAwODRmZjtcclxuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICAgICAgcmlnaHQ6IDA7XHJcbiAgICB9XHJcbiAgICAubm9CdG57XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAyMHB4O2ZvbnQtc2l6ZTogMTRweDtjb2xvcjogIzg4OFxyXG4gICAgfVxyXG48L3N0eWxlPiIsIjwhLS3lnLDlnYDpgInmi6ktLT5cclxuPHRlbXBsYXRlPlxyXG4gICAgPGRpdj5cclxuICAgICAgICA8VmFsaWRhdGlvblByb3ZpZGVyIDpuYW1lPVwiJGF0dHJzLmxhYmVsXCIgOnJ1bGVzPVwidmFsaWRhdGVSdWxlc1wiIHYtc2xvdD1cIntlcnJvcnN9XCI+XHJcbjwhLS0gICAgICAgICAgOmlzLWxpbms9XCIhZGlzYWJsZWQmJnNjZW5lIT09MlwiLS0+XHJcbiAgICAgICAgICAgIDxGaWVsZFxyXG4gICAgICAgICAgICAgICAgICAgIHYtYmluZD1cIiRhdHRyc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PVwidHJ1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgOmVycm9yLW1lc3NhZ2U9XCJlcnJvcnNbMF1cIlxyXG4gICAgICAgICAgICAgICAgICAgIDp2YWx1ZT1cImZpZWxkVmFsXCJcclxuICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJvbkFkZHJlc3NcIlxyXG4gICAgICAgICAgICAgICAgICAgIDppbnB1dC1hbGlnbj1cImlucHV0QWxpZ25cIlxyXG4gICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cIltpc0VuZCA/ICdib3QtYm9yJyA6ICcnLCRhdHRycy5sYWJlbEFsaWduID09PSAndG9wJyA/ICdqc29udnVlLWZsZXgtY29sdW1uJyA6ICcnXVwiXHJcblxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgI2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmllbGQtY29tbW9uX19sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIDpjbGFzcz1cIiBpc0JvbGQgPyAnZm9udC1ib2xkJyA6ICcnIFwiPnt7JGF0dHJzLmxhYmVsfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPEZpZWxkVGlwIHYtaWY9XCJ0aXAgJiYgdGlwTG9jYXRpb24gPT09ICdyaWdodCdcIiBjbGFzcz1cImZpZWxkLWNvbW1vbl9fbGFiZWwtdGlwXCIgIDp0aXA9XCJ0aXBcIj48L0ZpZWxkVGlwPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgICAgICAgICA8ZGl2ICBzbG90PVwiYnV0dG9uXCIgc3R5bGU9XCJkaXNwbGF5OiBmbGV4O2FsaWduLWl0ZW1zOiBjZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBAY2xpY2suc3RvcD1cIm9uRGVsZXRlXCIgdi1pZj1cIiBzY2VuZSE9PTIgJiYgIWRpc2FibGVkICYmIGZpZWxkVmFsIFwiID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0eHQtYWxsXCIgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbmZvbnQgaWNvbi1zaGFuY2h1XCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cInBhZGRpbmctbGVmdDogMnB4XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJ0eHQtYWxsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj1cInNjZW5lICE9PSAyICYmICFkaXNhYmxlZFwiXHJcbiAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiBuYW1lPVwiYXJyb3dcIj48L0ljb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L0ZpZWxkPlxyXG4gICAgICAgICAgICA8ZGl2IHYtaWY9XCJ0aXAgJiYgdGlwTG9jYXRpb24gPT09ICdib3R0b20nXCIgY2xhc3M9XCJmaWVsZC1jb21tb25fX2xhYmVsLXRpcF9fYm90dG9tXCI+XHJcbiAgICAgICAgICAgICAge3t0aXB9fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1ZhbGlkYXRpb25Qcm92aWRlcj5cclxuICAgICAgICA8UG9wdXBcclxuICAgICAgICAgICAgdi1tb2RlbD1cInNob3dcIlxyXG4gICAgICAgICAgICBwb3NpdGlvbj1cImJvdHRvbVwiXHJcbiAgICAgICAgICAgIGdldC1jb250YWluZXI9XCIjYXBwXCJcclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxEb21lc3RpY0NpdHkgOmFyZWE9XCJhZGRyZXNzTGlzdFwiIDpzZWxlY3RMZXZlbD1cInNlbGVjdExldmVsXCIgIEBjb25maXJtPVwib25Db25maXJtXCI+PC9Eb21lc3RpY0NpdHk+XHJcbiAgICAgICAgPC9Qb3B1cD5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGltcG9ydCB7RmllbGQsQXJlYSxQb3B1cCxJY29ufSBmcm9tICd2YW50J1xyXG4gICAgaW1wb3J0IHtjaXR5c30gZnJvbSBcIi4uL3V0aWxzL2NpdHlzXCI7XHJcbiAgICBpbXBvcnQgRG9tZXN0aWNDaXR5IGZyb20gXCIuL0RvbWVzdGljQ2l0eS52dWVcIlxyXG4gICAgaW1wb3J0IHtjbG9uZURlZXB9IGZyb20gJ2xvZGFzaCdcclxuICAgIGltcG9ydCB7Y29tbW9uTGFiZWxNaXhpbn0gZnJvbSBcIi4uL21peGlucy9jb21tb25MYWJlbE1peGluXCI7XHJcbiAgICBpbXBvcnQgRmllbGRUaXAgZnJvbSBcIi4uL0ZpZWxkVGlwLnZ1ZVwiO1xyXG5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBuYW1lOidGaWVsZEFkZHJlc3MnLFxyXG4gICAgICAgIGNvbXBvbmVudHM6IHtGaWVsZCxBcmVhLFBvcHVwLERvbWVzdGljQ2l0eSxGaWVsZFRpcCxJY29ufSxcclxuICAgICAgICBtaXhpbnM6W2NvbW1vbkxhYmVsTWl4aW5dLFxyXG4gICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgY3VycmVudFNlbGVjdDoge1xyXG4gICAgICAgICAgdHlwZTpbT2JqZWN0LCBTdHJpbmcsIE51bWJlciwgQXJyYXldLFxyXG4gICAgICAgICAgZGVmYXVsdDooKT0+e31cclxuICAgICAgICB9LFxyXG4gICAgICAgIHZhbGlkYXRlUnVsZXM6e1xyXG4gICAgICAgICAgICB0eXBlOk9iamVjdCxcclxuICAgICAgICAgICAgZGVmYXVsdDooKT0+e31cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRpc2FibGVkOntcclxuICAgICAgICAgIHR5cGU6Qm9vbGVhbixcclxuICAgICAgICAgIGRlZmF1bHQ6ZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzRW5kOntcclxuICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy/nu4Tku7bnirbmgIEgMCDliJvlu7ogMSDnvJbovpEgMiDor6bmg4VcclxuICAgICAgICBzY2VuZTp7XHJcbiAgICAgICAgICB0eXBlOltTdHJpbmcsTnVtYmVyXSxcclxuICAgICAgICAgIGRlZmF1bHQ6JzEnXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvL+ecgeW4guWOv+mAieaLqee6p+WIqyAxKOWPquiDvemAieaLqeecgSksMu+8iOWPquiDvemAieaLqeW4gu+8iSwz77yI5Y+q6IO96YCJ5oup5Y6/77yJXHJcbiAgICAgICAgc2VsZWN0TGV2ZWw6e1xyXG4gICAgICAgICAgdHlwZTpbU3RyaW5nLE51bWJlcl0sXHJcbiAgICAgICAgICBkZWZhdWx0OjNcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8v55yB5biC5Y6/6YCJ5oup57qn5Yir5Li6MuaIluiAhTPml7Yg5piv5ZCm5pi+56S655yB5Lu95ZCN56ew6buY6K6k5pi+56S6XHJcbiAgICAgICAgc2hvd1Byb3ZpbmNlTmFtZTp7XHJcbiAgICAgICAgICAgIHR5cGU6Qm9vbGVhbixcclxuICAgICAgICAgICAgZGVmYXVsdDpmYWxzZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5wdXRBbGlnbjp7XHJcbiAgICAgICAgICB0eXBlOlN0cmluZyxcclxuICAgICAgICAgIGRlZmF1bHQ6J3JpZ2h0J1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0sXHJcbiAgICAgICAgZGF0YSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHNob3c6ZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzTGlzdDpjaXR5cy5BcmVhTGlzdCxcclxuICAgICAgICAgICAgICAgIHJ1bGVzOmNsb25lRGVlcCh0aGlzLnZhbGlkYXRlUnVsZXMpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21wdXRlZDoge1xyXG4gICAgICAgICAgICBmaWVsZFZhbCgpIHtcclxuICAgICAgICAgICAgICAgIC8qIOWtl+autemAieaLqeeahG5hbWUgKi9cclxuICAgICAgICAgICAgICAgIGxldCBuYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5jdXJyZW50U2VsZWN0ID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lID0gdGhpcy5jdXJyZW50U2VsZWN0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lID0gKHRoaXMuY3VycmVudFNlbGVjdCB8fCB7fSkubmFtZSB8fCBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGluaGVyaXRBdHRyczogZmFsc2UsXHJcbiAgICAgICAgbW9kZWw6IHtcclxuICAgICAgICAgICAgcHJvcDogXCJjdXJyZW50U2VsZWN0XCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHdhdGNoOiB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRTZWxlY3Q6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLyog55uR5ZCs5YC85Y+Y5YyW77yM6Kem5Y+R6L+U5ZueICovXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdChcIm9uU2VsZWN0XCIsIHRoaXMuY3VycmVudFNlbGVjdCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGVlcDogdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgIG9uQWRkcmVzcygpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjZW5lID09PSAyIHx8IHRoaXMuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3cgPSB0cnVlXHJcbiAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ29uZmlybSh2YWx1ZSl7XHJcbiAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmaWVsZEFkZHJlc3NDb25maXJtVmFsdWU6Jyx2YWx1ZSlcclxuICAgICAgICAgICAgICAgdGhpcy5zaG93PWZhbHNlXHJcbiAgICAgICAgICAgICAgIGNvbnN0IGxldmVsID0gdGhpcy5zZWxlY3RMZXZlbCArIFwiXCJcclxuICAgICAgICAgICAgICAgbGV0IHByb3ZpbmNlTmFtZSA9IHR5cGVvZiB2YWx1ZVswXSA9PT0gJ29iamVjdCcgPyB2YWx1ZVswXS5uYW1lIDogJydcclxuICAgICAgICAgICAgICAgbGV0IGNpdHlOYW1lID0gdHlwZW9mIHZhbHVlWzFdID09PSAnb2JqZWN0JyYmIHBhcnNlSW50KGxldmVsKSA+IDEgJiYgdmFsdWVbMV0ubmFtZSA/IHZhbHVlWzFdLm5hbWU6ICcnXHJcbiAgICAgICAgICAgICAgIGxldCBkaXN0aW5jdE5hbWUgPSB0eXBlb2YgdmFsdWVbMl0gPT09ICdvYmplY3QnICYmICBwYXJzZUludChsZXZlbCkgPiAyICYmIHZhbHVlWzJdLm5hbWUgPyB2YWx1ZVsyXS5uYW1lOiAnJ1xyXG4gICAgICAgICAgICAgICBsZXQgbmFtZSA9IFwiXCJcclxuXHJcblxyXG4gICAgICAgICAgICAgICBsZXQgcHJvdmluY2VDb2RlID0gdHlwZW9mIHZhbHVlWzBdID09PSAnb2JqZWN0JyA/IHZhbHVlWzBdLmlkIDogJydcclxuICAgICAgICAgICAgICAgbGV0IGNpdHlDb2RlID0gdHlwZW9mIHZhbHVlWzFdID09PSAnb2JqZWN0JyAmJiBwYXJzZUludChsZXZlbCkgPiAxICYmIHZhbHVlWzFdLmlkID8gXCIsXCIrdmFsdWVbMV0uaWQgOiAnJ1xyXG4gICAgICAgICAgICAgICBsZXQgZGlzdGluY3RDb2RlID0gdHlwZW9mIHZhbHVlWzJdID09PSAnb2JqZWN0JyAmJiAgcGFyc2VJbnQobGV2ZWwpID4gMiAgJiYgdmFsdWVbMl0uaWQgPyBcIixcIit2YWx1ZVsyXS5pZCA6ICcnXHJcblxyXG4gICAgICAgICAgICAgICBsZXQgaWQgPSBcIlwiXHJcbiAgICAgICAgICAgICAgIGlmKGxldmVsID09PSAnMScpe1xyXG4gICAgICAgICAgICAgICAgIG5hbWUgPSBwcm92aW5jZU5hbWVcclxuICAgICAgICAgICAgICAgICBpZCA9IHByb3ZpbmNlQ29kZVxyXG4gICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICBuYW1lID0gY2l0eU5hbWUrZGlzdGluY3ROYW1lXHJcbiAgICAgICAgICAgICAgICAgbmFtZSA9ICggdGhpcy5zaG93UHJvdmluY2VOYW1lICYmIHByb3ZpbmNlTmFtZSAhPT0gY2l0eU5hbWUgKSA/IHByb3ZpbmNlTmFtZSArIG5hbWUgOiBuYW1lXHJcbiAgICAgICAgICAgICAgICAgaWQgPSBwcm92aW5jZUNvZGUrY2l0eUNvZGUrZGlzdGluY3RDb2RlXHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgbGV0IHNlbGVjdEFkZHJlc3MgPSB7IG5hbWUsIGlkIH1cclxuICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnb25DZWxsJyxzZWxlY3RBZGRyZXNzKVxyXG4gICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsc2VsZWN0QWRkcmVzcylcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25EZWxldGUoKXtcclxuICAgICAgICAgICAgICAgIGxldCBuYW1lID0nJ1xyXG4gICAgICAgICAgICAgICAgbGV0IGlkID0nJ1xyXG4gICAgICAgICAgICAgICAgbGV0IHNlbGVjdEFkZHJlc3MgPSB7IG5hbWUsaWQgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnb25UcmVlJyxzZWxlY3RBZGRyZXNzKVxyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLHNlbGVjdEFkZHJlc3MpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb3VudGVkKCkge30sXHJcbiAgICAgICAgZGVzdHJveWVkKCkge31cclxuICAgIH07XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz0nc2Nzcyc+XHJcbiAgICAuYm90LWJvcntcclxuICAgICAgICBib3JkZXItYm90dG9tOiAwcHg7XHJcbiAgICB9XHJcbjwvc3R5bGU+XHJcbiIsImltcG9ydCBGaWVsZEFkZHJlc3MgZnJvbSAnLi9GaWVsZEFkZHJlc3MudnVlJ1xyXG5cclxuRmllbGRBZGRyZXNzLmluc3RhbGwgPSBmdW5jdGlvbihWdWUpe1xyXG4gICAgVnVlLmNvbXBvbmVudChGaWVsZEFkZHJlc3MubmFtZSxGaWVsZEFkZHJlc3MpXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgRmllbGRBZGRyZXNzIiwiPCEtLeeCueWHu+WxleekuuWHumNoZWNrQm945YiX6KGoLS0+XHJcbjx0ZW1wbGF0ZT5cclxuICAgIDxkaXY+XHJcbiAgICAgICAgPFZhbGlkYXRpb25Qcm92aWRlciA6bmFtZT1cImZpZWxkTGFiZWxcIiA6cnVsZXM9XCJydWxlc1wiIHYtc2xvdD1cIntlcnJvcnN9XCIgPlxyXG4gICAgICAgICAgICA8IS0t6buY6K6kLS0+XHJcbiAgICAgICAgICAgICAgICAgPEZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgdi1iaW5kPVwiJGF0dHJzXCJcclxuICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9XCJ0cnVlXCJcclxuICAgICAgICAgICAgICAgICAgICA6dmFsdWU9XCJmaWVsZFZhbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwib25DbGlja1wiXHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJhYmxlXHJcbiAgICAgICAgICAgICAgICAgICA6ZXJyb3ItbWVzc2FnZT1cImVycm9yc1swXVwiXHJcbiAgICAgICAgICAgICAgICAgICA6aW5wdXQtYWxpZ249XCJpbnB1dEFsaWduXCJcclxuICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cIltpc0VuZCA/ICdib3QtYm9yJyA6ICcnLCRhdHRycy5sYWJlbEFsaWduID09PSAndG9wJyA/ICdqc29udnVlLWZsZXgtY29sdW1uJyA6ICcnXVwiXHJcblxyXG4gICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSAjbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmaWVsZC1jb21tb25fX2xhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gOmNsYXNzPVwiIGlzQm9sZCA/ICdmb250LWJvbGQnIDogJycgXCI+e3skYXR0cnMubGFiZWx9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8RmllbGRUaXAgdi1pZj1cInRpcCAmJiB0aXBMb2NhdGlvbiA9PT0gJ3JpZ2h0J1wiIGNsYXNzPVwiZmllbGQtY29tbW9uX19sYWJlbC10aXBcIiAgOnRpcD1cInRpcFwiPjwvRmllbGRUaXA+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgICAgIDxkaXYgIHNsb3Q9XCJidXR0b25cIiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7YWxpZ24taXRlbXM6IGNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgIEBjbGljay5zdG9wPVwib25EZWxldGVcIiB2LWlmPVwic2hvd0RlbGV0ZUljb25cIiA+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInR4dC1hbGxcIiA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbmZvbnQgaWNvbi1zaGFuY2h1XCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwicGFkZGluZy1sZWZ0OiAycHhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwidHh0LWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj1cInNjZW5lIT09MiAmJiAhZGlzYWJsZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEljb24gbmFtZT1cImFycm93XCI+PC9JY29uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvRmllbGQ+XHJcbiAgICAgICAgICAgICAgICAgPHNsb3QgY2xhc3M9XCJ0aXAtaW5mb1wiIG5hbWU9XCJ0aXBcIj5cclxuICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cInRpcCAmJiB0aXBMb2NhdGlvbiA9PT0gJ2JvdHRvbSdcIiBjbGFzcz1cImZpZWxkLWNvbW1vbl9fbGFiZWwtdGlwX19ib3R0b21cIj5cclxuICAgICAgICAgICAgICAgICAgICAge3t0aXB9fVxyXG4gICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgPC9zbG90PlxyXG4gICAgICAgIDwvVmFsaWRhdGlvblByb3ZpZGVyPlxyXG4gICAgICAgIDxQb3B1cFxyXG4gICAgICAgICAgICAgICAgdi1tb2RlbD1cInNob3dcIlxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb249XCJyaWdodFwiXHJcbiAgICAgICAgICAgICAgICBnZXQtY29udGFpbmVyPVwiI2FwcFwiXHJcbiAgICAgICAgICAgICAgICA6c3R5bGU9XCJ7IHdpZHRoOiBpc1R5cGU9PT0ncXVvdGEnPycxMDAlJzonOTAlJyxoZWlnaHQ6JzEwMCUnIH1cIlxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImpzb252dWUtcGFnZVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNlbGVjdC1oZCB2YW4taGFpcmxpbmUtLWJvdHRvbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbmxpbmUtZmxleCBmbGV4LW1pZGRsZVwiIEBjbGljaz1cIm9uQ2xvc2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEljb24gbmFtZT1cImFycm93LWxlZnRcIiAvPjxzcGFuPui/lOWbnjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhbi1pbmZvLXRpdGxlXCI+6K+36YCJ5oupe3tmaWVsZExhYmVsfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+Jm5ic3A7PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8U2VhcmNoIEBpbnB1dD1cIm9uU2VhcmNoXCIgdi1tb2RlbD1cInNlYXJjaFZhbFwiIGNsZWFyYWJsZSBzaG93LWFjdGlvbiBwbGFjZWhvbGRlcj1cIuivt+i+k+WFpeaQnOe0ouWFs+mUruivjVwiIEBjbGVhcj1cIm9uUmVmcmVzaFwiIGJhY2tncm91bmQ9XCIjZjVmNWY1XCI+XHJcbiAgICAgICAgICAgICAgICA8L1NlYXJjaD5cclxuICAgICAgICAgICAgICAgIDxMb2FkaW5nIGNsYXNzPVwianNvbnZ1ZS1sb2FkaW5nMSBmbGV4IHZhbi1yb3ctLWp1c3RpZnktY2VudGVyXCIgdi1pZj1cImxvYWRpbmdcIiAvPlxyXG4gICAgICAgICAgICAgICAgPGRpdiB2LWVsc2UgY2xhc3M9XCJqc29udnVlLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJzaG93Tm9SZXN1bHRcIiBjbGFzcz1cImZsZXgtY2VudGVyIGZsZXgtbWlkZGxlIGZsZXgxXCIgc3R5bGU9XCJoZWlnaHQ6IDEwMCVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImpzb252dWUtYnRuIGlubmVyIG1sMTAgbXIxMCBcIiA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwib24tcmVzdWx0XCI+5pCc57Si57uT5p6c5Li656m6PC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXhcIiA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzcz1cImZsZXgxXCIgIHBsYWluIHR5cGU9XCJpbmZvXCIgQGNsaWNrPVwib25BZGRIYW5kbGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+K+a3u+WKoHt7JGF0dHJzLmxhYmVsfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJhZGlvR3JvdXAgdi1lbHNlIHYtbW9kZWw9XCJyZXN1bHRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwic2VsZWN0LWxpc3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQdWxsUmVmcmVzaFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cInB1bGxSZWZyZXNoXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEByZWZyZXNoPVwib25SZWZyZXNoXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwiZGF0YUxvYWRpbmdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZmluaXNoZWQ9XCJmaW5pc2hlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBsb2FkPVwib25Mb2FkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSB2LWZvcj1cIihpdGVtLGluZGV4KSBpbiBzZWFyY2hUcmVlXCIgOmtleT1cImluZGV4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGV2ZWwxXCIgIEBjbGljay5zdG9wPVwidG9nZ2xlKGl0ZW0uaWQpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDZWxsICBjbGlja2FibGUgOnRpdGxlPVwiaXRlbS5uYW1lXCIgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2xvdCB2LWlmPVwidXNlSXRlbVNsb3RcIiBuYW1lPVwiaXRlbVNsb3RcIiBzbG90PVwidGl0bGVcIiA6cm93PVwiaXRlbVwiPiA8L3Nsb3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSYWRpbyAgc2xvdD1cInJpZ2h0LWljb25cIiA6bmFtZT1cIml0ZW0uaWRcIiBAY2xpY2s9XCIxXCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9MaXN0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9QdWxsUmVmcmVzaD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj1cImNvbmZpZ05hbWUgPT09ICdjYXJkUmVjb3JkQ29uZmlnJ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiY2FyZC1idG4tdmlld1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT1cImluZm9cIiBzaXplPVwic21hbGxcIiBAY2xpY2s9XCJlbnRlckNhcmRTZWFyY2hcIj7mtYHmsLTmn6Xor6I8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUmFkaW9Hcm91cD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1BvcHVwPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5pbXBvcnQge0J1dHRvbiwgQ2VsbCwgRmllbGQsIEljb24sIExpc3QsIExvYWRpbmcsIFBvcHVwLCBQdWxsUmVmcmVzaCwgUmFkaW8sIFJhZGlvR3JvdXAsIFNlYXJjaH0gZnJvbSAndmFudCdcclxuaW1wb3J0IHtjbG9uZURlZXAsIGlzRW1wdHl9IGZyb20gXCJsb2Rhc2hcIjtcclxuaW1wb3J0IEZpZWxkVGlwIGZyb20gXCIuLi9GaWVsZFRpcC52dWVcIjtcclxuaW1wb3J0IHtjb21tb25MYWJlbE1peGlufSBmcm9tIFwiLi4vbWl4aW5zL2NvbW1vbkxhYmVsTWl4aW5cIjtcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6IFwiRmllbGRDaGVja0JveFNlbGVjdFwiLFxyXG4gICAgICAgIGNvbXBvbmVudHM6IHtQb3B1cCxGaWVsZCxJY29uLFNlYXJjaCxSYWRpb0dyb3VwLFJhZGlvLENlbGwsUHVsbFJlZnJlc2gsTGlzdCxCdXR0b24sTG9hZGluZyxGaWVsZFRpcCAgfSxcclxuICAgICAgICBtaXhpbnM6W2NvbW1vbkxhYmVsTWl4aW5dLFxyXG4gICAgICAgIGRhdGEoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHNlYXJjaFZhbDogXCJcIixcclxuICAgICAgICAgICAgICAgIHNlbGVjdERhdGE6IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgbG9hZGluZzp0cnVlLFxyXG4gICAgICAgICAgICAgICAgcHVsbFJlZnJlc2g6ZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBkYXRhTG9hZGluZzpmYWxzZSxcclxuICAgICAgICAgICAgICAgIGZpbmlzaGVkOmZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2U6MSxcclxuICAgICAgICAgICAgICAgIHBhZ2VTaXplOjMwLFxyXG4gICAgICAgICAgICAgICAgcnVsZXM6Y2xvbmVEZWVwKHRoaXMudmFsaWRhdGVSdWxlcyksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmhlcml0QXR0cnM6IGZhbHNlLFxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIHByb3A6IFwiY3VycmVudFNlbGVjdFwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgY3VycmVudFNlbGVjdDogW09iamVjdCwgQXJyYXksIFN0cmluZywgTnVtYmVyXSxcclxuICAgICAgICAgICAgcG9zdERhdGE6e1xyXG4gICAgICAgICAgICAgICAgdHlwZTpbU3RyaW5nLE9iamVjdF0sXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OigpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUluZm86e31cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBvc3RVcmw6IFN0cmluZyxcclxuICAgICAgICAgICAgc2NlbmU6e1xyXG4gICAgICAgICAgICAgIHR5cGU6W1N0cmluZyxOdW1iZXJdLFxyXG4gICAgICAgICAgICAgIGRlZmF1bHQ6MVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB2YWxpZGF0ZVJ1bGVzOk9iamVjdCxcclxuICAgICAgICAgICAgLy/moLflvI/nsbvlnotcclxuICAgICAgICAgICAgY29uZmlnTmFtZTp7XHJcbiAgICAgICAgICAgICAgICB0eXBlOlN0cmluZyxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6JydcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGlzYWJsZWQ6Qm9vbGVhbixcclxuICAgICAgICAgICAgYWRkQWJsZTp7XHJcbiAgICAgICAgICAgICAgICB0eXBlOkJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OmZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8v5piv5ZCm5Li656ys5LqM55WM6Z2i5YWD57SgXHJcbiAgICAgICAgICAgIGlzU2Vjb25kUGFnZTpCb29sZWFuLFxyXG4gICAgICAgICAgICBpc0VuZDp7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXNUeXBlOntcclxuICAgICAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICcnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8v5piv5ZCm5L2/55So6Ieq5a6a5LmJ5YiX6KGo6aG55bGV56S6U2xvdFxyXG4gICAgICAgICAgICB1c2VJdGVtU2xvdDp7XHJcbiAgICAgICAgICAgICAgdHlwZTpCb29sZWFuLFxyXG4gICAgICAgICAgICAgIGRlZmF1bHQ6ZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy/ngrnlh7vlsZXlvIDliJfooajml7bmmK/lkKbliLfmlrDpobXpnaIg6buY6K6k5LiN5Yi35paw5pyJ5YC855qE5oOF5Ya15LiLXHJcbiAgICAgICAgICAgIHJlZnJlc2hXaGVuQ2xpY2s6e1xyXG4gICAgICAgICAgICAgIHR5cGU6Qm9vbGVhbixcclxuICAgICAgICAgICAgICBkZWZhdWx0OmZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgaW5wdXRBbGlnbjp7XHJcbiAgICAgICAgICAgICAgdHlwZTpTdHJpbmcsXHJcbiAgICAgICAgICAgICAgZGVmYXVsdDoncmlnaHQnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIGFjdGl2YXRlZCgpe1xyXG4gICAgICAgIC8vICAgICBpZih0aGlzLmNvbmZpZ05hbWU9PT0nY2FyZFJlY29yZENvbmZpZycpe1xyXG4gICAgICAgIC8vICAgICAgICAgdGhpcy5vblJlZnJlc2goKVxyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICBjb21wdXRlZDoge1xyXG4gICAgICAgICAgICAvL+aYr+WQpuaYvuekuuWIoOmZpOWbvuagh1xyXG4gICAgICAgICAgICBzaG93RGVsZXRlSWNvbigpe1xyXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjZW5lIT09MiAmJiAhIHRoaXMuZGlzYWJsZWQgJiYgdGhpcy5maWVsZFZhbFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWx0ZXJMaXN0U2hvdygpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChpdGVtKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBydG49dHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuYWRkTmV3UGFyYW1zLkZpZWxkVHJlZSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZE5ld1BhcmFtcy5GaWVsZFRyZWUuc2VyaWFsTnVtYmVyLmZvckVhY2goZWw9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5uYW1lPT09ZWwpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnRuPWZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2hvd05vUmVzdWx0KCl7XHJcbiAgICAgICAgICAgICAgbGV0IHNob3dOb1Jlc3VsdCA9ICh0aGlzLnB1bGxSZWZyZXNoPT09ZmFsc2UpJiZ0aGlzLmFkZEFibGUmJiFpc0VtcHR5KHRoaXMuc2VhcmNoVmFsKSYmKHRoaXMuc2VsZWN0RGF0YS5sZW5ndGg9PT0wKVxyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2hvd0FkZFwiLHNob3dOb1Jlc3VsdClcclxuICAgICAgICAgICAgICByZXR1cm4gc2hvd05vUmVzdWx0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlYXJjaFRyZWUoKSB7XHJcbiAgICAgICAgICAgICAgLyog5pu05pawc2VhcmNo5YiX6KGoICovXHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9UcmVlKHRoaXMuc2VsZWN0RGF0YSlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmllbGRJZCgpIHtcclxuICAgICAgICAgICAgICAgIC8qIOiOt+WPlmlkICovXHJcbiAgICAgICAgICAgICAgICBsZXQgaWQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmN1cnJlbnRTZWxlY3QgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkID0gdGhpcy5jdXJyZW50U2VsZWN0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZCA9IHRoaXMuY3VycmVudFNlbGVjdC5pZCB8fCBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWVsZFZhbCgpIHtcclxuICAgICAgICAgICAgICAgIC8qIOiOt+WPlm5hbWUgKi9cclxuICAgICAgICAgICAgICAgIGxldCBuYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5jdXJyZW50U2VsZWN0ID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lID0gdGhpcy5jdXJyZW50U2VsZWN0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lID0gKHRoaXMuY3VycmVudFNlbGVjdCB8fCB7fSkubmFtZSB8fCBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpZWxkTGFiZWwoKXtcclxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kYXR0cnMubGFiZWxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgICBlbnRlckNhcmRTZWFyY2goKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtwYXRoOicvQ2FyZFJlY29yZFNlYXJjaCd9KVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkNsb3NlKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3c9ZmFsc2VcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1NlY29uZFBhZ2Upe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJG5hdGl2ZUFwaSYmdGhpcy4kbmF0aXZlQXBpLkpTT05WVUVfQXBwR2VzdHVyZUlmRm9yYmlkKHtpc0ZvcmJpZDoxfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25TaG93KCl7XHJcbiAgICAgICAgICAgICAgdGhpcy5zaG93ID0gdHJ1ZVxyXG4gICAgICAgICAgICAgIGlmKCF0aGlzLmlzU2Vjb25kUGFnZSl7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuJG5hdGl2ZUFwaSYmdGhpcy4kbmF0aXZlQXBpLkpTT05WVUVfQXBwR2VzdHVyZUlmRm9yYmlkKHtpc0ZvcmJpZDowfSlcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8v5omL5Yqo5re75YqgXHJcbiAgICAgICAgICAgIG9uQWRkSGFuZGxlKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KFwiaW5wdXRcIix7bmFtZTp0aGlzLnNlYXJjaFZhbH0pXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2xvc2UoKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkRlbGV0ZSgpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnb25UcmVlJyx7aWQ6XCJcIixuYW1lOicnLGlzRGVsZXRlOnRydWV9KVxyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLHtpZDpcIlwiLG5hbWU6XCJcIn0pXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8v5pCc57SiXHJcbiAgICAgICAgICAgIG9uU2VhcmNoKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uUmVmcmVzaCgpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uTG9hZChyZWZyZXNoID0gZmFsc2Upe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhTG9hZGluZyA9IHRydWVcclxuICAgICAgICAgICAgICAgIGxldCBkYXRhID0gdGhpcy5wb3N0RGF0YVxyXG4gICAgICAgICAgICAgICAgZGF0YS5wYWdlSW5mby5jdXJyZW50UGFnZSA9IHRoaXMuY3VycmVudFBhZ2VcclxuICAgICAgICAgICAgICAgIGRhdGEubmFtZSA9IHRoaXMuc2VhcmNoVmFsXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaXRlbVNlYXJjaERhdGEnLGRhdGEpXHJcbiAgICAgICAgICAgICAgICAvLyDlsIblnLDlnYDlkI7pnaLlj4LmlbDop6PmnpDmiJDlr7nosaHvvIznlJ/miJDmlrDnmoTlnLDlnYDlkozor7fmsYLmjqXlj6NcclxuICAgICAgICAgICAgICAgIHRoaXMuJGdldCh0aGlzLnBvc3RVcmwpLnRoZW4ocmVwcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXBzXCIscmVwcylcclxuICAgICAgICAgICAgICAgICAgICByZXBzID0gcmVwcy5kYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgcmVwcy5pbmZvID0gcmVwcy5yZXN1bHQgfHwgcmVwcy5saXN0IHx8IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY29yZHMgPSBbXVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCByZXBzLmluZm8gaW5zdGFuY2VvZiBBcnJheSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZHMgPSByZXBzLmluZm9cclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZihyZXBzLnJlY29yZHMgaW5zdGFuY2VvZiBBcnJheSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZHMgPSByZXBzLnJlY29yZHNcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZHMgPSByZXBzLmluZm8ucmVjb3Jkc1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVwc0RhdGEgPSByZWNvcmRzIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWZyZXNoKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3REYXRhID0gcmVwc0RhdGFcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0RGF0YSA9IHRoaXMuc2VsZWN0RGF0YS5jb25jYXQocmVwc0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YUxvYWRpbmcgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHVsbFJlZnJlc2ggPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UrK1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocmVwc0RhdGEgfHwgW10pLmxlbmd0aCA8IHRoaXMucGFnZVNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyPT57XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VycicsZXJyKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFMb2FkaW5nID0gIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdWxsUmVmcmVzaCA9IGZhbHNlXHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uUmVmcmVzaCgpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDFcclxuICAgICAgICAgICAgICAgIHRoaXMucHVsbFJlZnJlc2ggPSB0cnVlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0RGF0YSA9IFtdXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uTG9hZCh0cnVlKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWx0ZXJUcmVlKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlYWwobm9kZXMsIHByZWRpY2F0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOW3sue7j+ayoeacieiKgueCueS6hu+8jOe7k+adn+mAkuW9klxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKG5vZGVzICYmIG5vZGVzLmxlbmd0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdDaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJlZGljYXRlKG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDlpoLmnpzoioLngrnnrKblkIjmnaHku7bvvIznm7TmjqXliqDlhaXmlrDnmoToioLngrnpm4ZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkcmVuLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmNoaWxkcmVuID0gZGVhbChub2RlLmNoaWxkcmVuLCBwcmVkaWNhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5aaC5p6c5b2T5YmN6IqC54K55LiN56ym5ZCI5p2h5Lu277yM6YCS5b2S6L+H5ruk5a2Q6IqC54K577yMXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDmiornrKblkIjmnaHku7bnmoTlrZDoioLngrnmj5DljYfkuIrmnaXvvIzlubblhaXmlrDoioLngrnpm4ZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkcmVuLnB1c2goLi4uZGVhbChub2RlLmNoaWxkcmVuLCBwcmVkaWNhdGUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3Q2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVhbChkYXRhLCBub2RlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IChub2RlLm5hbWUgfHwgXCJcIikgKyBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlYXJjaFZhbCA9ICh0aGlzLnNlYXJjaFZhbCArIFwiXCIpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hWYWwgPSBzZWFyY2hWYWwudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZS5pbmRleE9mKHNlYXJjaFZhbCkgPiAtMTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b1RyZWUoc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IGNsb25lRGVlcChzb3VyY2UpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRhdGEuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgaXRlbS5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hcCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcFtpdGVtLmlkXSA9IGl0ZW07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGRhdGEuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGFyZW50ID0gbWFwW2l0ZW0udXBPcmdJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaXNQaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAocGFyZW50LmNoaWxkcmVuIHx8IChwYXJlbnQuY2hpbGRyZW4gPSBbXSkpLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b2dnbGUoaWQpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSBpZFxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNvbmZpcm0oKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25DbGljaygpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjZW5lID09PSAyIHx8IHRoaXMuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL+WPguaVsOWPmOabtOe7hOS7tlxyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgncGFyYW1zQ2hhbmdlJylcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5jdXJyZW50U2VsZWN0LmlkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblNob3coKVxyXG4gICAgICAgICAgICAgICAgLyog6I635Y+W6L+c56iL5pWw5o2uICovXHJcbiAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBvc3RVcmwpIHtcclxuICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVmcmVzaFdoZW5DbGljayB8fCAgQXJyYXkuaXNBcnJheSh0aGlzLnNlbGVjdERhdGEpICYmIHRoaXMuc2VsZWN0RGF0YS5sZW5ndGggPT09IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgIHRoaXMub25SZWZyZXNoKClcclxuICAgICAgICAgICAgICAgICAgIH0sMzAwKVxyXG4gICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25Db25maXJtKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNsb3NlKClcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdERhdGEuZXZlcnkoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmlkID09PSB0aGlzLnJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0geyAuLi5pdGVtIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdChcIm9uVHJlZVwiLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KFwiaW5wdXRcIiwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB3YXRjaDoge1xyXG4gICAgICAgICAgICBzaG93KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hWYWwgPSBcIlwiO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjdXJyZW50U2VsZWN0OiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLyog6Kem5Y+R5Ye95pWwICovXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICYmIG5ld1ZhbHVlLmNoYWluKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdChcIm9uVHJlZVwiLCB0aGlzLmN1cnJlbnRTZWxlY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAvKiBpbW1lZGlhdGU6IHRydWUgKi9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG48L3NjcmlwdD5cclxuPHN0eWxlICBzY29wZWQgbGFuZz1cImxlc3NcIj5cclxuICAgIC5jYXJkLWJ0bi12aWV3e1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICBwYWRkaW5nOiAxMHB4IDEwcHggMjBweCAxMHB4O1xyXG4gICAgfVxyXG4gICAgLm9uLXJlc3VsdHtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICB9XHJcbiAgICAuanNvbnZ1ZS1wYWdlIHtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICB9XHJcblxyXG4gICAgLnNlbGVjdC1oZCB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XHJcbiAgICAgICAgZm9udC1zaXplOiAxNXB4O1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbiAgICB9XHJcbiAgICAudmFuLWluZm8tdGl0bGV7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcclxuICAgICAgICB3aWR0aDogNjAlO1xyXG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgfVxyXG5cclxuICAgIC52YW4tc2VhcmNoX19jb250ZW50e1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZcclxuICAgIH1cclxuICAgIC5ib3QtYm9ye1xyXG4gICAgICAgIGJvcmRlci1ib3R0b206IDBweDtcclxuICAgIH1cclxuICAgIC5xdW90YXtcclxuICAgIC9kZWVwLy52YW4tZmllbGRfX2xhYmVse1xyXG4gICAgICAgIHdpZHRoOiAwcHg7dGV4dC1hbGlnbjogbGVmdDtcclxuICAgIH1cclxuICAgIC9kZWVwLy52YW4tY2VsbHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiAjZWVlO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDt3aWR0aDogOTklO1xyXG4gICAgfVxyXG4gICAgfVxyXG4gICAgLnRpcC1pbmZve1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xyXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDIwcHg7XHJcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDEwcHhcclxuICAgIH1cclxuXHJcbjwvc3R5bGU+XHJcbiIsImltcG9ydCBGaWVsZENoZWNrQm94U2VsZWN0IGZyb20gJy4vRmllbGRDaGVja0JveFNlbGVjdC52dWUnXHJcblxyXG5GaWVsZENoZWNrQm94U2VsZWN0Lmluc3RhbGwgPSBmdW5jdGlvbihWdWUpe1xyXG4gICAgVnVlLmNvbXBvbmVudChGaWVsZENoZWNrQm94U2VsZWN0Lm5hbWUsRmllbGRDaGVja0JveFNlbGVjdClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBGaWVsZENoZWNrQm94U2VsZWN0XHJcblxyXG4vL+WvueW6lOWOn+adpeeahOe7hOS7tkZpZWxkVHJlZVxyXG4iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2PlxyXG4gICAgICAgIDx1bCBjbGFzcz1cImRldGFpbC1saXN0IGlubmVyXCIgdi1mb3I9XCIoaXRlbSxpbmRleCkgaW4gbGlzdFNob3dcIiA6a2V5PVwiaW5kZXhcIj5cclxuICAgICAgICAgICAgPGxpIGNsYXNzPVwiZGVmYXVsdC12aWV3LWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxpLXBhZ2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpdGVtXCI+e3tpbmRleCsxfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmdFwiIDpjbGFzcz1cIntsaXN0SDohaXRlbS5leHBhbmR9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9XCIoZmllbGRJbmZvLGlkeCkgaW4gaXRlbS5saXN0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9XCJpZHhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwib25FZGl0KGluZGV4KVwiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtXCIgOmtleT1cImlkeFwiIHYtaWY9XCJmaWVsZEluZm8uZmllbGRUeXBlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWRhbmdlclwiIHYtaWY9XCJmaWVsZEluZm8ucmVxdWlyZWRcIj4qPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtZWxzZT4mbmJzcDs8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3tmaWVsZEluZm8ubGFiZWx9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7Z2V0RmllbGRWYWx1ZVNob3coZmllbGRJbmZvLmZpZWxkVmFsdWUsZmllbGRJbmZvLmZpZWxkVHlwZSl9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJpdGVtLmxpc3QubGVuZ3RoID4gM1wiIGNsYXNzPVwiZHJvcC1tb3JlXCIgQGNsaWNrPVwiaXRlbS5leHBhbmQ9IWl0ZW0uZXhwYW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCIhaXRlbS5leHBhbmRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+5bGV5byAPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiBjbGFzcz1cIm1sNVwiIG5hbWU9XCJhcnJvdy1kb3duXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPuaUtue8qTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEljb24gY2xhc3M9XCJtbDVcIiBuYW1lPVwiYXJyb3ctdXBcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9saT5cclxuICAgICAgICA8L3VsPlxyXG5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGltcG9ydCB7SWNvbn0gZnJvbSAndmFudCdcclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBuYW1lOiBcIkRlZmF1bHRWaWV3XCIsXHJcbiAgICAgICAgY29tcG9uZW50czp7SWNvbn0sXHJcbiAgICAgICAgcHJvcHM6e1xyXG4gICAgICAgICAgICBsaXN0OntcclxuICAgICAgICAgICAgICAgIHR5cGU6QXJyYXksXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0KCl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRhKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBsaXN0U2hvdzpbXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtZXRob2RzOntcclxuICAgICAgICAgICAgb25FZGl0KGluZGV4KXtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NvbW1vbkVkaXQnLGluZGV4KVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRGaWVsZFZhbHVlU2hvdyhmaWVsZFZhbHVlLHR5cGUpe1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkVmFsdWUgaW5zdGFuY2VvZiBPYmplY3Qpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlLm5hbWUgfHwgJydcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlPT09XCJkYXRlXCIgJiYgZmllbGRWYWx1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIHRoaXMuJG9wdGlvbnMuZmlsdGVycy5kdGZvcm1hdChmaWVsZFZhbHVlLFwieXl5eS1NTS1kZFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIGZpZWxkVmFsdWUgfHwgXCJcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgd2F0Y2g6e1xyXG4gICAgICAgICAgICBsaXN0OntcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIobmV3VmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdFNob3cgPSBuZXdWYWx1ZS5tYXAocGFnZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge2xpc3Q6cGFnZSxleHBhbmQ6ZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBpbW1lZGlhdGU6dHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBzY29wZWQ+XHJcblxyXG48L3N0eWxlPlxyXG4iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2PlxyXG4gICAgICA8ZGl2IHYtZm9yPVwiKGl0ZW0sa2V5KSBpbiBmaWVsZExpc3RcIiA6a2V5PVwia2V5XCI+XHJcbiAgICAgICAgPFZhbGlkYXRpb25Qcm92aWRlclxyXG4gICAgICAgICAgICB2LWlmPVwiaXRlbS5mb3JtU2xvdFwiXHJcbiAgICAgICAgICAgIDpuYW1lPVwiaXRlbS5sYWJlbFwiXHJcbiAgICAgICAgICAgIDpydWxlcz1cInsncmVxdWlyZWQnOml0ZW0ucmVxdWlyZWR9XCJcclxuICAgICAgICAgICAgdi1zbG90PVwie2Vycm9yc31cIj5cclxuICAgICAgICAgICAgICA8RmllbGRcclxuICAgICAgICAgICAgICAgICAgICAgOmxhYmVsPVwiaXRlbS5sYWJlbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgIDpyZXF1aXJlZD1cIml0ZW0ucmVxdWlyZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6ZXJyb3ItbWVzc2FnZT1cImVycm9yc1swXVwiXHJcbiAgICAgICAgICAgICAgICAgICAgIDplcnJvci1tZXNzYWdlLWFsaWduPVwiJ3JpZ2h0J1wiXHJcbiAgICAgICAgICAgICAgICAgICAgIDppbnB1dC1hbGlnbj1cIidyaWdodCdcIlxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90PVwiaW5wdXRcIj5cclxuICAgICAgICAgICAgICAgICAgPHNsb3QgOm5hbWU9XCJpdGVtLmZpZWxkTmFtZVwiIDpyb3c9XCJpdGVtXCI+PC9zbG90PlxyXG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgICA8L0ZpZWxkPlxyXG4gICAgICAgIDwvVmFsaWRhdGlvblByb3ZpZGVyPlxyXG4gICAgICAgIDxGaWVsZFRleHQgdi1lbHNlLWlmPVwiIWl0ZW0uaGlkZGVuJiYoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmZpZWxkVHlwZSA9PT0gJ3RleHQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBpdGVtLmZpZWxkVHlwZSA9PT0gJ3RleHRhcmVhJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgaXRlbS5maWVsZFR5cGUgPT09ICdpbnQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBpdGVtLmZpZWxkVHlwZSA9PT0gJ2Ftb3VudCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGl0ZW0uZmllbGRUeXBlID09PSAnbnVtYmVyJylcIlxyXG4gICAgICAgICAgICAgICAgICAgOnZhbGlkYXRlLXJ1bGVzPVwic2NlbmUhPT0yPyB7J3JlcXVpcmVkJzppdGVtLnJlcXVpcmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ2lzbW9uZXknOihpdGVtLmZpZWxkVHlwZSA9PT0gJ2Ftb3VudCc/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAoaXRlbS5maWVsZFZhbHVlLChpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lKSk6ZmFsc2UpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgLi4uaXRlbS52YWxpZGF0ZVJ1bGVzfTp7fVwiXHJcbiAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9XCJpdGVtLmRpc2FibGVkIHx8IHNjZW5lID09PSAyXCJcclxuICAgICAgICAgICAgICAgICAgIDpyZXF1aXJlZD1cIml0ZW0ucmVxdWlyZWQgJiYgc2NlbmUgIT09MlwiXHJcbiAgICAgICAgICAgICAgICAgICA6cGxhY2Vob2xkZXI9XCJpdGVtLnBsYWNlaG9sZGVyIHx8IChzY2VuZSE9PTI/YOivt+i+k+WFpSR7aXRlbS5sYWJlbCB8fCBpdGVtLmZpZWxkTmFtZX1gOicnKVwiXHJcbiAgICAgICAgICAgICAgICAgICA6bGFiZWw9XCJpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgIDp0eXBlPVwiaXRlbS50ZXh0RmllbGRUeXBlIHx8ICd0ZXh0J1wiXHJcbiAgICAgICAgICAgICAgICAgICA6ZmllbGRUeXBlPVwiaXRlbS5maWVsZFR5cGUgfHwgJ3RleHQnXCJcclxuICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJpdGVtLmZpZWxkVmFsdWVcIlxyXG4gICAgICAgICAgICAgICAgICAgOm1heGxlbmd0aD1cIml0ZW0ubWF4TGVuZ3RoXCJcclxuICAgICAgICAgICAgICAgICAgIDpzaG93LXdvcmQtbGltaXQ9XCJpdGVtLmZpZWxkVHlwZSA9PT0gJ3RleHRhcmVhJyAmJiBzY2VuZSE9PTJcIlxyXG4gICAgICAgICAgICAgICAgICAgOmF1dG9zaXplPVwiaXRlbS5maWVsZFR5cGUgPT09ICd0ZXh0YXJlYSdcIlxyXG4gICAgICAgICAgICAgICAgICAgQG9uVGV4dD1cIm9uQ2VsbCgkZXZlbnQsaXRlbSlcIlxyXG4gICAgICAgICAgICAgICAgICAgOmVycm9yLW1lc3NhZ2UtYWxpZ249XCIncmlnaHQnXCJcclxuICAgICAgICAgICAgICAgICAgIDppbnB1dC1hbGlnbj1cIidyaWdodCdcIlxyXG4gICAgICAgICAgICAgICAgICAgOnJlbWFyaz1cIml0ZW0ucmVtYXJrXCJcclxuICAgICAgICAgICAgICAgICAgIDppcy1lbmQ9XCJmaWVsZExpc3QubGVuZ3RoID09PSBrZXkrMVwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8RmllbGRTZWxlY3Qgdi1lbHNlLWlmPVwiIWl0ZW0uaGlkZGVuJiZpdGVtLmZpZWxkVHlwZSA9PT0gJ3NlbGVjdCdcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6c2NlbmU9XCJzY2VuZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJpdGVtLmZpZWxkVmFsdWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICBAcGFyYW1zQ2hhbmdlPVwib25QYXJhbXNDaGFuZ2UoaXRlbSlcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6Z2V0LXR5cGU9XCJpdGVtLmdldFR5cGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6bGFiZWw9XCJpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbi1jb2Rlcz1cIml0ZW0ub3B0aW9uQ29kZXMgfHwgW11cIlxyXG4gICAgICAgICAgICAgICAgICAgICBAb25TZWxlY3Q9XCJvbkNlbGwoJGV2ZW50LGl0ZW0pXCJcclxuICAgICAgICAgICAgICAgICAgICAgOnZhbGlkYXRlLXJ1bGVzPVwic2NlbmUhPT0yP3sncmVxdWlyZWQnOml0ZW0ucmVxdWlyZWR9Ont9XCJcclxuICAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PVwic2NlbmUhPT0xXCJcclxuICAgICAgICAgICAgICAgICAgICAgOnJlcXVpcmVkPVwiaXRlbS5yZXF1aXJlZCAmJiBzY2VuZSAhPT0yXCJcclxuICAgICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPVwic2NlbmUhPT0yPyfor7fpgInmi6knOicnXCJcclxuICAgICAgICAgICAgICAgICAgICAgOnBvc3QtdXJsPVwiaXRlbS5wb3N0VXJsXCJcclxuICAgICAgICAgICAgICAgICAgICAgOnBvc3QtZGF0YT1cIml0ZW0ucG9zdERhdGFcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgOnJlbWFyaz1cIml0ZW0ucmVtYXJrXCJcclxuICAgICAgICAgICAgICAgICAgICAgOmlzLWVuZD1cImZpZWxkTGlzdC5sZW5ndGg9PT1rZXkrMVwiXHJcbiAgICAgICAgPjwvRmllbGRTZWxlY3Q+XHJcbiAgICAgICAgPEZpZWxkQWRkcmVzcyB2LWVsc2UtaWY9XCIhaXRlbS5oaWRkZW4mJml0ZW0uZmllbGRUeXBlID09PSAnYWRkcmVzcydcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgOnZhbGlkYXRlLXJ1bGVzPVwic2NlbmUhPT0yP3sncmVxdWlyZWQnOml0ZW0ucmVxdWlyZWR9Ont9XCJcclxuICAgICAgICAgICAgICAgICAgICAgIDpyZXF1aXJlZD1cIml0ZW0ucmVxdWlyZWQgJiYgc2NlbmUgIT09MlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICA6bGFiZWw9XCJpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgIDpwbGFjZWhvbGRlcj1cInNjZW5lPT09MT9g6K+36YCJ5oupJHtpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lfWA6JydcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cIml0ZW0uZmllbGRWYWx1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBAb25DZWxsPVwib25DZWxsKCRldmVudCxpdGVtKVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgIDpyZW1hcms9XCJpdGVtLnJlbWFya1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICA6aXMtZW5kPVwiZmllbGRMaXN0Lmxlbmd0aD09PWtleSsxXCJcclxuICAgICAgICAgICAgICAgICAgICAgIDpzZWxlY3QtbGV2ZWw9XCJpdGVtLnNlbGVjdExldmVsXCJcclxuICAgICAgICAgICAgICAgICAgICAgIDpzaG93LXByb3ZpbmNlLW5hbWU9XCJpdGVtLnNob3dQcm92aW5jZU5hbWVcIlxyXG4gICAgICAgID48L0ZpZWxkQWRkcmVzcz5cclxuICAgICAgICA8RmllbGREYXRlIHYtZWxzZS1pZj1cIiFpdGVtLmhpZGRlbiYmaXRlbS5maWVsZFR5cGUgPT09ICdkYXRlJ1wiXHJcbiAgICAgICAgICAgICAgICAgICA6c2NlbmU9XCJzY2VuZVwiXHJcbiAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwiaXRlbS5maWVsZFZhbHVlXCJcclxuICAgICAgICAgICAgICAgICAgIDpsYWJlbD1cIml0ZW0ubGFiZWwgfHwgaXRlbS5maWVsZE5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgQG9uRGF0ZXRpbWU9XCJvbkNlbGwoJGV2ZW50LGl0ZW0pXCJcclxuICAgICAgICAgICAgICAgICAgIDp2YWxpZGF0ZS1ydWxlcz1cInNjZW5lIT09Mj97J3JlcXVpcmVkJzppdGVtLnJlcXVpcmVkfTp7fVwiXHJcbiAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9XCJzY2VuZSE9PTFcIlxyXG4gICAgICAgICAgICAgICAgICAgOnJlcXVpcmVkPVwiaXRlbS5yZXF1aXJlZCAmJiBzY2VuZSAhPT0yXCJcclxuICAgICAgICAgICAgICAgICAgIDpwbGFjZWhvbGRlcj1cInNjZW5lPT09MT9g6K+36L6T5YWlJHtpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lfWA6JydcIlxyXG4gICAgICAgICAgICAgICAgICAgOm1pbi1kYXRlPVwiaXRlbS5taW5EYXRlP2l0ZW0ubWluRGF0ZTonMTkwMC0wMS0wMSdcIlxyXG4gICAgICAgICAgICAgICAgICAgOm1heC1kYXRlPVwiaXRlbS5tYXhEYXRlXCJcclxuICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD1cIml0ZW0uZGlzYWJsZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgOmdldFR5cGU9XCJpdGVtLmNvbmZpZ05hbWU/aXRlbS5jb25maWdOYW1lOidZWVlZLU1NLUREJ1wiXHJcbiAgICAgICAgICAgICAgICAgICA6cmVtYXJrPVwiaXRlbS5yZW1hcmtcIlxyXG4gICAgICAgICAgICAgICAgICAgOmlzLWVuZD1cImZpZWxkTGlzdC5sZW5ndGg9PT1rZXkrMVwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8RmllbGRDaGVja0JveFNlbGVjdCB2LWVsc2UtaWY9XCIhaXRlbS5oaWRkZW4gJiYgaXRlbS5maWVsZFR5cGU9PT0ndHJlZSdcIlxyXG4gICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cIml0ZW0uZmllbGRWYWx1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICA6bGFiZWw9XCJpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgIDpzY2VuZT1cInNjZW5lXCJcclxuICAgICAgICAgICAgICAgICAgIDpjb25maWctbmFtZT1cIml0ZW0uY29uZmlnLmNvbmZpZ05hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgOnZhbGlkYXRlLXJ1bGVzPVwic2NlbmUhPT0yP3sncmVxdWlyZWQnOml0ZW0ucmVxdWlyZWR9Ont9XCJcclxuICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT1cInNjZW5lIT09MVwiXHJcbiAgICAgICAgICAgICAgICAgICA6cmVxdWlyZWQ9XCJpdGVtLnJlcXVpcmVkICYmIHNjZW5lICE9PTJcIlxyXG4gICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPVwic2NlbmUhPT0yP2Dor7fpgInmi6kke2l0ZW0ubGFiZWwgfHwgaXRlbS5maWVsZE5hbWV9YDonJ1wiXHJcbiAgICAgICAgICAgICAgICAgICA6cG9zdC11cmw9XCJpdGVtLnBvc3RVcmxcIlxyXG4gICAgICAgICAgICAgICAgICAgOnBvc3QtZGF0YT1cIml0ZW0ucG9zdERhdGFcIlxyXG4gICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPVwiaXRlbS5kaXNhYmxlZFwiXHJcbiAgICAgICAgICAgICAgICAgICA6YWRkLWFibGU9XCIoaXRlbS5jb25maWcuYWRkQWJsZSA9PT0gJ3RydWUnIHx8IGZhbHNlKVwiXHJcbiAgICAgICAgICAgICAgICAgICBAb25UcmVlPVwib25DZWxsKCRldmVudCxpdGVtKVwiXHJcbiAgICAgICAgICAgICAgICAgICBAcGFyYW1zQ2hhbmdlPVwib25QYXJhbXNDaGFuZ2UoaXRlbSlcIlxyXG4gICAgICAgICAgICAgICAgICAgOmlzU2Vjb25kUGFnZT1cImlzU2Vjb25kUGFnZVwiXHJcbiAgICAgICAgICAgICAgICAgICA6cmVtYXJrPVwiaXRlbS5yZW1hcmtcIlxyXG4gICAgICAgICAgICAgICAgICAgOmlzLWVuZD1cImZpZWxkTGlzdC5sZW5ndGg9PT1rZXkrMVwiXHJcbiAgICAgICAgLz5cclxuICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmltcG9ydCBGaWVsZFRleHQgZnJvbSBcIi4vRmllbGRUZXh0XCI7XHJcbmltcG9ydCBGaWVsZEFkZHJlc3MgZnJvbSBcIi4vRmllbGRBZHJlc3NcIjtcclxuaW1wb3J0IEZpZWxkRGF0ZSBmcm9tIFwiLi9GaWVsZERhdGVcIjtcclxuaW1wb3J0IEZpZWxkU2VsZWN0IGZyb20gXCIuL0ZpZWxkU2VsZWN0dFwiO1xyXG5pbXBvcnQgRmllbGRDaGVja0JveFNlbGVjdCBmcm9tIFwiLi9GaWVsZENoZWNrQm94U2VsZWN0XCI7XHJcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAndmFudCdcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTonTW9kdWxlRmllbGROb0NydWQnLFxyXG4gICAgY29tcG9uZW50czp7RmllbGRTZWxlY3QsRmllbGRUZXh0LEZpZWxkQ2hlY2tCb3hTZWxlY3QsRmllbGREYXRlLEZpZWxkQWRkcmVzcyxGaWVsZCx9LFxyXG4gICAgcHJvcHM6e1xyXG4gICAgICAvL+Wtl+auteWIl+ihqFxyXG4gICAgICBmaWVsZExpc3Q6e1xyXG4gICAgICAgIHR5cGU6QXJyYXksXHJcbiAgICAgICAgZGVmYXVsdDooKT0+W11cclxuICAgICAgfSxcclxuICAgICAgLy/mqKHlnZfmoIfor4ZDb2RlXHJcbiAgICAgIG1vZHVsZUNvZGU6e1xyXG4gICAgICAgIHR5cGU6U3RyaW5nLFxyXG4gICAgICAgIGRlZmF1bHQ6XCJcIlxyXG4gICAgICB9LFxyXG4gICAgICBzY2VuZToge1xyXG4gICAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXHJcbiAgICAgICAgZGVmYXVsdDogMVxyXG4gICAgICB9LFxyXG4gICAgICAvL+aYr+WQpuaYr+S6jOe6p+WtkOmhtemdolxyXG4gICAgICBpc1NlY29uZFBhZ2U6e1xyXG4gICAgICAgIHR5cGU6Qm9vbGVhbixcclxuICAgICAgICBkZWZhdWx0OmZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgZGF0YSgpe1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC8v5qih5Z2X5piv5ZCm6L+Y5Zyo5Yib5bu65LitLi4uIHRydWXmnKrliJvlu7ogZmFsc2Ug5bey5Yib5bu6XHJcbiAgICAgICAgbW9kdWxlQ3JlYXRpbmc6dHJ1ZSxcclxuICAgICAgICBtb2R1bGVPYmo6e1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtZXRob2RzOntcclxuICAgICAgb25TaW5nbGVQYWdlU2F2ZShtb2R1bGVMaXN0LHByZXZlbnQsYWN0aXZhdGVJbmRleCl7XHJcbiAgICAgICAgdGhpcy4kZW1pdCgnb25TaW5nbGVQYWdlU2F2ZScsIG1vZHVsZUxpc3QscHJldmVudCxhY3RpdmF0ZUluZGV4KVxyXG5cclxuICAgICAgfSxcclxuICAgICAgb25TaW5nbGVQYWdlUmVtb3ZlKG1vZHVsZUxpc3QscHJldmVudCxhY3RpdmF0ZUluZGV4KXtcclxuICAgICAgICB0aGlzLiRlbWl0KCdvblNpbmdsZVBhZ2VSZW1vdmUnLCBtb2R1bGVMaXN0LHByZXZlbnQsYWN0aXZhdGVJbmRleClcclxuXHJcbiAgICAgIH0sXHJcbiAgICAgIG9uUGFnZUNlbGwgKHZhbHVlLCBpdGVtLCBtb2R1bGUsIGFjdGl2ZUluZGV4KSB7XHJcbiAgICAgICAgdGhpcy4kZW1pdCgnb25QYWdlQ2VsbCcsIHZhbHVlLCBpdGVtLCBtb2R1bGUsIGFjdGl2ZUluZGV4KVxyXG4gICAgICB9LFxyXG4gICAgICBvblBhZ2VCbHVyICh2YWx1ZSwgaXRlbSwgbW9kdWxlLCBhY3RpdmVJbmRleCkge1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ29uUGFnZUJsdXInLCB2YWx1ZSwgaXRlbSwgbW9kdWxlLCBhY3RpdmVJbmRleClcclxuICAgICAgfSxcclxuICAgICAgb25QYWdlUGFyYW1zQ2hhbmdlKGl0ZW0sIG1vZHVsZSwgYWN0aXZlSW5kZXgpe1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ3BhZ2VQYXJhbXNDaGFuZ2UnLCBpdGVtLCBtb2R1bGUsIGFjdGl2ZUluZGV4KVxyXG4gICAgICB9LFxyXG4gICAgICBvbkNlbGwgKGZpZWxkVmFsLCBpdGVtKSB7XHJcbiAgICAgICAgdGhpcy4kZW1pdCgnb25DZWxsJywgZmllbGRWYWwsIGl0ZW0pXHJcbiAgICAgIH0sXHJcbiAgICAgIG9uQmx1ciAoZmllbGRWYWwsIGl0ZW0pIHtcclxuICAgICAgICB0aGlzLiRlbWl0KCdvbkJsdXInLCBmaWVsZFZhbCwgaXRlbSlcclxuICAgICAgfSxcclxuICAgICAgb25QYXJhbXNDaGFuZ2UoZmllbGRWYWwpe1xyXG4gICAgICAgIHRoaXMuJGVtaXQoXCJwYXJhbXNDaGFuZ2VcIixmaWVsZFZhbClcclxuICAgICAgfSxcclxuICAgICAgb25QYWdlU2F2ZShtb2R1bGVDb2RlKXtcclxuICAgICAgICB0aGlzLiRlbWl0KCdvblBhZ2VTYXZlJyxtb2R1bGVDb2RlKVxyXG4gICAgICB9LFxyXG4gICAgICBvbkFkZFByb2plY3QoZmllbGRWYWwsIGl0ZW0pe1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ29uQWRkUHJvamVjdCcsIGZpZWxkVmFsLCBpdGVtKVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlZCgpe1xyXG4gICAgICAvLyAvLyBjb25zdCB1bndhdGNoICA9IHRoaXMuJHdhdGNoKCdtb2R1bGVPYmonLCgpPT57XHJcbiAgICAgIC8vIC8vICAgICB0aGlzLm1vZHVsZUNyZWF0aW5nID0gZmFsc2VcclxuICAgICAgLy8gLy8gICAgIHVud2F0Y2goKVxyXG4gICAgICAvLyAvLyB9LHtkZWVwOnRydWV9KVxyXG4gICAgICAvLyBjb25zb2xlLmxvZygnbW9kdWxlRmllbGQnLCdjcmVhdGVkJylcclxuICAgICAgLy8gdGhpcy4kbmV4dFRpY2soKCk9PntcclxuICAgICAgLy8gICBjb25zb2xlLmxvZygnbW9kdWxlRmllbGQnLCduZXh0VGljaycpXHJcbiAgICAgIC8vICAgc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICAvLyAgICAgY29uc29sZS5sb2coJ21vZHVsZUZpZWxkJywndGltZW91dDAnKVxyXG4gICAgICAvLyAgICAgY29uc3QgdGVtcE9iaiA9IHt9XHJcbiAgICAgIC8vICAgICB0aGlzLmZpZWxkTGlzdC5mb3JFYWNoKGZpZWxkPT57XHJcbiAgICAgIC8vICAgICAgICAgaWYgKGZpZWxkLmZpZWxkTmFtZSkge1xyXG4gICAgICAvLyAgICAgICAgICAgLy90aGlzLiRzZXQodGhpcy5tb2R1bGVPYmosZmllbGQuZmllbGROYW1lLGZpZWxkLmZpZWxkVmFsdWUpXHJcbiAgICAgIC8vICAgICAgICAgICB0ZW1wT2JqW2ZpZWxkLmZpZWxkTmFtZV0gPSBmaWVsZC5maWVsZFZhbHVlXHJcbiAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAvLyAgICAgfSlcclxuICAgICAgLy8gICAgIHRoaXMubW9kdWxlT2JqID0gdGVtcE9ialxyXG4gICAgICAvLyAgIH0sMClcclxuICAgICAgLy8gfSlcclxuICAgIH0sXHJcbiAgICBtb3VudGVkKCl7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdtb2R1bGVGaWVsZCcsJ21vdW50ZWQnKVxyXG4gICAgfSxcclxuICAgIHdhdGNoOntcclxuICAgICAgLy8gbW9kdWxlT2JqOntcclxuICAgICAgLy8gICBoYW5kbGVyKCl7XHJcbiAgICAgIC8vICAgICBpZiAodGhpcy5tb2R1bGVDcmVhdGluZyl7XHJcbiAgICAgIC8vICAgICAgIHRoaXMubW9kdWxlQ3JlYXRpbmcgPSBmYWxzZVxyXG4gICAgICAvLyAgICAgfSBlbHNlIHtcclxuICAgICAgLy8gICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLHRoaXMubW9kdWxlT2JqKVxyXG4gICAgICAvLyAgICAgfVxyXG4gICAgICAvLyAgIH0sXHJcbiAgICAgIC8vICAgZGVlcDp0cnVlXHJcbiAgICAgIC8vIH0sXHJcbiAgICB9XHJcbn1cclxuPC9zY3JpcHQ+XHJcbiIsIjwhLS3kuoznuqfnlYzpnaLlpJrpobXnvJbovpEtLT5cclxuPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cImpzb252dWUtcGFnZVwiPlxyXG4gICAgICAgIDxOYXZCYXIgIDp0aXRsZT1cImAke3NjZW5lPT09Mnx8IWlzRWRpdD8n5p+l55yLJzon5re75YqgJ31gK3RpdGxlXCIgbGVmdC1hcnJvdyBAY2xpY2stbGVmdD1cIm9uQmFja1wiIEBjbGljay1yaWdodD1cIm9uU2F2ZUFsbFwiID48L05hdkJhcj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsLXRhYnNcIiB2LWlmPVwic2hvd3NcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJsaS1wYWdlXCI+XHJcbiAgICAgICAgICAgIDxQYWdpbmF0aW9uIHYtbW9kZWw9XCJjdXJyc2VudFBhZ2VzXCIgOnBhZ2UtY291bnQ9XCJzZWNvbmRQYWdlTGlzdC5sZW5ndGhcIiBtb2RlPVwic2ltcGxlXCI+XHJcbiAgICAgICAgICAgICAgPHRlbXBsYXRlICNwcmV2LXRleHQ+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IEBjbGljay5zdG9wPVwiY3VycnNlbnRQYWdlcz09PTE/Jyc6b25DaGFuZ2VBY3RpdmVJbmRleChjdXJyc2VudFBhZ2VzLCcwJylcIiAgY2xhc3M9XCJwYWdlLWljb24tY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxJY29uIG5hbWU9XCJhcnJvdy1sZWZ0XCIvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgICA8dGVtcGxhdGUgI25leHQtdGV4dD5cclxuICAgICAgICAgICAgICAgIDxkaXYgQGNsaWNrLnN0b3A9XCJzZWNvbmRQYWdlTGlzdC5sZW5ndGg9PT1jdXJyc2VudFBhZ2VzPycnOm9uQ2hhbmdlQWN0aXZlSW5kZXgoY3VycnNlbnRQYWdlcywnMScpXCIgY2xhc3M9XCJwYWdlLWljb24tY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxJY29uIG5hbWU9XCJhcnJvd1wiICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgPC9QYWdpbmF0aW9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2ICB2LWlmPVwic2NlbmUhPT0yJiZpc0VkaXQmJmFkZEFibGVcIiBjbGFzcz1cInRhYnMtdG9vbCBmbGV4LW1pZGRsZVwiPlxyXG4gICAgICAgICAgICA8aSBjbGFzcz1cImljb25mb250IGljb24tYWRkXCIgQGNsaWNrPVwib25BZGRcIj48L2k+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbmZvbnQgaWNvbi1jb3B5XCIgQGNsaWNrPVwib25Db3B5XCI+PC9pPlxyXG4gICAgICAgICAgICA8aSBjbGFzcz1cImljb25mb250IGljb24tZGVsZXRlXCIgQGNsaWNrPVwib25EZWxldGVcIj48L2k+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicG9wdXAtY29udGVudFwiPlxyXG4gICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKGl0ZW0saW5kZXgpIGluIHNlY29uZFBhZ2VMaXN0XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJcIiB2LWlmPVwic2Vjb25kSW5kZXggPT09IGluZGV4XCIgOmtleT1cImluZGV4XCI+XHJcbiAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYnNlcnZlciAgOnJlZj1cIidmaWVsZENlbGwnK2luZGV4XCIgOmRpc2FibGVkPVwidHJ1ZVwiPlxyXG4gICAgICAgICAgICAgICAgICA8TW9kdWxlRmllbGROb0NydWRcclxuICAgICAgICAgICAgICAgICAgICAgIHYtaWY9XCJzZWNvbmRJbmRleCA9PT0gaW5kZXhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJtYjEwXCJcclxuICAgICAgICAgICAgICAgICAgICAgIEBvbkNlbGw9XCJvbkNlbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgQHBhcmFtc0NoYW5nZT1cIm9uUGFyYW1zQ2hhbmdlXCJcclxuICAgICAgICAgICAgICAgICAgICAgIDpmaWVsZC1saXN0LnN5bmM9XCJpdGVtXCJcclxuICAgICAgICAgICAgICAgICAgICAgIDpzY2VuZT1cImlzRWRpdCA9PT0gZmFsc2UgPyAyIDpzY2VuZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICA6YWRkTmV3UGFyYW1zPVwiYWRkTmV3UGFyYW1zXCJcclxuICAgICAgICAgICAgICAgICAgPjwvTW9kdWxlRmllbGROb0NydWQ+XHJcbiAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uT2JzZXJ2ZXI+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8QnV0dG9uICB2LWlmPVwic2NlbmUgIT09IDIgJiYgaXNFZGl0IFwiIHR5cGU9XCJpbmZvXCIgQGNsaWNrPVwib25TYXZlQWxsXCI+XHJcbiAgICAgICAgICAgIOS/neWtmFxyXG4gICAgICAgIDwvQnV0dG9uPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgaW1wb3J0IHtCdXR0b24sSWNvbixOYXZCYXIsUGFnaW5hdGlvbiAsfSBmcm9tICd2YW50J1xyXG4gICAgaW1wb3J0IHtjbG9uZURlZXB9IGZyb20gJ2xvZGFzaCdcclxuICAgIGltcG9ydCBNb2R1bGVGaWVsZE5vQ3J1ZCBmcm9tIFwiLi4vTW9kdWxlRmllbGROb0NydWQudnVlXCI7XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogXCJNdWx0aVNlY29uZFBhZ2VFZGl0XCIsXHJcbiAgICAgICAgY29tcG9uZW50czp7TW9kdWxlRmllbGROb0NydWQsQnV0dG9uLEljb24sTmF2QmFyLFBhZ2luYXRpb259LFxyXG4gICAgICAgIHByb3BzOntcclxuICAgICAgICAgICAgbGFiZWw6U3RyaW5nLFxyXG4gICAgICAgICAgICAvLyDopobnm5bmmK/lkKblj6/ku6XnvJbovpHlip/og71cclxuICAgICAgICAgICAgaXNFZGl0OntcclxuICAgICAgICAgICAgICAgIHR5cGU6Qm9vbGVhbixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6dHJ1ZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwYWdlTGlzdDp7XHJcbiAgICAgICAgICAgICAgICB0eXBlOkFycmF5LFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdCgpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhY3RpdmVJbmRleDowLFxyXG4gICAgICAgICAgICBtb2R1bGVMaXN0OkFycmF5LFxyXG4gICAgICAgICAgICBjdXJyc2VudFBhZ2VzOntcclxuICAgICAgICAgICAgICAgIHR5cGU6TnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDowXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8v5piv5ZCm5Y+v5Lul5aKe5Yqg5ZKM5Yig6ZmkIOm7mOiupOWPr+S7pVxyXG4gICAgICAgICAgICBhZGRBYmxlOntcclxuICAgICAgICAgICAgICAgIHR5cGU6Qm9vbGVhbixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6dHJ1ZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzY2VuZTp7XHJcbiAgICAgICAgICAgICAgdHlwZTpbU3RyaW5nLE51bWJlcl0sXHJcbiAgICAgICAgICAgICAgZGVmYXVsdDowXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFkZE5ld1BhcmFtczp7XHJcbiAgICAgICAgICAgICAgdHlwZTpPYmplY3QsXHJcbiAgICAgICAgICAgICAgZGVmYXVsdDooKT0+e31cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGF0YSgpe1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2U6IDEsXHJcbiAgICAgICAgICAgICAgICBzaG93czp0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHdhdGNoOntcclxuICAgICAgICAgICAgY3VycnNlbnRQYWdlczp7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyKHZhbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZT12YWxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWVwOnRydWUsXHJcbiAgICAgICAgICAgICAgICBpbW1lZGlhdGU6dHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21wdXRlZDp7XHJcbiAgICAgICAgICAgIHNob3dTdGF0dXMoKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5wYWdlTGlzdFt0aGlzLmFjdGl2ZUluZGV4XSB8fCBbXSkuZXZlcnkoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmZpZWxkSHVtcE5hbWUgPT09IFwiaWRcIiAmJiBpdGVtLmZpZWxkVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRpdGxlKCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCh0aGlzLiRyb3V0ZSB8fCB7fSkucGFyYW1zIHx8IHt9KS5sYWJlbCB8fCB0aGlzLmxhYmVsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlY29uZFBhZ2VMaXN0KCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCh0aGlzLiRyb3V0ZSB8fCB7fSkucGFyYW1zIHx8IHt9KS5wYWdlTGlzdCB8fCB0aGlzLnBhZ2VMaXN0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlY29uZE1vZHVsZUxpc3QoKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoKHRoaXMuJHJvdXRlIHx8IHt9KS5wYXJhbXMgfHwge30pLm1vZHVsZUxpc3QgfHwgdGhpcy5tb2R1bGVMaXN0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlY29uZEluZGV4KCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCh0aGlzLiRyb3V0ZSB8fCB7fSkucGFyYW1zIHx8IHt9KS5hY3RpdmVJbmRleCB8fCB0aGlzLmFjdGl2ZUluZGV4IHx8IDBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWV0aG9kczp7XHJcbiAgICAgICAgICAgIG9uQWRkKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkaWFsb2cuY29uZmlybSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6J+aPkOekuicsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTon5piv5ZCm5L+d5a2Y5b2T5YmN5pWw5o2u5bm25paw5aKePycsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6J+ehruWumicsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDon5Y+W5raIJyxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNhdmUoKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtb2R1bGVMaXN0ID0gY2xvbmVEZWVwKHRoaXMubW9kdWxlTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VMaXN0LnB1c2gobW9kdWxlTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdvbkFkZCcsdGhpcy5wYWdlTGlzdC5sZW5ndGggLSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycj0+e1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25Db3B5KCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkaWFsb2cuY29uZmlybSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6J+aPkOekuicsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTon5piv5ZCm5L+d5a2Y5b2T5YmN5pWw5o2u5bm25aSN5Yi2PycsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6J+ehruWumicsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDon5Y+W5raIJyxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNhdmUoKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJvbkNvcHlcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnI9PntcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uRGVsZXRlKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRkaWFsb2cuY29uZmlybSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6J+aPkOekuicsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTon5piv5ZCm56Gu6K6k5Yig6Zmk5piO57uGPycsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6J+ehruWumicsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDon5Y+W5raIJyxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFnZUxpc3QubGVuZ3RoIDw9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtb2R1bGVMaXN0ID0gY2xvbmVEZWVwKHRoaXMuc2Vjb25kTW9kdWxlTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VMaXN0LnNwbGljZSgwLCAxLCBtb2R1bGVMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5riF6Zmk6ZSZ6K+v5L+h5oGvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wUGFnZSA9IHRoaXMuY3VycmVudFBhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ+aAu+mhtemdojonLHRoaXMucGFnZUxpc3QubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBQYWdlPnRoaXMucGFnZUxpc3QubGVuZ3RoLTEpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSB0aGlzLmN1cnJlbnRQYWdlLTFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCflvZPliY3pobXvvJonLHRoaXMuY3VycmVudFBhZ2UpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ29uRGVsZXRlJyx0aGlzLmN1cnJlbnRQYWdlKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycj0+e1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvblNhdmVBbGwoKXtcclxuICAgICAgICAgICAgICAgIHRoaXMub25TYXZlKCgpPT57XHJcbiAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdvblNhdmVBbGwnKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25DYW5jbGUoKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ29uQ2FuY2xlJylcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25TYXZlKHN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kcmVmc1tcImZpZWxkQ2VsbFwiICsgdGhpcy5hY3RpdmVJbmRleF1bMF0udmFsaWRhdGUoKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCflrZDooajljZXpqozor4Hnu5Pmnpw6JyxyZXN1bHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnb25TYXZlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kdG9hc3QuZmFpbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCLor7flrozlloTooajljZVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25CYWNrKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdvbkJhY2snKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkNlbGwodmFsdWUsaXRlbSxtb2R1bGUpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdChcIm9uUGFnZUNlbGxcIix2YWx1ZSxpdGVtLG1vZHVsZSlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25QYXJhbXNDaGFuZ2UoaXRlbSxtb2R1bGUpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdChcInBhZ2VQYXJhbXNDaGFuZ2VcIixpdGVtLG1vZHVsZSlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25DaGFuZ2VBY3RpdmVJbmRleChpbmRleCx0YWcpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYGNoYW5nZVBhZ2U6JHt0YWcgPT09ICcwJyA/ICfkuIrkuIDpobUnIDogJ+S4i+S4gOmhtSd9ICDlvZPliY3pobXnoIHkuLo6JHtpbmRleH1gKVxyXG4gICAgICAgICAgICAgICAgbGV0IGluZD1pbmRleFxyXG4gICAgICAgICAgICAgICAgaWYodGFnPT09JzAnKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihpbmRleCE9PTEpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlPWluZGV4LTFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5zZWNvbmRQYWdlTGlzdC5sZW5ndGghPT10aGlzLmN1cnJlbnRQYWdlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZT1pbmRleCsxXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaW5kID0gTnVtYmVyKHRoaXMuY3VycmVudFBhZ2UpIC0gMSA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KFwiY2hhbmdlSW5kZXhcIix7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kOmluZCxcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTp0aGlzLmN1cnJlbnRQYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9sZEluZDppbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBwYWdlTGVuOnRoaXMuc2Vjb25kUGFnZUxpc3QubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcmVhdGVkKCkge1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW91bnRlZCgpe1xyXG4gICAgICAgICAgICB0aGlzLiRidXMub24oJ29wZW5TZWxlY3RQYWdlJyxlbD0+e1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZT1lbC5wYWdlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSA+XHJcbiAgICAudmFuLXBhZ2luYXRpb24tLXNpbXBsZXtcclxuICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIH1cclxuICAgIC52YW4tcGFnaW5hdGlvbl9faXRlbXtcclxuICAgICAgICBtaW4td2lkdGg6IDFyZW07XHJcbiAgICAgICAgd2lkdGg6IDFyZW07XHJcbiAgICAgICAgaGVpZ2h0OiAxcmVtO1xyXG4gICAgICAgIC8qYmFja2dyb3VuZC1jb2xvcjogIzY0NjU2NjsqL1xyXG4gICAgICAgIC8qY29sb3I6IHdoaXRlOyovXHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxcmVtO1xyXG4gICAgICAgIC8qbWFyZ2luLXRvcDogMC4ycmVtOyovXHJcbiAgICB9XHJcbiAgICAudmFuLXBhZ2luYXRpb25fX3ByZXYsIC52YW4tcGFnaW5hdGlvbl9fbmV4dHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTk4OWZhO1xyXG4gICAgfVxyXG4gICAgLnZhbi1wYWdpbmF0aW9uX19pdGVtLS1kaXNhYmxlZCwgLnZhbi1wYWdpbmF0aW9uX19pdGVtLS1kaXNhYmxlZDphY3RpdmV7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzY0NjU2NjtcclxuICAgIH1cclxuXHJcbiAgICAudmFuLXBhZ2luYXRpb24tLXNpbXBsZSAudmFuLXBhZ2luYXRpb25fX3ByZXY6OmFmdGVyLCAudmFuLXBhZ2luYXRpb24tLXNpbXBsZSAudmFuLXBhZ2luYXRpb25fX25leHQ6OmFmdGVyIHtcclxuICAgICAgICBib3JkZXItd2lkdGg6IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLnZhbi1wYWdpbmF0aW9uX19wYWdlLWRlc2N7XHJcbiAgICAgICAgbWFyZ2luOiAwIDEwcHhcclxuICAgIH1cclxuICAgIC5wYWdlLWljb24tY29udGFpbmVye1xyXG4gICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgIGRpc3BsYXk6ZmxleDtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyXHJcbiAgICB9XHJcbjwvc3R5bGU+XHJcbiIsImV4cG9ydCBjb25zdCBjb25maWdNaXhpbiA9IHtcclxuICAgIG1ldGhvZHM6e1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaJvuWIsOespuWQiOafkOS4qumFjee9rueahOaJgOacieWtl+autembhuWQiFxyXG4gICAgICAgICAqICovXHJcbiAgICAgICAgZmluZEZpZWxkSW5BbGxXaXRoQ29uZmlnKG1vZHVsZUxpc3QsY29uZmlnTmFtZSxjb25maWdWYWx1ZSkge1xyXG4gICAgICAgICAgICBsZXQgY29uZmlnRmllbGRMaXN0ID0gW11cclxuICAgICAgICAgICAgbW9kdWxlTGlzdC5mb3JFYWNoKG1vZHVsZT0+e1xyXG4gICAgICAgICAgICAgICAgbW9kdWxlLmZpZWxkTGlzdC5mb3JFYWNoKGZpZWxkPT57XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkW2NvbmZpZ05hbWVdICYmIGZpZWxkW2NvbmZpZ05hbWVdID09PSBjb25maWdWYWx1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ0ZpZWxkTGlzdC5wdXNoKGZpZWxkKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHJldHVybiBjb25maWdGaWVsZExpc3RcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZpbmRGaWVsZFdpdGhDb25maWcoZmllbGRMaXN0LGNvbmZpZ05hbWUsY29uZmlnVmFsdWUpIHtcclxuICAgICAgICAgICAgbGV0IGNvbmZpZ0ZpZWxkTGlzdCA9IFtdXHJcbiAgICAgICAgICAgIGZpZWxkTGlzdC5mb3JFYWNoKGZpZWxkPT57XHJcbiAgICAgICAgICAgICAgICBpZiAoZmllbGRbY29uZmlnTmFtZV0gJiYgZmllbGRbY29uZmlnTmFtZV0gPT09IGNvbmZpZ1ZhbHVlKXtcclxuICAgICAgICAgICAgICAgICAgICBjb25maWdGaWVsZExpc3QucHVzaChmaWVsZClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZ0ZpZWxkTGlzdFxyXG4gICAgICAgIH0sXHJcbiAgICB9XHJcbn1cclxuIiwiPCEtLeaYjue7humhtemdouW4g+WxgC0tPlxyXG48dGVtcGxhdGU+XHJcbiAgICA8ZGl2PlxyXG4gICAgICAgIDxDZWxsIHYtYmluZD1cIiRhdHRyc1wiIHN0eWxlPVwicGFkZGluZzogMCAwLjQyNjY3cmVtIDAuMjY2NjdyZW0gMC40MjY2N3JlbVwiPlxyXG4gICAgICAgICAgICA8dGVtcGxhdGUgI3RpdGxlPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtbWlkZGxlIGp1c3RpZnktYmV0d2VlblwiIHYtaWY9XCJzaG93RGF0YVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9XCIkYXR0cnMucmVxdWlyZWRcIiBjbGFzcz1cInRleHQtZGFuZ2VyXCI+Kjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPVwic2hvd05hbWVcIj57eyRhdHRycy5sYWJlbH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtZWxzZT48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvbmZvbnQgaWNvbi1iaWFuamkgdGV4dC1pbmZvIGZlZUJpYW5qaVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPVwiIXNob3dCaWdBZGRCdG4mJiBzaG93U21hbGxBZGRCdG4gJiYgc2NlbmUgIT09MlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJvblNlbGVjdFR5cGVUaGVuRWRpdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgPjwvaT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICA8dGVtcGxhdGUgI2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImpzb252dWUtYnRuIGlubmVyXCIgdi1pZj1cInNob3dCaWdBZGRCdG4mJnNob3dEYXRhJiYgc2NlbmUgIT09MlwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4XCIgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzPVwiZmxleDFcIiAgIHBsYWluIHR5cGU9XCJpbmZvXCIgQGNsaWNrPVwib25TZWxlY3RUeXBlVGhlbkVkaXRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtY2VudGVyIGZsZXgtbWlkZGxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uZm9udCBpY29uLWppYVwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pua3u+WKoHt7JGF0dHJzLmxhYmVsfX08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiB2LWVsc2UtaWY9XCJzaG93RGF0YVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDZWxsIHN0eWxlPVwicGFkZGluZzogNnB4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSAjdGl0bGU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtc2hvdz1cInNob3dNb25leVwiIGNsYXNzPVwicHJlZml4XCI+77+lPHNwYW4gY2xhc3M9XCJtb25leVwiPnt7dG90YWxBbW91bnR8Y3VycmVuY3l9fTwvc3Bhbj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlICNkZWZhdWx0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb24gOm5hbWU9XCIhbW9kdWxlU2hvdz8nYXJyb3ctZG93bic6J2Fycm93LXVwJ1wiIEBjbGljaz1cIm1vZHVsZVNob3c9IW1vZHVsZVNob3dcIiB2LWlmPVwiaXNTaG93XCI+PC9JY29uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQ2VsbD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwiIWNydWRWaWV3U2xvdFwiIHYtc2hvdz1cIm1vZHVsZVNob3dcIiAgdi1mb3I9XCIodHlwZVBhZ2Usa2V5KSBpbiBjdXJyZW50U2VsZWN0XCIgOmtleT1cImtleVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2ID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZWZhdWx0Vmlld1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6bGlzdD1cInR5cGVQYWdlLmxpc3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY29tbW9uRWRpdD1cIm9uT3BlblR5cGVFZGl0KHR5cGVQYWdlLGtleSxhcmd1bWVudHNbMF0pXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L0RlZmF1bHRWaWV3PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vcmUtYnRuXCIgdi1zaG93PVwic2hvd01vcmVCdG4mJnR5cGVQYWdlLmxpc3QubGVuZ3RoPjVcIiBAY2xpY2s9XCJvbk9wZW5UeXBlRWRpdCh0eXBlUGFnZSxrZXksYXJndW1lbnRzWzFdKVwiPuafpeeci+abtOWkmjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxzbG90IHYtZWxzZSBuYW1lPVwiY3J1ZFZpZXdcIiA6cm93PVwiY3VycmVudFNlbGVjdFwiPjwvc2xvdD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImVycm9yXCI+PC9zbG90PlxyXG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgIDwvQ2VsbD5cclxuXHJcbiAgICAgICAgPEFjdGlvblNoZWV0XHJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJzaG93VHlwZVNlbGVjdFZpZXdcIlxyXG4gICAgICAgICAgICA6YWN0aW9ucz1cInVuQWRkVHlwZUxpc3RcIlxyXG4gICAgICAgICAgICBAc2VsZWN0PVwib25TZWxlY3RcIlxyXG4gICAgICAgICAgICBjYW5jZWwtdGV4dD1cIuWPlua2iFwiXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwi6K+36YCJ5oup57G75Z6LXCJcclxuICAgICAgICAgICAgZ2V0LWNvbnRhaW5lcj1cIiNhcHBcIlxyXG4gICAgICAgICA+PC9BY3Rpb25TaGVldD5cclxuXHJcbiAgICAgICAgPFBvcHVwXHJcbiAgICAgICAgICAgICAgICB2LW1vZGVsPVwic2hvd1wiXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbj1cInJpZ2h0XCJcclxuICAgICAgICAgICAgICAgIDpzdHlsZT1cInsgd2lkdGg6ICcxMDAlJyxoZWlnaHQ6JzEwMCUnIH1cIlxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJqc29udnVlLXBvcHVwXCJcclxuICAgICAgICAgICAgICAgIDpjbG9zZS1vbi1jbGljay1vdmVybGF5PVwiZmFsc2VcIlxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8TXVsdGlTZWNvbmRQYWdlRWRpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlzRWRpdD1cImlzU2hvd1R5cGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOmN1cnJzZW50UGFnZXM9XCJub3dQYWdlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpsYWJlbD1cIiRhdHRycy5sYWJlbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6cGFnZS1saXN0PVwicGFnZUxpc3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOm1vZHVsZS1saXN0PVwibW9kdWxlTGlzdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6YWN0aXZlLWluZGV4PVwiYWN0aXZlSW5kZXhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOmFkZEFibGU9XCJhZGRBYmxlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzY2VuZT1cInNjZW5lXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBvblBhZ2VDZWxsPVwib25DZWxsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBwYWdlUGFyYW1zQ2hhbmdlPVwib25QYWdlUGFyYW1zQ2hhbmdlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBvblNhdmU9XCJvblNhdmVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQG9uQWRkPVwib25BZGRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQG9uRGVsZXRlPVwib25EZWxldGVGblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAb25CYWNrPVwib25CYWNrXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBvbkNvcHk9XCJvbkNvcHlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZUluZGV4PVwib25DaGFuZ2VBY3RpdmVJbmRleFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAb25TYXZlQWxsPVwib25TYXZlQWxsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBvbkNhbmNsZT1cIm9uQ2FuY2xlXCJcclxuICAgICAgICAgICAgICAgICAgICA+PC9NdWx0aVNlY29uZFBhZ2VFZGl0PlxyXG4gICAgICAgIDwvUG9wdXA+XHJcbiAgICAgICAgPHZhbi1kaWFsb2dcclxuICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwic2hvd0lzU2F2ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCLmj5DnpLpcIlxyXG4gICAgICAgICAgICAgICAgICAgIDpzaG93LWNvbmZpcm0tYnV0dG9uPVwidHJ1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ9XCLmmK9cIlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcj1cIiNmMDBcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ9XCLlkKZcIlxyXG4gICAgICAgICAgICAgICAgICAgIEBjb25maXJtPVwiY29uZmlybVNhdmVcIlxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U9XCLmmK/lkKbkv53lrZjlvZPliY3nvJbovpHlhoXlrrlcIlxyXG4gICAgICAgICAgICAgICAgICAgIEBjYW5jZWw9XCJjYW5jZWxTYXZlXCJcclxuICAgICAgICAgICAgICAgICAgICA6c2hvd0NhbmNlbEJ1dHRvbj1cInRydWVcIj5cclxuICAgICAgICAgICAgPGRpdiBzbG90PVwidGl0bGVcIj5cclxuICAgICAgICAgICAgICAgIOaPkOekulxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpYS1jbG9zc1wiIEBjbGljaz1cImNhbmNlbERpYWxvZ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJY29uIG5hbWU9XCJjcm9zc1wiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC92YW4tZGlhbG9nPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgaW1wb3J0IHsgY2xvbmVEZWVwLCBtZXJnZSAsaXNFbXB0eSxpc0VxdWFsLH0gZnJvbSBcImxvZGFzaFwiO1xyXG4gICAgaW1wb3J0IHtDZWxsLEJ1dHRvbixJY29uLFBvcHVwLE5hdkJhcixBY3Rpb25TaGVldH0gZnJvbSAndmFudCdcclxuICAgIGltcG9ydCBEZWZhdWx0VmlldyBmcm9tICcuL0RlZmF1bHRWaWV3LnZ1ZSdcclxuICAgIGltcG9ydCBNdWx0aVNlY29uZFBhZ2VFZGl0IGZyb20gXCIuL011bHRpU2Vjb25kUGFnZUVkaXQudnVlXCI7XHJcbiAgICBpbXBvcnQgTW9kdWxlRmllbGQgZnJvbSBcIi4uL01vZHVsZUZpZWxkTm9DcnVkLnZ1ZVwiO1xyXG4gICAgaW1wb3J0IHtjb25maWdNaXhpbn0gZnJvbSBcIi4uL21peGlucy9jb25maWcubWl4aW5cIjtcclxuXHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogXCJGaWVsZENydWRcIixcclxuICAgICAgICBjb21wb25lbnRzOiB7Q2VsbCxCdXR0b24sSWNvbixQb3B1cCxOYXZCYXIsQWN0aW9uU2hlZXRcclxuICAgICAgICAsTW9kdWxlRmllbGQsXHJcbiAgICAgICAgIERlZmF1bHRWaWV3LFxyXG4gICAgICAgICBNdWx0aVNlY29uZFBhZ2VFZGl0LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWl4aW5zOltjb25maWdNaXhpbl0sXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgLy/pobXpnaLmqKHmnb9cclxuICAgICAgICAgICAgdHlwZU1vZHVsZUxpc3Q6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6QXJyYXksXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjdXJyZW50U2VsZWN0OiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOkFycmF5LFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDooKT0+W11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy/mnInliIbnsbvnmoRcclxuICAgICAgICAgICAgdHlwZUFuZFBhZ2VMaXN0OntcclxuICAgICAgICAgICAgICAgIHR5cGU6QXJyYXksXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0KCl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuWyBdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8v57G75Z6L5YiX6KGoXHJcbiAgICAgICAgICAgIHR5cGVMaXN0OntcclxuICAgICAgICAgICAgICAgIHR5cGU6QXJyYXksXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0KCl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8v5LiN5pi+56S65pWw5o2uXHJcbiAgICAgICAgICAgIHNob3dEYXRhOntcclxuICAgICAgICAgICAgICAgIHR5cGU6Qm9vbGVhbixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6dHJ1ZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzaG93TmFtZTp7XHJcbiAgICAgICAgICAgICAgICB0eXBlOkJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OmZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNmZ01vZHVsZVZPOiBPYmplY3QsXHJcbiAgICAgICAgICAgIHNjZW5lOntcclxuICAgICAgICAgICAgICAgIHR5cGU6W1N0cmluZyxOdW1iZXJdLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDowXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uVXJsOlN0cmluZyxcclxuICAgICAgICAgICAgdGlwVGl0bGVJbmZvTGlzdDp7XHJcbiAgICAgICAgICAgICAgICB0eXBlOkFycmF5LFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdCgpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy/mmK/lkKblj6/ku6XmlrDlop7miJbogIXliKDpmaRcclxuICAgICAgICAgICAgYWRkQWJsZTp7XHJcbiAgICAgICAgICAgICAgICB0eXBlOkJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OnRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy/mmK/lkKbmmL7npLrph5Hpop3ovpPlhaXmoYZcclxuICAgICAgICAgICAgc2hvd01vbmV5OntcclxuICAgICAgICAgICAgICB0eXBlOkJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgZGVmYXVsdDpmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHRDb25maWc6e1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvL+aYr+WQpuiHquWumuS5ieaYvuekulxyXG4gICAgICAgICAgICBjcnVkVmlld1Nsb3Q6e1xyXG4gICAgICAgICAgICAgIHR5cGU6Qm9vbGVhbixcclxuICAgICAgICAgICAgICBkZWZhdWx0OmZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRhdGEoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnRUaXRsZTogXCJcIixcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlSW5kZXg6IDAsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50U2VsZWN0U2hvdzogW10sXHJcbiAgICAgICAgICAgICAgICB0eXBlU2VsZWN0U2hvdzpbXSxcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IDIwMjAvMi8yNyDkvJjljJbnsbvlnovliIbphY1cclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTZWxlY3RUeXBlOid0cmF2ZWwnLFxyXG4gICAgICAgICAgICAgICAgdGltZXI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBwcmV2ZW50OiBmYWxzZSwgLy/nlKjmnaXlpITnkIbliKDpmaTlkozmj5DkuqTml7blgJnop6blj5HkuI3lv4XopoHnmoTnm5HlkKxcclxuICAgICAgICAgICAgICAgIHBhZ2VMaXN0OltdLFxyXG4gICAgICAgICAgICAgICAgbW9kdWxlTGlzdDpbXSxcclxuICAgICAgICAgICAgICAgIC8v57G75Z6L6YCJ5oupXHJcbiAgICAgICAgICAgICAgICBzaG93VHlwZVNlbGVjdFZpZXc6ZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAvL+W9k+WJjeexu+Wei1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFR5cGU6e30sXHJcbiAgICAgICAgICAgICAgICB1bkFkZFR5cGVMaXN0OltdLFxyXG4gICAgICAgICAgICAgICAgLy/lvZPliY3nvJbovpHnmoTnsbvlnovlj4rliJfooajmlbDmja5cclxuICAgICAgICAgICAgICAgIHR5cGVQYWdlOnt9LFxyXG4gICAgICAgICAgICAgICAgLy/lvZPliY3nsbvlnovntKLlvJVcclxuICAgICAgICAgICAgICAgIHR5cGVLZXk6MCxcclxuICAgICAgICAgICAgICAgIC8v5oC76YeR6aKdXHJcbiAgICAgICAgICAgICAgICB0b3RhbEFtb3VudDowLFxyXG4gICAgICAgICAgICAgICAgbW9kdWxlU2hvdzp0cnVlLFxyXG4gICAgICAgICAgICAgICAgLy/nlKjmiLfmmK/lkKbmk43kvZzov4dcclxuICAgICAgICAgICAgICAgIGlzQWN0aW9uOmZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXNTaG93OmZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2U6MCxcclxuICAgICAgICAgICAgICAgIHNob3dJc1NhdmU6ZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpbmRPYmo6e30sXHJcbiAgICAgICAgICAgICAgICB0ZXN0U2hvdzpmYWxzZSxcclxuXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmhlcml0QXR0cnM6IGZhbHNlLFxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIHByb3A6IFwiY3VycmVudFNlbGVjdFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21wdXRlZDoge1xyXG4gICAgICAgICAgICAvLyDmoLnmja7nu4Tku7bnsbvlnovliKTmlq3mmK/lkKbmmL7npLpcclxuICAgICAgICAgICAgaXNTaG93VHlwZSgpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbm93UGFnZSgpe1xyXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRQYWdlP3RoaXMuY3VycmVudFBhZ2U6MVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzaG93TW9yZUJ0bigpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHlwZUxpc3QuZmluZCh0eXBlPT50eXBlLnR5cGUgPT09J290aGVySW5jb21lJylcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2hvd1NtYWxsQWRkQnRuKCl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFnPTBcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFNlbGVjdC5mb3JFYWNoKGVsPT57XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnPXRhZytlbC5saXN0Lmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGlmKHRhZz4xKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzU2hvdz10cnVlXHJcbiAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1Nob3c9ZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGFsbFNlbGVjdGVkID0gdGhpcy50eXBlTGlzdC5ldmVyeShcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50PT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gdGhpcy5jdXJyZW50U2VsZWN0LmZpbmQoc2VsZWN0ZWQ9PnNlbGVjdGVkLmNvZGUgPT09IGN1cnJlbnQuY29kZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFpc0VtcHR5KHRlbXAubGlzdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2hvd1NtYWxsQWRkQnRuXCIsdGhpcy5jdXJyZW50U2VsZWN0KVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJhbGxTZWxlY3RlZFwiLGFsbFNlbGVjdGVkKVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiAhYWxsU2VsZWN0ZWRcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNob3dCaWdBZGRCdG4oKXtcclxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50U2VsZWN0LmV2ZXJ5KGl0ZW09PntcclxuICAgICAgICAgICAgICAgIHJldHVybiBpc0VtcHR5KGl0ZW0ubGlzdClcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcmVhdGVkKCl7XHJcbiAgICAgICAgICAgIC8v5byA5ZCv5pe25o+Q56S6XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLiRuZXh0VGljaygpLnRoZW4oKCk9PntcclxuICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgICAgICAgICBzZWxmLiRlbWl0KCd1cGRhdGU6Y3VyZEVkaXRGdW5jJyx0aGlzLm9uT3BlblR5cGVFZGl0KVxyXG4gICAgICAgICAgICAgIH0sMClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vdW50ZWQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50VGl0bGUgPSBkb2N1bWVudC50aXRsZTtcclxuICAgICAgICAgICAgdGhpcy5vblVwZGF0ZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVzdHJveWVkKCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgIHNob3dMYWJvdXIoYm9vbGVhbSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dMYWJvdXJzPWJvb2xlYW1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25DZWxsKHZhbHVlLGl0ZW0sbW9kdWxlKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJvblBhZ2VDZWxsXCIsdmFsdWUsaXRlbSx0aGlzLnBhZ2VMaXN0LHRoaXMuYWN0aXZlSW5kZXgpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uUGFnZVBhcmFtc0NoYW5nZShpdGVtLG1vZHVsZSl7XHJcbiAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdChcInBhZ2VQYXJhbXNDaGFuZ2VcIixpdGVtLHRoaXMucGFnZUxpc3QsdGhpcy5hY3RpdmVJbmRleClcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25TYXZlQWxsKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KFwib25QYWdlU2F2ZVwiLHtcclxuICAgICAgICAgICAgICAgICAgICBtb2R1bGVDb2RlOnRoaXMubW9kdWxlQ29kZSxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOnRoaXMuY3VycmVudFR5cGUudHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRNb2R1bGVMaXN0OnRoaXMucGFnZUxpc3RbdGhpcy5jdXJyZW50UGFnZS0xXVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvdyA9IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8v6YCJ5oup5a+55bqU57G75Z6LXHJcbiAgICAgICAgICAgIG9uU2VsZWN0KHR5cGUpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0FjdGlvbiA9IHRydWVcclxuICAgICAgICAgICAgICAgIGxldCBmZWVUeXBlQ29kZSA9IHR5cGUuY29kZVxyXG4gICAgICAgICAgICAgICAgbGV0IHR5cGVLZXkgPSAtMVxyXG4gICAgICAgICAgICAgICAgbGV0IHR5cGVQYWdlTW9kdWxlID0gdGhpcy50eXBlTW9kdWxlTGlzdC5maW5kKChpdGVtLGluZGV4KT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0uY29kZSA9PT0gZmVlVHlwZUNvZGUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGVLZXkgPSBpbmRleFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5jb2RlID09PSBmZWVUeXBlQ29kZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFR5cGU9dHlwZVxyXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlS2V5ID0gdHlwZUtleVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2R1bGVMaXN0ID0gdHlwZVBhZ2VNb2R1bGUubW9kdWxlTGlzdFxyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlTGlzdCA9IFtjbG9uZURlZXAodGhpcy5tb2R1bGVMaXN0KV1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdHlwZVBhZ2UgPSBjbG9uZURlZXAodHlwZSlcclxuICAgICAgICAgICAgICAgIHR5cGVQYWdlLmxpc3QgPSB0aGlzLnBhZ2VMaXN0XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGVBbmRQYWdlTGlzdFswXSA9IHR5cGVQYWdlXHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93ID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93VHlwZVNlbGVjdFZpZXcgPSBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvL+mAieaLqeWvueW6lOexu+Wei+aYjue7huWQjui/m+WFpeWvueW6lOe8lui+kemhtVxyXG4gICAgICAgICAgICBvblNlbGVjdFR5cGVUaGVuRWRpdCgpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0FjdGlvbiA9IHRydWVcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGVMaXN0Lmxlbmd0aCA9PT0gMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNlbGVjdCh0aGlzLnR5cGVMaXN0WzBdKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IGFsbFR5cGVMaXN0ID0gY2xvbmVEZWVwKHRoaXMudHlwZUxpc3QpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuQWRkVHlwZUxpc3QgPSBbXVxyXG4gICAgICAgICAgICAgICAgYWxsVHlwZUxpc3QuZm9yRWFjaCh0eXBlPT57XHJcbiAgICAgICAgICAgICAgICAgICBsZXQgYWxyZWFkeUFkZCA9ICB0aGlzLmN1cnJlbnRTZWxlY3QuZmluZChjdXJyZW50PT5jdXJyZW50LmNvZGUgPT09IHR5cGUuY29kZSAmJiAhaXNFbXB0eShjdXJyZW50Lmxpc3QpKVxyXG4gICAgICAgICAgICAgICAgICAgaWYgKCFhbHJlYWR5QWRkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuQWRkVHlwZUxpc3QucHVzaCh0eXBlKVxyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGxldCBhbGxMaXN0RW1wdHkgPSB0aGlzLmN1cnJlbnRTZWxlY3QuZXZlcnkoY3VycmVudD0+e3JldHVybiBpc0VtcHR5KGN1cnJlbnQubGlzdCl9KVxyXG4gICAgICAgICAgICAgICAgaWYoaXNFbXB0eSh0aGlzLnVuQWRkVHlwZUxpc3QpJiZhbGxMaXN0RW1wdHkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5BZGRUeXBlTGlzdCA9IGFsbFR5cGVMaXN0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgdGhpcy5zaG93VHlwZVNlbGVjdFZpZXcgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgdGhpcy50ZXN0U2hvdyA9IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy/mmL7npLrmjIflrprnsbvlnovnmoTnvJbovpHpobXpnaJcclxuICAgICAgICAgICAgb25PcGVuVHlwZUVkaXQodHlwZVBhZ2Usa2V5LGluZGV4KXtcclxuICAgICAgICAgICAgICAgIGlmKCFpbmRleCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg9MFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8v5L+u5pS55YiG6aG16aG156CBXHJcbiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZT1pbmRleCsxXHJcbiAgICAgICAgICAgICAgdGhpcy5pc0FjdGlvbiA9IHRydWVcclxuICAgICAgICAgICAgICB0aGlzLnR5cGVLZXkgPSBrZXlcclxuICAgICAgICAgICAgICB0aGlzLnR5cGVQYWdlID0gdHlwZVBhZ2VcclxuICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUeXBlID0gdGhpcy50eXBlTGlzdC5maW5kKHR5cGU9PnR5cGUuY29kZSA9PT0gdHlwZVBhZ2UuY29kZSlcclxuICAgICAgICAgICAgICB0aGlzLm1vZHVsZUxpc3QgPSB0aGlzLnR5cGVNb2R1bGVMaXN0LmZpbmQobW9kdWxlPT57XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlUGFnZS5jb2RlID09PSBtb2R1bGUuY29kZVxyXG4gICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgIGlmIChpbmRleCl7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBpbmRleFxyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgdGhpcy5wYWdlTGlzdCA9IGNsb25lRGVlcCh0eXBlUGFnZS5saXN0KVxyXG4gICAgICAgICAgICAgIHRoaXMuc2hvdyA9IHRydWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25TaG93KCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3cgPSB0cnVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uVXBkYXRlKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvd0JpZ0FkZEJ0bikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtb2R1bGVMaXN0ID0gY2xvbmVEZWVwKHRoaXMubW9kdWxlTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdChcInVwZGF0ZTpwYWdlTGlzdFwiLCBbbW9kdWxlTGlzdF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFNlbGVjdFNob3cgPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8g5L+d5a2YXHJcbiAgICAgICAgICAgIGNvbmZpcm1TYXZlKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uU2F2ZSgpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUluZGV4ID0gdGhpcy5pbmRPYmouaW5kXHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlPXRoaXMuaW5kT2JqLmN1cnJlbnRQYWdlXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dJc1NhdmU9ZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8g5LiN5L+d5a2YXHJcbiAgICAgICAgICAgIGNhbmNlbFNhdmUoKXtcclxuICAgICAgICAgICAgICAgIHRoaXMub25DYW5jbGUoKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVJbmRleCA9IHRoaXMuaW5kT2JqLmluZFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZT10aGlzLmluZE9iai5jdXJyZW50UGFnZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93SXNTYXZlPWZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIOWPlua2iFxyXG4gICAgICAgICAgICBjYW5jZWxEaWFsb2coKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSB0aGlzLmluZE9iai5vbGRJbmQtMVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZT10aGlzLmluZE9iai5vbGRJbmRcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0lzU2F2ZT1mYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkNoYW5nZUFjdGl2ZUluZGV4KGluZGV4KXtcclxuICAgICAgICAgICAgICAgIC8vIOino+WGs+WIneWni+WMluWIm+W7uuaXtuWAmeivpeaVsOaNruS4jeWtmOWcqOeahOaDheWGteOAglxyXG4gICAgICAgICAgICAgICAgbGV0IHByZSA9IHRoaXMudHlwZVBhZ2UubGlzdD90aGlzLnR5cGVQYWdlLmxpc3RbdGhpcy5hY3RpdmVJbmRleF06W11cclxuICAgICAgICAgICAgICAgIGxldCBub3cgPSB0aGlzLnBhZ2VMaXN0W3RoaXMuYWN0aXZlSW5kZXhdXHJcbiAgICAgICAgICAgICAgICBpZiAocHJlICYmIGlzRXF1YWwocHJlLG5vdykpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBpbmRleC5pbmRcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlPWluZGV4LmN1cnJlbnRQYWdlXHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZE9iaj1pbmRleFxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuc2NlbmU9PT0yKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5bGP6JS96K+m5oOF6aG16Z2i5Ye6546w5by55qGG5qOA6aqMXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBpbmRleC5pbmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZT1pbmRleC5jdXJyZW50UGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93SXNTYXZlPXRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvL+aLt+i0nVxyXG4gICAgICAgICAgICBvbkNvcHkoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbW9kdWxlTGlzdCA9IGNsb25lRGVlcCh0aGlzLnBhZ2VMaXN0W3RoaXMuYWN0aXZlSW5kZXhdKTtcclxuICAgICAgICAgICAgICAgIC8v5aSN5Yi25pe25YCZ5riF6ZmkaWTvvIzpmLLmraLkuIDotbflpI3liLbkuoZcclxuICAgICAgICAgICAgICAgIGlmKG1vZHVsZUxpc3RbbW9kdWxlTGlzdC5sZW5ndGgtMV0ubW9kdWxlQ29kZT09PSdmaWN0aXRpb3VzJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlTGlzdC5wb3AoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbW9kdWxlTGlzdC5ldmVyeShpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5maWVsZEh1bXBOYW1lID09PSBcImlkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5maWVsZFZhbHVlID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5maWVsZFZhbHVlTmFtZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFnZUxpc3QucHVzaChtb2R1bGVMaXN0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSB0aGlzLnBhZ2VMaXN0Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlPWNsb25lRGVlcCggdGhpcy5wYWdlTGlzdC5sZW5ndGggKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvL+aWsOWinlxyXG4gICAgICAgICAgICBvbkFkZChpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVJbmRleCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZT1pbmRleCsxXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KFwib25QYWdlQWRkXCIsIHRoaXMuY2ZnTW9kdWxlVk8sIHRoaXMuYWN0aXZlSW5kZXgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5Yig6ZmkXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBvbkRlbGV0ZSgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRGVsZXRlRm4oKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy/liKDpmaRcclxuICAgICAgICAgICAgb25EZWxldGVGbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhZ2VMaXN0Lmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1vZHVsZUxpc3QgPSBjbG9uZURlZXAodGhpcy5tb2R1bGVMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VMaXN0LnNwbGljZSgwLCAxLCBtb2R1bGVMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoaXMuJGVtaXQoXCJpbnB1dFwiLCBbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGVDdXJyZW50SW5kZXgoKVxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMuJHJlZnNbXCJmaWVsZENlbGwwXCJdWzBdLmVycm9ycy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDEwKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGVDdXJyZW50SW5kZXgoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldmVudCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMucGFnZUxpc3Quc3BsaWNlKHRoaXMuYWN0aXZlSW5kZXgsIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbSA9IHRoaXMucGFnZUxpc3RbdGhpcy5hY3RpdmVJbmRleCArIDFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL+aKiuWQjuS4gOmhteW+gOWJjeenu+WKqFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBsZXQgY0l0ZW0gPSBjbG9uZURlZXAoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBsZXQgbUl0ZW0gPSB0aGlzLnBhZ2VMaXN0W3RoaXMuYWN0aXZlSW5kZXhdIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgbUl0ZW0uZXZlcnkoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmZpZWxkSHVtcE5hbWUgPT09IFwiaWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZmllbGRWYWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VMaXN0LnNwbGljZSh0aGlzLmFjdGl2ZUluZGV4LCAxLCBtZXJnZShtSXRlbSwgY0l0ZW0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFnZUxpc3Quc3BsaWNlKHRoaXMuYWN0aXZlSW5kZXggKyAxLCAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy/plJnor6/kv6Hmga/lpITnkIZcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzLiRyZWZzW1wiZmllbGRDZWxsXCIgKyB0aGlzLmFjdGl2ZUluZGV4XVswXS5lcnJvcnMuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VMaXN0LnNwbGljZSh0aGlzLmFjdGl2ZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5hY3RpdmVJbmRleD09PTApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlPTFcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZUluZGV4ID4gdGhpcy5wYWdlTGlzdC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSB0aGlzLnBhZ2VMaXN0Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2U9Y2xvbmVEZWVwKCB0aGlzLnBhZ2VMaXN0Lmxlbmd0aCApXHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGVuPWNsb25lRGVlcCh0aGlzLmFjdGl2ZUluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUluZGV4PWxlbi0xXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2U9Y2xvbmVEZWVwKGxlbilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlbGV0ZUN1cnJlbnRJbmRleCgpe1xyXG4gICAgICAgICAgICAgICAgLy/mib7liLDlvZPliY3pobVcclxuICAgICAgICAgICAgICAgIGxldCB0ZW1wTGlzdCA9IHRoaXMuY3VycmVudFNlbGVjdC5maW5kKGN1cnJlbnQ9PntcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudC5jb2RlID09PSB0aGlzLmN1cnJlbnRUeXBlLmNvZGVcclxuICAgICAgICAgICAgICAgIH0pIHx8IHtsaXN0OltdfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IHRlbXBMaXN0Lmxpc3RcclxuICAgICAgICAgICAgICAgIGxldCBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAvL+WIoOmZpOato+WcqOe8lui+keeahOmhtemdolxyXG4gICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0LnNwbGljZSh0aGlzLmFjdGl2ZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdHlwZUFuZFBhZ2VMaXN0ID0gY2xvbmVEZWVwKHRoaXMuY3VycmVudFNlbGVjdClcclxuICAgICAgICAgICAgICAgICAgICB0eXBlQW5kUGFnZUxpc3RbdGhpcy50eXBlS2V5XSA9IHRlbXBMaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVBbmRQYWdlTGlzdC5sZW5ndGggPT09IDEgJiYgdHlwZUFuZFBhZ2VMaXN0WzBdLmxpc3QubGVuZ3RoID09PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JyxbXSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLHR5cGVBbmRQYWdlTGlzdClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uU2F2ZSgpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50TW9kdWxlTGlzdCA9IGNsb25lRGVlcCh0aGlzLnBhZ2VMaXN0W3RoaXMuYWN0aXZlSW5kZXhdKTtcclxuICAgICAgICAgICAgICAgIGxldCB0eXBlQW5kUGFnZUxpc3QgPSBjbG9uZURlZXAodGhpcy5jdXJyZW50U2VsZWN0KVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBpdGVtID0gdHlwZUFuZFBhZ2VMaXN0LmZpbmQodHlwZUFuZFBhZ2U9PntcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50VHlwZS5jb2RlID09PSB0eXBlQW5kUGFnZS5jb2RlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgaWYoaXNFbXB0eShpdGVtKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbSA9IGNsb25lRGVlcCh0aGlzLmN1cnJlbnRUeXBlKVxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVBbmRQYWdlTGlzdC5wdXNoKGl0ZW0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihpc0VtcHR5KGl0ZW0ubGlzdCkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0ubGlzdD1bXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaXRlbS5saXN0W3RoaXMuYWN0aXZlSW5kZXhdID0gY3VycmVudE1vZHVsZUxpc3Q7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGVQYWdlID0gaXRlbVxyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdChcImlucHV0XCIsIHR5cGVBbmRQYWdlTGlzdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiR0b2FzdCh7bWVzc2FnZTogXCLkv53lrZjmiJDlip9cIn0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZm9yY2VVcGRhdGUoKVxyXG5cclxuICAgICAgICAgICAgICAvLyB0aGlzLiRuZXh0VGljaygoKT0+e1xyXG4gICAgICAgICAgICAgICAgLy8gfSlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy/lj5bmtojkv53lrZhcclxuICAgICAgICAgICAgb25DYW5jbGUoKXtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFnZUxpc3Q9Y2xvbmVEZWVwKHRoaXMudHlwZVBhZ2UubGlzdClcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25CYWNrKCkge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5zY2VuZT09PTIpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy/liKTmlq3mmK/lkKbpg73kv53lrZjmi6bmiKpcclxuICAgICAgICAgICAgICAgIGxldCBzYXZlZFBhZ2VzID0gW10gO1xyXG4gICAgICAgICAgICAgICAgbGV0IHVuU2F2ZWRQYWdlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgKHRoaXMudHlwZVBhZ2UubGlzdCB8fCBbXSkuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSAmJiBpc0VxdWFsKGl0ZW0sdGhpcy5wYWdlTGlzdFtpbmRleF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkUGFnZXMucHVzaChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAodGhpcy5wYWdlTGlzdCB8fCBbXSkuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2F2ZWRQYWdlcy5pbmRleE9mKGluZGV4KSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5TYXZlZFBhZ2VzLnB1c2goaW5kZXggKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vIOaYvuekuu+8jOS4jemcgOimgemhtemdoue8lui+keebtOaOpei/lOWbnlxyXG4gICAgICAgICAgICAgICAgaWYoIXRoaXMuaXNTaG93VHlwZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodW5TYXZlZFBhZ2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9IHVuU2F2ZWRQYWdlcy5qb2luKFwiLFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRkaWFsb2dcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmZpcm0oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYOS9oOi/mOacieesrFske21lc3NhZ2V9XemhteacquS/neWtmCzor7flrozlloTooajljZXvvIFgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwi57un57ut57yW6L6RXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIuaUvuW8g+S/neWtmFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHt9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGVQYWdlID0gY2xvbmVEZWVwKHRoaXMudHlwZVBhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRTYXZlZExpc3QgPSAodHlwZVBhZ2UubGlzdCB8fCBbXSkuZmlsdGVyKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlUGFnZS5saXN0ID0gY3VycmVudFNhdmVkTGlzdCB8fCBbXVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjdXJyZW50U2VsZWN0ID0gY2xvbmVEZWVwKHRoaXMuY3VycmVudFNlbGVjdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzRW1wdHkodHlwZVBhZ2UubGlzdCkpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTZWxlY3RbdGhpcy50eXBlS2V5XSA9IHR5cGVQYWdlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93ID0gZmFsc2U7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJ1cGRhdGU6cGFnZUxpc3RcIiwgW10pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiAyMDIwLzEvMTMgIOa4healmuS4iuasoeeahOmUmeivr+S/oeaBr1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLiRyZWZzW1wiZmllbGRDZWxsXCIgKyB0aGlzLmFjdGl2ZUluZGV4XVswXS5lcnJvcnMuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdChcIm9uUGFnZVNlbGVjdFwiLCB0aGlzLmN1cnJlbnRTZWxlY3QsIHRoaXMuY2ZnTW9kdWxlVk8pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHdhdGNoOiB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRTZWxlY3Q6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8v6K6h566X57uf6K6h6YeR6aKdXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoQXJyYXkuaXNBcnJheSggdGhpcy5jdXJyZW50U2VsZWN0ICkgJiYgdGhpcy5jdXJyZW50U2VsZWN0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG90YWxBbW91bnQgPSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVBbmRQYWdlSW5mbyA9IHRoaXMuY3VycmVudFNlbGVjdFswXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWdlTGlzdCA9IHR5cGVBbmRQYWdlSW5mby5saXN0ICB8fCBbXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlTGlzdC5mb3JFYWNoKGZpZWxkTGlzdD0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFtdFN1bUxpc3QgPSB0aGlzLmZpbmRGaWVsZFdpdGhDb25maWcoZmllbGRMaXN0LCdpc1N1bScsdHJ1ZSkgfHwgW11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYW10U3VtTGlzdF9maWVsZExpc3Q6JyxmaWVsZExpc3QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2FtdFN1bUxpc3Q6JyxhbXRTdW1MaXN0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFtdCA9IGFtdFN1bUxpc3QucmVkdWNlKCh0b3RhbCxpdGVtKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvdGFsK3BhcnNlRmxvYXQoaXRlbS5maWVsZFZhbHVlIHx8IFwiMFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEFtb3VudCA9IHRvdGFsQW1vdW50ICsgcGFyc2VGbG9hdChhbXQgfHwgJzAnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvdGFsQW1vdW50ID0gdG90YWxBbW91bnRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGVlcDogdHJ1ZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICog5re75YqgL+e8lui+kS/mn6XnnIvpobXpnaJcclxuICAgICAgICAgICAgICogKi9cclxuICAgICAgICAgICAgc2hvdygpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldE5hdGl2ZVRvcEJhY2sgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldE5hdGl2ZVRvcEJhY2sodGhpcy5zaG93KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhpcy5hY3RpdmVJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBcIua3u+WKoFwiICsgdGhpcy4kYXR0cnMubGFiZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGVNb2R1bGUgPSB0aGlzLnR5cGVNb2R1bGVMaXN0LmZpbmQodHlwZU1vZHVsZUl0ZW09PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVNb2R1bGVJdGVtLmNvZGUgPT09IHRoaXMuY3VycmVudFR5cGUuY29kZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pIHx8IHt9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2R1bGVMaXN0ID0gY2xvbmVEZWVwKHR5cGVNb2R1bGUubW9kdWxlTGlzdCkgfHwgW11cclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSAwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgc2NvcGVkPlxyXG4gICAgLmFjdGlvbi1zaXple1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMTBweDtcclxuICAgIH1cclxuICAgIC5wcmVmaXh7XHJcbiAgICAgICAgZm9udC1zaXplOiAxNXB4O1xyXG4gICAgICAgIGNvbG9yOiAjMzMzMzMzO1xyXG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICB9XHJcbiAgICAubW9uZXl7XHJcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDBweDtcclxuICAgICAgICBjb2xvcjogIzMzMzMzMztcclxuICAgIH1cclxuICAgIC5tb3JlLWJ0bntcclxuICAgICAgICB3aWR0aDogMTAwJTtkaXNwbGF5OiBmbGV4O2ZsZXgtZGlyZWN0aW9uOiByb3c7anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtwYWRkaW5nOiAxMHB4O3BhZGRpbmctcmlnaHQ6IDI1cHg7Y29sb3I6ICMxOTg5ZmE7Zm9udC1zaXplOiAxM3B4XHJcbiAgICB9XHJcbiAgICAuZGlhLWNsb3Nze1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtyaWdodDogMC4yOXJlbTttYXJnaW4tdG9wOiAtMnJlbVxyXG4gICAgfVxyXG4gICAgPj4+IC52YW4tY2VsbDo6YWZ0ZXJ7XHJcbiAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbjwvc3R5bGU+XHJcbiIsImltcG9ydCBGaWVsZENydWQgZnJvbSAnLi9GaWVsZENydWQudnVlJ1xyXG4vL+ihqOWNlee7hOS7tlxyXG5GaWVsZENydWQuaW5zdGFsbCA9IGZ1bmN0aW9uKFZ1ZSl7XHJcbiAgICBWdWUuY29tcG9uZW50KEZpZWxkQ3J1ZC5uYW1lLEZpZWxkQ3J1ZClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBGaWVsZENydWQiLCI8dGVtcGxhdGU+XHJcbiAgICA8VmFsaWRhdGlvbk9ic2VydmVyIHJlZj1cInZhbGlkT2JcIiB0YWc9XCJkaXZcIj5cclxuICAgICAgPGRpdiB2LWZvcj1cIihpdGVtLGtleSkgaW4gZmllbGRMaXN0XCIgOmtleT1cImtleVwiPlxyXG4gICAgICAgIDxWYWxpZGF0aW9uUHJvdmlkZXJcclxuICAgICAgICAgICAgdi1pZj1cIml0ZW0uZm9ybVNsb3RcIlxyXG4gICAgICAgICAgICA6bmFtZT1cIml0ZW0ubGFiZWxcIlxyXG4gICAgICAgICAgICA6cnVsZXM9XCJ7J3JlcXVpcmVkJzppdGVtLnJlcXVpcmVkfVwiXHJcbiAgICAgICAgICAgIHYtc2xvdD1cIntlcnJvcnN9XCI+XHJcbiAgICAgICAgICAgICAgPEZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgIDpsYWJlbD1cIml0ZW0ubGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6cmVxdWlyZWQ9XCJpdGVtLnJlcXVpcmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgOmVycm9yLW1lc3NhZ2U9XCJlcnJvcnNbMF1cIlxyXG4gICAgICAgICAgICAgICAgICAgICA6ZXJyb3ItbWVzc2FnZS1hbGlnbj1cIidyaWdodCdcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6aW5wdXQtYWxpZ249XCIncmlnaHQnXCJcclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgc2xvdD1cImlucHV0XCI+XHJcbiAgICAgICAgICAgICAgICAgIDxzbG90IDpuYW1lPVwiaXRlbS5maWVsZE5hbWVcIiA6cm93PVwiaXRlbVwiPjwvc2xvdD5cclxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgICAgICAgPC9GaWVsZD5cclxuICAgICAgICA8L1ZhbGlkYXRpb25Qcm92aWRlcj5cclxuICAgICAgICA8RmllbGRUZXh0IHYtZWxzZS1pZj1cIiFpdGVtLmhpZGRlbiYmKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5maWVsZFR5cGUgPT09ICd0ZXh0J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgaXRlbS5maWVsZFR5cGUgPT09ICd0ZXh0YXJlYSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGl0ZW0uZmllbGRUeXBlID09PSAnaW50J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgaXRlbS5maWVsZFR5cGUgPT09ICdhbW91bnQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBpdGVtLmZpZWxkVHlwZSA9PT0gJ251bWJlcicpXCJcclxuICAgICAgICAgICAgICAgICAgIDp2YWxpZGF0ZS1ydWxlcz1cInNjZW5lIT09Mj8geydyZXF1aXJlZCc6aXRlbS5yZXF1aXJlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICdpc21vbmV5JzooaXRlbS5maWVsZFR5cGUgPT09ICdhbW91bnQnP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgKGl0ZW0uZmllbGRWYWx1ZSwoaXRlbS5sYWJlbCB8fCBpdGVtLmZpZWxkTmFtZSkpOmZhbHNlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIC4uLml0ZW0udmFsaWRhdGVSdWxlc306e31cIlxyXG4gICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PVwiaXRlbS5kaXNhYmxlZCB8fCBzY2VuZSA9PT0gMlwiXHJcbiAgICAgICAgICAgICAgICAgICA6cmVxdWlyZWQ9XCJpdGVtLnJlcXVpcmVkICYmIHNjZW5lICE9PTJcIlxyXG4gICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPVwiaXRlbS5wbGFjZWhvbGRlciB8fCAoc2NlbmUhPT0yP2Dor7fovpPlhaUke2l0ZW0ubGFiZWwgfHwgaXRlbS5maWVsZE5hbWV9YDonJylcIlxyXG4gICAgICAgICAgICAgICAgICAgOmxhYmVsPVwiaXRlbS5sYWJlbCB8fCBpdGVtLmZpZWxkTmFtZVwiXHJcbiAgICAgICAgICAgICAgICAgICA6dHlwZT1cIml0ZW0udGV4dEZpZWxkVHlwZSB8fCAndGV4dCdcIlxyXG4gICAgICAgICAgICAgICAgICAgOmZpZWxkVHlwZT1cIml0ZW0uZmllbGRUeXBlIHx8ICd0ZXh0J1wiXHJcbiAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwibW9kdWxlT2JqW2l0ZW0uZmllbGROYW1lXVwiXHJcbiAgICAgICAgICAgICAgICAgICA6bWF4bGVuZ3RoPVwiaXRlbS5tYXhMZW5ndGhcIlxyXG4gICAgICAgICAgICAgICAgICAgOnNob3ctd29yZC1saW1pdD1cIml0ZW0uZmllbGRUeXBlID09PSAndGV4dGFyZWEnICYmIHNjZW5lIT09MlwiXHJcbiAgICAgICAgICAgICAgICAgICA6YXV0b3NpemU9XCJpdGVtLmZpZWxkVHlwZSA9PT0gJ3RleHRhcmVhJ1wiXHJcbiAgICAgICAgICAgICAgICAgICBAb25UZXh0PVwib25DZWxsKCRldmVudCxpdGVtKVwiXHJcbiAgICAgICAgICAgICAgICAgICA6ZXJyb3ItbWVzc2FnZS1hbGlnbj1cIidyaWdodCdcIlxyXG4gICAgICAgICAgICAgICAgICAgOmlucHV0LWFsaWduPVwiJ3JpZ2h0J1wiXHJcbiAgICAgICAgICAgICAgICAgICA6cmVtYXJrPVwiaXRlbS5yZW1hcmtcIlxyXG4gICAgICAgICAgICAgICAgICAgOmlzLWVuZD1cImZpZWxkTGlzdC5sZW5ndGggPT09IGtleSsxXCJcclxuICAgICAgICAvPlxyXG4gICAgICAgIDxGaWVsZFNlbGVjdCB2LWVsc2UtaWY9XCIhaXRlbS5oaWRkZW4mJml0ZW0uZmllbGRUeXBlID09PSAnc2VsZWN0J1wiXHJcbiAgICAgICAgICAgICAgICAgICAgIDpzY2VuZT1cInNjZW5lXCJcclxuICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cIm1vZHVsZU9ialtpdGVtLmZpZWxkTmFtZV1cIlxyXG4gICAgICAgICAgICAgICAgICAgICBAcGFyYW1zQ2hhbmdlPVwib25QYXJhbXNDaGFuZ2UoaXRlbSlcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6Z2V0LXR5cGU9XCJpdGVtLmdldFR5cGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6bGFiZWw9XCJpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbi1jb2Rlcz1cIml0ZW0ub3B0aW9uQ29kZXMgfHwgW11cIlxyXG4gICAgICAgICAgICAgICAgICAgICBAb25TZWxlY3Q9XCJvbkNlbGwoJGV2ZW50LGl0ZW0pXCJcclxuICAgICAgICAgICAgICAgICAgICAgOnZhbGlkYXRlLXJ1bGVzPVwic2NlbmUhPT0yP3sncmVxdWlyZWQnOml0ZW0ucmVxdWlyZWR9Ont9XCJcclxuICAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PVwic2NlbmUhPT0xXCJcclxuICAgICAgICAgICAgICAgICAgICAgOnJlcXVpcmVkPVwiaXRlbS5yZXF1aXJlZCAmJiBzY2VuZSAhPT0yXCJcclxuICAgICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPVwic2NlbmUhPT0yPyfor7fpgInmi6knOicnXCJcclxuICAgICAgICAgICAgICAgICAgICAgOnBvc3QtdXJsPVwiaXRlbS5wb3N0VXJsXCJcclxuICAgICAgICAgICAgICAgICAgICAgOnBvc3QtZGF0YT1cIml0ZW0ucG9zdERhdGFcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgOnJlbWFyaz1cIml0ZW0ucmVtYXJrXCJcclxuICAgICAgICAgICAgICAgICAgICAgOmlzLWVuZD1cImZpZWxkTGlzdC5sZW5ndGg9PT1rZXkrMVwiXHJcbiAgICAgICAgPjwvRmllbGRTZWxlY3Q+XHJcbiAgICAgICAgPEZpZWxkQWRkcmVzcyB2LWVsc2UtaWY9XCIhaXRlbS5oaWRkZW4mJml0ZW0uZmllbGRUeXBlID09PSAnYWRkcmVzcydcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgOnZhbGlkYXRlLXJ1bGVzPVwic2NlbmUhPT0yP3sncmVxdWlyZWQnOml0ZW0ucmVxdWlyZWR9Ont9XCJcclxuICAgICAgICAgICAgICAgICAgICAgIDpyZXF1aXJlZD1cIml0ZW0ucmVxdWlyZWQgJiYgc2NlbmUgIT09MlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICA6bGFiZWw9XCJpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgIDpwbGFjZWhvbGRlcj1cInNjZW5lPT09MT9g6K+36YCJ5oupJHtpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lfWA6JydcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cIm1vZHVsZU9ialtpdGVtLmZpZWxkTmFtZV1cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgQG9uQ2VsbD1cIm9uQ2VsbCgkZXZlbnQsaXRlbSlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPVwiaXRlbS5kaXNhYmxlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICA6cmVtYXJrPVwiaXRlbS5yZW1hcmtcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgOmlzLWVuZD1cImZpZWxkTGlzdC5sZW5ndGg9PT1rZXkrMVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICA6c2VsZWN0LWxldmVsPVwiaXRlbS5zZWxlY3RMZXZlbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICA6c2hvdy1wcm92aW5jZS1uYW1lPVwiaXRlbS5zaG93UHJvdmluY2VOYW1lXCJcclxuICAgICAgICA+PC9GaWVsZEFkZHJlc3M+XHJcbiAgICAgICAgPEZpZWxkRGF0ZSB2LWVsc2UtaWY9XCIhaXRlbS5oaWRkZW4mJml0ZW0uZmllbGRUeXBlID09PSAnZGF0ZSdcIlxyXG4gICAgICAgICAgICAgICAgICAgOnNjZW5lPVwic2NlbmVcIlxyXG4gICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cIm1vZHVsZU9ialtpdGVtLmZpZWxkTmFtZV1cIlxyXG4gICAgICAgICAgICAgICAgICAgOmxhYmVsPVwiaXRlbS5sYWJlbCB8fCBpdGVtLmZpZWxkTmFtZVwiXHJcbiAgICAgICAgICAgICAgICAgICBAb25EYXRldGltZT1cIm9uQ2VsbCgkZXZlbnQsaXRlbSlcIlxyXG4gICAgICAgICAgICAgICAgICAgOnZhbGlkYXRlLXJ1bGVzPVwic2NlbmUhPT0yP3sncmVxdWlyZWQnOml0ZW0ucmVxdWlyZWR9Ont9XCJcclxuICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT1cInNjZW5lIT09MVwiXHJcbiAgICAgICAgICAgICAgICAgICA6cmVxdWlyZWQ9XCJpdGVtLnJlcXVpcmVkICYmIHNjZW5lICE9PTJcIlxyXG4gICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPVwic2NlbmU9PT0xP2Dor7fovpPlhaUke2l0ZW0ubGFiZWwgfHwgaXRlbS5maWVsZE5hbWV9YDonJ1wiXHJcbiAgICAgICAgICAgICAgICAgICA6bWluLWRhdGU9XCJpdGVtLm1pbkRhdGU/aXRlbS5taW5EYXRlOicxOTAwLTAxLTAxJ1wiXHJcbiAgICAgICAgICAgICAgICAgICA6bWF4LWRhdGU9XCJpdGVtLm1heERhdGVcIlxyXG4gICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPVwiaXRlbS5kaXNhYmxlZFwiXHJcbiAgICAgICAgICAgICAgICAgICA6Z2V0VHlwZT1cIml0ZW0uY29uZmlnTmFtZT9pdGVtLmNvbmZpZ05hbWU6J1lZWVktTU0tREQnXCJcclxuICAgICAgICAgICAgICAgICAgIDpyZW1hcms9XCJpdGVtLnJlbWFya1wiXHJcbiAgICAgICAgICAgICAgICAgICA6aXMtZW5kPVwiZmllbGRMaXN0Lmxlbmd0aD09PWtleSsxXCJcclxuICAgICAgICAvPlxyXG4gICAgICAgIDxGaWVsZENoZWNrQm94U2VsZWN0IHYtZWxzZS1pZj1cIiFpdGVtLmhpZGRlbiAmJiBpdGVtLmZpZWxkVHlwZT09PSd0cmVlJ1wiXHJcbiAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwibW9kdWxlT2JqW2l0ZW0uZmllbGROYW1lXVwiXHJcbiAgICAgICAgICAgICAgICAgICA6bGFiZWw9XCJpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgIDpzY2VuZT1cInNjZW5lXCJcclxuICAgICAgICAgICAgICAgICAgIDpjb25maWctbmFtZT1cIml0ZW0uY29uZmlnLmNvbmZpZ05hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgOnZhbGlkYXRlLXJ1bGVzPVwic2NlbmUhPT0yP3sncmVxdWlyZWQnOml0ZW0ucmVxdWlyZWR9Ont9XCJcclxuICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT1cInNjZW5lIT09MVwiXHJcbiAgICAgICAgICAgICAgICAgICA6cmVxdWlyZWQ9XCJpdGVtLnJlcXVpcmVkICYmIHNjZW5lICE9PTJcIlxyXG4gICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPVwic2NlbmUhPT0yP2Dor7fpgInmi6kke2l0ZW0ubGFiZWwgfHwgaXRlbS5maWVsZE5hbWV9YDonJ1wiXHJcbiAgICAgICAgICAgICAgICAgICA6cG9zdC11cmw9XCJpdGVtLnBvc3RVcmxcIlxyXG4gICAgICAgICAgICAgICAgICAgOnBvc3QtZGF0YT1cIml0ZW0ucG9zdERhdGFcIlxyXG4gICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPVwiaXRlbS5kaXNhYmxlZFwiXHJcbiAgICAgICAgICAgICAgICAgICA6YWRkLWFibGU9XCIoaXRlbS5jb25maWcuYWRkQWJsZSA9PT0gJ3RydWUnIHx8IGZhbHNlKVwiXHJcbiAgICAgICAgICAgICAgICAgICBAb25UcmVlPVwib25DZWxsKCRldmVudCxpdGVtKVwiXHJcbiAgICAgICAgICAgICAgICAgICBAcGFyYW1zQ2hhbmdlPVwib25QYXJhbXNDaGFuZ2UoaXRlbSlcIlxyXG4gICAgICAgICAgICAgICAgICAgOmlzU2Vjb25kUGFnZT1cImlzU2Vjb25kUGFnZVwiXHJcbiAgICAgICAgICAgICAgICAgICA6cmVtYXJrPVwiaXRlbS5yZW1hcmtcIlxyXG4gICAgICAgICAgICAgICAgICAgOmlzLWVuZD1cImZpZWxkTGlzdC5sZW5ndGg9PT1rZXkrMVwiXHJcbiAgICAgICAgLz5cclxuPCEtLSAgICAgICAgPEZpZWxkQ3J1ZCB2LWVsc2UtaWY9XCIhaXRlbS5oaWRkZW4mJml0ZW0uZmllbGRUeXBlID09PSAnZmllbGRDcnVkJ1wiLS0+XHJcbjwhLS0gICAgICAgICAgICAgICAgICAgOnZhbGlkYXRlLXJ1bGVzPVwieydyZXF1aXJlZCc6dHJ1ZX1cIi0tPlxyXG48IS0tICAgICAgICAgICAgICAgICAgIDpsYWJlbD1cIml0ZW0ubGFiZWxcIi0tPlxyXG48IS0tICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJpdGVtLnR5cGVTZWNvbmRTaG93UGFnZUxpc3RcIi0tPlxyXG48IS0tICAgICAgICAgICAgICAgICAgIDp0eXBlLW1vZHVsZS1saXN0PVwiaXRlbS50eXBlU2Vjb25kTW9kdWxlTGlzdFwiLS0+XHJcbjwhLS0gICAgICAgICAgICAgICAgICAgOnR5cGUtYW5kLXBhZ2UtbGlzdD1cIml0ZW0udHlwZVNlY29uZEVkaXRQYWdlTGlzdFwiLS0+XHJcbjwhLS0gICAgICAgICAgICAgICAgICAgOnR5cGUtbGlzdD1cIml0ZW0udHlwZUxpc3RcIi0tPlxyXG48IS0tICAgICAgICAgICAgICAgICAgIDpleHRDb25maWc9XCJpdGVtLmNvbmZpZy5leHRDb25maWdcIi0tPlxyXG48IS0tICAgICAgICAgICAgICAgICAgIEBvblBhZ2VTYXZlPVwib25QYWdlU2F2ZVwiLS0+XHJcbjwhLS0gICAgICAgICAgICAgICAgICAgQG9uUGFnZUNlbGw9XCJvblBhZ2VDZWxsXCItLT5cclxuPCEtLSAgICAgICAgICAgICAgICAgICBAcGFnZVBhcmFtc0NoYW5nZT1cIm9uUGFnZVBhcmFtc0NoYW5nZVwiLS0+XHJcbjwhLS0gICAgICAgICAgICAgICAgICAgOnNjZW5lPVwic2NlbmVcIi0tPlxyXG48IS0tICAgICAgICAgICAgICAgICAgIDpyZWltYlR5cGU9XCJyZWltYlR5cGVcIi0tPlxyXG48IS0tICAgICAgICAgICAgICAgICAgIDpzaG93RGF0YT1cIml0ZW0uc2hvd0RhdGFcIi0tPlxyXG48IS0tICAgICAgICAgICAgICAgICAgIDpzaG93TmFtZT1cIml0ZW0uY29uZmlnLnNob3dOYW1lXCItLT5cclxuPCEtLSAgICAgICAgICAgICAgICAgICA6YWRkQWJsZT1cIml0ZW0uY29uZmlnLmFkZEFibGUgIT09ICdmYWxzZSdcIi0tPlxyXG48IS0tICAgICAgICAgICAgICAgICAgIDp0aXBUaXRsZUluZm9MaXN0PVwiaXRlbS5maWVsZFZhbHVlJiZpdGVtLmZpZWxkVmFsdWUubGVuZ3RoPjAmJml0ZW0uZmllbGRWYWx1ZVswXS50cmF2ZWxTdGF0aXN0aWNzTGlzdHx8W11cIi0tPlxyXG48IS0tICAgICAgICA+LS0+XHJcbjwhLS0gICAgICAgIDwvRmllbGRDcnVkPi0tPlxyXG4gICAgPC9kaXY+XHJcbiAgICA8L1ZhbGlkYXRpb25PYnNlcnZlcj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuaW1wb3J0IEZpZWxkVGV4dCBmcm9tIFwiLi9GaWVsZFRleHRcIjtcclxuaW1wb3J0IEZpZWxkQWRkcmVzcyBmcm9tIFwiLi9GaWVsZEFkcmVzc1wiO1xyXG5pbXBvcnQgRmllbGREYXRlIGZyb20gXCIuL0ZpZWxkRGF0ZVwiO1xyXG5pbXBvcnQgRmllbGRTZWxlY3QgZnJvbSBcIi4vRmllbGRTZWxlY3R0XCI7XHJcbmltcG9ydCBGaWVsZENoZWNrQm94U2VsZWN0IGZyb20gXCIuL0ZpZWxkQ2hlY2tCb3hTZWxlY3RcIjtcclxuaW1wb3J0IHsgRmllbGQgfSBmcm9tICd2YW50J1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOidNb2R1bGVGaWVsZFJlYWN0aXZlJyxcclxuICAgIGNvbXBvbmVudHM6e0ZpZWxkU2VsZWN0LEZpZWxkVGV4dCxGaWVsZENoZWNrQm94U2VsZWN0LEZpZWxkRGF0ZSxGaWVsZEFkZHJlc3MsRmllbGR9LFxyXG4gICAgcHJvcHM6e1xyXG4gICAgICAvL+Wtl+auteWIl+ihqFxyXG4gICAgICBmaWVsZExpc3Q6e1xyXG4gICAgICAgIHR5cGU6QXJyYXksXHJcbiAgICAgICAgZGVmYXVsdDooKT0+W11cclxuICAgICAgfSxcclxuICAgICAgLy/mqKHlnZfmoIfor4ZDb2RlXHJcbiAgICAgIG1vZHVsZUNvZGU6e1xyXG4gICAgICAgIHR5cGU6U3RyaW5nLFxyXG4gICAgICAgIGRlZmF1bHQ6XCJcIlxyXG4gICAgICB9LFxyXG4gICAgICBzY2VuZToge1xyXG4gICAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXHJcbiAgICAgICAgZGVmYXVsdDogMVxyXG4gICAgICB9LFxyXG4gICAgICAvL+aYr+WQpuaYr+S6jOe6p+WtkOmhtemdolxyXG4gICAgICBpc1NlY29uZFBhZ2U6e1xyXG4gICAgICAgIHR5cGU6Qm9vbGVhbixcclxuICAgICAgICBkZWZhdWx0OmZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIC8v5piv5ZCm5L2/55SoTW9kZWznmoTkuqTkupLmqKHlvI8gdHJ1ZSDlk43lupTlvI/nmoQgZmFsc2Ug5ZG95Luk5byP55qE6buY6K6k5pyq5ZG95Luk5byP55qEXHJcbiAgICAgIHVzZU1vZGVsOntcclxuICAgICAgICB0eXBlOkJvb2xlYW4sXHJcbiAgICAgICAgZGVmYXVsdDpmYWxzZVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZGF0YSgpe1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC8v5qih5Z2X5piv5ZCm6L+Y5Zyo5Yib5bu65LitLi4uIHRydWXmnKrliJvlu7ogZmFsc2Ug5bey5Yib5bu6XHJcbiAgICAgICAgbW9kdWxlQ3JlYXRpbmc6dHJ1ZSxcclxuICAgICAgICBtb2R1bGVPYmo6e1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtZXRob2RzOntcclxuICAgICAgb25TaW5nbGVQYWdlU2F2ZShtb2R1bGVMaXN0LHByZXZlbnQsYWN0aXZhdGVJbmRleCl7XHJcbiAgICAgICAgdGhpcy4kZW1pdCgnb25TaW5nbGVQYWdlU2F2ZScsIG1vZHVsZUxpc3QscHJldmVudCxhY3RpdmF0ZUluZGV4KVxyXG5cclxuICAgICAgfSxcclxuICAgICAgb25TaW5nbGVQYWdlUmVtb3ZlKG1vZHVsZUxpc3QscHJldmVudCxhY3RpdmF0ZUluZGV4KXtcclxuICAgICAgICB0aGlzLiRlbWl0KCdvblNpbmdsZVBhZ2VSZW1vdmUnLCBtb2R1bGVMaXN0LHByZXZlbnQsYWN0aXZhdGVJbmRleClcclxuXHJcbiAgICAgIH0sXHJcbiAgICAgIG9uUGFnZUNlbGwgKHZhbHVlLCBpdGVtLCBtb2R1bGUsIGFjdGl2ZUluZGV4KSB7XHJcbiAgICAgICAgdGhpcy4kZW1pdCgnb25QYWdlQ2VsbCcsIHZhbHVlLCBpdGVtLCBtb2R1bGUsIGFjdGl2ZUluZGV4KVxyXG4gICAgICB9LFxyXG4gICAgICBvblBhZ2VCbHVyICh2YWx1ZSwgaXRlbSwgbW9kdWxlLCBhY3RpdmVJbmRleCkge1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ29uUGFnZUJsdXInLCB2YWx1ZSwgaXRlbSwgbW9kdWxlLCBhY3RpdmVJbmRleClcclxuICAgICAgfSxcclxuICAgICAgb25QYWdlUGFyYW1zQ2hhbmdlKGl0ZW0sIG1vZHVsZSwgYWN0aXZlSW5kZXgpe1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ3BhZ2VQYXJhbXNDaGFuZ2UnLCBpdGVtLCBtb2R1bGUsIGFjdGl2ZUluZGV4KVxyXG4gICAgICB9LFxyXG4gICAgICBvbkNlbGwgKGZpZWxkVmFsLCBpdGVtKSB7XHJcbiAgICAgICAgdGhpcy4kZW1pdCgnb25DZWxsJywgZmllbGRWYWwsIGl0ZW0pXHJcbiAgICAgIH0sXHJcbiAgICAgIG9uQmx1ciAoZmllbGRWYWwsIGl0ZW0pIHtcclxuICAgICAgICB0aGlzLiRlbWl0KCdvbkJsdXInLCBmaWVsZFZhbCwgaXRlbSlcclxuICAgICAgfSxcclxuICAgICAgb25QYXJhbXNDaGFuZ2UoZmllbGRWYWwpe1xyXG4gICAgICAgIHRoaXMuJGVtaXQoXCJwYXJhbXNDaGFuZ2VcIixmaWVsZFZhbClcclxuICAgICAgfSxcclxuICAgICAgb25QYWdlU2F2ZShtb2R1bGVDb2RlKXtcclxuICAgICAgICB0aGlzLiRlbWl0KCdvblBhZ2VTYXZlJyxtb2R1bGVDb2RlKVxyXG4gICAgICB9LFxyXG4gICAgICBvbkFkZFByb2plY3QoZmllbGRWYWwsIGl0ZW0pe1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ29uQWRkUHJvamVjdCcsIGZpZWxkVmFsLCBpdGVtKVxyXG4gICAgICB9LFxyXG4gICAgICAvL+ihqOWNlemqjOivgVxyXG4gICAgICB2YWxpZGF0ZSgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRyZWZzLnZhbGlkT2IudmFsaWRhdGUoKVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlZCgpe1xyXG4gICAgICAvLyBjb25zdCB1bndhdGNoICA9IHRoaXMuJHdhdGNoKCdtb2R1bGVPYmonLCgpPT57XHJcbiAgICAgIC8vICAgICB0aGlzLm1vZHVsZUNyZWF0aW5nID0gZmFsc2VcclxuICAgICAgLy8gICAgIHVud2F0Y2goKVxyXG4gICAgICAvLyB9LHtkZWVwOnRydWV9KVxyXG4gICAgICBjb25zb2xlLmxvZygnbW9kdWxlRmllbGQnLCdjcmVhdGVkJylcclxuICAgICAgdGhpcy4kbmV4dFRpY2soKCk9PntcclxuICAgICAgICBjb25zb2xlLmxvZygnbW9kdWxlRmllbGQnLCduZXh0VGljaycpXHJcbiAgICAgICAgc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ21vZHVsZUZpZWxkJywndGltZW91dDAnKVxyXG4gICAgICAgICAgY29uc3QgdGVtcE9iaiA9IHt9XHJcbiAgICAgICAgICB0aGlzLmZpZWxkTGlzdC5mb3JFYWNoKGZpZWxkPT57XHJcbiAgICAgICAgICAgICAgaWYgKGZpZWxkLmZpZWxkTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgLy90aGlzLiRzZXQodGhpcy5tb2R1bGVPYmosZmllbGQuZmllbGROYW1lLGZpZWxkLmZpZWxkVmFsdWUpXHJcbiAgICAgICAgICAgICAgICB0ZW1wT2JqW2ZpZWxkLmZpZWxkTmFtZV0gPSBmaWVsZC5maWVsZFZhbHVlXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIHRoaXMubW9kdWxlT2JqID0gdGVtcE9ialxyXG4gICAgICAgIH0sMClcclxuICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBtb3VudGVkKCl7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdtb2R1bGVGaWVsZCcsJ21vdW50ZWQnKVxyXG4gICAgfSxcclxuICAgIHdhdGNoOntcclxuICAgICAgbW9kdWxlT2JqOntcclxuICAgICAgICBoYW5kbGVyKCl7XHJcbiAgICAgICAgICBpZiAodGhpcy5tb2R1bGVDcmVhdGluZyl7XHJcbiAgICAgICAgICAgIHRoaXMubW9kdWxlQ3JlYXRpbmcgPSBmYWxzZVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLHRoaXMubW9kdWxlT2JqKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVlcDp0cnVlXHJcbiAgICAgIH0sXHJcbiAgICB9XHJcbn1cclxuPC9zY3JpcHQ+XHJcbiIsIjx0ZW1wbGF0ZT5cclxuICAgIDxWYWxpZGF0aW9uT2JzZXJ2ZXIgcmVmPVwidmFsaWRPYlwiIHRhZz1cImRpdlwiPlxyXG4gICAgICA8ZGl2IHYtZm9yPVwiKGl0ZW0sa2V5KSBpbiBmaWVsZExpc3RcIiA6a2V5PVwia2V5XCI+XHJcbiAgICAgICAgPFZhbGlkYXRpb25Qcm92aWRlclxyXG4gICAgICAgICAgICB2LWlmPVwiaXRlbS5mb3JtU2xvdFwiXHJcbiAgICAgICAgICAgIDpuYW1lPVwiaXRlbS5sYWJlbFwiXHJcbiAgICAgICAgICAgIDpydWxlcz1cInsncmVxdWlyZWQnOml0ZW0ucmVxdWlyZWR9XCJcclxuICAgICAgICAgICAgdi1zbG90PVwie2Vycm9yc31cIj5cclxuICAgICAgICAgICAgICA8RmllbGRcclxuICAgICAgICAgICAgICAgICAgICAgdi1iaW5kPVwiaXRlbVwiXHJcbiAgICAgICAgICAgICAgICAgICAgIDpsYWJlbD1cIml0ZW0ubGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6cmVxdWlyZWQ9XCJpdGVtLnJlcXVpcmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgOmVycm9yLW1lc3NhZ2U9XCJlcnJvcnNbMF1cIlxyXG4gICAgICAgICAgICAgICAgICAgICA6ZXJyb3ItbWVzc2FnZS1hbGlnbj1cIidyaWdodCdcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6aW5wdXQtYWxpZ249XCJpdGVtLmlucHV0QWxpZ24gPyBpdGVtLmlucHV0QWxpZ24gOiAncmlnaHQnXCJcclxuICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwiW2l0ZW0ubGFiZWxBbGlnbiA9PT0gJ3RvcCcgPyAnanNvbnZ1ZS1mbGV4LWNvbHVtbicgOiAnJ11cIlxyXG5cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgc2xvdD1cImlucHV0XCI+XHJcbiAgICAgICAgICAgICAgICAgIDxzbG90IDpuYW1lPVwiaXRlbS5maWVsZE5hbWVcIiA6cm93PVwiaXRlbVwiPjwvc2xvdD5cclxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgICAgICAgPC9GaWVsZD5cclxuICAgICAgICA8L1ZhbGlkYXRpb25Qcm92aWRlcj5cclxuICAgICAgICA8RmllbGRUZXh0IHYtZWxzZS1pZj1cIiFpdGVtLmhpZGRlbiYmKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5maWVsZFR5cGUgPT09ICd0ZXh0J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgaXRlbS5maWVsZFR5cGUgPT09ICd0ZXh0YXJlYSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGl0ZW0uZmllbGRUeXBlID09PSAnaW50J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgaXRlbS5maWVsZFR5cGUgPT09ICdkaWdpdCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGl0ZW0uZmllbGRUeXBlID09PSAnYW1vdW50J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgaXRlbS5maWVsZFR5cGUgPT09ICdudW1iZXInKVwiXHJcbiAgICAgICAgICAgICAgICAgICA6dmFsaWRhdGUtcnVsZXM9XCIgc2NlbmUhPT0yID8geydyZXF1aXJlZCc6aXRlbS5yZXF1aXJlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICdpc21vbmV5JzooaXRlbS5maWVsZFR5cGUgPT09ICdhbW91bnQnP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgKGl0ZW0uZmllbGRWYWx1ZSwoaXRlbS5sYWJlbCB8fCBpdGVtLmZpZWxkTmFtZSkpOmZhbHNlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIC4uLml0ZW0udmFsaWRhdGVSdWxlc306e31cIlxyXG4gICAgICAgICAgICAgICAgICAgdi1iaW5kPVwiaXRlbVwiXHJcbiAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9XCJpdGVtLmRpc2FibGVkIHx8IHNjZW5lID09PSAyXCJcclxuICAgICAgICAgICAgICAgICAgIDpyZXF1aXJlZD1cIml0ZW0ucmVxdWlyZWQgJiYgc2NlbmUgIT09MlwiXHJcbiAgICAgICAgICAgICAgICAgICA6cGxhY2Vob2xkZXI9XCJpdGVtLnBsYWNlaG9sZGVyIHx8IChzY2VuZSE9PTI/YOivt+i+k+WFpSR7aXRlbS5sYWJlbCB8fCBpdGVtLmZpZWxkTmFtZX1gOicnKVwiXHJcbiAgICAgICAgICAgICAgICAgICA6bGFiZWw9XCJpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgIDp0eXBlPVwiaXRlbS50ZXh0RmllbGRUeXBlIHx8ICd0ZXh0J1wiXHJcbiAgICAgICAgICAgICAgICAgICA6ZmllbGRUeXBlPVwiaXRlbS5maWVsZFR5cGUgfHwgJ3RleHQnXCJcclxuICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJpdGVtLmZpZWxkVmFsdWVcIlxyXG4gICAgICAgICAgICAgICAgICAgOm1heGxlbmd0aD1cIml0ZW0ubWF4TGVuZ3RoXCJcclxuICAgICAgICAgICAgICAgICAgIDpzaG93LXdvcmQtbGltaXQ9XCJpdGVtLmZpZWxkVHlwZSA9PT0gJ3RleHRhcmVhJyAmJiBzY2VuZSE9PTJcIlxyXG4gICAgICAgICAgICAgICAgICAgOmF1dG9zaXplPVwiaXRlbS5maWVsZFR5cGUgPT09ICd0ZXh0YXJlYSdcIlxyXG4gICAgICAgICAgICAgICAgICAgQG9uVGV4dD1cIm9uQ2VsbChhcmd1bWVudHNbMF0saXRlbSxhcmd1bWVudHNbMV0pXCJcclxuICAgICAgICAgICAgICAgICAgIDplcnJvci1tZXNzYWdlLWFsaWduPVwiaXRlbS5lcnJvck1lc3NhZ2VBbGlnbiA/IGl0ZW0uZXJyb3JNZXNzYWdlQWxpZ24gOiAncmlnaHQnXCJcclxuICAgICAgICAgICAgICAgICAgIDp0aXA9XCJpdGVtLnRpcFwiXHJcbiAgICAgICAgICAgICAgICAgICA6aXMtZW5kPVwiZmllbGRMaXN0Lmxlbmd0aCA9PT0ga2V5KzFcIlxyXG4gICAgICAgICAgICAgICAgICAgOnByZWNpc2lvbj1cIml0ZW0ucHJlY2lzaW9uXCJcclxuICAgICAgICAvPlxyXG4gICAgICAgIDxGaWVsZFNlbGVjdCB2LWVsc2UtaWY9XCIhaXRlbS5oaWRkZW4mJml0ZW0uZmllbGRUeXBlID09PSAnc2VsZWN0J1wiXHJcbiAgICAgICAgICAgICAgICAgICAgIHYtYmluZD1cIml0ZW1cIlxyXG4gICAgICAgICAgICAgICAgICAgICA6c2NlbmU9XCJzY2VuZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJpdGVtLmZpZWxkVmFsdWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICBAcGFyYW1zQ2hhbmdlPVwib25QYXJhbXNDaGFuZ2UoaXRlbSlcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6Z2V0LXR5cGU9XCJpdGVtLmdldFR5cGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6bGFiZWw9XCJpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbi1jb2Rlcz1cIml0ZW0ub3B0aW9uQ29kZXMgfHwgW11cIlxyXG4gICAgICAgICAgICAgICAgICAgICBAb25TZWxlY3Q9XCJvbkNlbGwoJGV2ZW50LGl0ZW0pXCJcclxuICAgICAgICAgICAgICAgICAgICAgOnZhbGlkYXRlLXJ1bGVzPVwic2NlbmUhPT0yID8geydyZXF1aXJlZCc6aXRlbS5yZXF1aXJlZH0gOiB7fVwiXHJcbiAgICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT1cInNjZW5lIT09MVwiXHJcbiAgICAgICAgICAgICAgICAgICAgIDpyZXF1aXJlZD1cIml0ZW0ucmVxdWlyZWQgJiYgc2NlbmUgIT09MlwiXHJcbiAgICAgICAgICAgICAgICAgICAgIDpwbGFjZWhvbGRlcj1cInNjZW5lIT09Mj8n6K+36YCJ5oupJzonJ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgIDpwb3N0LXVybD1cIml0ZW0ucG9zdFVybFwiXHJcbiAgICAgICAgICAgICAgICAgICAgIDpwb3N0LWRhdGE9XCJpdGVtLnBvc3REYXRhXCJcclxuICAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPVwiaXRlbS5kaXNhYmxlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgIDp0aXA9XCJpdGVtLnRpcFwiXHJcbiAgICAgICAgICAgICAgICAgICAgIDppcy1lbmQ9XCJmaWVsZExpc3QubGVuZ3RoPT09a2V5KzFcIlxyXG4gICAgICAgICAgICAgICAgICAgICA6ZXJyb3ItbWVzc2FnZS1hbGlnbj1cIml0ZW0uZXJyb3JNZXNzYWdlQWxpZ24gPyBpdGVtLmVycm9yTWVzc2FnZUFsaWduIDogJ3JpZ2h0J1wiXHJcbiAgICAgICAgPjwvRmllbGRTZWxlY3Q+XHJcbiAgICAgICAgPEZpZWxkQWRkcmVzcyB2LWVsc2UtaWY9XCIhaXRlbS5oaWRkZW4mJml0ZW0uZmllbGRUeXBlID09PSAnYWRkcmVzcydcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgdi1iaW5kPVwiaXRlbVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICA6dmFsaWRhdGUtcnVsZXM9XCJzY2VuZSE9PTI/eydyZXF1aXJlZCc6aXRlbS5yZXF1aXJlZH06e31cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgOnJlcXVpcmVkPVwiaXRlbS5yZXF1aXJlZCAmJiBzY2VuZSAhPT0yXCJcclxuICAgICAgICAgICAgICAgICAgICAgIDpsYWJlbD1cIml0ZW0ubGFiZWwgfHwgaXRlbS5maWVsZE5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgOnBsYWNlaG9sZGVyPVwic2NlbmU9PT0xP2Dor7fpgInmi6kke2l0ZW0ubGFiZWwgfHwgaXRlbS5maWVsZE5hbWV9YDonJ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwiaXRlbS5maWVsZFZhbHVlXCJcclxuICAgICAgICAgICAgICAgICAgICAgIEBvbkNlbGw9XCJvbkNlbGwoJGV2ZW50LGl0ZW0pXCJcclxuICAgICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD1cIml0ZW0uZGlzYWJsZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgOnRpcD1cIml0ZW0udGlwXCJcclxuICAgICAgICAgICAgICAgICAgICAgIDppcy1lbmQ9XCJmaWVsZExpc3QubGVuZ3RoPT09a2V5KzFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgOnNlbGVjdC1sZXZlbD1cIml0ZW0uc2VsZWN0TGV2ZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgOnNob3ctcHJvdmluY2UtbmFtZT1cIml0ZW0uc2hvd1Byb3ZpbmNlTmFtZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICA6ZXJyb3ItbWVzc2FnZS1hbGlnbj1cIml0ZW0uZXJyb3JNZXNzYWdlQWxpZ24gPyBpdGVtLmVycm9yTWVzc2FnZUFsaWduIDogJ3JpZ2h0J1wiXHJcbiAgICAgICAgPjwvRmllbGRBZGRyZXNzPlxyXG4gICAgICAgIDxGaWVsZERhdGUgdi1lbHNlLWlmPVwiIWl0ZW0uaGlkZGVuICYmIChpdGVtLmZpZWxkVHlwZSA9PT0gJ2RhdGUnIHx8IGl0ZW0uZmllbGRUeXBlID09PSAnZGF0ZXRpbWUnIHx8IGl0ZW0uZmllbGRUeXBlID09PSAneWVhci1tb250aCcgfHwgaXRlbS5maWVsZFR5cGUgPT09ICd0aW1lJyApXCJcclxuICAgICAgICAgICAgICAgICAgIHYtYmluZD1cIml0ZW1cIlxyXG4gICAgICAgICAgICAgICAgICAgOnNjZW5lPVwic2NlbmVcIlxyXG4gICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cIml0ZW0uZmllbGRWYWx1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICA6bGFiZWw9XCJpdGVtLmxhYmVsIHx8IGl0ZW0uZmllbGROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgIEBvbkRhdGV0aW1lPVwib25DZWxsKCRldmVudCxpdGVtKVwiXHJcbiAgICAgICAgICAgICAgICAgICA6dmFsaWRhdGUtcnVsZXM9XCJzY2VuZSE9PTI/eydyZXF1aXJlZCc6aXRlbS5yZXF1aXJlZH06e31cIlxyXG4gICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PVwic2NlbmUhPT0xXCJcclxuICAgICAgICAgICAgICAgICAgIDpyZXF1aXJlZD1cIml0ZW0ucmVxdWlyZWQgJiYgc2NlbmUgIT09MlwiXHJcbiAgICAgICAgICAgICAgICAgICA6cGxhY2Vob2xkZXI9XCJzY2VuZT09PTE/YOivt+i+k+WFpSR7aXRlbS5sYWJlbCB8fCBpdGVtLmZpZWxkTmFtZX1gOicnXCJcclxuICAgICAgICAgICAgICAgICAgIDptaW4tZGF0ZT1cIml0ZW0ubWluRGF0ZT9pdGVtLm1pbkRhdGU6JzE5MDAtMDEtMDEnXCJcclxuICAgICAgICAgICAgICAgICAgIDptYXgtZGF0ZT1cIml0ZW0ubWF4RGF0ZVwiXHJcbiAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCJcclxuICAgICAgICAgICAgICAgICAgIDpkaXNwbGF5Rm9ybWF0PVwiaXRlbS5kaXNwbGF5Rm9ybWF0ICYmICdZWVlZLU1NLUREJ1wiXHJcbiAgICAgICAgICAgICAgICAgICA6dGlwPVwiaXRlbS50aXBcIlxyXG4gICAgICAgICAgICAgICAgICAgOmlzLWVuZD1cImZpZWxkTGlzdC5sZW5ndGg9PT1rZXkrMVwiXHJcbiAgICAgICAgICAgICAgICAgICA6ZmllbGQtdHlwZT1cIml0ZW0uZmllbGRUeXBlXCJcclxuICAgICAgICAgICAgICAgICAgIDplcnJvci1tZXNzYWdlLWFsaWduPVwiaXRlbS5lcnJvck1lc3NhZ2VBbGlnbiA/IGl0ZW0uZXJyb3JNZXNzYWdlQWxpZ24gOiAncmlnaHQnXCJcclxuXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8RmllbGRDaGVja0JveFNlbGVjdCB2LWVsc2UtaWY9XCIhaXRlbS5oaWRkZW4gJiYgaXRlbS5maWVsZFR5cGU9PT0ndHJlZSdcIlxyXG4gICAgICAgICAgICAgICAgICAgdi1iaW5kPVwiaXRlbVwiXHJcbiAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwiaXRlbS5maWVsZFZhbHVlXCJcclxuICAgICAgICAgICAgICAgICAgIDpsYWJlbD1cIml0ZW0ubGFiZWwgfHwgaXRlbS5maWVsZE5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgOnNjZW5lPVwic2NlbmVcIlxyXG4gICAgICAgICAgICAgICAgICAgOmNvbmZpZy1uYW1lPVwiaXRlbS5jb25maWcuY29uZmlnTmFtZVwiXHJcbiAgICAgICAgICAgICAgICAgICA6dmFsaWRhdGUtcnVsZXM9XCJzY2VuZSE9PTI/eydyZXF1aXJlZCc6aXRlbS5yZXF1aXJlZH06e31cIlxyXG4gICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PVwic2NlbmUhPT0xXCJcclxuICAgICAgICAgICAgICAgICAgIDpyZXF1aXJlZD1cIml0ZW0ucmVxdWlyZWQgJiYgc2NlbmUgIT09MlwiXHJcbiAgICAgICAgICAgICAgICAgICA6cGxhY2Vob2xkZXI9XCJzY2VuZSE9PTI/YOivt+mAieaLqSR7aXRlbS5sYWJlbCB8fCBpdGVtLmZpZWxkTmFtZX1gOicnXCJcclxuICAgICAgICAgICAgICAgICAgIDpwb3N0LXVybD1cIml0ZW0ucG9zdFVybFwiXHJcbiAgICAgICAgICAgICAgICAgICA6cG9zdC1kYXRhPVwiaXRlbS5wb3N0RGF0YVwiXHJcbiAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCJcclxuICAgICAgICAgICAgICAgICAgIDphZGQtYWJsZT1cIihpdGVtLmNvbmZpZy5hZGRBYmxlID09PSAndHJ1ZScgfHwgZmFsc2UpXCJcclxuICAgICAgICAgICAgICAgICAgIEBvblRyZWU9XCJvbkNlbGwoJGV2ZW50LGl0ZW0pXCJcclxuICAgICAgICAgICAgICAgICAgIEBwYXJhbXNDaGFuZ2U9XCJvblBhcmFtc0NoYW5nZShpdGVtKVwiXHJcbiAgICAgICAgICAgICAgICAgICA6aXNTZWNvbmRQYWdlPVwiaXNTZWNvbmRQYWdlXCJcclxuICAgICAgICAgICAgICAgICAgIDp0aXA9XCJpdGVtLnRpcFwiXHJcbiAgICAgICAgICAgICAgICAgICA6aXMtZW5kPVwiZmllbGRMaXN0Lmxlbmd0aD09PWtleSsxXCJcclxuICAgICAgICAgICAgICAgICAgIDp1c2UtaXRlbS1zbG90PVwiaXRlbS51c2VJdGVtU2xvdFwiXHJcbiAgICAgICAgICAgICAgICAgICA6cmVmcmVzaC13aGVuLWNsaWNrPVwiaXRlbS5yZWZyZXNoV2hlbkNsaWNrXCJcclxuICAgICAgICAgICAgICAgICAgIDplcnJvci1tZXNzYWdlLWFsaWduPVwiaXRlbS5lcnJvck1lc3NhZ2VBbGlnbiA/IGl0ZW0uZXJyb3JNZXNzYWdlQWxpZ24gOiAncmlnaHQnXCJcclxuXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJpdGVtU2xvdFwiIHNsb3Qtc2NvcGU9XCJzY29wZVwiPlxyXG4gICAgICAgICAgICA8c2xvdCA6bmFtZT1cImBjaGVja0JveFNlbGVjdEl0ZW1fJHtpdGVtLmZpZWxkTmFtZX1gXCIgOnJvdz1cInNjb3BlLnJvd1wiPjwvc2xvdD5cclxuICAgICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgPC9GaWVsZENoZWNrQm94U2VsZWN0PlxyXG4gICAgICAgIDxWYWxpZGF0aW9uUHJvdmlkZXJcclxuICAgICAgICAgICAgdi1lbHNlLWlmPVwiIWl0ZW0uaGlkZGVuJiZpdGVtLmZpZWxkVHlwZSA9PT0gJ2ZpZWxkQ3J1ZCdcIlxyXG4gICAgICAgICAgICA6bmFtZT1cIml0ZW0ubGFiZWxcIlxyXG4gICAgICAgICAgICA6cnVsZXM9XCJ7J3JlcXVpcmVkJzppdGVtLnJlcXVpcmVkfVwiXHJcbiAgICAgICAgICAgIHYtc2xvdD1cIntlcnJvcnN9XCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICA8RmllbGRDcnVkXHJcbiAgICAgICAgICAgICAgICAgICA6dmFsaWRhdGUtcnVsZXM9XCJ7J3JlcXVpcmVkJzp0cnVlfVwiXHJcbiAgICAgICAgICAgICAgICAgICA6cmVxdWlyZWQ9XCJpdGVtLnJlcXVpcmVkXCJcclxuICAgICAgICAgICAgICAgICAgIDpsYWJlbD1cIml0ZW0ubGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cIml0ZW0udHlwZVNlY29uZFNob3dQYWdlTGlzdFwiXHJcbiAgICAgICAgICAgICAgICAgICA6dHlwZS1tb2R1bGUtbGlzdD1cIml0ZW0udHlwZVNlY29uZE1vZHVsZUxpc3RcIlxyXG4gICAgICAgICAgICAgICAgICAgOnR5cGUtYW5kLXBhZ2UtbGlzdD1cIml0ZW0udHlwZVNlY29uZEVkaXRQYWdlTGlzdFwiXHJcbiAgICAgICAgICAgICAgICAgICA6dHlwZS1saXN0PVwiaXRlbS50eXBlTGlzdFwiXHJcbiAgICAgICAgICAgICAgICAgICA6ZXh0Q29uZmlnPVwiaXRlbS5jb25maWcuZXh0Q29uZmlnXCJcclxuICAgICAgICAgICAgICAgICAgIEBvblBhZ2VTYXZlPVwib25QYWdlU2F2ZVwiXHJcbiAgICAgICAgICAgICAgICAgICBAb25QYWdlQ2VsbD1cIm9uUGFnZUNlbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgQHBhZ2VQYXJhbXNDaGFuZ2U9XCJvblBhZ2VQYXJhbXNDaGFuZ2VcIlxyXG4gICAgICAgICAgICAgICAgICAgOnNjZW5lPVwic2NlbmVcIlxyXG4gICAgICAgICAgICAgICAgICAgOnNob3dEYXRhPVwiaXRlbS5zaG93RGF0YVwiXHJcbiAgICAgICAgICAgICAgICAgICA6c2hvd05hbWU9XCJpdGVtLmNvbmZpZy5zaG93TmFtZVwiXHJcbiAgICAgICAgICAgICAgICAgICA6YWRkQWJsZT1cIml0ZW0uY29uZmlnLmFkZEFibGUgIT09ICdmYWxzZSdcIlxyXG4gICAgICAgICAgICAgICAgICAgOnNob3ctbW9uZXk9XCJpdGVtLnNob3dNb25leVwiXHJcbiAgICAgICAgICAgICAgICAgICA6dGlwVGl0bGVJbmZvTGlzdD1cIml0ZW0uZmllbGRWYWx1ZSYmaXRlbS5maWVsZFZhbHVlLmxlbmd0aD4wJiZpdGVtLmZpZWxkVmFsdWVbMF0udHJhdmVsU3RhdGlzdGljc0xpc3R8fFtdXCJcclxuICAgICAgICAgICAgICAgICAgIDpjcnVkLXZpZXctc2xvdD1cIml0ZW0uY3J1ZFZpZXdTbG90IHx8IGZhbHNlXCJcclxuICAgICAgICAgICAgICAgICAgIDpjdXJkRWRpdEZ1bmMuc3luYz1cIml0ZW0uY3J1ZEVkaXRGdW5jXCJcclxuXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8dGVtcGxhdGUgc2xvdD1cImNydWRWaWV3XCI+XHJcbiAgICAgICAgICAgICAgICA8c2xvdCA6bmFtZT1cImBjcnVkVmlld18ke2l0ZW0uZmllbGROYW1lfWBcIiA6cm93PVwiaXRlbVwiPjwvc2xvdD5cclxuICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICA8L0ZpZWxkQ3J1ZD5cclxuICAgICAgICAgIDxkaXYgc2xvdD1cImVycm9yXCIgY2xhc3M9XCJ2YW4tZmllbGRfX2Vycm9yLW1lc3NhZ2VcIiA6Y2xhc3M9XCJpdGVtLmVycm9yTWVzc2FnZUFsaWduID09PSAnbGVmdCcgPyAndGV4dC1sZWZ0JyA6ICd0ZXh0LXJpZ2h0J1wiIHN0eWxlPVwicGFkZGluZy1yaWdodDogMTBweFwiPlxyXG4gICAgICAgICAgICB7e2Vycm9yc1swXX19XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1ZhbGlkYXRpb25Qcm92aWRlcj5cclxuICAgICAgICA8dmFuLWRpdmlkZXIgdi1pZj1cInNob3dEaXZpZGVyXCIgY2xhc3M9XCJqc29udnVlLWZpZWxkX19kaXZpZGVyXCI+PC92YW4tZGl2aWRlcj5cclxuICAgIDwvZGl2PlxyXG4gICAgPC9WYWxpZGF0aW9uT2JzZXJ2ZXI+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmltcG9ydCBGaWVsZFRleHQgZnJvbSBcIi4vRmllbGRUZXh0XCI7XHJcbmltcG9ydCBGaWVsZEFkZHJlc3MgZnJvbSBcIi4vRmllbGRBZHJlc3NcIjtcclxuaW1wb3J0IEZpZWxkRGF0ZSBmcm9tIFwiLi9GaWVsZERhdGVcIjtcclxuaW1wb3J0IEZpZWxkU2VsZWN0IGZyb20gXCIuL0ZpZWxkU2VsZWN0dFwiO1xyXG5pbXBvcnQgRmllbGRDaGVja0JveFNlbGVjdCBmcm9tIFwiLi9GaWVsZENoZWNrQm94U2VsZWN0XCI7XHJcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAndmFudCdcclxuaW1wb3J0IEZpZWxkQ3J1ZCBmcm9tIFwiLi9GaWVsZENydWRcIlxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lOidNb2R1bGVGaWVsZCcsXHJcbiAgICBjb21wb25lbnRzOntGaWVsZFNlbGVjdCxGaWVsZFRleHQsRmllbGRDaGVja0JveFNlbGVjdCxGaWVsZERhdGUsRmllbGRBZGRyZXNzLEZpZWxkXHJcbiAgICAgICxGaWVsZENydWRcclxuICAgIH0sXHJcbiAgICBwcm9wczp7XHJcbiAgICAgIC8v5a2X5q615YiX6KGoXHJcbiAgICAgIGZpZWxkTGlzdDp7XHJcbiAgICAgICAgdHlwZTpBcnJheSxcclxuICAgICAgICBkZWZhdWx0OigpPT5bXVxyXG4gICAgICB9LFxyXG4gICAgICAvL+aooeWdl+agh+ivhkNvZGVcclxuICAgICAgbW9kdWxlQ29kZTp7XHJcbiAgICAgICAgdHlwZTpTdHJpbmcsXHJcbiAgICAgICAgZGVmYXVsdDpcIlwiXHJcbiAgICAgIH0sXHJcbiAgICAgIHNjZW5lOiB7XHJcbiAgICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcclxuICAgICAgICBkZWZhdWx0OiAxXHJcbiAgICAgIH0sXHJcbiAgICAgIC8v5piv5ZCm5piv5LqM57qn5a2Q6aG16Z2iXHJcbiAgICAgIGlzU2Vjb25kUGFnZTp7XHJcbiAgICAgICAgdHlwZTpCb29sZWFuLFxyXG4gICAgICAgIGRlZmF1bHQ6ZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgLy/mmK/lkKbmmL7npLrliIblibLnur9cclxuICAgICAgc2hvd0RpdmlkZXI6e1xyXG4gICAgICAgIHR5cGU6Qm9vbGVhbixcclxuICAgICAgICBkZWZhdWx0OmZhbHNlXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkYXRhKCl7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLy/mqKHlnZfmmK/lkKbov5jlnKjliJvlu7rkuK0uLi4gdHJ1ZeacquWIm+W7uiBmYWxzZSDlt7LliJvlu7pcclxuICAgICAgICBtb2R1bGVDcmVhdGluZzp0cnVlLFxyXG4gICAgICAgIG1vZHVsZU9iajp7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6e1xyXG4gICAgICBvblNpbmdsZVBhZ2VTYXZlKG1vZHVsZUxpc3QscHJldmVudCxhY3RpdmF0ZUluZGV4KXtcclxuICAgICAgICB0aGlzLiRlbWl0KCdvblNpbmdsZVBhZ2VTYXZlJywgbW9kdWxlTGlzdCxwcmV2ZW50LGFjdGl2YXRlSW5kZXgpXHJcblxyXG4gICAgICB9LFxyXG4gICAgICBvblNpbmdsZVBhZ2VSZW1vdmUobW9kdWxlTGlzdCxwcmV2ZW50LGFjdGl2YXRlSW5kZXgpe1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ29uU2luZ2xlUGFnZVJlbW92ZScsIG1vZHVsZUxpc3QscHJldmVudCxhY3RpdmF0ZUluZGV4KVxyXG5cclxuICAgICAgfSxcclxuICAgICAgb25QYWdlQ2VsbCAodmFsdWUsIGl0ZW0sIG1vZHVsZSwgYWN0aXZlSW5kZXgpIHtcclxuICAgICAgICB0aGlzLiRlbWl0KCdvblBhZ2VDZWxsJywgdmFsdWUsIGl0ZW0sIG1vZHVsZSwgYWN0aXZlSW5kZXgpXHJcbiAgICAgIH0sXHJcbiAgICAgIG9uUGFnZUJsdXIgKHZhbHVlLCBpdGVtLCBtb2R1bGUsIGFjdGl2ZUluZGV4KSB7XHJcbiAgICAgICAgdGhpcy4kZW1pdCgnb25QYWdlQmx1cicsIHZhbHVlLCBpdGVtLCBtb2R1bGUsIGFjdGl2ZUluZGV4KVxyXG4gICAgICB9LFxyXG4gICAgICBvblBhZ2VQYXJhbXNDaGFuZ2UoaXRlbSwgbW9kdWxlLCBhY3RpdmVJbmRleCl7XHJcbiAgICAgICAgdGhpcy4kZW1pdCgncGFnZVBhcmFtc0NoYW5nZScsIGl0ZW0sIG1vZHVsZSwgYWN0aXZlSW5kZXgpXHJcbiAgICAgIH0sXHJcbiAgICAgIG9uQ2VsbCAoZmllbGRWYWwsIGl0ZW0scHJlVmFsKSB7XHJcbiAgICAgICAgdGhpcy4kZW1pdCgnb25DZWxsJywgZmllbGRWYWwsIGl0ZW0scHJlVmFsKVxyXG4gICAgICB9LFxyXG4gICAgICBvbkJsdXIgKGZpZWxkVmFsLCBpdGVtKSB7XHJcbiAgICAgICAgdGhpcy4kZW1pdCgnb25CbHVyJywgZmllbGRWYWwsIGl0ZW0pXHJcbiAgICAgIH0sXHJcbiAgICAgIG9uUGFyYW1zQ2hhbmdlKGZpZWxkVmFsKXtcclxuICAgICAgICB0aGlzLiRlbWl0KFwicGFyYW1zQ2hhbmdlXCIsZmllbGRWYWwpXHJcbiAgICAgIH0sXHJcbiAgICAgIG9uUGFnZVNhdmUobW9kdWxlQ29kZSl7XHJcbiAgICAgICAgdGhpcy4kZW1pdCgnb25QYWdlU2F2ZScsbW9kdWxlQ29kZSlcclxuICAgICAgfSxcclxuICAgICAgb25BZGRQcm9qZWN0KGZpZWxkVmFsLCBpdGVtKXtcclxuICAgICAgICB0aGlzLiRlbWl0KCdvbkFkZFByb2plY3QnLCBmaWVsZFZhbCwgaXRlbSlcclxuICAgICAgfSxcclxuICAgICAgLy/ooajljZXpqozor4FcclxuICAgICAgdmFsaWRhdGUoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy4kcmVmcy52YWxpZE9iLnZhbGlkYXRlKClcclxuICAgICAgfSxcclxuICAgICAgZ2V0VmFsaWRPYigpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRyZWZzLnZhbGlkT2JcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbn1cclxuPC9zY3JpcHQ+XHJcbiIsIjx0ZW1wbGF0ZT5cclxuICA8ZGl2PlxyXG4gICAgPGRpdiB2LWZvcj1cIihtb2R1bGUsa2V5KSBpbiBtb2R1bGVMaXN0XCJcclxuICAgICAgICAgOmtleT1cImtleVwiXHJcbiAgICAgICAgIGNsYXNzPVwibW9kdWxlLWNvbnRhaW5lclwiXHJcbiAgICAgICAgIHYtc2hvdz1cIm1vZHVsZS5oaWRkZW4gIT09IHRydWVcIlxyXG4gICAgICAgICA6c3R5bGU9XCJvdXRlclN0eWxlXCJcclxuICAgID5cclxuICAgICAgPGRpdiBjbGFzcz1cIm5hbWUgdGl0bGUtYm9sZFwiIHN0eWxlPVwiZm9udC1zaXplOjE2cHhcIj57eyBtb2R1bGUubW9kdWxlTmFtZSB9fTwvZGl2PlxyXG4gICAgICA8TW9kdWxlRmllbGQgOnNjZW5lPVwic2NlbmVcIlxyXG4gICAgICAgICAgICAgICAgICAgOmZpZWxkLWxpc3Q9XCJtb2R1bGUuZmllbGRMaXN0XCJcclxuICAgICAgICAgICAgICAgICAgIEBvbkNlbGw9XCJvbkNlbGwoYXJndW1lbnRzWzBdLGFyZ3VtZW50c1sxXSxtb2R1bGUpXCJcclxuICAgICAgICAgICAgICAgICAgIEBwYXJhbXNDaGFuZ2U9XCJvblBhcmFtc0NoYW5nZShhcmd1bWVudHNbMF0sbW9kdWxlKVwiXHJcbiAgICAgICAgICAgICAgICAgICBAb25BZGRQcm9qZWN0PVwib25BZGRQcm9qZWN0KGFyZ3VtZW50c1swXSxhcmd1bWVudHNbMV0sbW9kdWxlKVwiXHJcbiAgICAgICAgICAgICAgICAgICBAb25QYWdlU2F2ZT1cIm9uUGFnZVNhdmVcIlxyXG4gICAgICAgICAgICAgICAgICAgQG9uQmx1cj1cIm9uQmx1cihhcmd1bWVudHNbMF0sYXJndW1lbnRzWzFdLG1vZHVsZSlcIlxyXG4gICAgICAgICAgICAgICAgICAgQG9uUGFnZUNlbGw9XCJvblBhZ2VDZWxsKGFyZ3VtZW50c1swXSxhcmd1bWVudHNbMV0sYXJndW1lbnRzWzJdLGFyZ3VtZW50c1szXSxtb2R1bGUpXCJcclxuICAgICAgICAgICAgICAgICAgIEBvblBhZ2VCbHVyPVwib25QYWdlQmx1cihhcmd1bWVudHNbMF0sYXJndW1lbnRzWzFdLGFyZ3VtZW50c1syXSxhcmd1bWVudHNbM10sbW9kdWxlKVwiXHJcbiAgICAgICAgICAgICAgICAgICBAcGFnZVBhcmFtc0NoYW5nZT1cIm9uUGFnZVBhcmFtc0NoYW5nZShhcmd1bWVudHNbMF0sYXJndW1lbnRzWzFdLGFyZ3VtZW50c1syXSxtb2R1bGUpXCJcclxuICAgICAgICAgICAgICAgICAgIEBvblNpbmdsZVBhZ2VTYXZlPVwib25TaW5nbGVQYWdlU2F2ZShhcmd1bWVudHNbMF0sYXJndW1lbnRzWzFdLGFyZ3VtZW50c1syXSxtb2R1bGUpXCJcclxuICAgICAgICAgICAgICAgICAgIEBvblNpbmdsZVBhZ2VSZW1vdmU9XCJvblNpbmdsZVBhZ2VSZW1vdmUoYXJndW1lbnRzWzBdLGFyZ3VtZW50c1sxXSxhcmd1bWVudHNbMl0sbW9kdWxlKVwiXHJcbiAgICAgICAgICAgICAgICAgICA6c3RhdHVzPVwic3RhdHVzXCJcclxuICAgICAgICAgICAgICAgICAgIDppc1NlY29uZFBhZ2U9XCJpc1NlY29uZFBhZ2VcIlxyXG4gICAgICAgICAgICAgICAgICAgOml0ZW1TaW5nbGVTZWxlY3Q9XCJpdGVtU2luZ2xlU2VsZWN0XCJcclxuICAgICAgICAgICAgICAgICAgIDphZGROZXdQYXJhbXM9XCJhZGROZXdQYXJhbXNcIlxyXG4gICAgICAgICAgICAgICAgICAgOm1vZHVsZUNvZGU9XCJtb2R1bGUubW9kdWxlQ29kZVwiXHJcbiAgICAgIC8+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbmltcG9ydCBNb2R1bGVGaWVsZCBmcm9tIFwiLi9Nb2R1bGVGaWVsZC52dWVcIjtcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIG5hbWU6IFwiTW9kdWxlR3JvdXBcIixcclxuICBjb21wb25lbnRzOnsgTW9kdWxlRmllbGQgfSxcclxuICBwcm9wczp7XHJcbiAgICAvL+iHquWumuS5ieagt+W8j1xyXG4gICAgb3V0ZXJTdHlsZTp7XHJcbiAgICAgIHR5cGU6T2JqZWN0LFxyXG4gICAgICBkZWZhdWx0OigpPT57fVxyXG4gICAgfSxcclxuICAgIHNjZW5lOntcclxuICAgICAgdHlwZTpbU3RyaW5nLE51bWJlcl0sXHJcbiAgICAgIGRlZmF1bHQ6MVxyXG4gICAgfSxcclxuICAgIHN0YXR1czpTdHJpbmcsXHJcbiAgICBpc1NlY29uZFBhZ2U6e1xyXG4gICAgICB0eXBlOkJvb2xlYW4sXHJcbiAgICAgIGRlZmF1bHQ6ZmFsc2VcclxuICAgIH0sXHJcbiAgICAvL+aOp+WItuS4jeWQjOeahOaKpemUgOWNleexu+Wei+agueaNrumFjee9rumhueebruWNlemAieaIluiAheWkmumAiSAw5aSa6YCJ77yMMeWNlemAiVxyXG4gICAgaXRlbVNpbmdsZVNlbGVjdDp7XHJcbiAgICAgIHR5cGU6U3RyaW5nLFxyXG4gICAgICBkZWZhdWx0OlwiMFwiXHJcbiAgICB9LFxyXG4gICAgLy8g5aSW6YOo5Lyg6L+b6aKd5aSW5Y+C5pWwIOe7hOS7tuWQjeensCDliqDlj4LmlbDlkI3np7AgYWRkTmV3UGFyYW1zLkZpZWxkUGFnZUVkaXQueHh4XHJcbiAgICAvLyDlnKhjb21tb25GaWVsZOmhtemdouS4reWKoOS4qiA6YWRkTmV3UGFyYW1zPVwiYWRkTmV3UGFyYW1zLkZpZWxkUGFnZUVkaXRcIiDlsLHlj6/ku6Xkvb/nlKjlpJbpg6jkvKDov5vmnaXnmoTlj4LmlbBcclxuICAgIGFkZE5ld1BhcmFtczp7XHJcbiAgICAgIHR5cGU6T2JqZWN0XHJcbiAgICB9LFxyXG4gICAgLy9cclxuICAgIG1vZHVsZUxpc3Q6e1xyXG4gICAgICB0eXBlOkFycmF5XHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgbWV0aG9kczp7XHJcbiAgICBvbkNlbGwoaXRlbSxmaWVsZFZvcyxtb2R1bGUpe1xyXG4gICAgICB0aGlzLiRlbWl0KCdvbkNlbGwnLGl0ZW0sZmllbGRWb3MsbW9kdWxlKVxyXG4gICAgfSxcclxuICAgIG9uQmx1cihpdGVtLGZpZWxkVm9zLG1vZHVsZSl7XHJcbiAgICAgIHRoaXMuJGVtaXQoJ29uQmx1cicsaXRlbSxmaWVsZFZvcyxtb2R1bGUpXHJcbiAgICB9LFxyXG4gICAgb25QYXJhbXNDaGFuZ2UoZmllbGRWYWwpe1xyXG4gICAgICB0aGlzLiRlbWl0KFwicGFyYW1zQ2hhbmdlXCIsZmllbGRWYWwpXHJcbiAgICB9LFxyXG4gICAgb25BZGRQcm9qZWN0KGl0ZW0sZmllbGRWb3MsbW9kdWxlKXtcclxuICAgICAgdGhpcy4kZW1pdCgnb25BZGRQcm9qZWN0JyxpdGVtLGZpZWxkVm9zLG1vZHVsZSlcclxuICAgIH0sXHJcbiAgICBvblBhZ2VTYXZlKG1vZHVsZUNvZGUpe1xyXG4gICAgICB0aGlzLiRlbWl0KCdvblBhZ2VTYXZlJyxtb2R1bGVDb2RlKVxyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICog5LqM57qn55WM6Z2i5pWw5o2u5Y+Y5YyW55uR5ZCsXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUg6Kem5Y+R57uE5Lu26L+U5Zue55qE5YC8XHJcbiAgICAgKiBAcGFyYW0gZmlsZWRJdGVtIOinpuWPkee7hOS7tuWvueW6lOeahOiHqui6q+WxnuaAp1xyXG4gICAgICogQHBhcmFtIG1vZHVsZXN2byDmqKHlnZfoh6rouqvlsZ7mgKdcclxuICAgICAqIEBwYXJhbSBpbmRleCDmraTnu4Tku7bmiYDlnKjmmI7nu4bnmoTliIbpobVcclxuICAgICAqIEBwYXJhbSBvdXRNb2R1bGVcclxuICAgICAqICovXHJcbiAgICBvblBhZ2VDZWxsKHZhbHVlLGZpbGVkSXRlbSxtb2R1bGVzdm8saW5kZXgsb3V0TW9kdWxlKXtcclxuICAgICAgdGhpcy4kZW1pdCgnb25QYWdlQ2VsbCcsdmFsdWUsZmlsZWRJdGVtLG1vZHVsZXN2byxpbmRleCxvdXRNb2R1bGUpXHJcbiAgICB9LFxyXG4gICAgb25QYWdlQmx1cih2YWx1ZSxmaWxlZEl0ZW0sbW9kdWxlc3ZvLGluZGV4LG91dE1vZHVsZSl7XHJcbiAgICAgIHRoaXMuJGVtaXQoJ29uUGFnZUJsdXInLHZhbHVlLGZpbGVkSXRlbSxtb2R1bGVzdm8saW5kZXgsb3V0TW9kdWxlKVxyXG4gICAgfSxcclxuICAgIG9uUGFnZVBhcmFtc0NoYW5nZShmaWxlZEl0ZW0sbW9kdWxlc3ZvLGluZGV4LG91dE1vZHVsZSl7XHJcbiAgICAgIHRoaXMuJGVtaXQoXCJwYWdlUGFyYW1zQ2hhbmdlXCIsZmlsZWRJdGVtLG1vZHVsZXN2byxpbmRleCxvdXRNb2R1bGUpXHJcbiAgICB9LFxyXG4gICAgb25TaW5nbGVQYWdlU2F2ZShtb2R1bGVMaXN0LHByZXZlbnQsYWN0aXZlSW5kZXgsb3V0TW9kdWxlKXtcclxuICAgICAgdGhpcy4kZW1pdChcIm9uU2luZ2xlUGFnZVNhdmVcIixtb2R1bGVMaXN0LHByZXZlbnQsYWN0aXZlSW5kZXgsb3V0TW9kdWxlKVxyXG4gICAgfSxcclxuICAgIG9uU2luZ2xlUGFnZVJlbW92ZShtb2R1bGVMaXN0LHByZXZlbnQsYWN0aXZlSW5kZXgsb3V0TW9kdWxlKXtcclxuICAgICAgdGhpcy4kZW1pdChcIm9uU2luZ2xlUGFnZVJlbW92ZVwiLG1vZHVsZUxpc3QscHJldmVudCxhY3RpdmVJbmRleCxvdXRNb2R1bGUpXHJcbiAgICB9LFxyXG4gICAgb25TZWxlY3RUeXBlVGhlbkVkaXQoa2V5LCBldmVudCl7XHJcbiAgICAgIGxldCBpY29uRWRpdEVsZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoXCIuaWNvbi1iaWFuamlcIik7XHJcbiAgICAgIGlmKGljb25FZGl0RWxlICE9PSB1bmRlZmluZWQpe1xyXG4gICAgICAgIGljb25FZGl0RWxlLmNsaWNrKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9LFxyXG4gICAgZ2V0QWRkQnRuTmFtZShtb2R1bGUpe1xyXG4gICAgICByZXR1cm4gbW9kdWxlLm1vZHVsZUNvZGUgKyAnQWRkQnRuJyA7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIHNjb3BlZD5cclxuXHJcbjwvc3R5bGU+XHJcbiIsImltcG9ydCAnLi9pY29uZm9udC9pY29uZm9udC5jc3MnXHJcbmltcG9ydCAnLi9pbmRleC5jc3MnXHJcbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xyXG4vKipcclxuICog5byV5YWlYXhpb3PmnI3liqFcclxuICovXHJcbmltcG9ydCB7aW5pdFZhbGlkYXRlfSBmcm9tIFwiLi91dGlscy92ZWUtdmFsaWRhdGVcIjtcclxuaW1wb3J0IHsgYXhpb3MgfSBmcm9tIFwiLi91dGlscy9odHRwXCI7XHJcblZ1ZS5wcm90b3R5cGUuJGF4aW9zID0gYXhpb3NcclxuVnVlLnByb3RvdHlwZS4kcG9zdCA9IGF4aW9zLnBvc3RcclxuVnVlLnByb3RvdHlwZS4kZ2V0ID0gYXhpb3MuZ2V0XHJcbmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcydcclxuVnVlLnByb3RvdHlwZS4kZGF5anMgPSBkYXlqc1xyXG5pbXBvcnQgVnVlQnVzSW5zdGFsbCBmcm9tIFwiLi91dGlscy92dWUtYnVzXCJcclxuaW1wb3J0IEZpbHRlciBmcm9tIFwiLi91dGlscy9maWx0ZXJcIjtcclxuaW1wb3J0IEZpZWxkVGV4dCBmcm9tIFwiLi9GaWVsZFRleHQvaW5kZXhcIjtcclxuaW1wb3J0IEZpZWxkU2VsZWN0IGZyb20gXCIuL0ZpZWxkU2VsZWN0dFwiO1xyXG5pbXBvcnQgRmllbGRVcGxvYWQgZnJvbSAnLi9GaWVsZFVwbG9hZCdcclxuaW1wb3J0IEZpZWxkRGF0ZSBmcm9tICcuL0ZpZWxkRGF0ZSdcclxuaW1wb3J0IEZpZWxkQWRkcmVzcyBmcm9tICcuL0ZpZWxkQWRyZXNzJ1xyXG5pbXBvcnQgRmllbGRDaGVja0JveFNlbGVjdCBmcm9tICcuL0ZpZWxkQ2hlY2tCb3hTZWxlY3QnO1xyXG5pbXBvcnQgRmllbGRDcnVkIGZyb20gJy4vRmllbGRDcnVkJ1xyXG5pbXBvcnQgTW9kdWxlRmllbGRSZWFjdGl2ZSBmcm9tIFwiLi9Nb2R1bGVGaWVsZFJlYWN0aXZlLnZ1ZVwiO1xyXG5pbXBvcnQgTW9kdWxlRmllbGROb0NydWQgZnJvbSBcIi4vTW9kdWxlRmllbGROb0NydWQudnVlXCI7XHJcbmltcG9ydCBNb2R1bGVGaWVsZCBmcm9tIFwiLi9Nb2R1bGVGaWVsZC52dWVcIjtcclxuaW1wb3J0IE1vZHVsZUdyb3VwIGZyb20gXCIuL01vZHVsZUdyb3VwLnZ1ZVwiO1xyXG5cclxuZnVuY3Rpb24gaW5zdGFsbChWdWUpe1xyXG4gICAgVnVlLnByb3RvdHlwZS4kYXhpb3MgPSBheGlvc1xyXG4gICAgVnVlLnByb3RvdHlwZS4kcG9zdCA9IGF4aW9zLnBvc3RcclxuICAgIFZ1ZS5wcm90b3R5cGUuJGdldCA9IGF4aW9zLmdldFxyXG4gICAgVnVlQnVzSW5zdGFsbChWdWUpXHJcbiAgICBGaWx0ZXIuaW5zdGFsbChWdWUpXHJcbiAgICBGaWVsZFRleHQuaW5zdGFsbChWdWUpXHJcbiAgICBGaWVsZFNlbGVjdC5pbnN0YWxsKFZ1ZSlcclxuICAgIEZpZWxkVXBsb2FkLmluc3RhbGwoVnVlKVxyXG4gICAgRmllbGREYXRlLmluc3RhbGwoVnVlKVxyXG4gICAgRmllbGRBZGRyZXNzLmluc3RhbGwoVnVlKVxyXG4gICAgRmllbGRDaGVja0JveFNlbGVjdC5pbnN0YWxsKFZ1ZSlcclxuICAgIEZpZWxkQ3J1ZC5pbnN0YWxsKFZ1ZSlcclxuICAgIFZ1ZS5jb21wb25lbnQoTW9kdWxlRmllbGROb0NydWQubmFtZSxNb2R1bGVGaWVsZE5vQ3J1ZClcclxuICAgIFZ1ZS5jb21wb25lbnQoTW9kdWxlRmllbGRSZWFjdGl2ZS5uYW1lLE1vZHVsZUZpZWxkUmVhY3RpdmUpXHJcbiAgICBWdWUuY29tcG9uZW50KE1vZHVsZUZpZWxkLm5hbWUsTW9kdWxlRmllbGQpXHJcbiAgICBWdWUuY29tcG9uZW50KE1vZHVsZUdyb3VwLm5hbWUsTW9kdWxlR3JvdXApXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgaW5zdGFsbCxcclxuICAgIEZpZWxkVGV4dCxcclxuICAgIEZpZWxkU2VsZWN0LFxyXG4gICAgRmllbGRVcGxvYWQsXHJcbiAgICBGaWVsZERhdGUsXHJcbiAgICBGaWVsZEFkZHJlc3MsXHJcbiAgICBGaWVsZENoZWNrQm94U2VsZWN0LFxyXG4gICAgRmllbGRDcnVkLFxyXG4gICAgaW5pdFZhbGlkYXRlXHJcbn1cclxuIiwiaW1wb3J0IHsgcmVxdWlyZWQsIGVtYWlsLCBtaW4gLG1heCxtYXhfdmFsdWV9IGZyb20gXCJ2ZWUtdmFsaWRhdGUvZGlzdC9ydWxlc1wiO1xyXG5pbXBvcnQge2lkY2FyZHMsbW9iaWxlLGlzbW9uZXl9IGZyb20gJy4vdmVyaWZpY2F0aW9uJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRWYWxpZGF0ZShleHRlbmQsIGxvY2FsaXplKXtcclxuICBleHRlbmQoXCJyZXF1aXJlZFwiLCByZXF1aXJlZCk7XHJcbiAgZXh0ZW5kKFwiZW1haWxcIiwgZW1haWwpO1xyXG4gIGV4dGVuZChcIm1pblwiLCBtaW4pO1xyXG4gIGV4dGVuZChcIm1heFwiLCBtYXgpO1xyXG4gIGV4dGVuZChcIm1heF92YWx1ZVwiLCBtYXhfdmFsdWUpO1xyXG4gIGV4dGVuZCgncG9zaXRpdmUnLHZhbHVlID0+IHtcclxuICAgIHJldHVybiB2YWx1ZSA+PSAwXHJcbiAgfSlcclxuLy8g6Lqr5Lu96K+B5Y+356CB6aqM6K+BXHJcbiAgZXh0ZW5kKCdpZGNhcmQnLGlkY2FyZHMpXHJcbi8vIOaJi+acuuWPt+mqjOivgVxyXG4gIGV4dGVuZCgnbW9iaWxlcycsbW9iaWxlKVxyXG4vLyDph5Hpop3moKHpqoxcclxuICBleHRlbmQoJ2lzbW9uZXknLGlzbW9uZXkpXHJcblxyXG4gIGxvY2FsaXplKHtcclxuICAgIHpoX0NOOiB7XHJcbiAgICAgIG1lc3NhZ2VzOiB7XHJcbiAgICAgICAgXCJhbHBoYVwiOiBcIntfZmllbGRffeWPquiDveWMheWQq+Wtl+avjeWtl+esplwiLFxyXG4gICAgICAgIFwiYWxwaGFfZGFzaFwiOiBcIntfZmllbGRffeiDveWkn+WMheWQq+Wtl+avjeaVsOWtl+Wtl+espuOAgeegtOaKmOWPt+WSjOS4i+WIkue6v1wiLFxyXG4gICAgICAgIFwiYWxwaGFfbnVtXCI6IFwie19maWVsZF995Y+q6IO95YyF5ZCr5a2X5q+N5pWw5a2X5a2X56ymXCIsXHJcbiAgICAgICAgXCJhbHBoYV9zcGFjZXNcIjogXCJ7X2ZpZWxkX33lj6rog73ljIXlkKvlrZfmr43lrZfnrKblkoznqbrmoLxcIixcclxuICAgICAgICBcImJldHdlZW5cIjogXCJ7X2ZpZWxkX33lv4XpobvlnKh7bWlufeS4jnttYXh95LmL6Ze0XCIsXHJcbiAgICAgICAgXCJjb25maXJtZWRcIjogXCJ7X2ZpZWxkX33kuI3og73lkox7dGFyZ2V0feWMuemFjVwiLFxyXG4gICAgICAgIFwiZGlnaXRzXCI6IFwie19maWVsZF995b+F6aG75piv5pWw5a2X77yM5LiU57K+56Gu5Yiwe2xlbmd0aH3kvY3mlbBcIixcclxuICAgICAgICBcImRpbWVuc2lvbnNcIjogXCJ7X2ZpZWxkX33lv4XpobvlnKh7d2lkdGh95YOP57Sg5LiOe2hlaWdodH3lg4/ntKDkuYvpl7RcIixcclxuICAgICAgICBcImVtYWlsXCI6IFwie19maWVsZF995LiN5piv5LiA5Liq5pyJ5pWI55qE6YKu566xXCIsXHJcbiAgICAgICAgXCJleGNsdWRlZFwiOiBcIntfZmllbGRffeS4jeaYr+S4gOS4quacieaViOWAvFwiLFxyXG4gICAgICAgIFwiZXh0XCI6IFwie19maWVsZF995LiN5piv5LiA5Liq5pyJ5pWI55qE5paH5Lu2XCIsXHJcbiAgICAgICAgXCJpbWFnZVwiOiBcIntfZmllbGRffeS4jeaYr+S4gOW8oOacieaViOeahOWbvueJh1wiLFxyXG4gICAgICAgIFwib25lT2ZcIjogXCJ7X2ZpZWxkX33kuI3mmK/kuIDkuKrmnInmlYjlgLxcIixcclxuICAgICAgICBcImludGVnZXJcIjogXCJ7X2ZpZWxkX33lv4XpobvmmK/mlbTmlbBcIixcclxuICAgICAgICBcImxlbmd0aFwiOiBcIntfZmllbGRffemVv+W6puW/hemhu+S4untsZW5ndGh9XCIsXHJcbiAgICAgICAgXCJtYXhcIjogXCJ7X2ZpZWxkX33kuI3og73otoXov4d7bGVuZ3RofeS4quWtl+esplwiLFxyXG4gICAgICAgIFwibWF4X3ZhbHVlXCI6IFwie19maWVsZF995b+F6aG75bCP5LqO5oiW562J5LqOe21heH1cIixcclxuICAgICAgICBcIm1pbWVzXCI6IFwie19maWVsZF995LiN5piv5LiA5Liq5pyJ5pWI55qE5paH5Lu257G75Z6LXCIsXHJcbiAgICAgICAgXCJtaW5cIjogXCJ7X2ZpZWxkX33lv4Xpobvoh7PlsJHmnIl7bGVuZ3RofeS4quWtl+esplwiLFxyXG4gICAgICAgIFwibWluX3ZhbHVlXCI6IFwie19maWVsZF995b+F6aG75aSn5LqO5oiW562J5LqOe21pbn1cIixcclxuICAgICAgICBcIm51bWVyaWNcIjogXCJ7X2ZpZWxkX33lj6rog73ljIXlkKvmlbDlrZflrZfnrKZcIixcclxuICAgICAgICBcInJlZ2V4XCI6IFwie19maWVsZF995qC85byP5peg5pWIXCIsXHJcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBcIntfZmllbGRffeS4jeiDveS4uuepulwiLFxyXG4gICAgICAgIFwicmVxdWlyZWRfaWZcIjogXCJ7X2ZpZWxkX33mmK/lv4XpobvnmoRcIixcclxuICAgICAgICBcInNpemVcIjogXCJ7X2ZpZWxkX33lv4XpobvlsI/kuo57c2l6ZX1LQlwiLFxyXG4gICAgICAgIHBvc2l0aXZlOid7X2ZpZWxkX33kuI3og73kuLrotJ/mlbAnXHJcbiAgICAgIH0sXHJcbiAgICAgIG5hbWVzOiB7XHJcbiAgICAgICAgZW1haWw6IFwi6YKu566x5Zyw5Z2AXCIsXHJcbiAgICAgICAgcGFzc3dvcmQ6IFwi5a+G56CBXCIsXHJcbiAgICAgICAgbW9uZXk6J+mHkeminSdcclxuICAgICAgfSxcclxuICAgICAgZmllbGRzOiB7XHJcbiAgICAgICAgcGFzc3dvcmQ6IHtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgbGV0IExPQ0FMRSA9IFwiemhfQ05cIjtcclxuXHJcbiAgbG9jYWxpemUoTE9DQUxFKVxyXG5cclxufVxyXG5cclxuIl0sIm5hbWVzIjpbImVtYWlsIiwidmFsaWRhdGUiLCJ2YWx1ZSIsIl9hIiwibXVsdGlwbGUiLCJyZSIsIkFycmF5IiwiaXNBcnJheSIsIlN0cmluZyIsInNwbGl0IiwibWFwIiwiZW1haWxTdHIiLCJ0cmltIiwiZXZlcnkiLCJ2YWwiLCJ0ZXN0IiwicGFyYW1zIiwibmFtZSIsImRlZmF1bHQiLCJpc051bGxPclVuZGVmaW5lZCIsInZhbGlkYXRlJGEiLCJsZW5ndGgiLCJtYXgiLCJjYXN0IiwiTnVtYmVyIiwidmFsaWRhdGUkOSIsIm1heF92YWx1ZSIsInZhbGlkYXRlJDciLCJtaW4iLCJyZXF1aXJlZCIsImFyciIsImFsbG93RmFsc2UiLCJyZXN1bHQiLCJ2YWxpZCIsImNvbXB1dGVzUmVxdWlyZWQiLCJpZGNhcmRzIiwiaWRjYXJkIiwiaWRjYXJkX2FycmF5IiwicGFyc2VJbnQiLCJzdWJzdHIiLCJTIiwibW9iaWxlIiwiaXNtb25leSIsIm1vbmV5IiwiY2FjaGUiLCJiaW5kIiwiZm4iLCJ0aGlzQXJnIiwiYXJncyIsImFyZ3VtZW50cyIsImkiLCJhcHBseSIsInJlcXVpcmUkJDAiLCJ0b1N0cmluZyIsIk9iamVjdCIsInByb3RvdHlwZSIsImtpbmRPZiIsImNyZWF0ZSIsInRoaW5nIiwic3RyIiwiY2FsbCIsInNsaWNlIiwidG9Mb3dlckNhc2UiLCJraW5kT2ZUZXN0IiwidHlwZSIsImlzVW5kZWZpbmVkIiwiaXNBcnJheUJ1ZmZlciIsImlzT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNGaWxlTGlzdCIsImlzRnVuY3Rpb24iLCJpc1VSTFNlYXJjaFBhcmFtcyIsImZvckVhY2giLCJvYmoiLCJsIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5IiwiVWludDhBcnJheSIsInV0aWxzIiwiaXNCdWZmZXIiLCJjb25zdHJ1Y3RvciIsImlzRm9ybURhdGEiLCJwYXR0ZXJuIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzU3RyZWFtIiwicGlwZSIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIndpbmRvdyIsImRvY3VtZW50IiwibWVyZ2UiLCJhc3NpZ25WYWx1ZSIsImV4dGVuZCIsImEiLCJiIiwicmVwbGFjZSIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJDb2RlQXQiLCJpbmhlcml0cyIsInN1cGVyQ29uc3RydWN0b3IiLCJwcm9wcyIsImRlc2NyaXB0b3JzIiwiYXNzaWduIiwidG9GbGF0T2JqZWN0Iiwic291cmNlT2JqIiwiZGVzdE9iaiIsImZpbHRlciIsInByb3AiLCJtZXJnZWQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZW5kc1dpdGgiLCJzZWFyY2hTdHJpbmciLCJwb3NpdGlvbiIsInVuZGVmaW5lZCIsImxhc3RJbmRleCIsImluZGV4T2YiLCJ0b0FycmF5IiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYnVpbGRVUkwiLCJ1cmwiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidiIsInRvSVNPU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsInB1c2giLCJqb2luIiwiaGFzaG1hcmtJbmRleCIsIkludGVyY2VwdG9yTWFuYWdlciIsInRoaXMiLCJoYW5kbGVycyIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwib3B0aW9ucyIsInN5bmNocm9ub3VzIiwicnVuV2hlbiIsImVqZWN0IiwiaWQiLCJoIiwiSW50ZXJjZXB0b3JNYW5hZ2VyXzEiLCJBeGlvc0Vycm9yIiwibWVzc2FnZSIsImNvZGUiLCJjb25maWciLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJFcnJvciIsInRvSlNPTiIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJzdGF0dXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJmcm9tIiwiZXJyb3IiLCJjdXN0b21Qcm9wcyIsImF4aW9zRXJyb3IiLCJBeGlvc0Vycm9yXzEiLCJ0cmFuc2l0aW9uYWwiLCJzaWxlbnRKU09OUGFyc2luZyIsImZvcmNlZEpTT05QYXJzaW5nIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsInRvRm9ybURhdGFfMSIsImZvcm1EYXRhIiwiY29udmVydFZhbHVlIiwiQmxvYiIsIkJ1ZmZlciIsImJ1aWxkIiwiZGF0YSIsInBhcmVudEtleSIsImZ1bGxLZXkiLCJlbCIsImFwcGVuZCIsInBvcCIsInNldHRsZSIsInJlc29sdmUiLCJyZWplY3QiLCJ2YWxpZGF0ZVN0YXR1cyIsIkVSUl9CQURfUkVRVUVTVCIsIkVSUl9CQURfUkVTUE9OU0UiLCJNYXRoIiwiZmxvb3IiLCJjb29raWVzIiwid3JpdGUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsInJlYWQiLCJtYXRjaCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsIm5vdyIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsImJhc2VVUkwiLCJyZWxhdGl2ZVVSTCIsImJ1aWxkRnVsbFBhdGgiLCJyZXF1ZXN0ZWRVUkwiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlSGVhZGVycyIsImhlYWRlcnMiLCJwYXJzZWQiLCJsaW5lIiwiY29uY2F0IiwiaXNVUkxTYW1lT3JpZ2luIiwib3JpZ2luVVJMIiwibXNpZSIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiY3JlYXRlRWxlbWVudCIsInJlc29sdmVVUkwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0IiwibG9jYXRpb24iLCJyZXF1ZXN0VVJMIiwiQ2FuY2VsZWRFcnJvciIsIkVSUl9DQU5DRUxFRCIsInJlcXVpcmUkJDEiLCJfX0NBTkNFTF9fIiwiQ2FuY2VsZWRFcnJvcl8xIiwicGFyc2VQcm90b2NvbCIsImV4ZWMiLCJzIiwibSIsImQiLCJ3IiwieSIsInBsdXJhbCIsIm1zIiwibXNBYnMiLCJuIiwiaXNQbHVyYWwiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJwYXJzZSIsImlzRmluaXRlIiwibG9uZyIsImFicyIsImZtdExvbmciLCJmbXRTaG9ydCIsImNvbW1vbiIsImVudiIsImNyZWF0ZURlYnVnIiwibmFtZXNwYWNlIiwicHJldlRpbWUiLCJuYW1lc3BhY2VzQ2FjaGUiLCJlbmFibGVkQ2FjaGUiLCJlbmFibGVPdmVycmlkZSIsImRlYnVnIiwiZW5hYmxlZCIsInNlbGYiLCJjdXJyIiwiZGlmZiIsInByZXYiLCJjb2VyY2UiLCJ1bnNoaWZ0IiwiaW5kZXgiLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJmb3JtYXR0ZXJzIiwic3BsaWNlIiwiZm9ybWF0QXJncyIsImxvZyIsInVzZUNvbG9ycyIsImNvbG9yIiwic2VsZWN0Q29sb3IiLCJkZXN0cm95IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImdldCIsIm5hbWVzcGFjZXMiLCJzZXQiLCJpbml0IiwiZGVsaW1pdGVyIiwibmV3RGVidWciLCJ0b05hbWVzcGFjZSIsInJlZ2V4cCIsInN1YnN0cmluZyIsImRpc2FibGUiLCJuYW1lcyIsInNraXBzIiwiZW5hYmxlIiwic2F2ZSIsImxlbiIsImh1bWFuaXplIiwiY29uc29sZSIsIndhcm4iLCJrZXlzIiwiY29sb3JzIiwibG9hZCIsImhhc0ZsYWciLCJmbGFnIiwiYXJndiIsInByb2Nlc3MiLCJwcmVmaXgiLCJzdGFydHNXaXRoIiwicG9zIiwidGVybWluYXRvclBvcyIsIm9zIiwiZm9yY2VDb2xvciIsImdldFN1cHBvcnRMZXZlbCIsInN0cmVhbSIsImxldmVsIiwiaXNUVFkiLCJwbGF0Zm9ybSIsIm9zUmVsZWFzZSIsInJlbGVhc2UiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJzb21lIiwic2lnbiIsIkNJX05BTUUiLCJURUFNQ0lUWV9WRVJTSU9OIiwiQ09MT1JURVJNIiwidmVyc2lvbiIsIlRFUk1fUFJPR1JBTV9WRVJTSU9OIiwiVEVSTV9QUk9HUkFNIiwiVEVSTSIsInN1cHBvcnRzQ29sb3IiLCJoYXNCYXNpYyIsImhhczI1NiIsImhhczE2bSIsInRyYW5zbGF0ZUxldmVsIiwiRk9SQ0VfQ09MT1IiLCJzdXBwb3J0c0NvbG9yXzEiLCJzdGRvdXQiLCJzdGRlcnIiLCJ0dHkiLCJ1dGlsIiwiZXhwb3J0cyIsImluc3BlY3RPcHRzIiwiYyIsImNvbG9yQ29kZSIsIm1vZHVsZSIsImhpZGVEYXRlIiwiZ2V0RGF0ZSIsIkRFQlVHIiwiQm9vbGVhbiIsImlzYXR0eSIsImZkIiwiZGVwcmVjYXRlIiwicmVxdWlyZSQkMiIsInJlZHVjZSIsIl8iLCJrIiwidG9VcHBlckNhc2UiLCJyZXF1aXJlJCQzIiwibyIsImluc3BlY3QiLCJPIiwiYnJvd3NlciIsIl9fbndqcyIsImxhc3RDIiwic3RvcmFnZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiciIsImdldEl0ZW0iLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsIldlYmtpdEFwcGVhcmFuY2UiLCJmaXJlYnVnIiwiZXhjZXB0aW9uIiwidGFibGUiLCIkMSIsImxvY2FsU3RvcmFnZSIsImxvY2Fsc3RvcmFnZSIsIndhcm5lZCIsImoiLCJVUkwiLCJodHRwIiwiaHR0cHMiLCJXcml0YWJsZSIsImFzc2VydCIsInJlcXVpcmUkJDQiLCJkZWJ1Z18xIiwicmVxdWlyZSQkNSIsImV2ZW50cyIsImV2ZW50SGFuZGxlcnMiLCJldmVudCIsImFyZzEiLCJhcmcyIiwiYXJnMyIsIl9yZWRpcmVjdGFibGUiLCJlbWl0IiwiSW52YWxpZFVybEVycm9yIiwiY3JlYXRlRXJyb3JUeXBlIiwiVHlwZUVycm9yIiwiUmVkaXJlY3Rpb25FcnJvciIsIlRvb01hbnlSZWRpcmVjdHNFcnJvciIsIk1heEJvZHlMZW5ndGhFeGNlZWRlZEVycm9yIiwiV3JpdGVBZnRlckVuZEVycm9yIiwibm9vcCIsIlJlZGlyZWN0YWJsZVJlcXVlc3QiLCJyZXNwb25zZUNhbGxiYWNrIiwiX3Nhbml0aXplT3B0aW9ucyIsIl9vcHRpb25zIiwiX2VuZGVkIiwiX2VuZGluZyIsIl9yZWRpcmVjdENvdW50IiwiX3JlZGlyZWN0cyIsIl9yZXF1ZXN0Qm9keUxlbmd0aCIsIl9yZXF1ZXN0Qm9keUJ1ZmZlcnMiLCJvbiIsIl9vbk5hdGl2ZVJlc3BvbnNlIiwiX3Byb2Nlc3NSZXNwb25zZSIsIl9wZXJmb3JtUmVxdWVzdCIsIndyYXAiLCJwcm90b2NvbHMiLCJtYXhSZWRpcmVjdHMiLCJtYXhCb2R5TGVuZ3RoIiwibmF0aXZlUHJvdG9jb2xzIiwic2NoZW1lIiwibmF0aXZlUHJvdG9jb2wiLCJ3cmFwcGVkUHJvdG9jb2wiLCJpbnB1dCIsImNhbGxiYWNrIiwidXJsVG9PcHRpb25zIiwiZXJyIiwiZXF1YWwiLCJ3cml0YWJsZSIsIndyYXBwZWRSZXF1ZXN0IiwiZW5kIiwidXJsT2JqZWN0IiwicmVtb3ZlTWF0Y2hpbmdIZWFkZXJzIiwicmVnZXgiLCJsYXN0VmFsdWUiLCJoZWFkZXIiLCJiYXNlQ2xhc3MiLCJDdXN0b21FcnJvciIsInByb3BlcnRpZXMiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImNhdXNlIiwiZGVzdHJveVJlcXVlc3QiLCJyZW1vdmVMaXN0ZW5lciIsImFib3J0IiwiX2N1cnJlbnRSZXF1ZXN0IiwiZW5jb2RpbmciLCJjdXJyZW50UmVxdWVzdCIsInNldEhlYWRlciIsInJlbW92ZUhlYWRlciIsInNldFRpbWVvdXQiLCJtc2VjcyIsImRlc3Ryb3lPblRpbWVvdXQiLCJzb2NrZXQiLCJhZGRMaXN0ZW5lciIsInN0YXJ0VGltZXIiLCJfdGltZW91dCIsImNsZWFyVGltZW91dCIsImNsZWFyVGltZXIiLCJvbmNlIiwibWV0aG9kIiwicHJvcGVydHkiLCJzZWFyY2hQb3MiLCJhZ2VudHMiLCJhZ2VudCIsIl9jdXJyZW50VXJsIiwiX2lzUmVkaXJlY3QiLCJidWZmZXJzIiwid3JpdGVOZXh0IiwiZmluaXNoZWQiLCJzdGF0dXNDb2RlIiwidHJhY2tSZWRpcmVjdHMiLCJmb2xsb3dSZWRpcmVjdHMiLCJyZXNwb25zZVVybCIsInJlZGlyZWN0cyIsInJlcXVlc3RIZWFkZXJzIiwiYmVmb3JlUmVkaXJlY3QiLCJIb3N0IiwicmVxIiwiZ2V0SGVhZGVyIiwicmVkaXJlY3RVcmwiLCJjdXJyZW50SG9zdEhlYWRlciIsImN1cnJlbnRVcmxQYXJ0cyIsImN1cnJlbnRIb3N0IiwiY3VycmVudFVybCIsInJlZGlyZWN0VXJsUGFydHMiLCJzdWJkb21haW4iLCJkb3QiLCJpc1N1YmRvbWFpbiIsInJlc3BvbnNlRGV0YWlscyIsInJlcXVlc3REZXRhaWxzIiwiZm9sbG93UmVkaXJlY3RzTW9kdWxlIiwiaHR0cEZvbGxvdyIsInJlcXVpcmUkJDYiLCJodHRwc0ZvbGxvdyIsInJlcXVpcmUkJDciLCJ6bGliIiwicmVxdWlyZSQkOCIsIlZFUlNJT04iLCJyZXF1aXJlJCQ5IiwidHJhbnNpdGlvbmFsRGVmYXVsdHMiLCJyZXF1aXJlJCQxMCIsInJlcXVpcmUkJDExIiwicmVxdWlyZSQkMTIiLCJpc0h0dHBzIiwic3VwcG9ydGVkUHJvdG9jb2xzIiwic2V0UHJveHkiLCJwcm94eSIsImF1dGgiLCJiYXNlNjQiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwicmVkaXJlY3Rpb24iLCJodHRwXzEiLCJQcm9taXNlIiwicmVzb2x2ZVByb21pc2UiLCJyZWplY3RQcm9taXNlIiwib25DYW5jZWxlZCIsImRvbmUiLCJjYW5jZWxUb2tlbiIsInVuc3Vic2NyaWJlIiwic2lnbmFsIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhlYWRlck5hbWVzIiwiZ2V0SGVhZGVycyIsImZ1bGxQYXRoIiwidXJsQXV0aCIsImF1dGhvcml6YXRpb24iLCJpc0h0dHBzUmVxdWVzdCIsImh0dHBzQWdlbnQiLCJodHRwQWdlbnQiLCJjdXN0b21FcnIiLCJleGlzdHMiLCJzb2NrZXRQYXRoIiwidHJhbnNwb3J0IiwicHJveHlFbnYiLCJwcm94eVVybCIsInBhcnNlZFByb3h5VXJsIiwibm9Qcm94eUVudiIsIm5vX3Byb3h5IiwiTk9fUFJPWFkiLCJzaG91bGRQcm94eSIsInByb3h5RWxlbWVudCIsInByb3h5VXJsQXV0aCIsImlzSHR0cHNQcm94eSIsImluc2VjdXJlSFRUUFBhcnNlciIsInJlcyIsImFib3J0ZWQiLCJsYXN0UmVxdWVzdCIsImRlY29tcHJlc3MiLCJjcmVhdGVVbnppcCIsInN0YXR1c1RleHQiLCJzdGF0dXNNZXNzYWdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VCdWZmZXIiLCJ0b3RhbFJlc3BvbnNlQnl0ZXMiLCJjaHVuayIsIm1heENvbnRlbnRMZW5ndGgiLCJyZXNwb25zZURhdGEiLCJyZXNwb25zZUVuY29kaW5nIiwic2V0S2VlcEFsaXZlIiwidGltZW91dCIsImlzTmFOIiwiRVJSX0JBRF9PUFRJT05fVkFMVUUiLCJFVElNRURPVVQiLCJFQ09OTkFCT1JURUQiLCJjYW5jZWwiLCJzdWJzY3JpYmUiLCJhZGRFdmVudExpc3RlbmVyIiwiU3RyZWFtIiwiRGVsYXllZFN0cmVhbSIsInNvdXJjZSIsImRhdGFTaXplIiwibWF4RGF0YVNpemUiLCJwYXVzZVN0cmVhbSIsIl9tYXhEYXRhU2l6ZUV4Y2VlZGVkIiwiX3JlbGVhc2VkIiwiX2J1ZmZlcmVkRXZlbnRzIiwiZGVsYXllZF9zdHJlYW0iLCJkZWxheWVkU3RyZWFtIiwib3B0aW9uIiwicmVhbEVtaXQiLCJfaGFuZGxlRW1pdCIsInBhdXNlIiwicmVhZGFibGUiLCJzZXRFbmNvZGluZyIsInJlc3VtZSIsIl9jaGVja0lmTWF4RGF0YVNpemVFeGNlZWRlZCIsIkNvbWJpbmVkU3RyZWFtIiwicGF1c2VTdHJlYW1zIiwiX3N0cmVhbXMiLCJfY3VycmVudFN0cmVhbSIsIl9pbnNpZGVMb29wIiwiX3BlbmRpbmdOZXh0IiwiY29tYmluZWRfc3RyZWFtIiwiY29tYmluZWRTdHJlYW0iLCJpc1N0cmVhbUxpa2UiLCJuZXdTdHJlYW0iLCJJbmZpbml0eSIsIl9jaGVja0RhdGFTaXplIiwiX2hhbmRsZUVycm9ycyIsImRlc3QiLCJfZ2V0TmV4dCIsIl9yZWFsR2V0TmV4dCIsInNoaWZ0IiwiX3BpcGVOZXh0IiwiX2VtaXRFcnJvciIsIl9yZXNldCIsIl91cGRhdGVEYXRhU2l6ZSIsImV4dGVuc2lvbnMiLCJ0eXBlcyIsInByZWZlcmVuY2UiLCJkYiIsImV4dG5hbWUiLCJFWFRSQUNUX1RZUEVfUkVHRVhQIiwiVEVYVF9UWVBFX1JFR0VYUCIsImNoYXJzZXQiLCJtaW1lIiwiY2hhcnNldHMiLCJsb29rdXAiLCJjb250ZW50VHlwZSIsImV4dGVuc2lvbiIsImV4dHMiLCJ0byIsImRlZmVyIiwiZGVmZXJfMSIsIm5leHRUaWNrIiwic2V0SW1tZWRpYXRlIiwiYXN5bmNfMSIsImlzQXN5bmMiLCJjbGVhbiIsImpvYnMiLCJhYm9ydF8xIiwic3RhdGUiLCJhc3luYyIsIml0ZXJhdGVfMSIsImxpc3QiLCJpdGVyYXRvciIsIml0ZW0iLCJhYm9ydGVyIiwicnVuSm9iIiwib3V0cHV0IiwicmVzdWx0cyIsInN0YXRlXzEiLCJzb3J0TWV0aG9kIiwiaXNOYW1lZExpc3QiLCJpbml0U3RhdGUiLCJrZXllZExpc3QiLCJzaXplIiwic29ydCIsInRlcm1pbmF0b3JfMSIsIml0ZXJhdGUiLCJ0ZXJtaW5hdG9yIiwicGFyYWxsZWxfMSIsImFzY2VuZGluZyIsInNlcmlhbE9yZGVyZWRNb2R1bGUiLCJpdGVyYXRvckhhbmRsZXIiLCJzZXJpYWxPcmRlcmVkXzEiLCJkZXNjZW5kaW5nIiwic2VyaWFsT3JkZXJlZCIsInNlcmlhbF8xIiwiYXN5bmNraXQiLCJwYXJhbGxlbCIsInNlcmlhbCIsInBvcHVsYXRlIiwiZHN0Iiwic3JjIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIm5vcm1hbGl6ZWROYW1lIiwidG9Gb3JtRGF0YSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHIiLCJyZXF1ZXN0RGF0YSIsInVuZXNjYXBlIiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVRleHQiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwib25hYm9ydCIsIm9uZXJyb3IiLCJFUlJfTkVUV09SSyIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJzZW5kIiwidHJhbnNmb3JtUmVxdWVzdCIsImlzT2JqZWN0UGF5bG9hZCIsIl9Gb3JtRGF0YSIsInJhd1ZhbHVlIiwicGFyc2VyIiwiZW5jb2RlciIsImUiLCJzdHJpbmdpZnlTYWZlbHkiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInN0cmljdEpTT05QYXJzaW5nIiwicGFyc2VVcmwiLCJmcyIsIl9vdmVyaGVhZExlbmd0aCIsIl92YWx1ZUxlbmd0aCIsIl92YWx1ZXNUb01lYXN1cmUiLCJmb3JtX2RhdGEiLCJMSU5FX0JSRUFLIiwiZmllbGQiLCJmaWxlbmFtZSIsIl9lcnJvciIsIl9tdWx0aVBhcnRIZWFkZXIiLCJmb290ZXIiLCJfbXVsdGlQYXJ0Rm9vdGVyIiwiX3RyYWNrTGVuZ3RoIiwidmFsdWVMZW5ndGgiLCJrbm93bkxlbmd0aCIsImJ5dGVMZW5ndGgiLCJfbGVuZ3RoUmV0cmlldmVyIiwic3RhcnQiLCJzdGF0IiwiZmlsZVNpemUiLCJjb250ZW50RGlzcG9zaXRpb24iLCJfZ2V0Q29udGVudERpc3Bvc2l0aW9uIiwiX2dldENvbnRlbnRUeXBlIiwiY29udGVudHMiLCJnZXRCb3VuZGFyeSIsImZpbGVwYXRoIiwibm9ybWFsaXplIiwiYmFzZW5hbWUiLCJjbGllbnQiLCJfaHR0cE1lc3NhZ2UiLCJuZXh0IiwiX2xhc3RCb3VuZGFyeSIsInVzZXJIZWFkZXJzIiwiZm9ybUhlYWRlcnMiLCJzZXRCb3VuZGFyeSIsImJvdW5kYXJ5IiwiX2JvdW5kYXJ5IiwiX2dlbmVyYXRlQm91bmRhcnkiLCJnZXRCdWZmZXIiLCJkYXRhQnVmZmVyIiwiYWxsb2MiLCJyYW5kb20iLCJnZXRMZW5ndGhTeW5jIiwiaGFzS25vd25MZW5ndGgiLCJnZXRMZW5ndGgiLCJjYiIsInZhbHVlcyIsInN1Ym1pdCIsIm9uUmVzcG9uc2UiLCJyZXNwb25jZSIsIkFjY2VwdCIsImRlZmF1bHRzXzEiLCJpc0NhbmNlbCIsInRyYW5zZm9ybURhdGEiLCJmbnMiLCJjb250ZXh0IiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJtZXJnZUNvbmZpZyIsImNvbmZpZzEiLCJjb25maWcyIiwiZ2V0TWVyZ2VkVmFsdWUiLCJ0YXJnZXQiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwidmFsdWVGcm9tQ29uZmlnMiIsImRlZmF1bHRUb0NvbmZpZzIiLCJtZXJnZURpcmVjdEtleXMiLCJtZXJnZU1hcCIsInRpbWVvdXRNZXNzYWdlIiwiY29uZmlnVmFsdWUiLCJ2YWxpZGF0b3JzIiwiZGVwcmVjYXRlZFdhcm5pbmdzIiwidmFsaWRhdG9yIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJvcHRzIiwiRVJSX0RFUFJFQ0FURUQiLCJhc3NlcnRPcHRpb25zIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwiRVJSX0JBRF9PUFRJT04iLCJkaXNwYXRjaFJlcXVlc3QiLCJ0aGVuIiwicmVhc29uIiwiQXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsImludGVyY2VwdG9ycyIsImNvbmZpZ09yVXJsIiwiYm9vbGVhbiIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJwcm9taXNlIiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwiY2hhaW4iLCJuZXdDb25maWciLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJnZXRVcmkiLCJnZW5lcmF0ZUhUVFBNZXRob2QiLCJpc0Zvcm0iLCJheGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImluc3RhbmNlIiwiQ2FuY2VsVG9rZW4iLCJleGVjdXRvciIsInRva2VuIiwiX2xpc3RlbmVycyIsIm9uZnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJsaXN0ZW5lciIsIkNhbmNlbFRva2VuXzEiLCJDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsInBheWxvYWQiLCJheGlvc01vZHVsZSIsImF4aW9zXzEiLCJheGlvc0NsaWVudCIsInQiLCJ1IiwiZiIsIiQiLCJNIiwid2Vla2RheXMiLCJtb250aHMiLCJvcmRpbmFsIiwieiIsInV0Y09mZnNldCIsImRhdGUiLCJ5ZWFyIiwibW9udGgiLCJjbG9uZSIsImFkZCIsImNlaWwiLCJwIiwiRCIsIlEiLCJnIiwibG9jYWxlIiwiJEwiLCJ1dGMiLCIkdSIsIngiLCIkeCIsIiRvZmZzZXQiLCIkZCIsIk5hTiIsIlVUQyIsIiR5IiwiZ2V0RnVsbFllYXIiLCIkTSIsImdldE1vbnRoIiwiJEQiLCIkVyIsImdldERheSIsIiRIIiwiZ2V0SG91cnMiLCIkbSIsImdldE1pbnV0ZXMiLCIkcyIsImdldFNlY29uZHMiLCIkbXMiLCJnZXRNaWxsaXNlY29uZHMiLCIkdXRpbHMiLCJpc1ZhbGlkIiwiaXNTYW1lIiwic3RhcnRPZiIsImVuZE9mIiwiaXNBZnRlciIsImlzQmVmb3JlIiwiJGciLCJ1bml4IiwidmFsdWVPZiIsImdldFRpbWUiLCJ0b0RhdGUiLCIkbG9jYWxlIiwid2Vla1N0YXJ0IiwiJHNldCIsImRheXNJbk1vbnRoIiwic3VidHJhY3QiLCJpbnZhbGlkRGF0ZSIsIm1lcmlkaWVtIiwibW9udGhzU2hvcnQiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJnZXRUaW1lem9uZU9mZnNldCIsInRvVVRDU3RyaW5nIiwiJGkiLCJpc0RheWpzIiwiZW4iLCJMcyIsImN1cnJlbmN5IiwidmFscyIsInRvRml4ZWQiLCJpbmRleEZpcnN0IiwidXVpZCIsImhleERpZ2l0cyIsInBob25lRW5jcnkiLCJwaG9uZSIsInRlbCIsInBlb3BsZVNob3ciLCJwZW9wbGVBcnIiLCJzaG93IiwiRmlsdGVyIiwiVnVlIiwiRlVOQ19FUlJPUl9URVhUIiwiSEFTSF9VTkRFRklORUQiLCJQTEFDRUhPTERFUiIsIldSQVBfQ1VSUllfUklHSFRfRkxBRyIsIldSQVBfUEFSVElBTF9GTEFHIiwiV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUciLCJXUkFQX0FSWV9GTEFHIiwiV1JBUF9SRUFSR19GTEFHIiwiSU5GSU5JVFkiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTkFOIiwiTUFYX0FSUkFZX0xFTkdUSCIsIndyYXBGbGFncyIsImFyZ3NUYWciLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicHJvbWlzZVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVFbXB0eVN0cmluZ0xlYWRpbmciLCJyZUVtcHR5U3RyaW5nTWlkZGxlIiwicmVFbXB0eVN0cmluZ1RyYWlsaW5nIiwicmVFc2NhcGVkSHRtbCIsInJlVW5lc2NhcGVkSHRtbCIsInJlSGFzRXNjYXBlZEh0bWwiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJyZUVzY2FwZSIsInJlRXZhbHVhdGUiLCJyZUludGVycG9sYXRlIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsInJlUHJvcE5hbWUiLCJyZVJlZ0V4cENoYXIiLCJyZUhhc1JlZ0V4cENoYXIiLCJyZVRyaW1TdGFydCIsInJlV2hpdGVzcGFjZSIsInJlV3JhcENvbW1lbnQiLCJyZVdyYXBEZXRhaWxzIiwicmVTcGxpdERldGFpbHMiLCJyZUFzY2lpV29yZCIsInJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0FzdHJhbFJhbmdlIiwicnNDb21ib1JhbmdlIiwicnNDb21ib01hcmtzUmFuZ2UiLCJyc0RpbmdiYXRSYW5nZSIsInJzTG93ZXJSYW5nZSIsInJzVXBwZXJSYW5nZSIsInJzVmFyUmFuZ2UiLCJyc0JyZWFrUmFuZ2UiLCJyc01hdGhPcFJhbmdlIiwicnNBcG9zIiwicnNBc3RyYWwiLCJyc0JyZWFrIiwicnNDb21ibyIsInJzRGlnaXRzIiwicnNEaW5nYmF0IiwicnNMb3dlciIsInJzTWlzYyIsInJzRml0eiIsInJzTm9uQXN0cmFsIiwicnNSZWdpb25hbCIsInJzU3VyclBhaXIiLCJyc1VwcGVyIiwicnNaV0oiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicnNPcHRDb250ckxvd2VyIiwicnNPcHRDb250clVwcGVyIiwicmVPcHRNb2QiLCJyc01vZGlmaWVyIiwicnNPcHRWYXIiLCJyc1NlcSIsInJzRW1vamkiLCJyc1N5bWJvbCIsInJlQXBvcyIsInJlQ29tYm9NYXJrIiwicmVVbmljb2RlIiwicmVVbmljb2RlV29yZCIsInJlSGFzVW5pY29kZSIsInJlSGFzVW5pY29kZVdvcmQiLCJjb250ZXh0UHJvcHMiLCJ0ZW1wbGF0ZUNvdW50ZXIiLCJ0eXBlZEFycmF5VGFncyIsImNsb25lYWJsZVRhZ3MiLCJzdHJpbmdFc2NhcGVzIiwiZnJlZVBhcnNlRmxvYXQiLCJmcmVlUGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZ2xvYmFsIiwiZnJlZVNlbGYiLCJyb290IiwiRnVuY3Rpb24iLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsIm5vZGVVdGlsIiwicmVxdWlyZSIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsIm5vZGVJc0RhdGUiLCJub2RlSXNNYXAiLCJpc01hcCIsIm5vZGVJc1JlZ0V4cCIsImlzUmVnRXhwIiwibm9kZUlzU2V0IiwiaXNTZXQiLCJub2RlSXNUeXBlZEFycmF5IiwiZnVuYyIsImFycmF5QWdncmVnYXRvciIsImFycmF5Iiwic2V0dGVyIiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImFycmF5RWFjaCIsImFycmF5RWFjaFJpZ2h0IiwiYXJyYXlFdmVyeSIsInByZWRpY2F0ZSIsImFycmF5RmlsdGVyIiwicmVzSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYmFzZUluZGV4T2YiLCJhcnJheUluY2x1ZGVzV2l0aCIsImNvbXBhcmF0b3IiLCJhcnJheU1hcCIsImFycmF5UHVzaCIsIm9mZnNldCIsImFycmF5UmVkdWNlIiwiaW5pdEFjY3VtIiwiYXJyYXlSZWR1Y2VSaWdodCIsImFycmF5U29tZSIsImFzY2lpU2l6ZSIsImJhc2VQcm9wZXJ0eSIsImJhc2VGaW5kS2V5IiwiY29sbGVjdGlvbiIsImVhY2hGdW5jIiwiYmFzZUZpbmRJbmRleCIsImZyb21JbmRleCIsImZyb21SaWdodCIsInN0cmljdEluZGV4T2YiLCJiYXNlSXNOYU4iLCJiYXNlSW5kZXhPZldpdGgiLCJiYXNlTWVhbiIsImJhc2VTdW0iLCJvYmplY3QiLCJiYXNlUHJvcGVydHlPZiIsImJhc2VSZWR1Y2UiLCJjdXJyZW50IiwiYmFzZVRpbWVzIiwiYmFzZVRyaW0iLCJzdHJpbmciLCJ0cmltbWVkRW5kSW5kZXgiLCJiYXNlVW5hcnkiLCJiYXNlVmFsdWVzIiwiY2FjaGVIYXMiLCJoYXMiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJkZWJ1cnJMZXR0ZXIiLCJlc2NhcGVIdG1sQ2hhciIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwibWFwVG9BcnJheSIsIm92ZXJBcmciLCJ0cmFuc2Zvcm0iLCJhcmciLCJyZXBsYWNlSG9sZGVycyIsInBsYWNlaG9sZGVyIiwic2V0VG9BcnJheSIsInNldFRvUGFpcnMiLCJzdHJpbmdTaXplIiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwidW5pY29kZVRvQXJyYXkiLCJhc2NpaVRvQXJyYXkiLCJ1bmVzY2FwZUh0bWxDaGFyIiwicnVuSW5Db250ZXh0IiwidWlkIiwicGljayIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJvbGREYXNoIiwicmVJc05hdGl2ZSIsIlN5bWJvbCIsImFsbG9jVW5zYWZlIiwiZ2V0UHJvdG90eXBlIiwib2JqZWN0Q3JlYXRlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ltSXRlcmF0b3IiLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiZ2V0TmF0aXZlIiwiY3R4Q2xlYXJUaW1lb3V0IiwiY3R4Tm93IiwiY3R4U2V0VGltZW91dCIsIm5hdGl2ZUNlaWwiLCJuYXRpdmVGbG9vciIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJuYXRpdmVJc0J1ZmZlciIsIm5hdGl2ZUlzRmluaXRlIiwibmF0aXZlSm9pbiIsIm5hdGl2ZUtleXMiLCJuYXRpdmVNYXgiLCJuYXRpdmVNaW4iLCJuYXRpdmVOb3ciLCJuYXRpdmVQYXJzZUludCIsIm5hdGl2ZVJhbmRvbSIsIm5hdGl2ZVJldmVyc2UiLCJyZXZlcnNlIiwiRGF0YVZpZXciLCJNYXAiLCJTZXQiLCJXZWFrTWFwIiwibmF0aXZlQ3JlYXRlIiwibWV0YU1hcCIsInJlYWxOYW1lcyIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwic3ltYm9sVG9TdHJpbmciLCJsb2Rhc2giLCJpc09iamVjdExpa2UiLCJMYXp5V3JhcHBlciIsIkxvZGFzaFdyYXBwZXIiLCJ3cmFwcGVyQ2xvbmUiLCJiYXNlQ3JlYXRlIiwicHJvdG8iLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJfX3dyYXBwZWRfXyIsIl9fYWN0aW9uc19fIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsIkhhc2giLCJlbnRyaWVzIiwiY2xlYXIiLCJlbnRyeSIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsIlN0YWNrIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0FyZ3VtZW50cyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImVxIiwiYmFzZUFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJiYXNlQWdncmVnYXRvciIsImJhc2VFYWNoIiwiYmFzZUFzc2lnbiIsImNvcHlPYmplY3QiLCJiYXNlQXQiLCJwYXRocyIsInNraXAiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJpc0RlZXAiLCJpc0ZsYXQiLCJpc0Z1bGwiLCJpbml0Q2xvbmVBcnJheSIsInRhZyIsImdldFRhZyIsImlzRnVuYyIsImNsb25lQnVmZmVyIiwiaW5pdENsb25lT2JqZWN0IiwiZ2V0U3ltYm9sc0luIiwiY29weVN5bWJvbHNJbiIsImtleXNJbiIsImJhc2VBc3NpZ25JbiIsImdldFN5bWJvbHMiLCJjb3B5U3ltYm9scyIsInN5bWJvbCIsIkN0b3IiLCJjbG9uZUFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJieXRlT2Zmc2V0IiwiY2xvbmVEYXRhVmlldyIsImNsb25lVHlwZWRBcnJheSIsImNsb25lUmVnRXhwIiwiaW5pdENsb25lQnlUYWciLCJzdGFja2VkIiwic3ViVmFsdWUiLCJnZXRBbGxLZXlzSW4iLCJnZXRBbGxLZXlzIiwiYmFzZUNvbmZvcm1zVG8iLCJiYXNlRGVsYXkiLCJ3YWl0IiwiYmFzZURpZmZlcmVuY2UiLCJpbmNsdWRlcyIsImlzQ29tbW9uIiwidmFsdWVzTGVuZ3RoIiwib3V0ZXIiLCJjb21wdXRlZCIsInZhbHVlc0luZGV4IiwidGVtcGxhdGVTZXR0aW5ncyIsImVzY2FwZSIsImV2YWx1YXRlIiwiaW50ZXJwb2xhdGUiLCJ2YXJpYWJsZSIsImltcG9ydHMiLCJnZXRNYXBEYXRhIiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImlzU3ltYm9sIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiZGVwdGgiLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJiYXNlR2V0IiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR3QiLCJvdGhlciIsImJhc2VIYXMiLCJiYXNlSGFzSW4iLCJiYXNlSW50ZXJzZWN0aW9uIiwiYXJyYXlzIiwib3RoTGVuZ3RoIiwib3RoSW5kZXgiLCJjYWNoZXMiLCJtYXhMZW5ndGgiLCJzZWVuIiwiYmFzZUludm9rZSIsInBhcmVudCIsImxhc3QiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwib3RoUHJvcHMiLCJvYmpTdGFja2VkIiwib3RoU3RhY2tlZCIsInNraXBDdG9yIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm9iakN0b3IiLCJvdGhDdG9yIiwiZXF1YWxPYmplY3RzIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzTWF0Y2giLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJzcmNWYWx1ZSIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiYmFzZUlzTmF0aXZlIiwiYmFzZUl0ZXJhdGVlIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXMiLCJiYXNlS2V5cyIsImlzUHJvdG90eXBlIiwiYmFzZUtleXNJbiIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlTHQiLCJiYXNlTWFwIiwiaXNBcnJheUxpa2UiLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJiYXNlTWVyZ2UiLCJzcmNJbmRleCIsIm1lcmdlRnVuYyIsInNhZmVHZXQiLCJuZXdWYWx1ZSIsImlzVHlwZWQiLCJpc0FycmF5TGlrZU9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTWVyZ2VEZWVwIiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjcml0ZXJpYSIsImNvbXBhcmVyIiwiYmFzZVNvcnRCeSIsIm9iakNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJjb21wYXJlQXNjZW5kaW5nIiwiY29tcGFyZU11bHRpcGxlIiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImJhc2VQdWxsQXQiLCJpbmRleGVzIiwicHJldmlvdXMiLCJiYXNlVW5zZXQiLCJiYXNlUmVwZWF0IiwiYmFzZVJlc3QiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwidXBkYXRlciIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJhc2VXcmFwcGVyVmFsdWUiLCJhY3Rpb25zIiwiYWN0aW9uIiwiYmFzZVhvciIsImJhc2VaaXBPYmplY3QiLCJhc3NpZ25GdW5jIiwidmFsc0xlbmd0aCIsImNhc3RBcnJheUxpa2VPYmplY3QiLCJjYXN0RnVuY3Rpb24iLCJzdHJpbmdUb1BhdGgiLCJjYXN0UmVzdCIsImNhc3RTbGljZSIsImNvcHkiLCJhcnJheUJ1ZmZlciIsInR5cGVkQXJyYXkiLCJ2YWxJc0RlZmluZWQiLCJ2YWxJc1JlZmxleGl2ZSIsImNvbXBvc2VBcmdzIiwicGFydGlhbHMiLCJob2xkZXJzIiwiaXNDdXJyaWVkIiwiYXJnc0luZGV4IiwiYXJnc0xlbmd0aCIsImhvbGRlcnNMZW5ndGgiLCJsZWZ0SW5kZXgiLCJsZWZ0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJpc1VuY3VycmllZCIsImNvbXBvc2VBcmdzUmlnaHQiLCJob2xkZXJzSW5kZXgiLCJyaWdodEluZGV4IiwicmlnaHRMZW5ndGgiLCJpc05ldyIsImNyZWF0ZUFnZ3JlZ2F0b3IiLCJpbml0aWFsaXplciIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJzb3VyY2VzIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsIml0ZXJhYmxlIiwiY3JlYXRlQ2FzZUZpcnN0IiwibWV0aG9kTmFtZSIsInRyYWlsaW5nIiwiY3JlYXRlQ29tcG91bmRlciIsIndvcmRzIiwiZGVidXJyIiwiY3JlYXRlQ3RvciIsInRoaXNCaW5kaW5nIiwiY3JlYXRlRmluZCIsImZpbmRJbmRleEZ1bmMiLCJjcmVhdGVGbG93IiwiZmxhdFJlc3QiLCJmdW5jcyIsInByZXJlcSIsInRocnUiLCJ3cmFwcGVyIiwiZ2V0RnVuY05hbWUiLCJmdW5jTmFtZSIsImdldERhdGEiLCJpc0xhemlhYmxlIiwicGxhbnQiLCJjcmVhdGVIeWJyaWQiLCJwYXJ0aWFsc1JpZ2h0IiwiaG9sZGVyc1JpZ2h0IiwiYXJnUG9zIiwiYXJ5IiwiYXJpdHkiLCJpc0FyeSIsImlzQmluZCIsImlzQmluZEtleSIsImlzRmxpcCIsImdldEhvbGRlciIsImhvbGRlcnNDb3VudCIsImNvdW50SG9sZGVycyIsIm5ld0hvbGRlcnMiLCJjcmVhdGVSZWN1cnJ5IiwiYXJyTGVuZ3RoIiwib2xkQXJyYXkiLCJyZW9yZGVyIiwiY3JlYXRlSW52ZXJ0ZXIiLCJ0b0l0ZXJhdGVlIiwiYmFzZUludmVydGVyIiwiY3JlYXRlTWF0aE9wZXJhdGlvbiIsIm9wZXJhdG9yIiwiZGVmYXVsdFZhbHVlIiwiY3JlYXRlT3ZlciIsImFycmF5RnVuYyIsImNyZWF0ZVBhZGRpbmciLCJjaGFycyIsImNoYXJzTGVuZ3RoIiwiY3JlYXRlUmFuZ2UiLCJzdGVwIiwidG9GaW5pdGUiLCJiYXNlUmFuZ2UiLCJjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uIiwidG9OdW1iZXIiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJuZXdEYXRhIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsImNyZWF0ZVJvdW5kIiwicHJlY2lzaW9uIiwidG9JbnRlZ2VyIiwicGFpciIsImNyZWF0ZVRvUGFpcnMiLCJiYXNlVG9QYWlycyIsImNyZWF0ZVdyYXAiLCJzcmNCaXRtYXNrIiwibmV3Qml0bWFzayIsImlzQ29tYm8iLCJtZXJnZURhdGEiLCJjcmVhdGVDdXJyeSIsImNyZWF0ZVBhcnRpYWwiLCJjcmVhdGVCaW5kIiwiY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiIsImN1c3RvbURlZmF1bHRzTWVyZ2UiLCJjdXN0b21PbWl0Q2xvbmUiLCJhcnJTdGFja2VkIiwiYXJyVmFsdWUiLCJmbGF0dGVuIiwib3RoZXJGdW5jIiwiZ2V0VmFsdWUiLCJzdHViQXJyYXkiLCJoYXNQYXRoIiwiaGFzRnVuYyIsImlzTGVuZ3RoIiwiY3RvclN0cmluZyIsImlzTWFza2FibGUiLCJzdHViRmFsc2UiLCJvdGhlckFyZ3MiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImRldGFpbHMiLCJpbnNlcnRXcmFwRGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZ2V0V3JhcERldGFpbHMiLCJjb3VudCIsImxhc3RDYWxsZWQiLCJzdGFtcCIsInJlbWFpbmluZyIsInJhbmQiLCJtZW1vaXplIiwibWVtb2l6ZUNhcHBlZCIsInF1b3RlIiwic3ViU3RyaW5nIiwiZGlmZmVyZW5jZSIsImRpZmZlcmVuY2VCeSIsImRpZmZlcmVuY2VXaXRoIiwiZmluZEluZGV4IiwiZmluZExhc3RJbmRleCIsImhlYWQiLCJpbnRlcnNlY3Rpb24iLCJtYXBwZWQiLCJpbnRlcnNlY3Rpb25CeSIsImludGVyc2VjdGlvbldpdGgiLCJwdWxsIiwicHVsbEFsbCIsInB1bGxBdCIsInVuaW9uIiwidW5pb25CeSIsInVuaW9uV2l0aCIsInVuemlwIiwiZ3JvdXAiLCJ1bnppcFdpdGgiLCJ3aXRob3V0IiwieG9yIiwieG9yQnkiLCJ4b3JXaXRoIiwiemlwIiwiemlwV2l0aCIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kIiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJwYXJ0aXRpb24iLCJzb3J0QnkiLCJiZWZvcmUiLCJiaW5kS2V5IiwiV1JBUF9CSU5EX0ZMQUciLCJkZWJvdW5jZSIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsImludm9rZUZ1bmMiLCJ0aW1lIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0aW1lckV4cGlyZWQiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwibGVhZGluZ0VkZ2UiLCJmbHVzaCIsImRlbGF5IiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwibmVnYXRlIiwib3ZlckFyZ3MiLCJ0cmFuc2Zvcm1zIiwiZnVuY3NMZW5ndGgiLCJwYXJ0aWFsIiwicGFydGlhbFJpZ2h0IiwicmVhcmciLCJndCIsImd0ZSIsImlzRXJyb3IiLCJpc0ludGVnZXIiLCJsdCIsImx0ZSIsIml0ZXJhdG9yVG9BcnJheSIsInJlbWFpbmRlciIsInRvTGVuZ3RoIiwiaXNCaW5hcnkiLCJhc3NpZ25JbiIsImFzc2lnbkluV2l0aCIsImFzc2lnbldpdGgiLCJhdCIsInByb3BzSW5kZXgiLCJwcm9wc0xlbmd0aCIsImRlZmF1bHRzRGVlcCIsIm1lcmdlV2l0aCIsImludmVydCIsImludmVydEJ5IiwiaW52b2tlIiwib21pdCIsIkNMT05FX0RFRVBfRkxBRyIsImJhc2VQaWNrIiwicGlja0J5IiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsIndvcmQiLCJjYXBpdGFsaXplIiwidXBwZXJGaXJzdCIsImtlYmFiQ2FzZSIsImxvd2VyQ2FzZSIsImxvd2VyRmlyc3QiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJ1cHBlckNhc2UiLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImFzY2lpV29yZHMiLCJhdHRlbXB0IiwiYmluZEFsbCIsIm1ldGhvZE5hbWVzIiwiZmxvdyIsImZsb3dSaWdodCIsIm1ldGhvZE9mIiwibWl4aW4iLCJvdmVyIiwib3ZlckV2ZXJ5Iiwib3ZlclNvbWUiLCJiYXNlUHJvcGVydHlEZWVwIiwicmFuZ2UiLCJyYW5nZVJpZ2h0IiwiYXVnZW5kIiwiYWRkZW5kIiwiZGl2aWRlIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibXVsdGlwbHkiLCJtdWx0aXBsaWVyIiwibXVsdGlwbGljYW5kIiwibWludWVuZCIsInN1YnRyYWhlbmQiLCJhZnRlciIsImNhc3RBcnJheSIsImNvbXBhY3QiLCJjb25kIiwiY29uZm9ybXMiLCJiYXNlQ29uZm9ybXMiLCJjdXJyeSIsImN1cnJ5UmlnaHQiLCJkcm9wIiwiZHJvcFJpZ2h0IiwiZHJvcFJpZ2h0V2hpbGUiLCJkcm9wV2hpbGUiLCJmaWxsIiwiYmFzZUZpbGwiLCJmbGF0TWFwIiwiZmxhdE1hcERlZXAiLCJmbGF0TWFwRGVwdGgiLCJmbGF0dGVuRGVlcCIsImZsYXR0ZW5EZXB0aCIsImZsaXAiLCJmcm9tUGFpcnMiLCJmdW5jdGlvbnMiLCJmdW5jdGlvbnNJbiIsImluaXRpYWwiLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwibWF0Y2hlcyIsIm1hdGNoZXNQcm9wZXJ0eSIsIm50aEFyZyIsIm9taXRCeSIsIm9yZGVyQnkiLCJwcm9wZXJ0eU9mIiwicHVsbEFsbEJ5IiwicHVsbEFsbFdpdGgiLCJyZXN0Iiwic2FtcGxlU2l6ZSIsInNldFdpdGgiLCJzaHVmZmxlIiwic29ydGVkVW5pcSIsInNvcnRlZFVuaXFCeSIsInNlcGFyYXRvciIsImxpbWl0IiwidGFpbCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwidG9QYXRoIiwiaXNBcnJMaWtlIiwidW5hcnkiLCJ1bmlxIiwidW5pcUJ5IiwidW5pcVdpdGgiLCJ1bnNldCIsInVwZGF0ZSIsInVwZGF0ZVdpdGgiLCJ2YWx1ZXNJbiIsInppcE9iamVjdCIsInppcE9iamVjdERlZXAiLCJlbnRyaWVzSW4iLCJleHRlbmRXaXRoIiwiY2xhbXAiLCJjbG9uZURlZXAiLCJjbG9uZURlZXBXaXRoIiwiY2xvbmVXaXRoIiwiY29uZm9ybXNUbyIsImRlZmF1bHRUbyIsImVzY2FwZVJlZ0V4cCIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0IiwibGFzdEluZGV4T2YiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJwYWQiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJ0ZW1wIiwicmVkdWNlUmlnaHQiLCJyZXBlYXQiLCJzYW1wbGUiLCJzb3J0ZWRJbmRleCIsInNvcnRlZEluZGV4QnkiLCJzb3J0ZWRJbmRleE9mIiwic29ydGVkTGFzdEluZGV4Iiwic29ydGVkTGFzdEluZGV4QnkiLCJzb3J0ZWRMYXN0SW5kZXhPZiIsInN1bSIsInN1bUJ5IiwidGVtcGxhdGUiLCJzZXR0aW5ncyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJyZURlbGltaXRlcnMiLCJzb3VyY2VVUkwiLCJlc2NhcGVWYWx1ZSIsImludGVycG9sYXRlVmFsdWUiLCJlc1RlbXBsYXRlVmFsdWUiLCJldmFsdWF0ZVZhbHVlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltRW5kIiwidHJpbVN0YXJ0IiwidHJ1bmNhdGUiLCJvbWlzc2lvbiIsIm5ld0VuZCIsInVuaXF1ZUlkIiwiZWFjaCIsImVhY2hSaWdodCIsImZpcnN0IiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwiY2hlY2tJdGVyYXRlZSIsImlzVGFrZXIiLCJsb2Rhc2hGdW5jIiwicmV0VW53cmFwcGVkIiwiaXNMYXp5IiwidXNlTGF6eSIsImlzSHlicmlkIiwiaXNVbndyYXBwZWQiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImRpciIsImlzUmlnaHQiLCJ2aWV3IiwiZ2V0VmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJ3cmFwcGVkIiwic2NyaXB0JGUiLCJjb21wb25lbnRzIiwiUG9wb3ZlciIsInRpcCIsInNob3dNb3JlIiwiY3JlYXRlZCIsIm1vdW50ZWQiLCJtZXRob2RzIiwic2hvd1RvYXN0IiwiX3NlbGYiLCJub3JtYWxpemVDb21wb25lbnRfMSIsInNjcmlwdCIsInNjb3BlSWQiLCJpc0Z1bmN0aW9uYWxUZW1wbGF0ZSIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwiY3JlYXRlSW5qZWN0b3IiLCJjcmVhdGVJbmplY3RvclNTUiIsImNyZWF0ZUluamVjdG9yU2hhZG93IiwiaG9vayIsInJlbmRlciIsInN0YXRpY1JlbmRlckZucyIsIl9jb21waWxlZCIsImZ1bmN0aW9uYWwiLCJfc2NvcGVJZCIsIiR2bm9kZSIsInNzckNvbnRleHQiLCJfX1ZVRV9TU1JfQ09OVEVYVF9fIiwiX3JlZ2lzdGVyZWRDb21wb25lbnRzIiwiX3NzclJlZ2lzdGVyIiwiJHJvb3QiLCIkb3B0aW9ucyIsInNoYWRvd1Jvb3QiLCJvcmlnaW5hbFJlbmRlciIsImV4aXN0aW5nIiwiYmVmb3JlQ3JlYXRlIiwiaXNPbGRJRSIsIkhFQUQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInN0eWxlcyIsImNzcyIsIm1lZGlhIiwiaWRzIiwiZWxlbWVudCIsImFwcGVuZENoaWxkIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJ0ZXh0Tm9kZSIsImNyZWF0ZVRleHROb2RlIiwibm9kZXMiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhZGRTdHlsZSIsIl9fdnVlX3NjcmlwdF9fIiwiY29tbW9uTGFiZWxNaXhpbiIsInRpcExvY2F0aW9uIiwiaXNCb2xkIiwiRmllbGQiLCJGaWVsZFRpcCIsIm1peGlucyIsImluaGVyaXRBdHRycyIsIm1vZGVsIiwicnVsZXMiLCJ2YWxpZGF0ZVJ1bGVzIiwibGFiZWwiLCJjdXJyZW50VGV4dCIsImFkZEFibGUiLCJtYXhsZW5ndGgiLCJmaWVsZFR5cGUiLCJ2YWxpZGF0ZU5hbWUiLCJhdmFpbGFibGVCYWxhbmNlQW10IiwiaGlkZUF2YWlsYWJsZUJhbGFuY2UiLCJpc0VuZCIsImlucHV0QWxpZ24iLCJudW1iZXJQcmVjaXNpb25SZWdleCIsImNoYW5nZVRleHQiLCJwcmVWYWwiLCIkZW1pdCIsImZvY3VzIiwiJHJlZnMiLCIkYXR0cnMiLCJ3YXRjaCIsImhhbmRsZXIiLCJGaWVsZFRleHQiLCJpbnN0YWxsIiwiY29tcG9uZW50Iiwic2NyaXB0JGMiLCJQb3B1cCIsIlNlYXJjaCIsIlBpY2tlciIsIkljb24iLCJSYWRpb0dyb3VwIiwiQ2VsbEdyb3VwIiwiQ2VsbCIsIlJhZGlvIiwiUGFnaW5hdGlvbiIsInNlYXJjaFZhbCIsImNvbHVtbnNBbGwiLCJkZWZhdWx0SW5kZXgiLCJyZXN1bHRSYWRpbyIsImN1cnJlbnRQYWdlIiwicGFnZSIsImN1cnJlbnRTZWxlY3QiLCJ2YWx1ZUtleSIsImdldFR5cGUiLCJvcHRpb25Db2RlcyIsInBvc3REYXRhIiwicG9zdFVybCIsInNjZW5lIiwiZGlzYWJsZWQiLCJ1c2VTaG93U2xvdCIsInJlZnJlc2hXaGVuQ2xpY2siLCJodHRwRnVuY3Rpb24iLCJmaWVsZFZhbCIsImZpZWxkSWQiLCJjb2x1bW5zUmFkaW8iLCJjb2x1bW5zIiwicGFnZUNvdW50IiwiZGVlcCIsIm9uRGVsZXRlIiwib25TZWFyY2giLCJ0b2dnbGUiLCJvbkNvbmZpcm0iLCJvbkNsaWNrIiwiZ2V0Q29sdW1ucyIsInJlc3AiLCIkcG9zdCIsIkZpZWxkU2VsZWN0IiwiRmllbGRVcGxvYWQiLCJEYXRldGltZVBpY2tlciIsIm5vd0RhdGUiLCJjdXJyZW50RGF0ZSIsImRpc3BsYXlGb3JtYXQiLCJtaW5EYXRlIiwibWF4RGF0ZSIsIm1pbkRhdGVTaG93IiwiY3VycmVudFllYXIiLCJtYXhEYXRlU2hvdyIsImRlZmF1bHREaXNwbGF5Rm9ybWF0IiwiZGF5anMiLCJkYXRlVGltZSIsIkZpZWxkRGF0ZSIsImNpdHlzIiwiQXJlYUxpc3QiLCJwcm92aW5jZV9saXN0IiwiY2l0eV9saXN0IiwiY291bnR5X2xpc3QiLCJzY3JpcHQkOSIsIlRhYnMiLCJUYWIiLCJhcmVhIiwic2VsSWQiLCJ2aWV3VHlwZSIsInNlbGVjdExldmVsIiwiYWN0aXZlIiwiY2l0eVRhYiIsIm1hcEFyZWEiLCJlY2hvIiwiY29uZmlybSIsInNlbmRBcnIiLCJpbnB1dFN0ciIsInJlc2V0IiwiZ2V0Q2l0eSIsIiRuZXh0VGljayIsIm1haW4iLCJzY3JvbGxUb3AiLCJzZWxJdGVtIiwia2V5c3MiLCJvbGRWYWx1ZSIsImNpdHkiLCJBcmVhIiwiRG9tZXN0aWNDaXR5Iiwic2hvd1Byb3ZpbmNlTmFtZSIsImFkZHJlc3NMaXN0Iiwib25BZGRyZXNzIiwicHJvdmluY2VOYW1lIiwiY2l0eU5hbWUiLCJkaXN0aW5jdE5hbWUiLCJwcm92aW5jZUNvZGUiLCJjaXR5Q29kZSIsImRpc3RpbmN0Q29kZSIsInNlbGVjdEFkZHJlc3MiLCJkZXN0cm95ZWQiLCJGaWVsZEFkZHJlc3MiLCJzY3JpcHQkNyIsIlB1bGxSZWZyZXNoIiwiTGlzdCIsIkJ1dHRvbiIsIkxvYWRpbmciLCJzZWxlY3REYXRhIiwibG9hZGluZyIsInB1bGxSZWZyZXNoIiwiZGF0YUxvYWRpbmciLCJwYWdlU2l6ZSIsInBhZ2VJbmZvIiwiY29uZmlnTmFtZSIsImlzU2Vjb25kUGFnZSIsInVzZUl0ZW1TbG90Iiwic2hvd0RlbGV0ZUljb24iLCJmaWx0ZXJMaXN0U2hvdyIsInJ0biIsImFkZE5ld1BhcmFtcyIsIkZpZWxkVHJlZSIsInNlcmlhbE51bWJlciIsInNob3dOb1Jlc3VsdCIsInNlYXJjaFRyZWUiLCJ0b1RyZWUiLCJmaWVsZExhYmVsIiwiZW50ZXJDYXJkU2VhcmNoIiwiJHJvdXRlciIsIm9uQ2xvc2UiLCIkbmF0aXZlQXBpIiwiSlNPTlZVRV9BcHBHZXN0dXJlSWZGb3JiaWQiLCJpc0ZvcmJpZCIsIm9uU2hvdyIsIm9uQWRkSGFuZGxlIiwiaXNEZWxldGUiLCJvblJlZnJlc2giLCJvbkxvYWQiLCJyZWZyZXNoIiwiJGdldCIsInJlcHMiLCJpbmZvIiwicmVjb3JkcyIsInJlcHNEYXRhIiwiY2F0Y2giLCJmaWx0ZXJUcmVlIiwiZGVhbCIsIm5ld0NoaWxkcmVuIiwiY2hpbGRyZW4iLCJ1cE9yZ0lkIiwiaXNQaWQiLCJGaWVsZENoZWNrQm94U2VsZWN0Iiwic2NyaXB0JDYiLCJsaXN0U2hvdyIsIm9uRWRpdCIsImdldEZpZWxkVmFsdWVTaG93IiwiZmllbGRWYWx1ZSIsImZpbHRlcnMiLCJkdGZvcm1hdCIsImV4cGFuZCIsImltbWVkaWF0ZSIsInNjcmlwdCQ1IiwiZmllbGRMaXN0IiwibW9kdWxlQ29kZSIsIm1vZHVsZUNyZWF0aW5nIiwibW9kdWxlT2JqIiwib25TaW5nbGVQYWdlU2F2ZSIsIm1vZHVsZUxpc3QiLCJwcmV2ZW50IiwiYWN0aXZhdGVJbmRleCIsIm9uU2luZ2xlUGFnZVJlbW92ZSIsIm9uUGFnZUNlbGwiLCJhY3RpdmVJbmRleCIsIm9uUGFnZUJsdXIiLCJvblBhZ2VQYXJhbXNDaGFuZ2UiLCJvbkNlbGwiLCJvbkJsdXIiLCJvblBhcmFtc0NoYW5nZSIsIm9uUGFnZVNhdmUiLCJvbkFkZFByb2plY3QiLCJzY3JpcHQkNCIsIk1vZHVsZUZpZWxkTm9DcnVkIiwiTmF2QmFyIiwiaXNFZGl0IiwicGFnZUxpc3QiLCJjdXJyc2VudFBhZ2VzIiwic2hvd3MiLCJzaG93U3RhdHVzIiwiZmllbGRIdW1wTmFtZSIsInRpdGxlIiwiJHJvdXRlIiwic2Vjb25kUGFnZUxpc3QiLCJzZWNvbmRNb2R1bGVMaXN0Iiwic2Vjb25kSW5kZXgiLCJvbkFkZCIsIiRkaWFsb2ciLCJjb25maXJtQnV0dG9uVGV4dCIsImNhbmNlbEJ1dHRvblRleHQiLCJvblNhdmUiLCJvbkNvcHkiLCJvblNhdmVBbGwiLCJvbkNhbmNsZSIsInN1Y2Nlc3MiLCIkdG9hc3QiLCJmYWlsIiwib25CYWNrIiwib25DaGFuZ2VBY3RpdmVJbmRleCIsImluZCIsIm9sZEluZCIsInBhZ2VMZW4iLCIkYnVzIiwiY29uZmlnTWl4aW4iLCJmaW5kRmllbGRJbkFsbFdpdGhDb25maWciLCJjb25maWdGaWVsZExpc3QiLCJmaW5kRmllbGRXaXRoQ29uZmlnIiwic2NyaXB0JDMiLCJBY3Rpb25TaGVldCIsIk1vZHVsZUZpZWxkIiwiRGVmYXVsdFZpZXciLCJNdWx0aVNlY29uZFBhZ2VFZGl0IiwidHlwZU1vZHVsZUxpc3QiLCJ0eXBlQW5kUGFnZUxpc3QiLCJ0eXBlTGlzdCIsInNob3dEYXRhIiwic2hvd05hbWUiLCJjZmdNb2R1bGVWTyIsImZ1bmN0aW9uVXJsIiwidGlwVGl0bGVJbmZvTGlzdCIsInNob3dNb25leSIsImV4dENvbmZpZyIsImNydWRWaWV3U2xvdCIsInBhcmVudFRpdGxlIiwiY3VycmVudFNlbGVjdFNob3ciLCJ0eXBlU2VsZWN0U2hvdyIsImN1cnJlbnRTZWxlY3RUeXBlIiwidGltZXIiLCJzaG93VHlwZVNlbGVjdFZpZXciLCJjdXJyZW50VHlwZSIsInVuQWRkVHlwZUxpc3QiLCJ0eXBlUGFnZSIsInR5cGVLZXkiLCJ0b3RhbEFtb3VudCIsIm1vZHVsZVNob3ciLCJpc0FjdGlvbiIsImlzU2hvdyIsInNob3dJc1NhdmUiLCJpbmRPYmoiLCJ0ZXN0U2hvdyIsImlzU2hvd1R5cGUiLCJub3dQYWdlIiwic2hvd01vcmVCdG4iLCJzaG93U21hbGxBZGRCdG4iLCJhbGxTZWxlY3RlZCIsInNlbGVjdGVkIiwic2hvd0JpZ0FkZEJ0biIsIm9uT3BlblR5cGVFZGl0Iiwib25VcGRhdGUiLCJzaG93TGFib3VyIiwiYm9vbGVhbSIsInNob3dMYWJvdXJzIiwib25TZWxlY3QiLCJmZWVUeXBlQ29kZSIsInR5cGVQYWdlTW9kdWxlIiwib25TZWxlY3RUeXBlVGhlbkVkaXQiLCJhbGxUeXBlTGlzdCIsImFsbExpc3RFbXB0eSIsImNvbmZpcm1TYXZlIiwiY2FuY2VsU2F2ZSIsImNhbmNlbERpYWxvZyIsInByZSIsImZpZWxkVmFsdWVOYW1lIiwib25EZWxldGVGbiIsImRlbGV0ZUN1cnJlbnRJbmRleCIsImNJdGVtIiwibUl0ZW0iLCJ0ZW1wTGlzdCIsImN1cnJlbnRNb2R1bGVMaXN0IiwidHlwZUFuZFBhZ2UiLCIkZm9yY2VVcGRhdGUiLCJzYXZlZFBhZ2VzIiwidW5TYXZlZFBhZ2VzIiwiY3VycmVudFNhdmVkTGlzdCIsImFtdFN1bUxpc3QiLCJhbXQiLCJ0b3RhbCIsInNldE5hdGl2ZVRvcEJhY2siLCJ0eXBlTW9kdWxlIiwidHlwZU1vZHVsZUl0ZW0iLCJGaWVsZENydWQiLCJzY3JpcHQkMiIsInVzZU1vZGVsIiwidmFsaWRPYiIsInRlbXBPYmoiLCJmaWVsZE5hbWUiLCJzY3JpcHQkMSIsInNob3dEaXZpZGVyIiwiZ2V0VmFsaWRPYiIsIm91dGVyU3R5bGUiLCJpdGVtU2luZ2xlU2VsZWN0IiwiZmllbGRWb3MiLCJmaWxlZEl0ZW0iLCJtb2R1bGVzdm8iLCJvdXRNb2R1bGUiLCJpY29uRWRpdEVsZSIsImN1cnJlbnRUYXJnZXQiLCJwYXJlbnROb2RlIiwicXVlcnlTZWxlY3RvciIsImNsaWNrIiwiZ2V0QWRkQnRuTmFtZSIsIiRheGlvcyIsInBvc3QiLCIkZGF5anMiLCJCdXMiLCIkb24iLCJvZmYiLCIkb2ZmIiwiVnVlQnVzSW5zdGFsbCIsIk1vZHVsZUZpZWxkUmVhY3RpdmUiLCJNb2R1bGVHcm91cCIsImluaXRWYWxpZGF0ZSIsImxvY2FsaXplIiwiemhfQ04iLCJtZXNzYWdlcyIsImFscGhhIiwiYWxwaGFfZGFzaCIsImFscGhhX251bSIsImFscGhhX3NwYWNlcyIsImJldHdlZW4iLCJjb25maXJtZWQiLCJkaWdpdHMiLCJkaW1lbnNpb25zIiwiZXhjbHVkZWQiLCJleHQiLCJpbWFnZSIsIm9uZU9mIiwiaW50ZWdlciIsIm1pbWVzIiwibWluX3ZhbHVlIiwibnVtZXJpYyIsInJlcXVpcmVkX2lmIiwicG9zaXRpdmUiLCJmaWVsZHMiXSwibWFwcGluZ3MiOiI7Ozs7O0lBOFNBLElBb0JJQSxFQUFRLENBQ1JDLFNBckJhLFNBQVVDLEVBQU9DLEdBQzlCLElBQUlDLFFBQW1CLElBQVBELEVBQWdCLENBQUUsRUFBR0EsR0FBSUMsU0FFckNDLEVBQUssMEpBTVQsT0FMSUQsSUFBYUUsTUFBTUMsUUFBUUwsS0FDM0JBLEVBQVFNLE9BQU9OLEdBQ1ZPLE1BQU0sS0FDTkMsS0FBSSxTQUFVQyxHQUFZLE9BQU9BLEVBQVNDLE1BQU8sS0FFdEROLE1BQU1DLFFBQVFMLEdBQ1BBLEVBQU1XLE9BQU0sU0FBVUMsR0FBTyxPQUFPVCxFQUFHVSxLQUFLUCxPQUFPTSxHQUFRLElBRS9EVCxFQUFHVSxLQUFLUCxPQUFPTixHQUMxQixFQVNJYyxPQVJXLENBQ1gsQ0FDSUMsS0FBTSxXQUNOQyxTQUFTLEtBUWpCLFNBQVNDLEVBQWtCakIsR0FDdkIsT0FBT0EsT0FDWCxDQTJJQSxJQUFJa0IsRUFBYSxTQUFVbEIsRUFBT0MsR0FDOUIsSUFBSWtCLEVBQVNs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QUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFDdEIsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQzFFLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUMxRSxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQ25DLElBQVEsS0FBTSxJQUFRLEtBQ3RCLElBQVEsS0FBTSxJQUFRLEtBQ3RCLElBQVEsS0FFUixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQzFCLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN0RixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdEYsSUFBVSxJQUFNLElBQVUsSUFDMUIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxLQUFNLElBQVUsS0FDMUIsSUFBVSxLQUFNLElBQVUsS0FDMUIsSUFBVSxLQUFNLElBQVUsTUFvdUJ4QmdCLEdBQWlCaEIsR0FodUJILENBQ2hCLElBQUss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QyxVQUFXLENBQ1QsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixNQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE1BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxRQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFFBQ1IsT0FBUSxRQUNSLE9BQVEsUUFDUixPQUFRLFFBQ1IsT0FBUSxNQUNSLE9BQVEsUUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsTUFBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsV0FDUixPQUFRLE9BQ1IsT0FBUSxRQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsT0FDUixNQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFNBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE1BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixNQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsTUFBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixNQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE1BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsTUFBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixNQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixNQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxhQUNSLE1BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixNQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxhQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsTUFBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE1BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE1BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxJQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsTUFBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsTUFBUSxNQUNSLE9BQVEsWUFDUixPQUFRLFVBQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsY0FDUixPQUFRLGFBQ1IsT0FBUSxhQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsYUFDUixPQUFRLFlBQ1IsT0FBUSxZQUNSLE9BQVEsVUFDUixPQUFRLGFBQ1IsT0FBUSxXQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsTUFBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE1BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixNQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxVQUNSLE9BQVEsVUFDUixPQUFRLFVBQ1IsT0FBUSxVQUNSLE9BQVEsYUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsUUFDUixPQUFRLFFBQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxZQUNSLE9BQVEsWUFDUixPQUFRLFFBQ1IsTUFBUSxjQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsTUFBUSxXQUNSLE9BQVEsT0FDUixPQUFRLFFBQ1IsTUFBUSxjQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsS0FDUixPQUFRLE9BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLFFBQ1IsTUFBUSxNQUNSLE9BQVEsUUFDUixPQUFRLFFBQ1IsTUFBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsTUFBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsTUFBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE1BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxPQUNSLE1BQVEsS0FDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE1BQVEsUUFDUixPQUFRLFVBQ1IsT0FBUSxLQUNSLEtBQVEsT0FDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsTUFBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE1BQVEsS0FDUixPQUFRLE9BQ1IsT0FBUSxLQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxRQUNSLE1BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsUUFDUixNQUFRLFFBQ1IsT0FBUSxPQUNSLE9BQVEsUUFDUixPQUFRLE9BQ1IsT0FBUSxLQUNSLE9BQVEsT0FDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsS0FDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxRQUNSLE9BQVEsUUFDUixPQUFRLFFBQ1IsT0FBUSxPQUNSLE9BQVEsT0FDUixPQUFRLGdCQUNSLE9BQVEsZUFDUixPQUFRLE9BQ1IsT0FBUSxLQUNSLE9BQVEsT0FDUixNQUFRLEtBQ1IsT0FBUSxRQUNSLE9BQVEsVUFDUixNQUFRLFNBQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE9BQ1IsTUFBUSxNQUNSLE9BQVEsT0FDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsS0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsS0FDUixNQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxhQUNSLE9BQVEsTUFDUixNQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLEtBQ1IsTUFBUSxLQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixNQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxRQUNSLEtBQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxTQUNSLE1BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxTQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixNQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsUUFDUixNQUFRLE1BQ1IsT0FBUSxNQUNSLE1BQVEsUUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsT0FDUixPQUFRLEtBQ1IsTUFBUSxNQUNSLE9BQVEsT0FDUixPQUFRLFFBQ1IsTUFBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLEtBQ1IsS0FBUSxRQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxLQUNSLE9BQVEsT0FDUixNQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxTQUNSLE1BQVEsU0FDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE1BQVEsS0FDUixPQUFRLE9BQ1IsT0FBUSxLQUNSLE1BQVEsVUFDUixPQUFRLFdBQ1IsT0FBUSxXQUNSLE9BQVEsUUFDUixPQUFRLEtBQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsS0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxTQUNSLE9BQVEsS0FDUixNQUFRLE1BQ1IsT0FBUSxRQUNSLE9BQVEsTUFDUixNQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFNBQ1IsT0FBUSxPQUNSLE9BQVEsVUFDUixNQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsUUFDUixPQUFRLFdBQ1IsTUFBUSxhQUNSLE9BQVEsT0FDUixPQUFRLFdBQ1IsT0FBUSxRQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsTUFBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsS0FDUixPQUFRLFFBQ1IsT0FBUSxNQUNSLE1BQVEsS0FDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxPQUNSLE1BQVEsTUFDUixPQUFRLGVBQ1IsT0FBUSxPQUNSLE9BQVEsS0FDUixPQUFRLEtBQ1IsTUFBUSxNQUNSLE9BQVEsUUFDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsTUFBUSxXQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsUUFDUixPQUFRLFlBQ1IsT0FBUSxNQUNSLEtBQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE1BQVEsS0FDUixNQUFRLFVBQ1IsT0FBUSxRQUNSLE9BQVEsTUFDUixNQUFRLFNBQ1IsT0FBUSxPQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsT0FFVkMsWUFBYSxDQUNYLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxTQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxVQUNSLE9BQVEsYUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxRQUNSLE9BQVEsT0FDUixPQUFRLFFBQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxTQUNSLE9BQVEsTUFDUixPQUFRLFFBQ1IsT0FBUSxNQUNSLE9BQVEsWUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLFNBQ1IsT0FBUSxPQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxRQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxVQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxRQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsT0FDUixPQUFRLFFBQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxRQUNSLE9BQVEsT0FDUixPQUFRLFFBQ1IsT0FBUSxNQUNSLE9BQVEsY0FDUixPQUFRLFNBQ1IsT0FBUSxVQUNSLE9BQVEsUUFDUixPQUFRLFNBQ1IsT0FBUSxTQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsUUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxRQUNSLE9BQVEsUUFDUixPQUFRLFFBQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLFVBQ1IsT0FBUSxVQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxRQUNSLE9BQVEsT0FDUixPQUFRLFVBQ1IsT0FBUSxVQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxRQUNSLE9BQVEsUUFDUixPQUFRLE9BQ1IsT0FBUSxRQUNSLE9BQVEsUUFDUixPQUFRLFNBQ1IsT0FBUSxTQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxRQUNSLE9BQVEsUUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsV0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsY0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxXQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxjQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxRQUNSLE9BQVEsT0FDUixPQUFRLFdBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxhQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFFBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxRQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFFBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxRQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxRQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxRQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsUUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFFBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsUUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxXQUNSLE9BQVEsV0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFFBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFFBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLFVBQ1IsT0FBUSxVQUNSLE9BQVEsWUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxZQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsU0FDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsUUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxXQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxXQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLGFBQ1IsT0FBUSxVQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsV0FDUixPQUFRLFdBQ1IsT0FBUSxVQUNSLE9BQVEsVUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsT0FDUixPQUFRLGNBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLFNBQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsVUFDUixPQUFRLFVBQ1IsT0FBUSxVQUNSLE9BQVEsWUFDUixPQUFRLFlBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsV0FDUixPQUFRLGFBQ1IsT0FBUSxhQUNSLE9BQVEsYUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLFVBQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxhQUNSLE9BQVEsYUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLGFBQ1IsT0FBUSxhQUNSLE9BQVEsYUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLGNBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsYUFDUixPQUFRLE1BQ1IsT0FBUSxXQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsWUFDUixPQUFRLFlBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLFlBQ1IsT0FBUSxlQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxXQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsTUFDUixPQUFRLGFBQ1IsT0FBUSxXQUNSLE9BQVEsVUFDUixPQUFRLFlBQ1IsT0FBUSxnQkFDUixPQUFRLGFBQ1IsT0FBUSxlQUNSLE9BQVEsV0FDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLGtCQUNSLE9BQVEsWUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLGNBQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFVBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxVQUNSLE9BQVEsWUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLGFBQ1IsT0FBUSxhQUNSLE9BQVEsUUFDUixPQUFRLE1BQ1IsT0FBUSxXQUNSLE9BQVEsTUFDUixPQUFRLFFBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFFBQ1IsT0FBUSxPQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxRQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxXQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxXQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxXQUNSLE9BQVEsYUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsU0FDUixPQUFRLGtCQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsWUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxZQUNSLE9BQVEsVUFDUixPQUFRLFVBQ1IsT0FBUSxXQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLFdBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsUUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsUUFDUixPQUFRLE9BQ1IsT0FBUSxRQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsWUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLFFBQ1IsT0FBUSxXQUNSLE9BQVEsTUFDUixPQUFRLFFBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsVUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLGNBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsUUFDUixPQUFRLE1BQ1IsT0FBUSxZQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsYUFDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxPQUNSLE9BQVEsT0FDUixPQUFRLFFBQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE9BQ1IsT0FBUSxNQUNSLE9BQVEsUUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxLQUNSLE9BQVEsS0FDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsS0FDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsS0FDUixPQUFRLEtBQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLEtBQ1IsT0FBUSxLQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsT0FDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxNQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FBUSxPQUNSLE9BQVEsTUFDUixPQUFRLE1BQ1IsT0FB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
