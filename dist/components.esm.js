import e from"vue";import n from"http";import t from"https";import i from"url";import a from"stream";import r from"assert";import o from"tty";import s from"util";import c from"os";import l from"zlib";import p from"path";import u from"fs";import{Field as d,Popup as m,Search as f,Picker as h,Icon as v,RadioGroup as x,CellGroup as g,Cell as b,Radio as y,Pagination as w,DatetimePicker as _,Tabs as A,Tab as C,Area as S,PullRefresh as k,List as j,Button as T,Loading as E,NavBar as P,ActionSheet as B}from"vant";
/**
  * vee-validate v3.4.15
  * (c) 2023 Abdelrahman Awad
  * @license MIT
  */var L={validate:function(e,n){var t=(void 0===n?{}:n).multiple,i=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return t&&!Array.isArray(e)&&(e=String(e).split(",").map((function(e){return e.trim()}))),Array.isArray(e)?e.every((function(e){return i.test(String(e))})):i.test(String(e))},params:[{name:"multiple",default:!1}]};function D(e){return null==e}var $=function(e,n){var t=n.length;return D(e)?t>=0:Array.isArray(e)?e.every((function(e){return $(e,{length:t})})):String(e).length<=t},I={validate:$,params:[{name:"length",cast:function(e){return Number(e)}}]},F=function(e,n){var t=n.max;return!D(e)&&""!==e&&(Array.isArray(e)?e.length>0&&e.every((function(e){return F(e,{max:t})})):Number(e)<=t)},O={validate:F,params:[{name:"max",cast:function(e){return Number(e)}}]},R=function(e,n){var t=n.length;return!D(e)&&(Array.isArray(e)?e.every((function(e){return R(e,{length:t})})):String(e).length>=t)},N={validate:R,params:[{name:"length",cast:function(e){return Number(e)}}]},z={validate:function(e,n){var t,i=(void 0===n?{allowFalse:!0}:n).allowFalse,a={valid:!1,required:!0};return D(e)||(t=e,Array.isArray(t)&&0===t.length)?a:!1!==e||i?(a.valid=!!String(e).trim().length,a):a},params:[{name:"allowFalse",default:!0}],computesRequired:!0};const q=function(e){if(e){var n=new Array;if(n=e.split(""),e.length<2||null=={11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",21:"辽宁",22:"吉林",23:"黑龙江",31:"上海",32:"江苏",33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",42:"湖北",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆",51:"四川",52:"贵州",53:"云南",54:"西藏",61:"陕西",62:"甘肃",63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外"}[parseInt(e.substr(0,2))])return"身份证地区非法!";switch(e.length){case 15:return!!((parseInt(e.substr(6,2))+1900)%400==0||(parseInt(e.substr(6,2))+1900)%100!=0&&(parseInt(e.substr(6,2))+1900)%4==0?/^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$/:/^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$/).test(e)||"身份证号码出生日期超出范围或含有非法字符!";case 18:if((parseInt(e.substr(6,4))%400==0||parseInt(e.substr(6,4))%100!=0&&parseInt(e.substr(6,4))%4==0?/^[1-9][0-9]{5}[0-9]{4}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$/:/^[1-9][0-9]{5}[0-9]{4}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$/).test(e)){var t=7*(parseInt(n[0])+parseInt(n[10]))+9*(parseInt(n[1])+parseInt(n[11]))+10*(parseInt(n[2])+parseInt(n[12]))+5*(parseInt(n[3])+parseInt(n[13]))+8*(parseInt(n[4])+parseInt(n[14]))+4*(parseInt(n[5])+parseInt(n[15]))+2*(parseInt(n[6])+parseInt(n[16]))+1*parseInt(n[7])+6*parseInt(n[8])+3*parseInt(n[9]);return"10X98765432".substr(t%11,1)==n[17]||"身份证号码校验错误!"}return"身份证号码出生日期超出范围或含有非法字符!";default:return"身份证号码位数不对!"}}},M=function(e){return!(e&&(11!=e.length||!/^[1]+[3,5,7,8]+\d{9}/.test(e)))||"请正确填写手机号"},V=function(e,n){return!!/(^[1-9]([0-9]+)?(\.[0-9]{1,2})?$)|(^(0){1}$)|(^[0-9]\.[0-9]([0-9])?$)/.test(e)||n+"必须输入金额"};var U="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function W(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Y,H={exports:{}},K={exports:{}},G=function(e,n){return function(){for(var t=new Array(arguments.length),i=0;i<t.length;i++)t[i]=arguments[i];return e.apply(n,t)}},J=G,Z=Object.prototype.toString,X=(Y=Object.create(null),function(e){var n=Z.call(e);return Y[n]||(Y[n]=n.slice(8,-1).toLowerCase())});function Q(e){return e=e.toLowerCase(),function(n){return X(n)===e}}function ee(e){return Array.isArray(e)}function ne(e){return void 0===e}var te=Q("ArrayBuffer");function ie(e){return null!==e&&"object"==typeof e}function ae(e){if("object"!==X(e))return!1;var n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}var re=Q("Date"),oe=Q("File"),se=Q("Blob"),ce=Q("FileList");function le(e){return"[object Function]"===Z.call(e)}var pe=Q("URLSearchParams");function ue(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),ee(e))for(var t=0,i=e.length;t<i;t++)n.call(null,e[t],t,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&n.call(null,e[a],a,e)}var de,me=(de="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return de&&e instanceof de}),fe={isArray:ee,isArrayBuffer:te,isBuffer:function(e){return null!==e&&!ne(e)&&null!==e.constructor&&!ne(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var n="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||Z.call(e)===n||le(e.toString)&&e.toString()===n)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&te(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:ie,isPlainObject:ae,isUndefined:ne,isDate:re,isFile:oe,isBlob:se,isFunction:le,isStream:function(e){return ie(e)&&le(e.pipe)},isURLSearchParams:pe,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:ue,merge:function e(){var n={};function t(t,i){ae(n[i])&&ae(t)?n[i]=e(n[i],t):ae(t)?n[i]=e({},t):ee(t)?n[i]=t.slice():n[i]=t}for(var i=0,a=arguments.length;i<a;i++)ue(arguments[i],t);return n},extend:function(e,n,t){return ue(n,(function(n,i){e[i]=t&&"function"==typeof n?J(n,t):n})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,n,t,i){e.prototype=Object.create(n.prototype,i),e.prototype.constructor=e,t&&Object.assign(e.prototype,t)},toFlatObject:function(e,n,t){var i,a,r,o={};n=n||{};do{for(a=(i=Object.getOwnPropertyNames(e)).length;a-- >0;)o[r=i[a]]||(n[r]=e[r],o[r]=!0);e=Object.getPrototypeOf(e)}while(e&&(!t||t(e,n))&&e!==Object.prototype);return n},kindOf:X,kindOfTest:Q,endsWith:function(e,n,t){e=String(e),(void 0===t||t>e.length)&&(t=e.length),t-=n.length;var i=e.indexOf(n,t);return-1!==i&&i===t},toArray:function(e){if(!e)return null;var n=e.length;if(ne(n))return null;for(var t=new Array(n);n-- >0;)t[n]=e[n];return t},isTypedArray:me,isFileList:ce},he=fe;function ve(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var xe=function(e,n,t){if(!n)return e;var i;if(t)i=t(n);else if(he.isURLSearchParams(n))i=n.toString();else{var a=[];he.forEach(n,(function(e,n){null!=e&&(he.isArray(e)?n+="[]":e=[e],he.forEach(e,(function(e){he.isDate(e)?e=e.toISOString():he.isObject(e)&&(e=JSON.stringify(e)),a.push(ve(n)+"="+ve(e))})))})),i=a.join("&")}if(i){var r=e.indexOf("#");-1!==r&&(e=e.slice(0,r)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e},ge=fe;function be(){this.handlers=[]}be.prototype.use=function(e,n,t){return this.handlers.push({fulfilled:e,rejected:n,synchronous:!!t&&t.synchronous,runWhen:t?t.runWhen:null}),this.handlers.length-1},be.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},be.prototype.forEach=function(e){ge.forEach(this.handlers,(function(n){null!==n&&e(n)}))};var ye,we,_e=be,Ae=fe;function Ce(){if(we)return ye;we=1;var e=fe;function n(e,n,t,i,a){Error.call(this),this.message=e,this.name="AxiosError",n&&(this.code=n),t&&(this.config=t),i&&(this.request=i),a&&(this.response=a)}e.inherits(n,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var t=n.prototype,i={};return["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){i[e]={value:e}})),Object.defineProperties(n,i),Object.defineProperty(t,"isAxiosError",{value:!0}),n.from=function(i,a,r,o,s,c){var l=Object.create(t);return e.toFlatObject(i,l,(function(e){return e!==Error.prototype})),n.call(l,i.message,a,r,o,s),l.name=i.name,c&&Object.assign(l,c),l},ye=n}var Se,ke,je,Te,Ee,Pe,Be={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1};function Le(){if(ke)return Se;ke=1;var e=fe;return Se=function(n,t){t=t||new FormData;var i=[];function a(n){return null===n?"":e.isDate(n)?n.toISOString():e.isArrayBuffer(n)||e.isTypedArray(n)?"function"==typeof Blob?new Blob([n]):Buffer.from(n):n}return function n(r,o){if(e.isPlainObject(r)||e.isArray(r)){if(-1!==i.indexOf(r))throw Error("Circular reference detected in "+o);i.push(r),e.forEach(r,(function(i,r){if(!e.isUndefined(i)){var s,c=o?o+"."+r:r;if(i&&!o&&"object"==typeof i)if(e.endsWith(r,"{}"))i=JSON.stringify(i);else if(e.endsWith(r,"[]")&&(s=e.toArray(i)))return void s.forEach((function(n){!e.isUndefined(n)&&t.append(c,a(n))}));n(i,c)}})),i.pop()}else t.append(o,a(r))}(n),t},Se}function De(){if(Te)return je;Te=1;var e=Ce();return je=function(n,t,i){var a=i.config.validateStatus;i.status&&a&&!a(i.status)?t(new e("Request failed with status code "+i.status,[e.ERR_BAD_REQUEST,e.ERR_BAD_RESPONSE][Math.floor(i.status/100)-4],i.config,i.request,i)):n(i)}}function $e(){if(Pe)return Ee;Pe=1;var e=fe;return Ee=e.isStandardBrowserEnv()?{write:function(n,t,i,a,r,o){var s=[];s.push(n+"="+encodeURIComponent(t)),e.isNumber(i)&&s.push("expires="+new Date(i).toGMTString()),e.isString(a)&&s.push("path="+a),e.isString(r)&&s.push("domain="+r),!0===o&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}}var Ie,Fe,Oe,Re,Ne,ze,qe,Me,Ve,Ue,We=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)},Ye=function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e},He=function(e,n){return e&&!We(n)?Ye(e,n):n};function Ke(){if(Fe)return Ie;Fe=1;var e=fe,n=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];return Ie=function(t){var i,a,r,o={};return t?(e.forEach(t.split("\n"),(function(t){if(r=t.indexOf(":"),i=e.trim(t.substr(0,r)).toLowerCase(),a=e.trim(t.substr(r+1)),i){if(o[i]&&n.indexOf(i)>=0)return;o[i]="set-cookie"===i?(o[i]?o[i]:[]).concat([a]):o[i]?o[i]+", "+a:a}})),o):o}}function Ge(){if(Re)return Oe;Re=1;var e=fe;return Oe=e.isStandardBrowserEnv()?function(){var n,t=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a");function a(e){var n=e;return t&&(i.setAttribute("href",n),n=i.href),i.setAttribute("href",n),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:"/"===i.pathname.charAt(0)?i.pathname:"/"+i.pathname}}return n=a(window.location.href),function(t){var i=e.isString(t)?a(t):t;return i.protocol===n.protocol&&i.host===n.host}}():function(){return!0}}function Je(){if(ze)return Ne;ze=1;var e=Ce();function n(n){e.call(this,null==n?"canceled":n,e.ERR_CANCELED),this.name="CanceledError"}return fe.inherits(n,e,{__CANCEL__:!0}),Ne=n}function Ze(){return Me?qe:(Me=1,qe=function(e){var n=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return n&&n[1]||""})}var Xe,Qe,en,nn,tn,an={exports:{}},rn={exports:{}},on={exports:{}};function sn(){if(Qe)return Xe;Qe=1;var e=1e3,n=60*e,t=60*n,i=24*t,a=7*i,r=365.25*i;function o(e,n,t,i){var a=n>=1.5*t;return Math.round(e/t)+" "+i+(a?"s":"")}return Xe=function(s,c){c=c||{};var l=typeof s;if("string"===l&&s.length>0)return function(o){if((o=String(o)).length>100)return;var s=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(o);if(!s)return;var c=parseFloat(s[1]);switch((s[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return c*r;case"weeks":case"week":case"w":return c*a;case"days":case"day":case"d":return c*i;case"hours":case"hour":case"hrs":case"hr":case"h":return c*t;case"minutes":case"minute":case"mins":case"min":case"m":return c*n;case"seconds":case"second":case"secs":case"sec":case"s":return c*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return c;default:return}}(s);if("number"===l&&isFinite(s))return c.long?function(a){var r=Math.abs(a);if(r>=i)return o(a,r,i,"day");if(r>=t)return o(a,r,t,"hour");if(r>=n)return o(a,r,n,"minute");if(r>=e)return o(a,r,e,"second");return a+" ms"}(s):function(a){var r=Math.abs(a);if(r>=i)return Math.round(a/i)+"d";if(r>=t)return Math.round(a/t)+"h";if(r>=n)return Math.round(a/n)+"m";if(r>=e)return Math.round(a/e)+"s";return a+"ms"}(s);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(s))}}function cn(){if(nn)return en;return nn=1,en=function(e){function n(e){let i,a,r,o=null;function s(...e){if(!s.enabled)return;const t=s,a=Number(new Date),r=a-(i||a);t.diff=r,t.prev=i,t.curr=a,i=a,e[0]=n.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let o=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((i,a)=>{if("%%"===i)return"%";o++;const r=n.formatters[a];if("function"==typeof r){const n=e[o];i=r.call(t,n),e.splice(o,1),o--}return i})),n.formatArgs.call(t,e);(t.log||n.log).apply(t,e)}return s.namespace=e,s.useColors=n.useColors(),s.color=n.selectColor(e),s.extend=t,s.destroy=n.destroy,Object.defineProperty(s,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==o?o:(a!==n.namespaces&&(a=n.namespaces,r=n.enabled(e)),r),set:e=>{o=e}}),"function"==typeof n.init&&n.init(s),s}function t(e,t){const i=n(this.namespace+(void 0===t?":":t)+e);return i.log=this.log,i}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},n.disable=function(){const e=[...n.names.map(i),...n.skips.map(i).map((e=>"-"+e))].join(",");return n.enable(""),e},n.enable=function(e){let t;n.save(e),n.namespaces=e,n.names=[],n.skips=[];const i=("string"==typeof e?e:"").split(/[\s,]+/),a=i.length;for(t=0;t<a;t++)i[t]&&("-"===(e=i[t].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.slice(1)+"$")):n.names.push(new RegExp("^"+e+"$")))},n.enabled=function(e){if("*"===e[e.length-1])return!0;let t,i;for(t=0,i=n.skips.length;t<i;t++)if(n.skips[t].test(e))return!1;for(t=0,i=n.names.length;t<i;t++)if(n.names[t].test(e))return!0;return!1},n.humanize=sn(),n.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((t=>{n[t]=e[t]})),n.names=[],n.skips=[],n.formatters={},n.selectColor=function(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return n.colors[Math.abs(t)%n.colors.length]},n.enable(n.load()),n},en}var ln,pn,un,dn,mn,fn,hn,vn,xn,gn,bn,yn,wn,_n={exports:{}};function An(){return pn?ln:(pn=1,ln=(e,n)=>{n=n||process.argv;const t=e.startsWith("-")?"":1===e.length?"-":"--",i=n.indexOf(t+e),a=n.indexOf("--");return-1!==i&&(-1===a||i<a)})}function Cn(){if(dn)return un;dn=1;const e=c,n=An(),t=process.env;let i;function a(a){const r=function(a){if(!1===i)return 0;if(n("color=16m")||n("color=full")||n("color=truecolor"))return 3;if(n("color=256"))return 2;if(a&&!a.isTTY&&!0!==i)return 0;const r=i?1:0;if("win32"===process.platform){const n=e.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(n[0])>=10&&Number(n[2])>=10586?Number(n[2])>=14931?3:2:1}if("CI"in t)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some((e=>e in t))||"codeship"===t.CI_NAME?1:r;if("TEAMCITY_VERSION"in t)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(t.TEAMCITY_VERSION)?1:0;if("truecolor"===t.COLORTERM)return 3;if("TERM_PROGRAM"in t){const e=parseInt((t.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(t.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(t.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(t.TERM)||"COLORTERM"in t?1:(t.TERM,r)}(a);return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(r)}return n("no-color")||n("no-colors")||n("color=false")?i=!1:(n("color")||n("colors")||n("color=true")||n("color=always"))&&(i=!0),"FORCE_COLOR"in t&&(i=0===t.FORCE_COLOR.length||0!==parseInt(t.FORCE_COLOR,10)),un={supportsColor:a,stdout:a(process.stdout),stderr:a(process.stderr)}}function Sn(){return mn||(mn=1,function(e,n){const t=o,i=s;n.init=function(e){e.inspectOpts={};const t=Object.keys(n.inspectOpts);for(let i=0;i<t.length;i++)e.inspectOpts[t[i]]=n.inspectOpts[t[i]]},n.log=function(...e){return process.stderr.write(i.format(...e)+"\n")},n.formatArgs=function(t){const{namespace:i,useColors:a}=this;if(a){const n=this.color,a="[3"+(n<8?n:"8;5;"+n),r=`  ${a};1m${i} [0m`;t[0]=r+t[0].split("\n").join("\n"+r),t.push(a+"m+"+e.exports.humanize(this.diff)+"[0m")}else t[0]=function(){if(n.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+i+" "+t[0]},n.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},n.load=function(){return process.env.DEBUG},n.useColors=function(){return"colors"in n.inspectOpts?Boolean(n.inspectOpts.colors):t.isatty(process.stderr.fd)},n.destroy=i.deprecate((()=>{}),"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),n.colors=[6,2,3,4,5,1];try{const e=Cn();e&&(e.stderr||e).level>=2&&(n.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}n.inspectOpts=Object.keys(process.env).filter((e=>/^debug_/i.test(e))).reduce(((e,n)=>{const t=n.substring(6).toLowerCase().replace(/_([a-z])/g,((e,n)=>n.toUpperCase()));let i=process.env[n];return i=!!/^(yes|on|true|enabled)$/i.test(i)||!/^(no|off|false|disabled)$/i.test(i)&&("null"===i?null:Number(i)),e[t]=i,e}),{}),e.exports=cn()(n);const{formatters:a}=e.exports;a.o=function(e){return this.inspectOpts.colors=this.useColors,i.inspect(e,this.inspectOpts).split("\n").map((e=>e.trim())).join(" ")},a.O=function(e){return this.inspectOpts.colors=this.useColors,i.inspect(e,this.inspectOpts)}}(_n,_n.exports)),_n.exports}function kn(){return fn||(fn=1,e=rn,"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=(tn||(tn=1,function(e,n){n.formatArgs=function(n){if(n[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+n[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const t="color: "+this.color;n.splice(1,0,t,"color: inherit");let i=0,a=0;n[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(i++,"%c"===e&&(a=i))})),n.splice(a,0,t)},n.save=function(e){try{e?n.storage.setItem("debug",e):n.storage.removeItem("debug")}catch(e){}},n.load=function(){let e;try{e=n.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},n.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},n.storage=function(){try{return localStorage}catch(e){}}(),n.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),n.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],n.log=console.debug||console.log||(()=>{}),e.exports=cn()(n);const{formatters:t}=e.exports;t.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}(on,on.exports)),on.exports):e.exports=Sn()),rn.exports;var e}function jn(){if(xn)return an.exports;xn=1;var e=i,o=e.URL,s=n,c=t,l=a.Writable,p=r,u=function(){return vn||(vn=1,hn=function(){if(!e){try{e=kn()("follow-redirects")}catch(e){}"function"!=typeof e&&(e=function(){})}e.apply(null,arguments)}),hn;var e}(),d=["abort","aborted","connect","error","socket","timeout"],m=Object.create(null);d.forEach((function(e){m[e]=function(n,t,i){this._redirectable.emit(e,n,t,i)}}));var f=S("ERR_INVALID_URL","Invalid URL",TypeError),h=S("ERR_FR_REDIRECTION_FAILURE","Redirected request failed"),v=S("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded"),x=S("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),g=S("ERR_STREAM_WRITE_AFTER_END","write after end"),b=l.prototype.destroy||_;function y(e,n){l.call(this),this._sanitizeOptions(e),this._options=e,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],n&&this.on("response",n);var t=this;this._onNativeResponse=function(e){t._processResponse(e)},this._performRequest()}function w(n){var t={maxRedirects:21,maxBodyLength:10485760},i={};return Object.keys(n).forEach((function(a){var r=a+":",s=i[r]=n[a],c=t[a]=Object.create(s);Object.defineProperties(c,{request:{value:function(n,a,s){if(j(n)){var c;try{c=A(new o(n))}catch(t){c=e.parse(n)}if(!j(c.protocol))throw new f({input:n});n=c}else o&&n instanceof o?n=A(n):(s=a,a=n,n={protocol:r});return T(a)&&(s=a,a=null),(a=Object.assign({maxRedirects:t.maxRedirects,maxBodyLength:t.maxBodyLength},n,a)).nativeProtocols=i,j(a.host)||j(a.hostname)||(a.hostname="::1"),p.equal(a.protocol,r,"protocol mismatch"),u("options",a),new y(a,s)},configurable:!0,enumerable:!0,writable:!0},get:{value:function(e,n,t){var i=c.request(e,n,t);return i.end(),i},configurable:!0,enumerable:!0,writable:!0}})})),t}function _(){}function A(e){var n={protocol:e.protocol,hostname:e.hostname.startsWith("[")?e.hostname.slice(1,-1):e.hostname,hash:e.hash,search:e.search,pathname:e.pathname,path:e.pathname+e.search,href:e.href};return""!==e.port&&(n.port=Number(e.port)),n}function C(e,n){var t;for(var i in n)e.test(i)&&(t=n[i],delete n[i]);return null==t?void 0:String(t).trim()}function S(e,n,t){function i(t){Error.captureStackTrace(this,this.constructor),Object.assign(this,t||{}),this.code=e,this.message=this.cause?n+": "+this.cause.message:n}return i.prototype=new(t||Error),i.prototype.constructor=i,i.prototype.name="Error ["+e+"]",i}function k(e,n){for(var t of d)e.removeListener(t,m[t]);e.on("error",_),e.destroy(n)}function j(e){return"string"==typeof e||e instanceof String}function T(e){return"function"==typeof e}return y.prototype=Object.create(l.prototype),y.prototype.abort=function(){k(this._currentRequest),this._currentRequest.abort(),this.emit("abort")},y.prototype.destroy=function(e){return k(this._currentRequest,e),b.call(this,e),this},y.prototype.write=function(e,n,t){if(this._ending)throw new g;if(!j(e)&&("object"!=typeof(i=e)||!("length"in i)))throw new TypeError("data should be a string, Buffer or Uint8Array");var i;T(n)&&(t=n,n=null),0!==e.length?this._requestBodyLength+e.length<=this._options.maxBodyLength?(this._requestBodyLength+=e.length,this._requestBodyBuffers.push({data:e,encoding:n}),this._currentRequest.write(e,n,t)):(this.emit("error",new x),this.abort()):t&&t()},y.prototype.end=function(e,n,t){if(T(e)?(t=e,e=n=null):T(n)&&(t=n,n=null),e){var i=this,a=this._currentRequest;this.write(e,n,(function(){i._ended=!0,a.end(null,null,t)})),this._ending=!0}else this._ended=this._ending=!0,this._currentRequest.end(null,null,t)},y.prototype.setHeader=function(e,n){this._options.headers[e]=n,this._currentRequest.setHeader(e,n)},y.prototype.removeHeader=function(e){delete this._options.headers[e],this._currentRequest.removeHeader(e)},y.prototype.setTimeout=function(e,n){var t=this;function i(n){n.setTimeout(e),n.removeListener("timeout",n.destroy),n.addListener("timeout",n.destroy)}function a(n){t._timeout&&clearTimeout(t._timeout),t._timeout=setTimeout((function(){t.emit("timeout"),r()}),e),i(n)}function r(){t._timeout&&(clearTimeout(t._timeout),t._timeout=null),t.removeListener("abort",r),t.removeListener("error",r),t.removeListener("response",r),t.removeListener("close",r),n&&t.removeListener("timeout",n),t.socket||t._currentRequest.removeListener("socket",a)}return n&&this.on("timeout",n),this.socket?a(this.socket):this._currentRequest.once("socket",a),this.on("socket",i),this.on("abort",r),this.on("error",r),this.on("response",r),this.on("close",r),this},["flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach((function(e){y.prototype[e]=function(n,t){return this._currentRequest[e](n,t)}})),["aborted","connection","socket"].forEach((function(e){Object.defineProperty(y.prototype,e,{get:function(){return this._currentRequest[e]}})})),y.prototype._sanitizeOptions=function(e){if(e.headers||(e.headers={}),e.host&&(e.hostname||(e.hostname=e.host),delete e.host),!e.pathname&&e.path){var n=e.path.indexOf("?");n<0?e.pathname=e.path:(e.pathname=e.path.substring(0,n),e.search=e.path.substring(n))}},y.prototype._performRequest=function(){var n=this._options.protocol,t=this._options.nativeProtocols[n];if(t){if(this._options.agents){var i=n.slice(0,-1);this._options.agent=this._options.agents[i]}var a=this._currentRequest=t.request(this._options,this._onNativeResponse);for(var r of(a._redirectable=this,d))a.on(r,m[r]);if(this._currentUrl=/^\//.test(this._options.path)?e.format(this._options):this._options.path,this._isRedirect){var o=0,s=this,c=this._requestBodyBuffers;!function e(n){if(a===s._currentRequest)if(n)s.emit("error",n);else if(o<c.length){var t=c[o++];a.finished||a.write(t.data,t.encoding,e)}else s._ended&&a.end()}()}}else this.emit("error",new TypeError("Unsupported protocol "+n))},y.prototype._processResponse=function(n){var t=n.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:n.headers,statusCode:t});var i=n.headers.location;if(!i||!1===this._options.followRedirects||t<300||t>=400)return n.responseUrl=this._currentUrl,n.redirects=this._redirects,this.emit("response",n),void(this._requestBodyBuffers=[]);if(k(this._currentRequest),n.destroy(),++this._redirectCount>this._options.maxRedirects)this.emit("error",new v);else{var a,r=this._options.beforeRedirect;r&&(a=Object.assign({Host:n.req.getHeader("host")},this._options.headers));var o=this._options.method;((301===t||302===t)&&"POST"===this._options.method||303===t&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],C(/^content-/i,this._options.headers));var s,c=C(/^host$/i,this._options.headers),l=e.parse(this._currentUrl),d=c||l.host,m=/^\w+:/.test(i)?this._currentUrl:e.format(Object.assign(l,{host:d}));try{s=e.resolve(m,i)}catch(e){return void this.emit("error",new h({cause:e}))}u("redirecting to",s),this._isRedirect=!0;var f=e.parse(s);if(Object.assign(this._options,f),(f.protocol!==l.protocol&&"https:"!==f.protocol||f.host!==d&&!function(e,n){p(j(e)&&j(n));var t=e.length-n.length-1;return t>0&&"."===e[t]&&e.endsWith(n)}(f.host,d))&&C(/^(?:authorization|cookie)$/i,this._options.headers),T(r)){var x={headers:n.headers,statusCode:t},g={url:m,method:o,headers:a};try{r(this._options,x,g)}catch(e){return void this.emit("error",e)}this._sanitizeOptions(this._options)}try{this._performRequest()}catch(e){this.emit("error",new h({cause:e}))}}},an.exports=w({http:s,https:c}),an.exports.wrap=w,an.exports}function Tn(){return bn?gn:(bn=1,gn={version:"0.27.2"})}function En(){if(wn)return yn;wn=1;var e=fe,a=De(),r=He,o=xe,s=n,c=t,p=jn().http,u=jn().https,d=i,m=l,f=Tn().version,h=Be,v=Ce(),x=Je(),g=/https:?/,b=["http:","https:","file:"];function y(e,n,t){if(e.hostname=n.host,e.host=n.host,e.port=n.port,e.path=t,n.auth){var i=Buffer.from(n.auth.username+":"+n.auth.password,"utf8").toString("base64");e.headers["Proxy-Authorization"]="Basic "+i}e.beforeRedirect=function(e){e.headers.host=e.host,y(e,n,e.href)}}return yn=function(n){return new Promise((function(t,i){var l;function w(){n.cancelToken&&n.cancelToken.unsubscribe(l),n.signal&&n.signal.removeEventListener("abort",l)}var _=function(e){w(),t(e)},A=!1,C=function(e){w(),A=!0,i(e)},S=n.data,k=n.headers,j={};if(Object.keys(k).forEach((function(e){j[e.toLowerCase()]=e})),"user-agent"in j?k[j["user-agent"]]||delete k[j["user-agent"]]:k["User-Agent"]="axios/"+f,e.isFormData(S)&&e.isFunction(S.getHeaders))Object.assign(k,S.getHeaders());else if(S&&!e.isStream(S)){if(Buffer.isBuffer(S));else if(e.isArrayBuffer(S))S=Buffer.from(new Uint8Array(S));else{if(!e.isString(S))return C(new v("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",v.ERR_BAD_REQUEST,n));S=Buffer.from(S,"utf-8")}if(n.maxBodyLength>-1&&S.length>n.maxBodyLength)return C(new v("Request body larger than maxBodyLength limit",v.ERR_BAD_REQUEST,n));j["content-length"]||(k["Content-Length"]=S.length)}var T=void 0;n.auth&&(T=(n.auth.username||"")+":"+(n.auth.password||""));var E=r(n.baseURL,n.url),P=d.parse(E),B=P.protocol||b[0];if(-1===b.indexOf(B))return C(new v("Unsupported protocol "+B,v.ERR_BAD_REQUEST,n));if(!T&&P.auth){var L=P.auth.split(":");T=(L[0]||"")+":"+(L[1]||"")}T&&j.authorization&&delete k[j.authorization];var D=g.test(B),$=D?n.httpsAgent:n.httpAgent;try{o(P.path,n.params,n.paramsSerializer).replace(/^\?/,"")}catch(e){var I=new Error(e.message);I.config=n,I.url=n.url,I.exists=!0,C(I)}var F={path:o(P.path,n.params,n.paramsSerializer).replace(/^\?/,""),method:n.method.toUpperCase(),headers:k,agent:$,agents:{http:n.httpAgent,https:n.httpsAgent},auth:T};n.socketPath?F.socketPath=n.socketPath:(F.hostname=P.hostname,F.port=P.port);var O,R=n.proxy;if(!R&&!1!==R){var N=B.slice(0,-1)+"_proxy",z=process.env[N]||process.env[N.toUpperCase()];if(z){var q=d.parse(z),M=process.env.no_proxy||process.env.NO_PROXY,V=!0;if(M)V=!M.split(",").map((function(e){return e.trim()})).some((function(e){return!!e&&("*"===e||("."===e[0]&&P.hostname.substr(P.hostname.length-e.length)===e||P.hostname===e))}));if(V&&(R={host:q.hostname,port:q.port,protocol:q.protocol},q.auth)){var U=q.auth.split(":");R.auth={username:U[0],password:U[1]}}}}R&&(F.headers.host=P.hostname+(P.port?":"+P.port:""),y(F,R,B+"//"+P.hostname+(P.port?":"+P.port:"")+F.path));var W=D&&(!R||g.test(R.protocol));n.transport?O=n.transport:0===n.maxRedirects?O=W?c:s:(n.maxRedirects&&(F.maxRedirects=n.maxRedirects),n.beforeRedirect&&(F.beforeRedirect=n.beforeRedirect),O=W?u:p),n.maxBodyLength>-1&&(F.maxBodyLength=n.maxBodyLength),n.insecureHTTPParser&&(F.insecureHTTPParser=n.insecureHTTPParser);var Y=O.request(F,(function(t){if(!Y.aborted){var i=t,r=t.req||Y;if(204!==t.statusCode&&"HEAD"!==r.method&&!1!==n.decompress)switch(t.headers["content-encoding"]){case"gzip":case"compress":case"deflate":i=i.pipe(m.createUnzip()),delete t.headers["content-encoding"]}var o={status:t.statusCode,statusText:t.statusMessage,headers:t.headers,config:n,request:r};if("stream"===n.responseType)o.data=i,a(_,C,o);else{var s=[],c=0;i.on("data",(function(e){s.push(e),c+=e.length,n.maxContentLength>-1&&c>n.maxContentLength&&(A=!0,i.destroy(),C(new v("maxContentLength size of "+n.maxContentLength+" exceeded",v.ERR_BAD_RESPONSE,n,r)))})),i.on("aborted",(function(){A||(i.destroy(),C(new v("maxContentLength size of "+n.maxContentLength+" exceeded",v.ERR_BAD_RESPONSE,n,r)))})),i.on("error",(function(e){Y.aborted||C(v.from(e,null,n,r))})),i.on("end",(function(){try{var t=1===s.length?s[0]:Buffer.concat(s);"arraybuffer"!==n.responseType&&(t=t.toString(n.responseEncoding),n.responseEncoding&&"utf8"!==n.responseEncoding||(t=e.stripBOM(t))),o.data=t}catch(e){C(v.from(e,null,n,o.request,o))}a(_,C,o)}))}}}));if(Y.on("error",(function(e){C(v.from(e,null,n,Y))})),Y.on("socket",(function(e){e.setKeepAlive(!0,6e4)})),n.timeout){var H=parseInt(n.timeout,10);if(isNaN(H))return void C(new v("error trying to parse `config.timeout` to int",v.ERR_BAD_OPTION_VALUE,n,Y));Y.setTimeout(H,(function(){Y.abort();var e=n.transitional||h;C(new v("timeout of "+H+"ms exceeded",e.clarifyTimeoutError?v.ETIMEDOUT:v.ECONNABORTED,n,Y))}))}(n.cancelToken||n.signal)&&(l=function(e){Y.aborted||(Y.abort(),C(!e||e&&e.type?new x:e))},n.cancelToken&&n.cancelToken.subscribe(l),n.signal&&(n.signal.aborted?l():n.signal.addEventListener("abort",l))),e.isStream(S)?S.on("error",(function(e){C(v.from(e,n,null,Y))})).pipe(Y):Y.end(S)}))},yn}var Pn,Bn,Ln,Dn,$n={exports:{}};function In(){if(Dn)return Ln;Dn=1;var e=s,n=a.Stream,t=function(){if(Bn)return Pn;Bn=1;var e=a.Stream;function n(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}return Pn=n,s.inherits(n,e),n.create=function(e,n){var t=new this;for(var i in n=n||{})t[i]=n[i];t.source=e;var a=e.emit;return e.emit=function(){return t._handleEmit(arguments),a.apply(e,arguments)},e.on("error",(function(){})),t.pauseStream&&e.pause(),t},Object.defineProperty(n.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),n.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},n.prototype.resume=function(){this._released||this.release(),this.source.resume()},n.prototype.pause=function(){this.source.pause()},n.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},n.prototype.pipe=function(){var n=e.prototype.pipe.apply(this,arguments);return this.resume(),n},n.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):("data"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},n.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}},Pn}();function i(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null,this._insideLoop=!1,this._pendingNext=!1}return Ln=i,e.inherits(i,n),i.create=function(e){var n=new this;for(var t in e=e||{})n[t]=e[t];return n},i.isStreamLike=function(e){return"function"!=typeof e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e&&!Buffer.isBuffer(e)},i.prototype.append=function(e){if(i.isStreamLike(e)){if(!(e instanceof t)){var n=t.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=n}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},i.prototype.pipe=function(e,t){return n.prototype.pipe.call(this,e,t),this.resume(),e},i.prototype._getNext=function(){if(this._currentStream=null,this._insideLoop)this._pendingNext=!0;else{this._insideLoop=!0;try{do{this._pendingNext=!1,this._realGetNext()}while(this._pendingNext)}finally{this._insideLoop=!1}}},i.prototype._realGetNext=function(){var e=this._streams.shift();void 0!==e?"function"==typeof e?e(function(e){i.isStreamLike(e)&&(e.on("data",this._checkDataSize.bind(this)),this._handleErrors(e)),this._pipeNext(e)}.bind(this)):this._pipeNext(e):this.end()},i.prototype._pipeNext=function(e){if(this._currentStream=e,i.isStreamLike(e))return e.on("end",this._getNext.bind(this)),void e.pipe(this,{end:!1});var n=e;this.write(n),this._getNext()},i.prototype._handleErrors=function(e){var n=this;e.on("error",(function(e){n._emitError(e)}))},i.prototype.write=function(e){this.emit("data",e)},i.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit("pause"))},i.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit("resume")},i.prototype.end=function(){this._reset(),this.emit("end")},i.prototype.destroy=function(){this._reset(),this.emit("close")},i.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},i.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}},i.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach((function(n){n.dataSize&&(e.dataSize+=n.dataSize)})),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},i.prototype._emitError=function(e){this._reset(),this.emit("error",e)},Ln}var Fn,On,Rn,Nn,zn,qn,Mn,Vn,Un,Wn,Yn,Hn,Kn,Gn,Jn,Zn,Xn={},Qn={exports:{}},et={"application/1d-interleaved-parityfec":{source:"iana"},"application/3gpdash-qoe-report+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/3gpp-ims+xml":{source:"iana",compressible:!0},"application/3gpphal+json":{source:"iana",compressible:!0},"application/3gpphalforms+json":{source:"iana",compressible:!0},"application/a2l":{source:"iana"},"application/ace+cbor":{source:"iana"},"application/activemessage":{source:"iana"},"application/activity+json":{source:"iana",compressible:!0},"application/alto-costmap+json":{source:"iana",compressible:!0},"application/alto-costmapfilter+json":{source:"iana",compressible:!0},"application/alto-directory+json":{source:"iana",compressible:!0},"application/alto-endpointcost+json":{source:"iana",compressible:!0},"application/alto-endpointcostparams+json":{source:"iana",compressible:!0},"application/alto-endpointprop+json":{source:"iana",compressible:!0},"application/alto-endpointpropparams+json":{source:"iana",compressible:!0},"application/alto-error+json":{source:"iana",compressible:!0},"application/alto-networkmap+json":{source:"iana",compressible:!0},"application/alto-networkmapfilter+json":{source:"iana",compressible:!0},"application/alto-updatestreamcontrol+json":{source:"iana",compressible:!0},"application/alto-updatestreamparams+json":{source:"iana",compressible:!0},"application/aml":{source:"iana"},"application/andrew-inset":{source:"iana",extensions:["ez"]},"application/applefile":{source:"iana"},"application/applixware":{source:"apache",extensions:["aw"]},"application/at+jwt":{source:"iana"},"application/atf":{source:"iana"},"application/atfx":{source:"iana"},"application/atom+xml":{source:"iana",compressible:!0,extensions:["atom"]},"application/atomcat+xml":{source:"iana",compressible:!0,extensions:["atomcat"]},"application/atomdeleted+xml":{source:"iana",compressible:!0,extensions:["atomdeleted"]},"application/atomicmail":{source:"iana"},"application/atomsvc+xml":{source:"iana",compressible:!0,extensions:["atomsvc"]},"application/atsc-dwd+xml":{source:"iana",compressible:!0,extensions:["dwd"]},"application/atsc-dynamic-event-message":{source:"iana"},"application/atsc-held+xml":{source:"iana",compressible:!0,extensions:["held"]},"application/atsc-rdt+json":{source:"iana",compressible:!0},"application/atsc-rsat+xml":{source:"iana",compressible:!0,extensions:["rsat"]},"application/atxml":{source:"iana"},"application/auth-policy+xml":{source:"iana",compressible:!0},"application/bacnet-xdd+zip":{source:"iana",compressible:!1},"application/batch-smtp":{source:"iana"},"application/bdoc":{compressible:!1,extensions:["bdoc"]},"application/beep+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/calendar+json":{source:"iana",compressible:!0},"application/calendar+xml":{source:"iana",compressible:!0,extensions:["xcs"]},"application/call-completion":{source:"iana"},"application/cals-1840":{source:"iana"},"application/captive+json":{source:"iana",compressible:!0},"application/cbor":{source:"iana"},"application/cbor-seq":{source:"iana"},"application/cccex":{source:"iana"},"application/ccmp+xml":{source:"iana",compressible:!0},"application/ccxml+xml":{source:"iana",compressible:!0,extensions:["ccxml"]},"application/cdfx+xml":{source:"iana",compressible:!0,extensions:["cdfx"]},"application/cdmi-capability":{source:"iana",extensions:["cdmia"]},"application/cdmi-container":{source:"iana",extensions:["cdmic"]},"application/cdmi-domain":{source:"iana",extensions:["cdmid"]},"application/cdmi-object":{source:"iana",extensions:["cdmio"]},"application/cdmi-queue":{source:"iana",extensions:["cdmiq"]},"application/cdni":{source:"iana"},"application/cea":{source:"iana"},"application/cea-2018+xml":{source:"iana",compressible:!0},"application/cellml+xml":{source:"iana",compressible:!0},"application/cfw":{source:"iana"},"application/city+json":{source:"iana",compressible:!0},"application/clr":{source:"iana"},"application/clue+xml":{source:"iana",compressible:!0},"application/clue_info+xml":{source:"iana",compressible:!0},"application/cms":{source:"iana"},"application/cnrp+xml":{source:"iana",compressible:!0},"application/coap-group+json":{source:"iana",compressible:!0},"application/coap-payload":{source:"iana"},"application/commonground":{source:"iana"},"application/conference-info+xml":{source:"iana",compressible:!0},"application/cose":{source:"iana"},"application/cose-key":{source:"iana"},"application/cose-key-set":{source:"iana"},"application/cpl+xml":{source:"iana",compressible:!0,extensions:["cpl"]},"application/csrattrs":{source:"iana"},"application/csta+xml":{source:"iana",compressible:!0},"application/cstadata+xml":{source:"iana",compressible:!0},"application/csvm+json":{source:"iana",compressible:!0},"application/cu-seeme":{source:"apache",extensions:["cu"]},"application/cwt":{source:"iana"},"application/cybercash":{source:"iana"},"application/dart":{compressible:!0},"application/dash+xml":{source:"iana",compressible:!0,extensions:["mpd"]},"application/dash-patch+xml":{source:"iana",compressible:!0,extensions:["mpp"]},"application/dashdelta":{source:"iana"},"application/davmount+xml":{source:"iana",compressible:!0,extensions:["davmount"]},"application/dca-rft":{source:"iana"},"application/dcd":{source:"iana"},"application/dec-dx":{source:"iana"},"application/dialog-info+xml":{source:"iana",compressible:!0},"application/dicom":{source:"iana"},"application/dicom+json":{source:"iana",compressible:!0},"application/dicom+xml":{source:"iana",compressible:!0},"application/dii":{source:"iana"},"application/dit":{source:"iana"},"application/dns":{source:"iana"},"application/dns+json":{source:"iana",compressible:!0},"application/dns-message":{source:"iana"},"application/docbook+xml":{source:"apache",compressible:!0,extensions:["dbk"]},"application/dots+cbor":{source:"iana"},"application/dskpp+xml":{source:"iana",compressible:!0},"application/dssc+der":{source:"iana",extensions:["dssc"]},"application/dssc+xml":{source:"iana",compressible:!0,extensions:["xdssc"]},"application/dvcs":{source:"iana"},"application/ecmascript":{source:"iana",compressible:!0,extensions:["es","ecma"]},"application/edi-consent":{source:"iana"},"application/edi-x12":{source:"iana",compressible:!1},"application/edifact":{source:"iana",compressible:!1},"application/efi":{source:"iana"},"application/elm+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/elm+xml":{source:"iana",compressible:!0},"application/emergencycalldata.cap+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/emergencycalldata.comment+xml":{source:"iana",compressible:!0},"application/emergencycalldata.control+xml":{source:"iana",compressible:!0},"application/emergencycalldata.deviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.ecall.msd":{source:"iana"},"application/emergencycalldata.providerinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.serviceinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.subscriberinfo+xml":{source:"iana",compressible:!0},"application/emergencycalldata.veds+xml":{source:"iana",compressible:!0},"application/emma+xml":{source:"iana",compressible:!0,extensions:["emma"]},"application/emotionml+xml":{source:"iana",compressible:!0,extensions:["emotionml"]},"application/encaprtp":{source:"iana"},"application/epp+xml":{source:"iana",compressible:!0},"application/epub+zip":{source:"iana",compressible:!1,extensions:["epub"]},"application/eshop":{source:"iana"},"application/exi":{source:"iana",extensions:["exi"]},"application/expect-ct-report+json":{source:"iana",compressible:!0},"application/express":{source:"iana",extensions:["exp"]},"application/fastinfoset":{source:"iana"},"application/fastsoap":{source:"iana"},"application/fdt+xml":{source:"iana",compressible:!0,extensions:["fdt"]},"application/fhir+json":{source:"iana",charset:"UTF-8",compressible:!0},"application/fhir+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/fido.trusted-apps+json":{compressible:!0},"application/fits":{source:"iana"},"application/flexfec":{source:"iana"},"application/font-sfnt":{source:"iana"},"application/font-tdpfr":{source:"iana",extensions:["pfr"]},"application/font-woff":{source:"iana",compressible:!1},"application/framework-attributes+xml":{source:"iana",compressible:!0},"application/geo+json":{source:"iana",compressible:!0,extensions:["geojson"]},"application/geo+json-seq":{source:"iana"},"application/geopackage+sqlite3":{source:"iana"},"application/geoxacml+xml":{source:"iana",compressible:!0},"application/gltf-buffer":{source:"iana"},"application/gml+xml":{source:"iana",compressible:!0,extensions:["gml"]},"application/gpx+xml":{source:"apache",compressible:!0,extensions:["gpx"]},"application/gxf":{source:"apache",extensions:["gxf"]},"application/gzip":{source:"iana",compressible:!1,extensions:["gz"]},"application/h224":{source:"iana"},"application/held+xml":{source:"iana",compressible:!0},"application/hjson":{extensions:["hjson"]},"application/http":{source:"iana"},"application/hyperstudio":{source:"iana",extensions:["stk"]},"application/ibe-key-request+xml":{source:"iana",compressible:!0},"application/ibe-pkg-reply+xml":{source:"iana",compressible:!0},"application/ibe-pp-data":{source:"iana"},"application/iges":{source:"iana"},"application/im-iscomposing+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/index":{source:"iana"},"application/index.cmd":{source:"iana"},"application/index.obj":{source:"iana"},"application/index.response":{source:"iana"},"application/index.vnd":{source:"iana"},"application/inkml+xml":{source:"iana",compressible:!0,extensions:["ink","inkml"]},"application/iotp":{source:"iana"},"application/ipfix":{source:"iana",extensions:["ipfix"]},"application/ipp":{source:"iana"},"application/isup":{source:"iana"},"application/its+xml":{source:"iana",compressible:!0,extensions:["its"]},"application/java-archive":{source:"apache",compressible:!1,extensions:["jar","war","ear"]},"application/java-serialized-object":{source:"apache",compressible:!1,extensions:["ser"]},"application/java-vm":{source:"apache",compressible:!1,extensions:["class"]},"application/javascript":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["js","mjs"]},"application/jf2feed+json":{source:"iana",compressible:!0},"application/jose":{source:"iana"},"application/jose+json":{source:"iana",compressible:!0},"application/jrd+json":{source:"iana",compressible:!0},"application/jscalendar+json":{source:"iana",compressible:!0},"application/json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["json","map"]},"application/json-patch+json":{source:"iana",compressible:!0},"application/json-seq":{source:"iana"},"application/json5":{extensions:["json5"]},"application/jsonml+json":{source:"apache",compressible:!0,extensions:["jsonml"]},"application/jwk+json":{source:"iana",compressible:!0},"application/jwk-set+json":{source:"iana",compressible:!0},"application/jwt":{source:"iana"},"application/kpml-request+xml":{source:"iana",compressible:!0},"application/kpml-response+xml":{source:"iana",compressible:!0},"application/ld+json":{source:"iana",compressible:!0,extensions:["jsonld"]},"application/lgr+xml":{source:"iana",compressible:!0,extensions:["lgr"]},"application/link-format":{source:"iana"},"application/load-control+xml":{source:"iana",compressible:!0},"application/lost+xml":{source:"iana",compressible:!0,extensions:["lostxml"]},"application/lostsync+xml":{source:"iana",compressible:!0},"application/lpf+zip":{source:"iana",compressible:!1},"application/lxf":{source:"iana"},"application/mac-binhex40":{source:"iana",extensions:["hqx"]},"application/mac-compactpro":{source:"apache",extensions:["cpt"]},"application/macwriteii":{source:"iana"},"application/mads+xml":{source:"iana",compressible:!0,extensions:["mads"]},"application/manifest+json":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["webmanifest"]},"application/marc":{source:"iana",extensions:["mrc"]},"application/marcxml+xml":{source:"iana",compressible:!0,extensions:["mrcx"]},"application/mathematica":{source:"iana",extensions:["ma","nb","mb"]},"application/mathml+xml":{source:"iana",compressible:!0,extensions:["mathml"]},"application/mathml-content+xml":{source:"iana",compressible:!0},"application/mathml-presentation+xml":{source:"iana",compressible:!0},"application/mbms-associated-procedure-description+xml":{source:"iana",compressible:!0},"application/mbms-deregister+xml":{source:"iana",compressible:!0},"application/mbms-envelope+xml":{source:"iana",compressible:!0},"application/mbms-msk+xml":{source:"iana",compressible:!0},"application/mbms-msk-response+xml":{source:"iana",compressible:!0},"application/mbms-protection-description+xml":{source:"iana",compressible:!0},"application/mbms-reception-report+xml":{source:"iana",compressible:!0},"application/mbms-register+xml":{source:"iana",compressible:!0},"application/mbms-register-response+xml":{source:"iana",compressible:!0},"application/mbms-schedule+xml":{source:"iana",compressible:!0},"application/mbms-user-service-description+xml":{source:"iana",compressible:!0},"application/mbox":{source:"iana",extensions:["mbox"]},"application/media-policy-dataset+xml":{source:"iana",compressible:!0,extensions:["mpf"]},"application/media_control+xml":{source:"iana",compressible:!0},"application/mediaservercontrol+xml":{source:"iana",compressible:!0,extensions:["mscml"]},"application/merge-patch+json":{source:"iana",compressible:!0},"application/metalink+xml":{source:"apache",compressible:!0,extensions:["metalink"]},"application/metalink4+xml":{source:"iana",compressible:!0,extensions:["meta4"]},"application/mets+xml":{source:"iana",compressible:!0,extensions:["mets"]},"application/mf4":{source:"iana"},"application/mikey":{source:"iana"},"application/mipc":{source:"iana"},"application/missing-blocks+cbor-seq":{source:"iana"},"application/mmt-aei+xml":{source:"iana",compressible:!0,extensions:["maei"]},"application/mmt-usd+xml":{source:"iana",compressible:!0,extensions:["musd"]},"application/mods+xml":{source:"iana",compressible:!0,extensions:["mods"]},"application/moss-keys":{source:"iana"},"application/moss-signature":{source:"iana"},"application/mosskey-data":{source:"iana"},"application/mosskey-request":{source:"iana"},"application/mp21":{source:"iana",extensions:["m21","mp21"]},"application/mp4":{source:"iana",extensions:["mp4s","m4p"]},"application/mpeg4-generic":{source:"iana"},"application/mpeg4-iod":{source:"iana"},"application/mpeg4-iod-xmt":{source:"iana"},"application/mrb-consumer+xml":{source:"iana",compressible:!0},"application/mrb-publish+xml":{source:"iana",compressible:!0},"application/msc-ivr+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msc-mixer+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/msword":{source:"iana",compressible:!1,extensions:["doc","dot"]},"application/mud+json":{source:"iana",compressible:!0},"application/multipart-core":{source:"iana"},"application/mxf":{source:"iana",extensions:["mxf"]},"application/n-quads":{source:"iana",extensions:["nq"]},"application/n-triples":{source:"iana",extensions:["nt"]},"application/nasdata":{source:"iana"},"application/news-checkgroups":{source:"iana",charset:"US-ASCII"},"application/news-groupinfo":{source:"iana",charset:"US-ASCII"},"application/news-transmission":{source:"iana"},"application/nlsml+xml":{source:"iana",compressible:!0},"application/node":{source:"iana",extensions:["cjs"]},"application/nss":{source:"iana"},"application/oauth-authz-req+jwt":{source:"iana"},"application/oblivious-dns-message":{source:"iana"},"application/ocsp-request":{source:"iana"},"application/ocsp-response":{source:"iana"},"application/octet-stream":{source:"iana",compressible:!1,extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{source:"iana",extensions:["oda"]},"application/odm+xml":{source:"iana",compressible:!0},"application/odx":{source:"iana"},"application/oebps-package+xml":{source:"iana",compressible:!0,extensions:["opf"]},"application/ogg":{source:"iana",compressible:!1,extensions:["ogx"]},"application/omdoc+xml":{source:"apache",compressible:!0,extensions:["omdoc"]},"application/onenote":{source:"apache",extensions:["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{source:"iana",compressible:!0},"application/oscore":{source:"iana"},"application/oxps":{source:"iana",extensions:["oxps"]},"application/p21":{source:"iana"},"application/p21+zip":{source:"iana",compressible:!1},"application/p2p-overlay+xml":{source:"iana",compressible:!0,extensions:["relo"]},"application/parityfec":{source:"iana"},"application/passport":{source:"iana"},"application/patch-ops-error+xml":{source:"iana",compressible:!0,extensions:["xer"]},"application/pdf":{source:"iana",compressible:!1,extensions:["pdf"]},"application/pdx":{source:"iana"},"application/pem-certificate-chain":{source:"iana"},"application/pgp-encrypted":{source:"iana",compressible:!1,extensions:["pgp"]},"application/pgp-keys":{source:"iana",extensions:["asc"]},"application/pgp-signature":{source:"iana",extensions:["asc","sig"]},"application/pics-rules":{source:"apache",extensions:["prf"]},"application/pidf+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pidf-diff+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/pkcs10":{source:"iana",extensions:["p10"]},"application/pkcs12":{source:"iana"},"application/pkcs7-mime":{source:"iana",extensions:["p7m","p7c"]},"application/pkcs7-signature":{source:"iana",extensions:["p7s"]},"application/pkcs8":{source:"iana",extensions:["p8"]},"application/pkcs8-encrypted":{source:"iana"},"application/pkix-attr-cert":{source:"iana",extensions:["ac"]},"application/pkix-cert":{source:"iana",extensions:["cer"]},"application/pkix-crl":{source:"iana",extensions:["crl"]},"application/pkix-pkipath":{source:"iana",extensions:["pkipath"]},"application/pkixcmp":{source:"iana",extensions:["pki"]},"application/pls+xml":{source:"iana",compressible:!0,extensions:["pls"]},"application/poc-settings+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/postscript":{source:"iana",compressible:!0,extensions:["ai","eps","ps"]},"application/ppsp-tracker+json":{source:"iana",compressible:!0},"application/problem+json":{source:"iana",compressible:!0},"application/problem+xml":{source:"iana",compressible:!0},"application/provenance+xml":{source:"iana",compressible:!0,extensions:["provx"]},"application/prs.alvestrand.titrax-sheet":{source:"iana"},"application/prs.cww":{source:"iana",extensions:["cww"]},"application/prs.cyn":{source:"iana",charset:"7-BIT"},"application/prs.hpub+zip":{source:"iana",compressible:!1},"application/prs.nprend":{source:"iana"},"application/prs.plucker":{source:"iana"},"application/prs.rdf-xml-crypt":{source:"iana"},"application/prs.xsf+xml":{source:"iana",compressible:!0},"application/pskc+xml":{source:"iana",compressible:!0,extensions:["pskcxml"]},"application/pvd+json":{source:"iana",compressible:!0},"application/qsig":{source:"iana"},"application/raml+yaml":{compressible:!0,extensions:["raml"]},"application/raptorfec":{source:"iana"},"application/rdap+json":{source:"iana",compressible:!0},"application/rdf+xml":{source:"iana",compressible:!0,extensions:["rdf","owl"]},"application/reginfo+xml":{source:"iana",compressible:!0,extensions:["rif"]},"application/relax-ng-compact-syntax":{source:"iana",extensions:["rnc"]},"application/remote-printing":{source:"iana"},"application/reputon+json":{source:"iana",compressible:!0},"application/resource-lists+xml":{source:"iana",compressible:!0,extensions:["rl"]},"application/resource-lists-diff+xml":{source:"iana",compressible:!0,extensions:["rld"]},"application/rfc+xml":{source:"iana",compressible:!0},"application/riscos":{source:"iana"},"application/rlmi+xml":{source:"iana",compressible:!0},"application/rls-services+xml":{source:"iana",compressible:!0,extensions:["rs"]},"application/route-apd+xml":{source:"iana",compressible:!0,extensions:["rapd"]},"application/route-s-tsid+xml":{source:"iana",compressible:!0,extensions:["sls"]},"application/route-usd+xml":{source:"iana",compressible:!0,extensions:["rusd"]},"application/rpki-ghostbusters":{source:"iana",extensions:["gbr"]},"application/rpki-manifest":{source:"iana",extensions:["mft"]},"application/rpki-publication":{source:"iana"},"application/rpki-roa":{source:"iana",extensions:["roa"]},"application/rpki-updown":{source:"iana"},"application/rsd+xml":{source:"apache",compressible:!0,extensions:["rsd"]},"application/rss+xml":{source:"apache",compressible:!0,extensions:["rss"]},"application/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"application/rtploopback":{source:"iana"},"application/rtx":{source:"iana"},"application/samlassertion+xml":{source:"iana",compressible:!0},"application/samlmetadata+xml":{source:"iana",compressible:!0},"application/sarif+json":{source:"iana",compressible:!0},"application/sarif-external-properties+json":{source:"iana",compressible:!0},"application/sbe":{source:"iana"},"application/sbml+xml":{source:"iana",compressible:!0,extensions:["sbml"]},"application/scaip+xml":{source:"iana",compressible:!0},"application/scim+json":{source:"iana",compressible:!0},"application/scvp-cv-request":{source:"iana",extensions:["scq"]},"application/scvp-cv-response":{source:"iana",extensions:["scs"]},"application/scvp-vp-request":{source:"iana",extensions:["spq"]},"application/scvp-vp-response":{source:"iana",extensions:["spp"]},"application/sdp":{source:"iana",extensions:["sdp"]},"application/secevent+jwt":{source:"iana"},"application/senml+cbor":{source:"iana"},"application/senml+json":{source:"iana",compressible:!0},"application/senml+xml":{source:"iana",compressible:!0,extensions:["senmlx"]},"application/senml-etch+cbor":{source:"iana"},"application/senml-etch+json":{source:"iana",compressible:!0},"application/senml-exi":{source:"iana"},"application/sensml+cbor":{source:"iana"},"application/sensml+json":{source:"iana",compressible:!0},"application/sensml+xml":{source:"iana",compressible:!0,extensions:["sensmlx"]},"application/sensml-exi":{source:"iana"},"application/sep+xml":{source:"iana",compressible:!0},"application/sep-exi":{source:"iana"},"application/session-info":{source:"iana"},"application/set-payment":{source:"iana"},"application/set-payment-initiation":{source:"iana",extensions:["setpay"]},"application/set-registration":{source:"iana"},"application/set-registration-initiation":{source:"iana",extensions:["setreg"]},"application/sgml":{source:"iana"},"application/sgml-open-catalog":{source:"iana"},"application/shf+xml":{source:"iana",compressible:!0,extensions:["shf"]},"application/sieve":{source:"iana",extensions:["siv","sieve"]},"application/simple-filter+xml":{source:"iana",compressible:!0},"application/simple-message-summary":{source:"iana"},"application/simplesymbolcontainer":{source:"iana"},"application/sipc":{source:"iana"},"application/slate":{source:"iana"},"application/smil":{source:"iana"},"application/smil+xml":{source:"iana",compressible:!0,extensions:["smi","smil"]},"application/smpte336m":{source:"iana"},"application/soap+fastinfoset":{source:"iana"},"application/soap+xml":{source:"iana",compressible:!0},"application/sparql-query":{source:"iana",extensions:["rq"]},"application/sparql-results+xml":{source:"iana",compressible:!0,extensions:["srx"]},"application/spdx+json":{source:"iana",compressible:!0},"application/spirits-event+xml":{source:"iana",compressible:!0},"application/sql":{source:"iana"},"application/srgs":{source:"iana",extensions:["gram"]},"application/srgs+xml":{source:"iana",compressible:!0,extensions:["grxml"]},"application/sru+xml":{source:"iana",compressible:!0,extensions:["sru"]},"application/ssdl+xml":{source:"apache",compressible:!0,extensions:["ssdl"]},"application/ssml+xml":{source:"iana",compressible:!0,extensions:["ssml"]},"application/stix+json":{source:"iana",compressible:!0},"application/swid+xml":{source:"iana",compressible:!0,extensions:["swidtag"]},"application/tamp-apex-update":{source:"iana"},"application/tamp-apex-update-confirm":{source:"iana"},"application/tamp-community-update":{source:"iana"},"application/tamp-community-update-confirm":{source:"iana"},"application/tamp-error":{source:"iana"},"application/tamp-sequence-adjust":{source:"iana"},"application/tamp-sequence-adjust-confirm":{source:"iana"},"application/tamp-status-query":{source:"iana"},"application/tamp-status-response":{source:"iana"},"application/tamp-update":{source:"iana"},"application/tamp-update-confirm":{source:"iana"},"application/tar":{compressible:!0},"application/taxii+json":{source:"iana",compressible:!0},"application/td+json":{source:"iana",compressible:!0},"application/tei+xml":{source:"iana",compressible:!0,extensions:["tei","teicorpus"]},"application/tetra_isi":{source:"iana"},"application/thraud+xml":{source:"iana",compressible:!0,extensions:["tfi"]},"application/timestamp-query":{source:"iana"},"application/timestamp-reply":{source:"iana"},"application/timestamped-data":{source:"iana",extensions:["tsd"]},"application/tlsrpt+gzip":{source:"iana"},"application/tlsrpt+json":{source:"iana",compressible:!0},"application/tnauthlist":{source:"iana"},"application/token-introspection+jwt":{source:"iana"},"application/toml":{compressible:!0,extensions:["toml"]},"application/trickle-ice-sdpfrag":{source:"iana"},"application/trig":{source:"iana",extensions:["trig"]},"application/ttml+xml":{source:"iana",compressible:!0,extensions:["ttml"]},"application/tve-trigger":{source:"iana"},"application/tzif":{source:"iana"},"application/tzif-leap":{source:"iana"},"application/ubjson":{compressible:!1,extensions:["ubj"]},"application/ulpfec":{source:"iana"},"application/urc-grpsheet+xml":{source:"iana",compressible:!0},"application/urc-ressheet+xml":{source:"iana",compressible:!0,extensions:["rsheet"]},"application/urc-targetdesc+xml":{source:"iana",compressible:!0,extensions:["td"]},"application/urc-uisocketdesc+xml":{source:"iana",compressible:!0},"application/vcard+json":{source:"iana",compressible:!0},"application/vcard+xml":{source:"iana",compressible:!0},"application/vemmi":{source:"iana"},"application/vividence.scriptfile":{source:"apache"},"application/vnd.1000minds.decision-model+xml":{source:"iana",compressible:!0,extensions:["1km"]},"application/vnd.3gpp-prose+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-prose-pc3ch+xml":{source:"iana",compressible:!0},"application/vnd.3gpp-v2x-local-service-information":{source:"iana"},"application/vnd.3gpp.5gnas":{source:"iana"},"application/vnd.3gpp.access-transfer-events+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.bsf+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gmop+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.gtpc":{source:"iana"},"application/vnd.3gpp.interworking-data":{source:"iana"},"application/vnd.3gpp.lpp":{source:"iana"},"application/vnd.3gpp.mc-signalling-ear":{source:"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-payload":{source:"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-signalling":{source:"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcdata-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-floor-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-signed+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-ue-init-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcptt-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-location-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-service-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-transmission-request+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-ue-config+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mcvideo-user-profile+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.mid-call+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ngap":{source:"iana"},"application/vnd.3gpp.pfcp":{source:"iana"},"application/vnd.3gpp.pic-bw-large":{source:"iana",extensions:["plb"]},"application/vnd.3gpp.pic-bw-small":{source:"iana",extensions:["psb"]},"application/vnd.3gpp.pic-bw-var":{source:"iana",extensions:["pvb"]},"application/vnd.3gpp.s1ap":{source:"iana"},"application/vnd.3gpp.sms":{source:"iana"},"application/vnd.3gpp.sms+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-ext+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.srvcc-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.state-and-event-info+xml":{source:"iana",compressible:!0},"application/vnd.3gpp.ussd+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.bcmcsinfo+xml":{source:"iana",compressible:!0},"application/vnd.3gpp2.sms":{source:"iana"},"application/vnd.3gpp2.tcap":{source:"iana",extensions:["tcap"]},"application/vnd.3lightssoftware.imagescal":{source:"iana"},"application/vnd.3m.post-it-notes":{source:"iana",extensions:["pwn"]},"application/vnd.accpac.simply.aso":{source:"iana",extensions:["aso"]},"application/vnd.accpac.simply.imp":{source:"iana",extensions:["imp"]},"application/vnd.acucobol":{source:"iana",extensions:["acu"]},"application/vnd.acucorp":{source:"iana",extensions:["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{source:"apache",compressible:!1,extensions:["air"]},"application/vnd.adobe.flash.movie":{source:"iana"},"application/vnd.adobe.formscentral.fcdt":{source:"iana",extensions:["fcdt"]},"application/vnd.adobe.fxp":{source:"iana",extensions:["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{source:"iana"},"application/vnd.adobe.xdp+xml":{source:"iana",compressible:!0,extensions:["xdp"]},"application/vnd.adobe.xfdf":{source:"iana",extensions:["xfdf"]},"application/vnd.aether.imp":{source:"iana"},"application/vnd.afpc.afplinedata":{source:"iana"},"application/vnd.afpc.afplinedata-pagedef":{source:"iana"},"application/vnd.afpc.cmoca-cmresource":{source:"iana"},"application/vnd.afpc.foca-charset":{source:"iana"},"application/vnd.afpc.foca-codedfont":{source:"iana"},"application/vnd.afpc.foca-codepage":{source:"iana"},"application/vnd.afpc.modca":{source:"iana"},"application/vnd.afpc.modca-cmtable":{source:"iana"},"application/vnd.afpc.modca-formdef":{source:"iana"},"application/vnd.afpc.modca-mediummap":{source:"iana"},"application/vnd.afpc.modca-objectcontainer":{source:"iana"},"application/vnd.afpc.modca-overlay":{source:"iana"},"application/vnd.afpc.modca-pagesegment":{source:"iana"},"application/vnd.age":{source:"iana",extensions:["age"]},"application/vnd.ah-barcode":{source:"iana"},"application/vnd.ahead.space":{source:"iana",extensions:["ahead"]},"application/vnd.airzip.filesecure.azf":{source:"iana",extensions:["azf"]},"application/vnd.airzip.filesecure.azs":{source:"iana",extensions:["azs"]},"application/vnd.amadeus+json":{source:"iana",compressible:!0},"application/vnd.amazon.ebook":{source:"apache",extensions:["azw"]},"application/vnd.amazon.mobi8-ebook":{source:"iana"},"application/vnd.americandynamics.acc":{source:"iana",extensions:["acc"]},"application/vnd.amiga.ami":{source:"iana",extensions:["ami"]},"application/vnd.amundsen.maze+xml":{source:"iana",compressible:!0},"application/vnd.android.ota":{source:"iana"},"application/vnd.android.package-archive":{source:"apache",compressible:!1,extensions:["apk"]},"application/vnd.anki":{source:"iana"},"application/vnd.anser-web-certificate-issue-initiation":{source:"iana",extensions:["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{source:"apache",extensions:["fti"]},"application/vnd.antix.game-component":{source:"iana",extensions:["atx"]},"application/vnd.apache.arrow.file":{source:"iana"},"application/vnd.apache.arrow.stream":{source:"iana"},"application/vnd.apache.thrift.binary":{source:"iana"},"application/vnd.apache.thrift.compact":{source:"iana"},"application/vnd.apache.thrift.json":{source:"iana"},"application/vnd.api+json":{source:"iana",compressible:!0},"application/vnd.aplextor.warrp+json":{source:"iana",compressible:!0},"application/vnd.apothekende.reservation+json":{source:"iana",compressible:!0},"application/vnd.apple.installer+xml":{source:"iana",compressible:!0,extensions:["mpkg"]},"application/vnd.apple.keynote":{source:"iana",extensions:["key"]},"application/vnd.apple.mpegurl":{source:"iana",extensions:["m3u8"]},"application/vnd.apple.numbers":{source:"iana",extensions:["numbers"]},"application/vnd.apple.pages":{source:"iana",extensions:["pages"]},"application/vnd.apple.pkpass":{compressible:!1,extensions:["pkpass"]},"application/vnd.arastra.swi":{source:"iana"},"application/vnd.aristanetworks.swi":{source:"iana",extensions:["swi"]},"application/vnd.artisan+json":{source:"iana",compressible:!0},"application/vnd.artsquare":{source:"iana"},"application/vnd.astraea-software.iota":{source:"iana",extensions:["iota"]},"application/vnd.audiograph":{source:"iana",extensions:["aep"]},"application/vnd.autopackage":{source:"iana"},"application/vnd.avalon+json":{source:"iana",compressible:!0},"application/vnd.avistar+xml":{source:"iana",compressible:!0},"application/vnd.balsamiq.bmml+xml":{source:"iana",compressible:!0,extensions:["bmml"]},"application/vnd.balsamiq.bmpr":{source:"iana"},"application/vnd.banana-accounting":{source:"iana"},"application/vnd.bbf.usp.error":{source:"iana"},"application/vnd.bbf.usp.msg":{source:"iana"},"application/vnd.bbf.usp.msg+json":{source:"iana",compressible:!0},"application/vnd.bekitzur-stech+json":{source:"iana",compressible:!0},"application/vnd.bint.med-content":{source:"iana"},"application/vnd.biopax.rdf+xml":{source:"iana",compressible:!0},"application/vnd.blink-idb-value-wrapper":{source:"iana"},"application/vnd.blueice.multipass":{source:"iana",extensions:["mpm"]},"application/vnd.bluetooth.ep.oob":{source:"iana"},"application/vnd.bluetooth.le.oob":{source:"iana"},"application/vnd.bmi":{source:"iana",extensions:["bmi"]},"application/vnd.bpf":{source:"iana"},"application/vnd.bpf3":{source:"iana"},"application/vnd.businessobjects":{source:"iana",extensions:["rep"]},"application/vnd.byu.uapi+json":{source:"iana",compressible:!0},"application/vnd.cab-jscript":{source:"iana"},"application/vnd.canon-cpdl":{source:"iana"},"application/vnd.canon-lips":{source:"iana"},"application/vnd.capasystems-pg+json":{source:"iana",compressible:!0},"application/vnd.cendio.thinlinc.clientconf":{source:"iana"},"application/vnd.century-systems.tcp_stream":{source:"iana"},"application/vnd.chemdraw+xml":{source:"iana",compressible:!0,extensions:["cdxml"]},"application/vnd.chess-pgn":{source:"iana"},"application/vnd.chipnuts.karaoke-mmd":{source:"iana",extensions:["mmd"]},"application/vnd.ciedi":{source:"iana"},"application/vnd.cinderella":{source:"iana",extensions:["cdy"]},"application/vnd.cirpack.isdn-ext":{source:"iana"},"application/vnd.citationstyles.style+xml":{source:"iana",compressible:!0,extensions:["csl"]},"application/vnd.claymore":{source:"iana",extensions:["cla"]},"application/vnd.cloanto.rp9":{source:"iana",extensions:["rp9"]},"application/vnd.clonk.c4group":{source:"iana",extensions:["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{source:"iana",extensions:["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{source:"iana",extensions:["c11amz"]},"application/vnd.coffeescript":{source:"iana"},"application/vnd.collabio.xodocuments.document":{source:"iana"},"application/vnd.collabio.xodocuments.document-template":{source:"iana"},"application/vnd.collabio.xodocuments.presentation":{source:"iana"},"application/vnd.collabio.xodocuments.presentation-template":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{source:"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{source:"iana"},"application/vnd.collection+json":{source:"iana",compressible:!0},"application/vnd.collection.doc+json":{source:"iana",compressible:!0},"application/vnd.collection.next+json":{source:"iana",compressible:!0},"application/vnd.comicbook+zip":{source:"iana",compressible:!1},"application/vnd.comicbook-rar":{source:"iana"},"application/vnd.commerce-battelle":{source:"iana"},"application/vnd.commonspace":{source:"iana",extensions:["csp"]},"application/vnd.contact.cmsg":{source:"iana",extensions:["cdbcmsg"]},"application/vnd.coreos.ignition+json":{source:"iana",compressible:!0},"application/vnd.cosmocaller":{source:"iana",extensions:["cmc"]},"application/vnd.crick.clicker":{source:"iana",extensions:["clkx"]},"application/vnd.crick.clicker.keyboard":{source:"iana",extensions:["clkk"]},"application/vnd.crick.clicker.palette":{source:"iana",extensions:["clkp"]},"application/vnd.crick.clicker.template":{source:"iana",extensions:["clkt"]},"application/vnd.crick.clicker.wordbank":{source:"iana",extensions:["clkw"]},"application/vnd.criticaltools.wbs+xml":{source:"iana",compressible:!0,extensions:["wbs"]},"application/vnd.cryptii.pipe+json":{source:"iana",compressible:!0},"application/vnd.crypto-shade-file":{source:"iana"},"application/vnd.cryptomator.encrypted":{source:"iana"},"application/vnd.cryptomator.vault":{source:"iana"},"application/vnd.ctc-posml":{source:"iana",extensions:["pml"]},"application/vnd.ctct.ws+xml":{source:"iana",compressible:!0},"application/vnd.cups-pdf":{source:"iana"},"application/vnd.cups-postscript":{source:"iana"},"application/vnd.cups-ppd":{source:"iana",extensions:["ppd"]},"application/vnd.cups-raster":{source:"iana"},"application/vnd.cups-raw":{source:"iana"},"application/vnd.curl":{source:"iana"},"application/vnd.curl.car":{source:"apache",extensions:["car"]},"application/vnd.curl.pcurl":{source:"apache",extensions:["pcurl"]},"application/vnd.cyan.dean.root+xml":{source:"iana",compressible:!0},"application/vnd.cybank":{source:"iana"},"application/vnd.cyclonedx+json":{source:"iana",compressible:!0},"application/vnd.cyclonedx+xml":{source:"iana",compressible:!0},"application/vnd.d2l.coursepackage1p0+zip":{source:"iana",compressible:!1},"application/vnd.d3m-dataset":{source:"iana"},"application/vnd.d3m-problem":{source:"iana"},"application/vnd.dart":{source:"iana",compressible:!0,extensions:["dart"]},"application/vnd.data-vision.rdz":{source:"iana",extensions:["rdz"]},"application/vnd.datapackage+json":{source:"iana",compressible:!0},"application/vnd.dataresource+json":{source:"iana",compressible:!0},"application/vnd.dbf":{source:"iana",extensions:["dbf"]},"application/vnd.debian.binary-package":{source:"iana"},"application/vnd.dece.data":{source:"iana",extensions:["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{source:"iana",compressible:!0,extensions:["uvt","uvvt"]},"application/vnd.dece.unspecified":{source:"iana",extensions:["uvx","uvvx"]},"application/vnd.dece.zip":{source:"iana",extensions:["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{source:"iana",extensions:["fe_launch"]},"application/vnd.desmume.movie":{source:"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{source:"iana"},"application/vnd.dm.delegation+xml":{source:"iana",compressible:!0},"application/vnd.dna":{source:"iana",extensions:["dna"]},"application/vnd.document+json":{source:"iana",compressible:!0},"application/vnd.dolby.mlp":{source:"apache",extensions:["mlp"]},"application/vnd.dolby.mobile.1":{source:"iana"},"application/vnd.dolby.mobile.2":{source:"iana"},"application/vnd.doremir.scorecloud-binary-document":{source:"iana"},"application/vnd.dpgraph":{source:"iana",extensions:["dpg"]},"application/vnd.dreamfactory":{source:"iana",extensions:["dfac"]},"application/vnd.drive+json":{source:"iana",compressible:!0},"application/vnd.ds-keypoint":{source:"apache",extensions:["kpxx"]},"application/vnd.dtg.local":{source:"iana"},"application/vnd.dtg.local.flash":{source:"iana"},"application/vnd.dtg.local.html":{source:"iana"},"application/vnd.dvb.ait":{source:"iana",extensions:["ait"]},"application/vnd.dvb.dvbisl+xml":{source:"iana",compressible:!0},"application/vnd.dvb.dvbj":{source:"iana"},"application/vnd.dvb.esgcontainer":{source:"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess":{source:"iana"},"application/vnd.dvb.ipdcesgaccess2":{source:"iana"},"application/vnd.dvb.ipdcesgpdd":{source:"iana"},"application/vnd.dvb.ipdcroaming":{source:"iana"},"application/vnd.dvb.iptv.alfec-base":{source:"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{source:"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-container+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-generic+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-msglist+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-request+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-ia-registration-response+xml":{source:"iana",compressible:!0},"application/vnd.dvb.notif-init+xml":{source:"iana",compressible:!0},"application/vnd.dvb.pfr":{source:"iana"},"application/vnd.dvb.service":{source:"iana",extensions:["svc"]},"application/vnd.dxr":{source:"iana"},"application/vnd.dynageo":{source:"iana",extensions:["geo"]},"application/vnd.dzr":{source:"iana"},"application/vnd.easykaraoke.cdgdownload":{source:"iana"},"application/vnd.ecdis-update":{source:"iana"},"application/vnd.ecip.rlp":{source:"iana"},"application/vnd.eclipse.ditto+json":{source:"iana",compressible:!0},"application/vnd.ecowin.chart":{source:"iana",extensions:["mag"]},"application/vnd.ecowin.filerequest":{source:"iana"},"application/vnd.ecowin.fileupdate":{source:"iana"},"application/vnd.ecowin.series":{source:"iana"},"application/vnd.ecowin.seriesrequest":{source:"iana"},"application/vnd.ecowin.seriesupdate":{source:"iana"},"application/vnd.efi.img":{source:"iana"},"application/vnd.efi.iso":{source:"iana"},"application/vnd.emclient.accessrequest+xml":{source:"iana",compressible:!0},"application/vnd.enliven":{source:"iana",extensions:["nml"]},"application/vnd.enphase.envoy":{source:"iana"},"application/vnd.eprints.data+xml":{source:"iana",compressible:!0},"application/vnd.epson.esf":{source:"iana",extensions:["esf"]},"application/vnd.epson.msf":{source:"iana",extensions:["msf"]},"application/vnd.epson.quickanime":{source:"iana",extensions:["qam"]},"application/vnd.epson.salt":{source:"iana",extensions:["slt"]},"application/vnd.epson.ssf":{source:"iana",extensions:["ssf"]},"application/vnd.ericsson.quickcall":{source:"iana"},"application/vnd.espass-espass+zip":{source:"iana",compressible:!1},"application/vnd.eszigno3+xml":{source:"iana",compressible:!0,extensions:["es3","et3"]},"application/vnd.etsi.aoc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.asic-e+zip":{source:"iana",compressible:!1},"application/vnd.etsi.asic-s+zip":{source:"iana",compressible:!1},"application/vnd.etsi.cug+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvcommand+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-bc+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-cod+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsad-npvr+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvservice+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvsync+xml":{source:"iana",compressible:!0},"application/vnd.etsi.iptvueprofile+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mcid+xml":{source:"iana",compressible:!0},"application/vnd.etsi.mheg5":{source:"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{source:"iana",compressible:!0},"application/vnd.etsi.pstn+xml":{source:"iana",compressible:!0},"application/vnd.etsi.sci+xml":{source:"iana",compressible:!0},"application/vnd.etsi.simservs+xml":{source:"iana",compressible:!0},"application/vnd.etsi.timestamp-token":{source:"iana"},"application/vnd.etsi.tsl+xml":{source:"iana",compressible:!0},"application/vnd.etsi.tsl.der":{source:"iana"},"application/vnd.eu.kasparian.car+json":{source:"iana",compressible:!0},"application/vnd.eudora.data":{source:"iana"},"application/vnd.evolv.ecig.profile":{source:"iana"},"application/vnd.evolv.ecig.settings":{source:"iana"},"application/vnd.evolv.ecig.theme":{source:"iana"},"application/vnd.exstream-empower+zip":{source:"iana",compressible:!1},"application/vnd.exstream-package":{source:"iana"},"application/vnd.ezpix-album":{source:"iana",extensions:["ez2"]},"application/vnd.ezpix-package":{source:"iana",extensions:["ez3"]},"application/vnd.f-secure.mobile":{source:"iana"},"application/vnd.familysearch.gedcom+zip":{source:"iana",compressible:!1},"application/vnd.fastcopy-disk-image":{source:"iana"},"application/vnd.fdf":{source:"iana",extensions:["fdf"]},"application/vnd.fdsn.mseed":{source:"iana",extensions:["mseed"]},"application/vnd.fdsn.seed":{source:"iana",extensions:["seed","dataless"]},"application/vnd.ffsns":{source:"iana"},"application/vnd.ficlab.flb+zip":{source:"iana",compressible:!1},"application/vnd.filmit.zfc":{source:"iana"},"application/vnd.fints":{source:"iana"},"application/vnd.firemonkeys.cloudcell":{source:"iana"},"application/vnd.flographit":{source:"iana",extensions:["gph"]},"application/vnd.fluxtime.clip":{source:"iana",extensions:["ftc"]},"application/vnd.font-fontforge-sfd":{source:"iana"},"application/vnd.framemaker":{source:"iana",extensions:["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{source:"iana",extensions:["fnc"]},"application/vnd.frogans.ltf":{source:"iana",extensions:["ltf"]},"application/vnd.fsc.weblaunch":{source:"iana",extensions:["fsc"]},"application/vnd.fujifilm.fb.docuworks":{source:"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{source:"iana"},"application/vnd.fujifilm.fb.docuworks.container":{source:"iana"},"application/vnd.fujifilm.fb.jfi+xml":{source:"iana",compressible:!0},"application/vnd.fujitsu.oasys":{source:"iana",extensions:["oas"]},"application/vnd.fujitsu.oasys2":{source:"iana",extensions:["oa2"]},"application/vnd.fujitsu.oasys3":{source:"iana",extensions:["oa3"]},"application/vnd.fujitsu.oasysgp":{source:"iana",extensions:["fg5"]},"application/vnd.fujitsu.oasysprs":{source:"iana",extensions:["bh2"]},"application/vnd.fujixerox.art-ex":{source:"iana"},"application/vnd.fujixerox.art4":{source:"iana"},"application/vnd.fujixerox.ddd":{source:"iana",extensions:["ddd"]},"application/vnd.fujixerox.docuworks":{source:"iana",extensions:["xdw"]},"application/vnd.fujixerox.docuworks.binder":{source:"iana",extensions:["xbd"]},"application/vnd.fujixerox.docuworks.container":{source:"iana"},"application/vnd.fujixerox.hbpl":{source:"iana"},"application/vnd.fut-misnet":{source:"iana"},"application/vnd.futoin+cbor":{source:"iana"},"application/vnd.futoin+json":{source:"iana",compressible:!0},"application/vnd.fuzzysheet":{source:"iana",extensions:["fzs"]},"application/vnd.genomatix.tuxedo":{source:"iana",extensions:["txd"]},"application/vnd.gentics.grd+json":{source:"iana",compressible:!0},"application/vnd.geo+json":{source:"iana",compressible:!0},"application/vnd.geocube+xml":{source:"iana",compressible:!0},"application/vnd.geogebra.file":{source:"iana",extensions:["ggb"]},"application/vnd.geogebra.slides":{source:"iana"},"application/vnd.geogebra.tool":{source:"iana",extensions:["ggt"]},"application/vnd.geometry-explorer":{source:"iana",extensions:["gex","gre"]},"application/vnd.geonext":{source:"iana",extensions:["gxt"]},"application/vnd.geoplan":{source:"iana",extensions:["g2w"]},"application/vnd.geospace":{source:"iana",extensions:["g3w"]},"application/vnd.gerber":{source:"iana"},"application/vnd.globalplatform.card-content-mgt":{source:"iana"},"application/vnd.globalplatform.card-content-mgt-response":{source:"iana"},"application/vnd.gmx":{source:"iana",extensions:["gmx"]},"application/vnd.google-apps.document":{compressible:!1,extensions:["gdoc"]},"application/vnd.google-apps.presentation":{compressible:!1,extensions:["gslides"]},"application/vnd.google-apps.spreadsheet":{compressible:!1,extensions:["gsheet"]},"application/vnd.google-earth.kml+xml":{source:"iana",compressible:!0,extensions:["kml"]},"application/vnd.google-earth.kmz":{source:"iana",compressible:!1,extensions:["kmz"]},"application/vnd.gov.sk.e-form+xml":{source:"iana",compressible:!0},"application/vnd.gov.sk.e-form+zip":{source:"iana",compressible:!1},"application/vnd.gov.sk.xmldatacontainer+xml":{source:"iana",compressible:!0},"application/vnd.grafeq":{source:"iana",extensions:["gqf","gqs"]},"application/vnd.gridmp":{source:"iana"},"application/vnd.groove-account":{source:"iana",extensions:["gac"]},"application/vnd.groove-help":{source:"iana",extensions:["ghf"]},"application/vnd.groove-identity-message":{source:"iana",extensions:["gim"]},"application/vnd.groove-injector":{source:"iana",extensions:["grv"]},"application/vnd.groove-tool-message":{source:"iana",extensions:["gtm"]},"application/vnd.groove-tool-template":{source:"iana",extensions:["tpl"]},"application/vnd.groove-vcard":{source:"iana",extensions:["vcg"]},"application/vnd.hal+json":{source:"iana",compressible:!0},"application/vnd.hal+xml":{source:"iana",compressible:!0,extensions:["hal"]},"application/vnd.handheld-entertainment+xml":{source:"iana",compressible:!0,extensions:["zmm"]},"application/vnd.hbci":{source:"iana",extensions:["hbci"]},"application/vnd.hc+json":{source:"iana",compressible:!0},"application/vnd.hcl-bireports":{source:"iana"},"application/vnd.hdt":{source:"iana"},"application/vnd.heroku+json":{source:"iana",compressible:!0},"application/vnd.hhe.lesson-player":{source:"iana",extensions:["les"]},"application/vnd.hl7cda+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.hl7v2+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.hp-hpgl":{source:"iana",extensions:["hpgl"]},"application/vnd.hp-hpid":{source:"iana",extensions:["hpid"]},"application/vnd.hp-hps":{source:"iana",extensions:["hps"]},"application/vnd.hp-jlyt":{source:"iana",extensions:["jlt"]},"application/vnd.hp-pcl":{source:"iana",extensions:["pcl"]},"application/vnd.hp-pclxl":{source:"iana",extensions:["pclxl"]},"application/vnd.httphone":{source:"iana"},"application/vnd.hydrostatix.sof-data":{source:"iana",extensions:["sfd-hdstx"]},"application/vnd.hyper+json":{source:"iana",compressible:!0},"application/vnd.hyper-item+json":{source:"iana",compressible:!0},"application/vnd.hyperdrive+json":{source:"iana",compressible:!0},"application/vnd.hzn-3d-crossword":{source:"iana"},"application/vnd.ibm.afplinedata":{source:"iana"},"application/vnd.ibm.electronic-media":{source:"iana"},"application/vnd.ibm.minipay":{source:"iana",extensions:["mpy"]},"application/vnd.ibm.modcap":{source:"iana",extensions:["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{source:"iana",extensions:["irm"]},"application/vnd.ibm.secure-container":{source:"iana",extensions:["sc"]},"application/vnd.iccprofile":{source:"iana",extensions:["icc","icm"]},"application/vnd.ieee.1905":{source:"iana"},"application/vnd.igloader":{source:"iana",extensions:["igl"]},"application/vnd.imagemeter.folder+zip":{source:"iana",compressible:!1},"application/vnd.imagemeter.image+zip":{source:"iana",compressible:!1},"application/vnd.immervision-ivp":{source:"iana",extensions:["ivp"]},"application/vnd.immervision-ivu":{source:"iana",extensions:["ivu"]},"application/vnd.ims.imsccv1p1":{source:"iana"},"application/vnd.ims.imsccv1p2":{source:"iana"},"application/vnd.ims.imsccv1p3":{source:"iana"},"application/vnd.ims.lis.v2.result+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolproxy.id+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings+json":{source:"iana",compressible:!0},"application/vnd.ims.lti.v2.toolsettings.simple+json":{source:"iana",compressible:!0},"application/vnd.informedcontrol.rms+xml":{source:"iana",compressible:!0},"application/vnd.informix-visionary":{source:"iana"},"application/vnd.infotech.project":{source:"iana"},"application/vnd.infotech.project+xml":{source:"iana",compressible:!0},"application/vnd.innopath.wamp.notification":{source:"iana"},"application/vnd.insors.igm":{source:"iana",extensions:["igm"]},"application/vnd.intercon.formnet":{source:"iana",extensions:["xpw","xpx"]},"application/vnd.intergeo":{source:"iana",extensions:["i2g"]},"application/vnd.intertrust.digibox":{source:"iana"},"application/vnd.intertrust.nncp":{source:"iana"},"application/vnd.intu.qbo":{source:"iana",extensions:["qbo"]},"application/vnd.intu.qfx":{source:"iana",extensions:["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.conceptitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.knowledgeitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.newsmessage+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.packageitem+xml":{source:"iana",compressible:!0},"application/vnd.iptc.g2.planningitem+xml":{source:"iana",compressible:!0},"application/vnd.ipunplugged.rcprofile":{source:"iana",extensions:["rcprofile"]},"application/vnd.irepository.package+xml":{source:"iana",compressible:!0,extensions:["irp"]},"application/vnd.is-xpr":{source:"iana",extensions:["xpr"]},"application/vnd.isac.fcs":{source:"iana",extensions:["fcs"]},"application/vnd.iso11783-10+zip":{source:"iana",compressible:!1},"application/vnd.jam":{source:"iana",extensions:["jam"]},"application/vnd.japannet-directory-service":{source:"iana"},"application/vnd.japannet-jpnstore-wakeup":{source:"iana"},"application/vnd.japannet-payment-wakeup":{source:"iana"},"application/vnd.japannet-registration":{source:"iana"},"application/vnd.japannet-registration-wakeup":{source:"iana"},"application/vnd.japannet-setstore-wakeup":{source:"iana"},"application/vnd.japannet-verification":{source:"iana"},"application/vnd.japannet-verification-wakeup":{source:"iana"},"application/vnd.jcp.javame.midlet-rms":{source:"iana",extensions:["rms"]},"application/vnd.jisp":{source:"iana",extensions:["jisp"]},"application/vnd.joost.joda-archive":{source:"iana",extensions:["joda"]},"application/vnd.jsk.isdn-ngn":{source:"iana"},"application/vnd.kahootz":{source:"iana",extensions:["ktz","ktr"]},"application/vnd.kde.karbon":{source:"iana",extensions:["karbon"]},"application/vnd.kde.kchart":{source:"iana",extensions:["chrt"]},"application/vnd.kde.kformula":{source:"iana",extensions:["kfo"]},"application/vnd.kde.kivio":{source:"iana",extensions:["flw"]},"application/vnd.kde.kontour":{source:"iana",extensions:["kon"]},"application/vnd.kde.kpresenter":{source:"iana",extensions:["kpr","kpt"]},"application/vnd.kde.kspread":{source:"iana",extensions:["ksp"]},"application/vnd.kde.kword":{source:"iana",extensions:["kwd","kwt"]},"application/vnd.kenameaapp":{source:"iana",extensions:["htke"]},"application/vnd.kidspiration":{source:"iana",extensions:["kia"]},"application/vnd.kinar":{source:"iana",extensions:["kne","knp"]},"application/vnd.koan":{source:"iana",extensions:["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{source:"iana",extensions:["sse"]},"application/vnd.las":{source:"iana"},"application/vnd.las.las+json":{source:"iana",compressible:!0},"application/vnd.las.las+xml":{source:"iana",compressible:!0,extensions:["lasxml"]},"application/vnd.laszip":{source:"iana"},"application/vnd.leap+json":{source:"iana",compressible:!0},"application/vnd.liberty-request+xml":{source:"iana",compressible:!0},"application/vnd.llamagraphics.life-balance.desktop":{source:"iana",extensions:["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{source:"iana",compressible:!0,extensions:["lbe"]},"application/vnd.logipipe.circuit+zip":{source:"iana",compressible:!1},"application/vnd.loom":{source:"iana"},"application/vnd.lotus-1-2-3":{source:"iana",extensions:["123"]},"application/vnd.lotus-approach":{source:"iana",extensions:["apr"]},"application/vnd.lotus-freelance":{source:"iana",extensions:["pre"]},"application/vnd.lotus-notes":{source:"iana",extensions:["nsf"]},"application/vnd.lotus-organizer":{source:"iana",extensions:["org"]},"application/vnd.lotus-screencam":{source:"iana",extensions:["scm"]},"application/vnd.lotus-wordpro":{source:"iana",extensions:["lwp"]},"application/vnd.macports.portpkg":{source:"iana",extensions:["portpkg"]},"application/vnd.mapbox-vector-tile":{source:"iana",extensions:["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.conftoken+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.license+xml":{source:"iana",compressible:!0},"application/vnd.marlin.drm.mdcf":{source:"iana"},"application/vnd.mason+json":{source:"iana",compressible:!0},"application/vnd.maxar.archive.3tz+zip":{source:"iana",compressible:!1},"application/vnd.maxmind.maxmind-db":{source:"iana"},"application/vnd.mcd":{source:"iana",extensions:["mcd"]},"application/vnd.medcalcdata":{source:"iana",extensions:["mc1"]},"application/vnd.mediastation.cdkey":{source:"iana",extensions:["cdkey"]},"application/vnd.meridian-slingshot":{source:"iana"},"application/vnd.mfer":{source:"iana",extensions:["mwf"]},"application/vnd.mfmp":{source:"iana",extensions:["mfm"]},"application/vnd.micro+json":{source:"iana",compressible:!0},"application/vnd.micrografx.flo":{source:"iana",extensions:["flo"]},"application/vnd.micrografx.igx":{source:"iana",extensions:["igx"]},"application/vnd.microsoft.portable-executable":{source:"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{source:"iana"},"application/vnd.miele+json":{source:"iana",compressible:!0},"application/vnd.mif":{source:"iana",extensions:["mif"]},"application/vnd.minisoft-hp3000-save":{source:"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{source:"iana"},"application/vnd.mobius.daf":{source:"iana",extensions:["daf"]},"application/vnd.mobius.dis":{source:"iana",extensions:["dis"]},"application/vnd.mobius.mbk":{source:"iana",extensions:["mbk"]},"application/vnd.mobius.mqy":{source:"iana",extensions:["mqy"]},"application/vnd.mobius.msl":{source:"iana",extensions:["msl"]},"application/vnd.mobius.plc":{source:"iana",extensions:["plc"]},"application/vnd.mobius.txf":{source:"iana",extensions:["txf"]},"application/vnd.mophun.application":{source:"iana",extensions:["mpn"]},"application/vnd.mophun.certificate":{source:"iana",extensions:["mpc"]},"application/vnd.motorola.flexsuite":{source:"iana"},"application/vnd.motorola.flexsuite.adsi":{source:"iana"},"application/vnd.motorola.flexsuite.fis":{source:"iana"},"application/vnd.motorola.flexsuite.gotap":{source:"iana"},"application/vnd.motorola.flexsuite.kmr":{source:"iana"},"application/vnd.motorola.flexsuite.ttc":{source:"iana"},"application/vnd.motorola.flexsuite.wem":{source:"iana"},"application/vnd.motorola.iprm":{source:"iana"},"application/vnd.mozilla.xul+xml":{source:"iana",compressible:!0,extensions:["xul"]},"application/vnd.ms-3mfdocument":{source:"iana"},"application/vnd.ms-artgalry":{source:"iana",extensions:["cil"]},"application/vnd.ms-asf":{source:"iana"},"application/vnd.ms-cab-compressed":{source:"iana",extensions:["cab"]},"application/vnd.ms-color.iccprofile":{source:"apache"},"application/vnd.ms-excel":{source:"iana",compressible:!1,extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{source:"iana",extensions:["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{source:"iana",extensions:["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{source:"iana",extensions:["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{source:"iana",extensions:["xltm"]},"application/vnd.ms-fontobject":{source:"iana",compressible:!0,extensions:["eot"]},"application/vnd.ms-htmlhelp":{source:"iana",extensions:["chm"]},"application/vnd.ms-ims":{source:"iana",extensions:["ims"]},"application/vnd.ms-lrm":{source:"iana",extensions:["lrm"]},"application/vnd.ms-office.activex+xml":{source:"iana",compressible:!0},"application/vnd.ms-officetheme":{source:"iana",extensions:["thmx"]},"application/vnd.ms-opentype":{source:"apache",compressible:!0},"application/vnd.ms-outlook":{compressible:!1,extensions:["msg"]},"application/vnd.ms-package.obfuscated-opentype":{source:"apache"},"application/vnd.ms-pki.seccat":{source:"apache",extensions:["cat"]},"application/vnd.ms-pki.stl":{source:"apache",extensions:["stl"]},"application/vnd.ms-playready.initiator+xml":{source:"iana",compressible:!0},"application/vnd.ms-powerpoint":{source:"iana",compressible:!1,extensions:["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{source:"iana",extensions:["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{source:"iana",extensions:["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{source:"iana",extensions:["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{source:"iana",extensions:["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{source:"iana",extensions:["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{source:"iana",compressible:!0},"application/vnd.ms-printing.printticket+xml":{source:"apache",compressible:!0},"application/vnd.ms-printschematicket+xml":{source:"iana",compressible:!0},"application/vnd.ms-project":{source:"iana",extensions:["mpp","mpt"]},"application/vnd.ms-tnef":{source:"iana"},"application/vnd.ms-windows.devicepairing":{source:"iana"},"application/vnd.ms-windows.nwprinting.oob":{source:"iana"},"application/vnd.ms-windows.printerpairing":{source:"iana"},"application/vnd.ms-windows.wsd.oob":{source:"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.lic-resp":{source:"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{source:"iana"},"application/vnd.ms-wmdrm.meter-resp":{source:"iana"},"application/vnd.ms-word.document.macroenabled.12":{source:"iana",extensions:["docm"]},"application/vnd.ms-word.template.macroenabled.12":{source:"iana",extensions:["dotm"]},"application/vnd.ms-works":{source:"iana",extensions:["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{source:"iana",extensions:["wpl"]},"application/vnd.ms-xpsdocument":{source:"iana",compressible:!1,extensions:["xps"]},"application/vnd.msa-disk-image":{source:"iana"},"application/vnd.mseq":{source:"iana",extensions:["mseq"]},"application/vnd.msign":{source:"iana"},"application/vnd.multiad.creator":{source:"iana"},"application/vnd.multiad.creator.cif":{source:"iana"},"application/vnd.music-niff":{source:"iana"},"application/vnd.musician":{source:"iana",extensions:["mus"]},"application/vnd.muvee.style":{source:"iana",extensions:["msty"]},"application/vnd.mynfc":{source:"iana",extensions:["taglet"]},"application/vnd.nacamar.ybrid+json":{source:"iana",compressible:!0},"application/vnd.ncd.control":{source:"iana"},"application/vnd.ncd.reference":{source:"iana"},"application/vnd.nearst.inv+json":{source:"iana",compressible:!0},"application/vnd.nebumind.line":{source:"iana"},"application/vnd.nervana":{source:"iana"},"application/vnd.netfpx":{source:"iana"},"application/vnd.neurolanguage.nlu":{source:"iana",extensions:["nlu"]},"application/vnd.nimn":{source:"iana"},"application/vnd.nintendo.nitro.rom":{source:"iana"},"application/vnd.nintendo.snes.rom":{source:"iana"},"application/vnd.nitf":{source:"iana",extensions:["ntf","nitf"]},"application/vnd.noblenet-directory":{source:"iana",extensions:["nnd"]},"application/vnd.noblenet-sealer":{source:"iana",extensions:["nns"]},"application/vnd.noblenet-web":{source:"iana",extensions:["nnw"]},"application/vnd.nokia.catalogs":{source:"iana"},"application/vnd.nokia.conml+wbxml":{source:"iana"},"application/vnd.nokia.conml+xml":{source:"iana",compressible:!0},"application/vnd.nokia.iptv.config+xml":{source:"iana",compressible:!0},"application/vnd.nokia.isds-radio-presets":{source:"iana"},"application/vnd.nokia.landmark+wbxml":{source:"iana"},"application/vnd.nokia.landmark+xml":{source:"iana",compressible:!0},"application/vnd.nokia.landmarkcollection+xml":{source:"iana",compressible:!0},"application/vnd.nokia.n-gage.ac+xml":{source:"iana",compressible:!0,extensions:["ac"]},"application/vnd.nokia.n-gage.data":{source:"iana",extensions:["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{source:"iana",extensions:["n-gage"]},"application/vnd.nokia.ncd":{source:"iana"},"application/vnd.nokia.pcd+wbxml":{source:"iana"},"application/vnd.nokia.pcd+xml":{source:"iana",compressible:!0},"application/vnd.nokia.radio-preset":{source:"iana",extensions:["rpst"]},"application/vnd.nokia.radio-presets":{source:"iana",extensions:["rpss"]},"application/vnd.novadigm.edm":{source:"iana",extensions:["edm"]},"application/vnd.novadigm.edx":{source:"iana",extensions:["edx"]},"application/vnd.novadigm.ext":{source:"iana",extensions:["ext"]},"application/vnd.ntt-local.content-share":{source:"iana"},"application/vnd.ntt-local.file-transfer":{source:"iana"},"application/vnd.ntt-local.ogw_remote-access":{source:"iana"},"application/vnd.ntt-local.sip-ta_remote":{source:"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{source:"iana"},"application/vnd.oasis.opendocument.chart":{source:"iana",extensions:["odc"]},"application/vnd.oasis.opendocument.chart-template":{source:"iana",extensions:["otc"]},"application/vnd.oasis.opendocument.database":{source:"iana",extensions:["odb"]},"application/vnd.oasis.opendocument.formula":{source:"iana",extensions:["odf"]},"application/vnd.oasis.opendocument.formula-template":{source:"iana",extensions:["odft"]},"application/vnd.oasis.opendocument.graphics":{source:"iana",compressible:!1,extensions:["odg"]},"application/vnd.oasis.opendocument.graphics-template":{source:"iana",extensions:["otg"]},"application/vnd.oasis.opendocument.image":{source:"iana",extensions:["odi"]},"application/vnd.oasis.opendocument.image-template":{source:"iana",extensions:["oti"]},"application/vnd.oasis.opendocument.presentation":{source:"iana",compressible:!1,extensions:["odp"]},"application/vnd.oasis.opendocument.presentation-template":{source:"iana",extensions:["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{source:"iana",compressible:!1,extensions:["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{source:"iana",extensions:["ots"]},"application/vnd.oasis.opendocument.text":{source:"iana",compressible:!1,extensions:["odt"]},"application/vnd.oasis.opendocument.text-master":{source:"iana",extensions:["odm"]},"application/vnd.oasis.opendocument.text-template":{source:"iana",extensions:["ott"]},"application/vnd.oasis.opendocument.text-web":{source:"iana",extensions:["oth"]},"application/vnd.obn":{source:"iana"},"application/vnd.ocf+cbor":{source:"iana"},"application/vnd.oci.image.manifest.v1+json":{source:"iana",compressible:!0},"application/vnd.oftn.l10n+json":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessdownload+xml":{source:"iana",compressible:!0},"application/vnd.oipf.contentaccessstreaming+xml":{source:"iana",compressible:!0},"application/vnd.oipf.cspg-hexbinary":{source:"iana"},"application/vnd.oipf.dae.svg+xml":{source:"iana",compressible:!0},"application/vnd.oipf.dae.xhtml+xml":{source:"iana",compressible:!0},"application/vnd.oipf.mippvcontrolmessage+xml":{source:"iana",compressible:!0},"application/vnd.oipf.pae.gem":{source:"iana"},"application/vnd.oipf.spdiscovery+xml":{source:"iana",compressible:!0},"application/vnd.oipf.spdlist+xml":{source:"iana",compressible:!0},"application/vnd.oipf.ueprofile+xml":{source:"iana",compressible:!0},"application/vnd.oipf.userprofile+xml":{source:"iana",compressible:!0},"application/vnd.olpc-sugar":{source:"iana",extensions:["xo"]},"application/vnd.oma-scws-config":{source:"iana"},"application/vnd.oma-scws-http-request":{source:"iana"},"application/vnd.oma-scws-http-response":{source:"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.drm-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.imd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.ltkm":{source:"iana"},"application/vnd.oma.bcast.notification+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.provisioningtrigger":{source:"iana"},"application/vnd.oma.bcast.sgboot":{source:"iana"},"application/vnd.oma.bcast.sgdd+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sgdu":{source:"iana"},"application/vnd.oma.bcast.simple-symbol-container":{source:"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.sprov+xml":{source:"iana",compressible:!0},"application/vnd.oma.bcast.stkm":{source:"iana"},"application/vnd.oma.cab-address-book+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-feature-handler+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-pcc+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-subs-invite+xml":{source:"iana",compressible:!0},"application/vnd.oma.cab-user-prefs+xml":{source:"iana",compressible:!0},"application/vnd.oma.dcd":{source:"iana"},"application/vnd.oma.dcdc":{source:"iana"},"application/vnd.oma.dd2+xml":{source:"iana",compressible:!0,extensions:["dd2"]},"application/vnd.oma.drm.risd+xml":{source:"iana",compressible:!0},"application/vnd.oma.group-usage-list+xml":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+cbor":{source:"iana"},"application/vnd.oma.lwm2m+json":{source:"iana",compressible:!0},"application/vnd.oma.lwm2m+tlv":{source:"iana"},"application/vnd.oma.pal+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.detailed-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.final-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.groups+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.invocation-descriptor+xml":{source:"iana",compressible:!0},"application/vnd.oma.poc.optimized-progress-report+xml":{source:"iana",compressible:!0},"application/vnd.oma.push":{source:"iana"},"application/vnd.oma.scidm.messages+xml":{source:"iana",compressible:!0},"application/vnd.oma.xcap-directory+xml":{source:"iana",compressible:!0},"application/vnd.omads-email+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-file+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omads-folder+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.omaloc-supl-init":{source:"iana"},"application/vnd.onepager":{source:"iana"},"application/vnd.onepagertamp":{source:"iana"},"application/vnd.onepagertamx":{source:"iana"},"application/vnd.onepagertat":{source:"iana"},"application/vnd.onepagertatp":{source:"iana"},"application/vnd.onepagertatx":{source:"iana"},"application/vnd.openblox.game+xml":{source:"iana",compressible:!0,extensions:["obgx"]},"application/vnd.openblox.game-binary":{source:"iana"},"application/vnd.openeye.oeb":{source:"iana"},"application/vnd.openofficeorg.extension":{source:"apache",extensions:["oxt"]},"application/vnd.openstreetmap.data+xml":{source:"iana",compressible:!0,extensions:["osm"]},"application/vnd.opentimestamps.ots":{source:"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawing+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{source:"iana",compressible:!1,extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slide":{source:"iana",extensions:["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{source:"iana",extensions:["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.template":{source:"iana",extensions:["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{source:"iana",compressible:!1,extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{source:"iana",extensions:["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.theme+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.vmldrawing":{source:"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{source:"iana",compressible:!1,extensions:["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{source:"iana",extensions:["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.core-properties+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{source:"iana",compressible:!0},"application/vnd.openxmlformats-package.relationships+xml":{source:"iana",compressible:!0},"application/vnd.oracle.resource+json":{source:"iana",compressible:!0},"application/vnd.orange.indata":{source:"iana"},"application/vnd.osa.netdeploy":{source:"iana"},"application/vnd.osgeo.mapguide.package":{source:"iana",extensions:["mgp"]},"application/vnd.osgi.bundle":{source:"iana"},"application/vnd.osgi.dp":{source:"iana",extensions:["dp"]},"application/vnd.osgi.subsystem":{source:"iana",extensions:["esa"]},"application/vnd.otps.ct-kip+xml":{source:"iana",compressible:!0},"application/vnd.oxli.countgraph":{source:"iana"},"application/vnd.pagerduty+json":{source:"iana",compressible:!0},"application/vnd.palm":{source:"iana",extensions:["pdb","pqa","oprc"]},"application/vnd.panoply":{source:"iana"},"application/vnd.paos.xml":{source:"iana"},"application/vnd.patentdive":{source:"iana"},"application/vnd.patientecommsdoc":{source:"iana"},"application/vnd.pawaafile":{source:"iana",extensions:["paw"]},"application/vnd.pcos":{source:"iana"},"application/vnd.pg.format":{source:"iana",extensions:["str"]},"application/vnd.pg.osasli":{source:"iana",extensions:["ei6"]},"application/vnd.piaccess.application-licence":{source:"iana"},"application/vnd.picsel":{source:"iana",extensions:["efif"]},"application/vnd.pmi.widget":{source:"iana",extensions:["wg"]},"application/vnd.poc.group-advertisement+xml":{source:"iana",compressible:!0},"application/vnd.pocketlearn":{source:"iana",extensions:["plf"]},"application/vnd.powerbuilder6":{source:"iana",extensions:["pbd"]},"application/vnd.powerbuilder6-s":{source:"iana"},"application/vnd.powerbuilder7":{source:"iana"},"application/vnd.powerbuilder7-s":{source:"iana"},"application/vnd.powerbuilder75":{source:"iana"},"application/vnd.powerbuilder75-s":{source:"iana"},"application/vnd.preminet":{source:"iana"},"application/vnd.previewsystems.box":{source:"iana",extensions:["box"]},"application/vnd.proteus.magazine":{source:"iana",extensions:["mgz"]},"application/vnd.psfs":{source:"iana"},"application/vnd.publishare-delta-tree":{source:"iana",extensions:["qps"]},"application/vnd.pvi.ptid1":{source:"iana",extensions:["ptid"]},"application/vnd.pwg-multiplexed":{source:"iana"},"application/vnd.pwg-xhtml-print+xml":{source:"iana",compressible:!0},"application/vnd.qualcomm.brew-app-res":{source:"iana"},"application/vnd.quarantainenet":{source:"iana"},"application/vnd.quark.quarkxpress":{source:"iana",extensions:["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{source:"iana"},"application/vnd.radisys.moml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-conn+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-audit-stream+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-conf+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-base+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-detect+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-group+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-speech+xml":{source:"iana",compressible:!0},"application/vnd.radisys.msml-dialog-transform+xml":{source:"iana",compressible:!0},"application/vnd.rainstor.data":{source:"iana"},"application/vnd.rapid":{source:"iana"},"application/vnd.rar":{source:"iana",extensions:["rar"]},"application/vnd.realvnc.bed":{source:"iana",extensions:["bed"]},"application/vnd.recordare.musicxml":{source:"iana",extensions:["mxl"]},"application/vnd.recordare.musicxml+xml":{source:"iana",compressible:!0,extensions:["musicxml"]},"application/vnd.renlearn.rlprint":{source:"iana"},"application/vnd.resilient.logic":{source:"iana"},"application/vnd.restful+json":{source:"iana",compressible:!0},"application/vnd.rig.cryptonote":{source:"iana",extensions:["cryptonote"]},"application/vnd.rim.cod":{source:"apache",extensions:["cod"]},"application/vnd.rn-realmedia":{source:"apache",extensions:["rm"]},"application/vnd.rn-realmedia-vbr":{source:"apache",extensions:["rmvb"]},"application/vnd.route66.link66+xml":{source:"iana",compressible:!0,extensions:["link66"]},"application/vnd.rs-274x":{source:"iana"},"application/vnd.ruckus.download":{source:"iana"},"application/vnd.s3sms":{source:"iana"},"application/vnd.sailingtracker.track":{source:"iana",extensions:["st"]},"application/vnd.sar":{source:"iana"},"application/vnd.sbm.cid":{source:"iana"},"application/vnd.sbm.mid2":{source:"iana"},"application/vnd.scribus":{source:"iana"},"application/vnd.sealed.3df":{source:"iana"},"application/vnd.sealed.csf":{source:"iana"},"application/vnd.sealed.doc":{source:"iana"},"application/vnd.sealed.eml":{source:"iana"},"application/vnd.sealed.mht":{source:"iana"},"application/vnd.sealed.net":{source:"iana"},"application/vnd.sealed.ppt":{source:"iana"},"application/vnd.sealed.tiff":{source:"iana"},"application/vnd.sealed.xls":{source:"iana"},"application/vnd.sealedmedia.softseal.html":{source:"iana"},"application/vnd.sealedmedia.softseal.pdf":{source:"iana"},"application/vnd.seemail":{source:"iana",extensions:["see"]},"application/vnd.seis+json":{source:"iana",compressible:!0},"application/vnd.sema":{source:"iana",extensions:["sema"]},"application/vnd.semd":{source:"iana",extensions:["semd"]},"application/vnd.semf":{source:"iana",extensions:["semf"]},"application/vnd.shade-save-file":{source:"iana"},"application/vnd.shana.informed.formdata":{source:"iana",extensions:["ifm"]},"application/vnd.shana.informed.formtemplate":{source:"iana",extensions:["itp"]},"application/vnd.shana.informed.interchange":{source:"iana",extensions:["iif"]},"application/vnd.shana.informed.package":{source:"iana",extensions:["ipk"]},"application/vnd.shootproof+json":{source:"iana",compressible:!0},"application/vnd.shopkick+json":{source:"iana",compressible:!0},"application/vnd.shp":{source:"iana"},"application/vnd.shx":{source:"iana"},"application/vnd.sigrok.session":{source:"iana"},"application/vnd.simtech-mindmapper":{source:"iana",extensions:["twd","twds"]},"application/vnd.siren+json":{source:"iana",compressible:!0},"application/vnd.smaf":{source:"iana",extensions:["mmf"]},"application/vnd.smart.notebook":{source:"iana"},"application/vnd.smart.teacher":{source:"iana",extensions:["teacher"]},"application/vnd.snesdev-page-table":{source:"iana"},"application/vnd.software602.filler.form+xml":{source:"iana",compressible:!0,extensions:["fo"]},"application/vnd.software602.filler.form-xml-zip":{source:"iana"},"application/vnd.solent.sdkm+xml":{source:"iana",compressible:!0,extensions:["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{source:"iana",extensions:["dxp"]},"application/vnd.spotfire.sfs":{source:"iana",extensions:["sfs"]},"application/vnd.sqlite3":{source:"iana"},"application/vnd.sss-cod":{source:"iana"},"application/vnd.sss-dtf":{source:"iana"},"application/vnd.sss-ntf":{source:"iana"},"application/vnd.stardivision.calc":{source:"apache",extensions:["sdc"]},"application/vnd.stardivision.draw":{source:"apache",extensions:["sda"]},"application/vnd.stardivision.impress":{source:"apache",extensions:["sdd"]},"application/vnd.stardivision.math":{source:"apache",extensions:["smf"]},"application/vnd.stardivision.writer":{source:"apache",extensions:["sdw","vor"]},"application/vnd.stardivision.writer-global":{source:"apache",extensions:["sgl"]},"application/vnd.stepmania.package":{source:"iana",extensions:["smzip"]},"application/vnd.stepmania.stepchart":{source:"iana",extensions:["sm"]},"application/vnd.street-stream":{source:"iana"},"application/vnd.sun.wadl+xml":{source:"iana",compressible:!0,extensions:["wadl"]},"application/vnd.sun.xml.calc":{source:"apache",extensions:["sxc"]},"application/vnd.sun.xml.calc.template":{source:"apache",extensions:["stc"]},"application/vnd.sun.xml.draw":{source:"apache",extensions:["sxd"]},"application/vnd.sun.xml.draw.template":{source:"apache",extensions:["std"]},"application/vnd.sun.xml.impress":{source:"apache",extensions:["sxi"]},"application/vnd.sun.xml.impress.template":{source:"apache",extensions:["sti"]},"application/vnd.sun.xml.math":{source:"apache",extensions:["sxm"]},"application/vnd.sun.xml.writer":{source:"apache",extensions:["sxw"]},"application/vnd.sun.xml.writer.global":{source:"apache",extensions:["sxg"]},"application/vnd.sun.xml.writer.template":{source:"apache",extensions:["stw"]},"application/vnd.sus-calendar":{source:"iana",extensions:["sus","susp"]},"application/vnd.svd":{source:"iana",extensions:["svd"]},"application/vnd.swiftview-ics":{source:"iana"},"application/vnd.sycle+xml":{source:"iana",compressible:!0},"application/vnd.syft+json":{source:"iana",compressible:!0},"application/vnd.symbian.install":{source:"apache",extensions:["sis","sisx"]},"application/vnd.syncml+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xsm"]},"application/vnd.syncml.dm+wbxml":{source:"iana",charset:"UTF-8",extensions:["bdm"]},"application/vnd.syncml.dm+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["xdm"]},"application/vnd.syncml.dm.notification":{source:"iana"},"application/vnd.syncml.dmddf+wbxml":{source:"iana"},"application/vnd.syncml.dmddf+xml":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{source:"iana"},"application/vnd.syncml.dmtnds+xml":{source:"iana",charset:"UTF-8",compressible:!0},"application/vnd.syncml.ds.notification":{source:"iana"},"application/vnd.tableschema+json":{source:"iana",compressible:!0},"application/vnd.tao.intent-module-archive":{source:"iana",extensions:["tao"]},"application/vnd.tcpdump.pcap":{source:"iana",extensions:["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{source:"iana",compressible:!0},"application/vnd.tmd.mediaflex.api+xml":{source:"iana",compressible:!0},"application/vnd.tml":{source:"iana"},"application/vnd.tmobile-livetv":{source:"iana",extensions:["tmo"]},"application/vnd.tri.onesource":{source:"iana"},"application/vnd.trid.tpt":{source:"iana",extensions:["tpt"]},"application/vnd.triscape.mxs":{source:"iana",extensions:["mxs"]},"application/vnd.trueapp":{source:"iana",extensions:["tra"]},"application/vnd.truedoc":{source:"iana"},"application/vnd.ubisoft.webplayer":{source:"iana"},"application/vnd.ufdl":{source:"iana",extensions:["ufd","ufdl"]},"application/vnd.uiq.theme":{source:"iana",extensions:["utz"]},"application/vnd.umajin":{source:"iana",extensions:["umj"]},"application/vnd.unity":{source:"iana",extensions:["unityweb"]},"application/vnd.uoml+xml":{source:"iana",compressible:!0,extensions:["uoml"]},"application/vnd.uplanet.alert":{source:"iana"},"application/vnd.uplanet.alert-wbxml":{source:"iana"},"application/vnd.uplanet.bearer-choice":{source:"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{source:"iana"},"application/vnd.uplanet.cacheop":{source:"iana"},"application/vnd.uplanet.cacheop-wbxml":{source:"iana"},"application/vnd.uplanet.channel":{source:"iana"},"application/vnd.uplanet.channel-wbxml":{source:"iana"},"application/vnd.uplanet.list":{source:"iana"},"application/vnd.uplanet.list-wbxml":{source:"iana"},"application/vnd.uplanet.listcmd":{source:"iana"},"application/vnd.uplanet.listcmd-wbxml":{source:"iana"},"application/vnd.uplanet.signal":{source:"iana"},"application/vnd.uri-map":{source:"iana"},"application/vnd.valve.source.material":{source:"iana"},"application/vnd.vcx":{source:"iana",extensions:["vcx"]},"application/vnd.vd-study":{source:"iana"},"application/vnd.vectorworks":{source:"iana"},"application/vnd.vel+json":{source:"iana",compressible:!0},"application/vnd.verimatrix.vcas":{source:"iana"},"application/vnd.veritone.aion+json":{source:"iana",compressible:!0},"application/vnd.veryant.thin":{source:"iana"},"application/vnd.ves.encrypted":{source:"iana"},"application/vnd.vidsoft.vidconference":{source:"iana"},"application/vnd.visio":{source:"iana",extensions:["vsd","vst","vss","vsw"]},"application/vnd.visionary":{source:"iana",extensions:["vis"]},"application/vnd.vividence.scriptfile":{source:"iana"},"application/vnd.vsf":{source:"iana",extensions:["vsf"]},"application/vnd.wap.sic":{source:"iana"},"application/vnd.wap.slc":{source:"iana"},"application/vnd.wap.wbxml":{source:"iana",charset:"UTF-8",extensions:["wbxml"]},"application/vnd.wap.wmlc":{source:"iana",extensions:["wmlc"]},"application/vnd.wap.wmlscriptc":{source:"iana",extensions:["wmlsc"]},"application/vnd.webturbo":{source:"iana",extensions:["wtb"]},"application/vnd.wfa.dpp":{source:"iana"},"application/vnd.wfa.p2p":{source:"iana"},"application/vnd.wfa.wsc":{source:"iana"},"application/vnd.windows.devicepairing":{source:"iana"},"application/vnd.wmc":{source:"iana"},"application/vnd.wmf.bootstrap":{source:"iana"},"application/vnd.wolfram.mathematica":{source:"iana"},"application/vnd.wolfram.mathematica.package":{source:"iana"},"application/vnd.wolfram.player":{source:"iana",extensions:["nbp"]},"application/vnd.wordperfect":{source:"iana",extensions:["wpd"]},"application/vnd.wqd":{source:"iana",extensions:["wqd"]},"application/vnd.wrq-hp3000-labelled":{source:"iana"},"application/vnd.wt.stf":{source:"iana",extensions:["stf"]},"application/vnd.wv.csp+wbxml":{source:"iana"},"application/vnd.wv.csp+xml":{source:"iana",compressible:!0},"application/vnd.wv.ssp+xml":{source:"iana",compressible:!0},"application/vnd.xacml+json":{source:"iana",compressible:!0},"application/vnd.xara":{source:"iana",extensions:["xar"]},"application/vnd.xfdl":{source:"iana",extensions:["xfdl"]},"application/vnd.xfdl.webform":{source:"iana"},"application/vnd.xmi+xml":{source:"iana",compressible:!0},"application/vnd.xmpie.cpkg":{source:"iana"},"application/vnd.xmpie.dpkg":{source:"iana"},"application/vnd.xmpie.plan":{source:"iana"},"application/vnd.xmpie.ppkg":{source:"iana"},"application/vnd.xmpie.xlim":{source:"iana"},"application/vnd.yamaha.hv-dic":{source:"iana",extensions:["hvd"]},"application/vnd.yamaha.hv-script":{source:"iana",extensions:["hvs"]},"application/vnd.yamaha.hv-voice":{source:"iana",extensions:["hvp"]},"application/vnd.yamaha.openscoreformat":{source:"iana",extensions:["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{source:"iana",compressible:!0,extensions:["osfpvg"]},"application/vnd.yamaha.remote-setup":{source:"iana"},"application/vnd.yamaha.smaf-audio":{source:"iana",extensions:["saf"]},"application/vnd.yamaha.smaf-phrase":{source:"iana",extensions:["spf"]},"application/vnd.yamaha.through-ngn":{source:"iana"},"application/vnd.yamaha.tunnel-udpencap":{source:"iana"},"application/vnd.yaoweme":{source:"iana"},"application/vnd.yellowriver-custom-menu":{source:"iana",extensions:["cmp"]},"application/vnd.youtube.yt":{source:"iana"},"application/vnd.zul":{source:"iana",extensions:["zir","zirz"]},"application/vnd.zzazz.deck+xml":{source:"iana",compressible:!0,extensions:["zaz"]},"application/voicexml+xml":{source:"iana",compressible:!0,extensions:["vxml"]},"application/voucher-cms+json":{source:"iana",compressible:!0},"application/vq-rtcpxr":{source:"iana"},"application/wasm":{source:"iana",compressible:!0,extensions:["wasm"]},"application/watcherinfo+xml":{source:"iana",compressible:!0,extensions:["wif"]},"application/webpush-options+json":{source:"iana",compressible:!0},"application/whoispp-query":{source:"iana"},"application/whoispp-response":{source:"iana"},"application/widget":{source:"iana",extensions:["wgt"]},"application/winhlp":{source:"apache",extensions:["hlp"]},"application/wita":{source:"iana"},"application/wordperfect5.1":{source:"iana"},"application/wsdl+xml":{source:"iana",compressible:!0,extensions:["wsdl"]},"application/wspolicy+xml":{source:"iana",compressible:!0,extensions:["wspolicy"]},"application/x-7z-compressed":{source:"apache",compressible:!1,extensions:["7z"]},"application/x-abiword":{source:"apache",extensions:["abw"]},"application/x-ace-compressed":{source:"apache",extensions:["ace"]},"application/x-amf":{source:"apache"},"application/x-apple-diskimage":{source:"apache",extensions:["dmg"]},"application/x-arj":{compressible:!1,extensions:["arj"]},"application/x-authorware-bin":{source:"apache",extensions:["aab","x32","u32","vox"]},"application/x-authorware-map":{source:"apache",extensions:["aam"]},"application/x-authorware-seg":{source:"apache",extensions:["aas"]},"application/x-bcpio":{source:"apache",extensions:["bcpio"]},"application/x-bdoc":{compressible:!1,extensions:["bdoc"]},"application/x-bittorrent":{source:"apache",extensions:["torrent"]},"application/x-blorb":{source:"apache",extensions:["blb","blorb"]},"application/x-bzip":{source:"apache",compressible:!1,extensions:["bz"]},"application/x-bzip2":{source:"apache",compressible:!1,extensions:["bz2","boz"]},"application/x-cbr":{source:"apache",extensions:["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{source:"apache",extensions:["vcd"]},"application/x-cfs-compressed":{source:"apache",extensions:["cfs"]},"application/x-chat":{source:"apache",extensions:["chat"]},"application/x-chess-pgn":{source:"apache",extensions:["pgn"]},"application/x-chrome-extension":{extensions:["crx"]},"application/x-cocoa":{source:"nginx",extensions:["cco"]},"application/x-compress":{source:"apache"},"application/x-conference":{source:"apache",extensions:["nsc"]},"application/x-cpio":{source:"apache",extensions:["cpio"]},"application/x-csh":{source:"apache",extensions:["csh"]},"application/x-deb":{compressible:!1},"application/x-debian-package":{source:"apache",extensions:["deb","udeb"]},"application/x-dgc-compressed":{source:"apache",extensions:["dgc"]},"application/x-director":{source:"apache",extensions:["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{source:"apache",extensions:["wad"]},"application/x-dtbncx+xml":{source:"apache",compressible:!0,extensions:["ncx"]},"application/x-dtbook+xml":{source:"apache",compressible:!0,extensions:["dtb"]},"application/x-dtbresource+xml":{source:"apache",compressible:!0,extensions:["res"]},"application/x-dvi":{source:"apache",compressible:!1,extensions:["dvi"]},"application/x-envoy":{source:"apache",extensions:["evy"]},"application/x-eva":{source:"apache",extensions:["eva"]},"application/x-font-bdf":{source:"apache",extensions:["bdf"]},"application/x-font-dos":{source:"apache"},"application/x-font-framemaker":{source:"apache"},"application/x-font-ghostscript":{source:"apache",extensions:["gsf"]},"application/x-font-libgrx":{source:"apache"},"application/x-font-linux-psf":{source:"apache",extensions:["psf"]},"application/x-font-pcf":{source:"apache",extensions:["pcf"]},"application/x-font-snf":{source:"apache",extensions:["snf"]},"application/x-font-speedo":{source:"apache"},"application/x-font-sunos-news":{source:"apache"},"application/x-font-type1":{source:"apache",extensions:["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{source:"apache"},"application/x-freearc":{source:"apache",extensions:["arc"]},"application/x-futuresplash":{source:"apache",extensions:["spl"]},"application/x-gca-compressed":{source:"apache",extensions:["gca"]},"application/x-glulx":{source:"apache",extensions:["ulx"]},"application/x-gnumeric":{source:"apache",extensions:["gnumeric"]},"application/x-gramps-xml":{source:"apache",extensions:["gramps"]},"application/x-gtar":{source:"apache",extensions:["gtar"]},"application/x-gzip":{source:"apache"},"application/x-hdf":{source:"apache",extensions:["hdf"]},"application/x-httpd-php":{compressible:!0,extensions:["php"]},"application/x-install-instructions":{source:"apache",extensions:["install"]},"application/x-iso9660-image":{source:"apache",extensions:["iso"]},"application/x-iwork-keynote-sffkey":{extensions:["key"]},"application/x-iwork-numbers-sffnumbers":{extensions:["numbers"]},"application/x-iwork-pages-sffpages":{extensions:["pages"]},"application/x-java-archive-diff":{source:"nginx",extensions:["jardiff"]},"application/x-java-jnlp-file":{source:"apache",compressible:!1,extensions:["jnlp"]},"application/x-javascript":{compressible:!0},"application/x-keepass2":{extensions:["kdbx"]},"application/x-latex":{source:"apache",compressible:!1,extensions:["latex"]},"application/x-lua-bytecode":{extensions:["luac"]},"application/x-lzh-compressed":{source:"apache",extensions:["lzh","lha"]},"application/x-makeself":{source:"nginx",extensions:["run"]},"application/x-mie":{source:"apache",extensions:["mie"]},"application/x-mobipocket-ebook":{source:"apache",extensions:["prc","mobi"]},"application/x-mpegurl":{compressible:!1},"application/x-ms-application":{source:"apache",extensions:["application"]},"application/x-ms-shortcut":{source:"apache",extensions:["lnk"]},"application/x-ms-wmd":{source:"apache",extensions:["wmd"]},"application/x-ms-wmz":{source:"apache",extensions:["wmz"]},"application/x-ms-xbap":{source:"apache",extensions:["xbap"]},"application/x-msaccess":{source:"apache",extensions:["mdb"]},"application/x-msbinder":{source:"apache",extensions:["obd"]},"application/x-mscardfile":{source:"apache",extensions:["crd"]},"application/x-msclip":{source:"apache",extensions:["clp"]},"application/x-msdos-program":{extensions:["exe"]},"application/x-msdownload":{source:"apache",extensions:["exe","dll","com","bat","msi"]},"application/x-msmediaview":{source:"apache",extensions:["mvb","m13","m14"]},"application/x-msmetafile":{source:"apache",extensions:["wmf","wmz","emf","emz"]},"application/x-msmoney":{source:"apache",extensions:["mny"]},"application/x-mspublisher":{source:"apache",extensions:["pub"]},"application/x-msschedule":{source:"apache",extensions:["scd"]},"application/x-msterminal":{source:"apache",extensions:["trm"]},"application/x-mswrite":{source:"apache",extensions:["wri"]},"application/x-netcdf":{source:"apache",extensions:["nc","cdf"]},"application/x-ns-proxy-autoconfig":{compressible:!0,extensions:["pac"]},"application/x-nzb":{source:"apache",extensions:["nzb"]},"application/x-perl":{source:"nginx",extensions:["pl","pm"]},"application/x-pilot":{source:"nginx",extensions:["prc","pdb"]},"application/x-pkcs12":{source:"apache",compressible:!1,extensions:["p12","pfx"]},"application/x-pkcs7-certificates":{source:"apache",extensions:["p7b","spc"]},"application/x-pkcs7-certreqresp":{source:"apache",extensions:["p7r"]},"application/x-pki-message":{source:"iana"},"application/x-rar-compressed":{source:"apache",compressible:!1,extensions:["rar"]},"application/x-redhat-package-manager":{source:"nginx",extensions:["rpm"]},"application/x-research-info-systems":{source:"apache",extensions:["ris"]},"application/x-sea":{source:"nginx",extensions:["sea"]},"application/x-sh":{source:"apache",compressible:!0,extensions:["sh"]},"application/x-shar":{source:"apache",extensions:["shar"]},"application/x-shockwave-flash":{source:"apache",compressible:!1,extensions:["swf"]},"application/x-silverlight-app":{source:"apache",extensions:["xap"]},"application/x-sql":{source:"apache",extensions:["sql"]},"application/x-stuffit":{source:"apache",compressible:!1,extensions:["sit"]},"application/x-stuffitx":{source:"apache",extensions:["sitx"]},"application/x-subrip":{source:"apache",extensions:["srt"]},"application/x-sv4cpio":{source:"apache",extensions:["sv4cpio"]},"application/x-sv4crc":{source:"apache",extensions:["sv4crc"]},"application/x-t3vm-image":{source:"apache",extensions:["t3"]},"application/x-tads":{source:"apache",extensions:["gam"]},"application/x-tar":{source:"apache",compressible:!0,extensions:["tar"]},"application/x-tcl":{source:"apache",extensions:["tcl","tk"]},"application/x-tex":{source:"apache",extensions:["tex"]},"application/x-tex-tfm":{source:"apache",extensions:["tfm"]},"application/x-texinfo":{source:"apache",extensions:["texinfo","texi"]},"application/x-tgif":{source:"apache",extensions:["obj"]},"application/x-ustar":{source:"apache",extensions:["ustar"]},"application/x-virtualbox-hdd":{compressible:!0,extensions:["hdd"]},"application/x-virtualbox-ova":{compressible:!0,extensions:["ova"]},"application/x-virtualbox-ovf":{compressible:!0,extensions:["ovf"]},"application/x-virtualbox-vbox":{compressible:!0,extensions:["vbox"]},"application/x-virtualbox-vbox-extpack":{compressible:!1,extensions:["vbox-extpack"]},"application/x-virtualbox-vdi":{compressible:!0,extensions:["vdi"]},"application/x-virtualbox-vhd":{compressible:!0,extensions:["vhd"]},"application/x-virtualbox-vmdk":{compressible:!0,extensions:["vmdk"]},"application/x-wais-source":{source:"apache",extensions:["src"]},"application/x-web-app-manifest+json":{compressible:!0,extensions:["webapp"]},"application/x-www-form-urlencoded":{source:"iana",compressible:!0},"application/x-x509-ca-cert":{source:"iana",extensions:["der","crt","pem"]},"application/x-x509-ca-ra-cert":{source:"iana"},"application/x-x509-next-ca-cert":{source:"iana"},"application/x-xfig":{source:"apache",extensions:["fig"]},"application/x-xliff+xml":{source:"apache",compressible:!0,extensions:["xlf"]},"application/x-xpinstall":{source:"apache",compressible:!1,extensions:["xpi"]},"application/x-xz":{source:"apache",extensions:["xz"]},"application/x-zmachine":{source:"apache",extensions:["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{source:"iana"},"application/xacml+xml":{source:"iana",compressible:!0},"application/xaml+xml":{source:"apache",compressible:!0,extensions:["xaml"]},"application/xcap-att+xml":{source:"iana",compressible:!0,extensions:["xav"]},"application/xcap-caps+xml":{source:"iana",compressible:!0,extensions:["xca"]},"application/xcap-diff+xml":{source:"iana",compressible:!0,extensions:["xdf"]},"application/xcap-el+xml":{source:"iana",compressible:!0,extensions:["xel"]},"application/xcap-error+xml":{source:"iana",compressible:!0},"application/xcap-ns+xml":{source:"iana",compressible:!0,extensions:["xns"]},"application/xcon-conference-info+xml":{source:"iana",compressible:!0},"application/xcon-conference-info-diff+xml":{source:"iana",compressible:!0},"application/xenc+xml":{source:"iana",compressible:!0,extensions:["xenc"]},"application/xhtml+xml":{source:"iana",compressible:!0,extensions:["xhtml","xht"]},"application/xhtml-voice+xml":{source:"apache",compressible:!0},"application/xliff+xml":{source:"iana",compressible:!0,extensions:["xlf"]},"application/xml":{source:"iana",compressible:!0,extensions:["xml","xsl","xsd","rng"]},"application/xml-dtd":{source:"iana",compressible:!0,extensions:["dtd"]},"application/xml-external-parsed-entity":{source:"iana"},"application/xml-patch+xml":{source:"iana",compressible:!0},"application/xmpp+xml":{source:"iana",compressible:!0},"application/xop+xml":{source:"iana",compressible:!0,extensions:["xop"]},"application/xproc+xml":{source:"apache",compressible:!0,extensions:["xpl"]},"application/xslt+xml":{source:"iana",compressible:!0,extensions:["xsl","xslt"]},"application/xspf+xml":{source:"apache",compressible:!0,extensions:["xspf"]},"application/xv+xml":{source:"iana",compressible:!0,extensions:["mxml","xhvml","xvml","xvm"]},"application/yang":{source:"iana",extensions:["yang"]},"application/yang-data+json":{source:"iana",compressible:!0},"application/yang-data+xml":{source:"iana",compressible:!0},"application/yang-patch+json":{source:"iana",compressible:!0},"application/yang-patch+xml":{source:"iana",compressible:!0},"application/yin+xml":{source:"iana",compressible:!0,extensions:["yin"]},"application/zip":{source:"iana",compressible:!1,extensions:["zip"]},"application/zlib":{source:"iana"},"application/zstd":{source:"iana"},"audio/1d-interleaved-parityfec":{source:"iana"},"audio/32kadpcm":{source:"iana"},"audio/3gpp":{source:"iana",compressible:!1,extensions:["3gpp"]},"audio/3gpp2":{source:"iana"},"audio/aac":{source:"iana"},"audio/ac3":{source:"iana"},"audio/adpcm":{source:"apache",extensions:["adp"]},"audio/amr":{source:"iana",extensions:["amr"]},"audio/amr-wb":{source:"iana"},"audio/amr-wb+":{source:"iana"},"audio/aptx":{source:"iana"},"audio/asc":{source:"iana"},"audio/atrac-advanced-lossless":{source:"iana"},"audio/atrac-x":{source:"iana"},"audio/atrac3":{source:"iana"},"audio/basic":{source:"iana",compressible:!1,extensions:["au","snd"]},"audio/bv16":{source:"iana"},"audio/bv32":{source:"iana"},"audio/clearmode":{source:"iana"},"audio/cn":{source:"iana"},"audio/dat12":{source:"iana"},"audio/dls":{source:"iana"},"audio/dsr-es201108":{source:"iana"},"audio/dsr-es202050":{source:"iana"},"audio/dsr-es202211":{source:"iana"},"audio/dsr-es202212":{source:"iana"},"audio/dv":{source:"iana"},"audio/dvi4":{source:"iana"},"audio/eac3":{source:"iana"},"audio/encaprtp":{source:"iana"},"audio/evrc":{source:"iana"},"audio/evrc-qcp":{source:"iana"},"audio/evrc0":{source:"iana"},"audio/evrc1":{source:"iana"},"audio/evrcb":{source:"iana"},"audio/evrcb0":{source:"iana"},"audio/evrcb1":{source:"iana"},"audio/evrcnw":{source:"iana"},"audio/evrcnw0":{source:"iana"},"audio/evrcnw1":{source:"iana"},"audio/evrcwb":{source:"iana"},"audio/evrcwb0":{source:"iana"},"audio/evrcwb1":{source:"iana"},"audio/evs":{source:"iana"},"audio/flexfec":{source:"iana"},"audio/fwdred":{source:"iana"},"audio/g711-0":{source:"iana"},"audio/g719":{source:"iana"},"audio/g722":{source:"iana"},"audio/g7221":{source:"iana"},"audio/g723":{source:"iana"},"audio/g726-16":{source:"iana"},"audio/g726-24":{source:"iana"},"audio/g726-32":{source:"iana"},"audio/g726-40":{source:"iana"},"audio/g728":{source:"iana"},"audio/g729":{source:"iana"},"audio/g7291":{source:"iana"},"audio/g729d":{source:"iana"},"audio/g729e":{source:"iana"},"audio/gsm":{source:"iana"},"audio/gsm-efr":{source:"iana"},"audio/gsm-hr-08":{source:"iana"},"audio/ilbc":{source:"iana"},"audio/ip-mr_v2.5":{source:"iana"},"audio/isac":{source:"apache"},"audio/l16":{source:"iana"},"audio/l20":{source:"iana"},"audio/l24":{source:"iana",compressible:!1},"audio/l8":{source:"iana"},"audio/lpc":{source:"iana"},"audio/melp":{source:"iana"},"audio/melp1200":{source:"iana"},"audio/melp2400":{source:"iana"},"audio/melp600":{source:"iana"},"audio/mhas":{source:"iana"},"audio/midi":{source:"apache",extensions:["mid","midi","kar","rmi"]},"audio/mobile-xmf":{source:"iana",extensions:["mxmf"]},"audio/mp3":{compressible:!1,extensions:["mp3"]},"audio/mp4":{source:"iana",compressible:!1,extensions:["m4a","mp4a"]},"audio/mp4a-latm":{source:"iana"},"audio/mpa":{source:"iana"},"audio/mpa-robust":{source:"iana"},"audio/mpeg":{source:"iana",compressible:!1,extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{source:"iana"},"audio/musepack":{source:"apache"},"audio/ogg":{source:"iana",compressible:!1,extensions:["oga","ogg","spx","opus"]},"audio/opus":{source:"iana"},"audio/parityfec":{source:"iana"},"audio/pcma":{source:"iana"},"audio/pcma-wb":{source:"iana"},"audio/pcmu":{source:"iana"},"audio/pcmu-wb":{source:"iana"},"audio/prs.sid":{source:"iana"},"audio/qcelp":{source:"iana"},"audio/raptorfec":{source:"iana"},"audio/red":{source:"iana"},"audio/rtp-enc-aescm128":{source:"iana"},"audio/rtp-midi":{source:"iana"},"audio/rtploopback":{source:"iana"},"audio/rtx":{source:"iana"},"audio/s3m":{source:"apache",extensions:["s3m"]},"audio/scip":{source:"iana"},"audio/silk":{source:"apache",extensions:["sil"]},"audio/smv":{source:"iana"},"audio/smv-qcp":{source:"iana"},"audio/smv0":{source:"iana"},"audio/sofa":{source:"iana"},"audio/sp-midi":{source:"iana"},"audio/speex":{source:"iana"},"audio/t140c":{source:"iana"},"audio/t38":{source:"iana"},"audio/telephone-event":{source:"iana"},"audio/tetra_acelp":{source:"iana"},"audio/tetra_acelp_bb":{source:"iana"},"audio/tone":{source:"iana"},"audio/tsvcis":{source:"iana"},"audio/uemclip":{source:"iana"},"audio/ulpfec":{source:"iana"},"audio/usac":{source:"iana"},"audio/vdvi":{source:"iana"},"audio/vmr-wb":{source:"iana"},"audio/vnd.3gpp.iufp":{source:"iana"},"audio/vnd.4sb":{source:"iana"},"audio/vnd.audiokoz":{source:"iana"},"audio/vnd.celp":{source:"iana"},"audio/vnd.cisco.nse":{source:"iana"},"audio/vnd.cmles.radio-events":{source:"iana"},"audio/vnd.cns.anp1":{source:"iana"},"audio/vnd.cns.inf1":{source:"iana"},"audio/vnd.dece.audio":{source:"iana",extensions:["uva","uvva"]},"audio/vnd.digital-winds":{source:"iana",extensions:["eol"]},"audio/vnd.dlna.adts":{source:"iana"},"audio/vnd.dolby.heaac.1":{source:"iana"},"audio/vnd.dolby.heaac.2":{source:"iana"},"audio/vnd.dolby.mlp":{source:"iana"},"audio/vnd.dolby.mps":{source:"iana"},"audio/vnd.dolby.pl2":{source:"iana"},"audio/vnd.dolby.pl2x":{source:"iana"},"audio/vnd.dolby.pl2z":{source:"iana"},"audio/vnd.dolby.pulse.1":{source:"iana"},"audio/vnd.dra":{source:"iana",extensions:["dra"]},"audio/vnd.dts":{source:"iana",extensions:["dts"]},"audio/vnd.dts.hd":{source:"iana",extensions:["dtshd"]},"audio/vnd.dts.uhd":{source:"iana"},"audio/vnd.dvb.file":{source:"iana"},"audio/vnd.everad.plj":{source:"iana"},"audio/vnd.hns.audio":{source:"iana"},"audio/vnd.lucent.voice":{source:"iana",extensions:["lvp"]},"audio/vnd.ms-playready.media.pya":{source:"iana",extensions:["pya"]},"audio/vnd.nokia.mobile-xmf":{source:"iana"},"audio/vnd.nortel.vbk":{source:"iana"},"audio/vnd.nuera.ecelp4800":{source:"iana",extensions:["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{source:"iana",extensions:["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{source:"iana",extensions:["ecelp9600"]},"audio/vnd.octel.sbc":{source:"iana"},"audio/vnd.presonus.multitrack":{source:"iana"},"audio/vnd.qcelp":{source:"iana"},"audio/vnd.rhetorex.32kadpcm":{source:"iana"},"audio/vnd.rip":{source:"iana",extensions:["rip"]},"audio/vnd.rn-realaudio":{compressible:!1},"audio/vnd.sealedmedia.softseal.mpeg":{source:"iana"},"audio/vnd.vmx.cvsd":{source:"iana"},"audio/vnd.wave":{compressible:!1},"audio/vorbis":{source:"iana",compressible:!1},"audio/vorbis-config":{source:"iana"},"audio/wav":{compressible:!1,extensions:["wav"]},"audio/wave":{compressible:!1,extensions:["wav"]},"audio/webm":{source:"apache",compressible:!1,extensions:["weba"]},"audio/x-aac":{source:"apache",compressible:!1,extensions:["aac"]},"audio/x-aiff":{source:"apache",extensions:["aif","aiff","aifc"]},"audio/x-caf":{source:"apache",compressible:!1,extensions:["caf"]},"audio/x-flac":{source:"apache",extensions:["flac"]},"audio/x-m4a":{source:"nginx",extensions:["m4a"]},"audio/x-matroska":{source:"apache",extensions:["mka"]},"audio/x-mpegurl":{source:"apache",extensions:["m3u"]},"audio/x-ms-wax":{source:"apache",extensions:["wax"]},"audio/x-ms-wma":{source:"apache",extensions:["wma"]},"audio/x-pn-realaudio":{source:"apache",extensions:["ram","ra"]},"audio/x-pn-realaudio-plugin":{source:"apache",extensions:["rmp"]},"audio/x-realaudio":{source:"nginx",extensions:["ra"]},"audio/x-tta":{source:"apache"},"audio/x-wav":{source:"apache",extensions:["wav"]},"audio/xm":{source:"apache",extensions:["xm"]},"chemical/x-cdx":{source:"apache",extensions:["cdx"]},"chemical/x-cif":{source:"apache",extensions:["cif"]},"chemical/x-cmdf":{source:"apache",extensions:["cmdf"]},"chemical/x-cml":{source:"apache",extensions:["cml"]},"chemical/x-csml":{source:"apache",extensions:["csml"]},"chemical/x-pdb":{source:"apache"},"chemical/x-xyz":{source:"apache",extensions:["xyz"]},"font/collection":{source:"iana",extensions:["ttc"]},"font/otf":{source:"iana",compressible:!0,extensions:["otf"]},"font/sfnt":{source:"iana"},"font/ttf":{source:"iana",compressible:!0,extensions:["ttf"]},"font/woff":{source:"iana",extensions:["woff"]},"font/woff2":{source:"iana",extensions:["woff2"]},"image/aces":{source:"iana",extensions:["exr"]},"image/apng":{compressible:!1,extensions:["apng"]},"image/avci":{source:"iana",extensions:["avci"]},"image/avcs":{source:"iana",extensions:["avcs"]},"image/avif":{source:"iana",compressible:!1,extensions:["avif"]},"image/bmp":{source:"iana",compressible:!0,extensions:["bmp"]},"image/cgm":{source:"iana",extensions:["cgm"]},"image/dicom-rle":{source:"iana",extensions:["drle"]},"image/emf":{source:"iana",extensions:["emf"]},"image/fits":{source:"iana",extensions:["fits"]},"image/g3fax":{source:"iana",extensions:["g3"]},"image/gif":{source:"iana",compressible:!1,extensions:["gif"]},"image/heic":{source:"iana",extensions:["heic"]},"image/heic-sequence":{source:"iana",extensions:["heics"]},"image/heif":{source:"iana",extensions:["heif"]},"image/heif-sequence":{source:"iana",extensions:["heifs"]},"image/hej2k":{source:"iana",extensions:["hej2"]},"image/hsj2":{source:"iana",extensions:["hsj2"]},"image/ief":{source:"iana",extensions:["ief"]},"image/jls":{source:"iana",extensions:["jls"]},"image/jp2":{source:"iana",compressible:!1,extensions:["jp2","jpg2"]},"image/jpeg":{source:"iana",compressible:!1,extensions:["jpeg","jpg","jpe"]},"image/jph":{source:"iana",extensions:["jph"]},"image/jphc":{source:"iana",extensions:["jhc"]},"image/jpm":{source:"iana",compressible:!1,extensions:["jpm"]},"image/jpx":{source:"iana",compressible:!1,extensions:["jpx","jpf"]},"image/jxr":{source:"iana",extensions:["jxr"]},"image/jxra":{source:"iana",extensions:["jxra"]},"image/jxrs":{source:"iana",extensions:["jxrs"]},"image/jxs":{source:"iana",extensions:["jxs"]},"image/jxsc":{source:"iana",extensions:["jxsc"]},"image/jxsi":{source:"iana",extensions:["jxsi"]},"image/jxss":{source:"iana",extensions:["jxss"]},"image/ktx":{source:"iana",extensions:["ktx"]},"image/ktx2":{source:"iana",extensions:["ktx2"]},"image/naplps":{source:"iana"},"image/pjpeg":{compressible:!1},"image/png":{source:"iana",compressible:!1,extensions:["png"]},"image/prs.btif":{source:"iana",extensions:["btif"]},"image/prs.pti":{source:"iana",extensions:["pti"]},"image/pwg-raster":{source:"iana"},"image/sgi":{source:"apache",extensions:["sgi"]},"image/svg+xml":{source:"iana",compressible:!0,extensions:["svg","svgz"]},"image/t38":{source:"iana",extensions:["t38"]},"image/tiff":{source:"iana",compressible:!1,extensions:["tif","tiff"]},"image/tiff-fx":{source:"iana",extensions:["tfx"]},"image/vnd.adobe.photoshop":{source:"iana",compressible:!0,extensions:["psd"]},"image/vnd.airzip.accelerator.azv":{source:"iana",extensions:["azv"]},"image/vnd.cns.inf2":{source:"iana"},"image/vnd.dece.graphic":{source:"iana",extensions:["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{source:"iana",extensions:["djvu","djv"]},"image/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"image/vnd.dwg":{source:"iana",extensions:["dwg"]},"image/vnd.dxf":{source:"iana",extensions:["dxf"]},"image/vnd.fastbidsheet":{source:"iana",extensions:["fbs"]},"image/vnd.fpx":{source:"iana",extensions:["fpx"]},"image/vnd.fst":{source:"iana",extensions:["fst"]},"image/vnd.fujixerox.edmics-mmr":{source:"iana",extensions:["mmr"]},"image/vnd.fujixerox.edmics-rlc":{source:"iana",extensions:["rlc"]},"image/vnd.globalgraphics.pgb":{source:"iana"},"image/vnd.microsoft.icon":{source:"iana",compressible:!0,extensions:["ico"]},"image/vnd.mix":{source:"iana"},"image/vnd.mozilla.apng":{source:"iana"},"image/vnd.ms-dds":{compressible:!0,extensions:["dds"]},"image/vnd.ms-modi":{source:"iana",extensions:["mdi"]},"image/vnd.ms-photo":{source:"apache",extensions:["wdp"]},"image/vnd.net-fpx":{source:"iana",extensions:["npx"]},"image/vnd.pco.b16":{source:"iana",extensions:["b16"]},"image/vnd.radiance":{source:"iana"},"image/vnd.sealed.png":{source:"iana"},"image/vnd.sealedmedia.softseal.gif":{source:"iana"},"image/vnd.sealedmedia.softseal.jpg":{source:"iana"},"image/vnd.svf":{source:"iana"},"image/vnd.tencent.tap":{source:"iana",extensions:["tap"]},"image/vnd.valve.source.texture":{source:"iana",extensions:["vtf"]},"image/vnd.wap.wbmp":{source:"iana",extensions:["wbmp"]},"image/vnd.xiff":{source:"iana",extensions:["xif"]},"image/vnd.zbrush.pcx":{source:"iana",extensions:["pcx"]},"image/webp":{source:"apache",extensions:["webp"]},"image/wmf":{source:"iana",extensions:["wmf"]},"image/x-3ds":{source:"apache",extensions:["3ds"]},"image/x-cmu-raster":{source:"apache",extensions:["ras"]},"image/x-cmx":{source:"apache",extensions:["cmx"]},"image/x-freehand":{source:"apache",extensions:["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{source:"apache",compressible:!0,extensions:["ico"]},"image/x-jng":{source:"nginx",extensions:["jng"]},"image/x-mrsid-image":{source:"apache",extensions:["sid"]},"image/x-ms-bmp":{source:"nginx",compressible:!0,extensions:["bmp"]},"image/x-pcx":{source:"apache",extensions:["pcx"]},"image/x-pict":{source:"apache",extensions:["pic","pct"]},"image/x-portable-anymap":{source:"apache",extensions:["pnm"]},"image/x-portable-bitmap":{source:"apache",extensions:["pbm"]},"image/x-portable-graymap":{source:"apache",extensions:["pgm"]},"image/x-portable-pixmap":{source:"apache",extensions:["ppm"]},"image/x-rgb":{source:"apache",extensions:["rgb"]},"image/x-tga":{source:"apache",extensions:["tga"]},"image/x-xbitmap":{source:"apache",extensions:["xbm"]},"image/x-xcf":{compressible:!1},"image/x-xpixmap":{source:"apache",extensions:["xpm"]},"image/x-xwindowdump":{source:"apache",extensions:["xwd"]},"message/cpim":{source:"iana"},"message/delivery-status":{source:"iana"},"message/disposition-notification":{source:"iana",extensions:["disposition-notification"]},"message/external-body":{source:"iana"},"message/feedback-report":{source:"iana"},"message/global":{source:"iana",extensions:["u8msg"]},"message/global-delivery-status":{source:"iana",extensions:["u8dsn"]},"message/global-disposition-notification":{source:"iana",extensions:["u8mdn"]},"message/global-headers":{source:"iana",extensions:["u8hdr"]},"message/http":{source:"iana",compressible:!1},"message/imdn+xml":{source:"iana",compressible:!0},"message/news":{source:"iana"},"message/partial":{source:"iana",compressible:!1},"message/rfc822":{source:"iana",compressible:!0,extensions:["eml","mime"]},"message/s-http":{source:"iana"},"message/sip":{source:"iana"},"message/sipfrag":{source:"iana"},"message/tracking-status":{source:"iana"},"message/vnd.si.simp":{source:"iana"},"message/vnd.wfa.wsc":{source:"iana",extensions:["wsc"]},"model/3mf":{source:"iana",extensions:["3mf"]},"model/e57":{source:"iana"},"model/gltf+json":{source:"iana",compressible:!0,extensions:["gltf"]},"model/gltf-binary":{source:"iana",compressible:!0,extensions:["glb"]},"model/iges":{source:"iana",compressible:!1,extensions:["igs","iges"]},"model/mesh":{source:"iana",compressible:!1,extensions:["msh","mesh","silo"]},"model/mtl":{source:"iana",extensions:["mtl"]},"model/obj":{source:"iana",extensions:["obj"]},"model/step":{source:"iana"},"model/step+xml":{source:"iana",compressible:!0,extensions:["stpx"]},"model/step+zip":{source:"iana",compressible:!1,extensions:["stpz"]},"model/step-xml+zip":{source:"iana",compressible:!1,extensions:["stpxz"]},"model/stl":{source:"iana",extensions:["stl"]},"model/vnd.collada+xml":{source:"iana",compressible:!0,extensions:["dae"]},"model/vnd.dwf":{source:"iana",extensions:["dwf"]},"model/vnd.flatland.3dml":{source:"iana"},"model/vnd.gdl":{source:"iana",extensions:["gdl"]},"model/vnd.gs-gdl":{source:"apache"},"model/vnd.gs.gdl":{source:"iana"},"model/vnd.gtw":{source:"iana",extensions:["gtw"]},"model/vnd.moml+xml":{source:"iana",compressible:!0},"model/vnd.mts":{source:"iana",extensions:["mts"]},"model/vnd.opengex":{source:"iana",extensions:["ogex"]},"model/vnd.parasolid.transmit.binary":{source:"iana",extensions:["x_b"]},"model/vnd.parasolid.transmit.text":{source:"iana",extensions:["x_t"]},"model/vnd.pytha.pyox":{source:"iana"},"model/vnd.rosette.annotated-data-model":{source:"iana"},"model/vnd.sap.vds":{source:"iana",extensions:["vds"]},"model/vnd.usdz+zip":{source:"iana",compressible:!1,extensions:["usdz"]},"model/vnd.valve.source.compiled-map":{source:"iana",extensions:["bsp"]},"model/vnd.vtu":{source:"iana",extensions:["vtu"]},"model/vrml":{source:"iana",compressible:!1,extensions:["wrl","vrml"]},"model/x3d+binary":{source:"apache",compressible:!1,extensions:["x3db","x3dbz"]},"model/x3d+fastinfoset":{source:"iana",extensions:["x3db"]},"model/x3d+vrml":{source:"apache",compressible:!1,extensions:["x3dv","x3dvz"]},"model/x3d+xml":{source:"iana",compressible:!0,extensions:["x3d","x3dz"]},"model/x3d-vrml":{source:"iana",extensions:["x3dv"]},"multipart/alternative":{source:"iana",compressible:!1},"multipart/appledouble":{source:"iana"},"multipart/byteranges":{source:"iana"},"multipart/digest":{source:"iana"},"multipart/encrypted":{source:"iana",compressible:!1},"multipart/form-data":{source:"iana",compressible:!1},"multipart/header-set":{source:"iana"},"multipart/mixed":{source:"iana"},"multipart/multilingual":{source:"iana"},"multipart/parallel":{source:"iana"},"multipart/related":{source:"iana",compressible:!1},"multipart/report":{source:"iana"},"multipart/signed":{source:"iana",compressible:!1},"multipart/vnd.bint.med-plus":{source:"iana"},"multipart/voice-message":{source:"iana"},"multipart/x-mixed-replace":{source:"iana"},"text/1d-interleaved-parityfec":{source:"iana"},"text/cache-manifest":{source:"iana",compressible:!0,extensions:["appcache","manifest"]},"text/calendar":{source:"iana",extensions:["ics","ifb"]},"text/calender":{compressible:!0},"text/cmd":{compressible:!0},"text/coffeescript":{extensions:["coffee","litcoffee"]},"text/cql":{source:"iana"},"text/cql-expression":{source:"iana"},"text/cql-identifier":{source:"iana"},"text/css":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["css"]},"text/csv":{source:"iana",compressible:!0,extensions:["csv"]},"text/csv-schema":{source:"iana"},"text/directory":{source:"iana"},"text/dns":{source:"iana"},"text/ecmascript":{source:"iana"},"text/encaprtp":{source:"iana"},"text/enriched":{source:"iana"},"text/fhirpath":{source:"iana"},"text/flexfec":{source:"iana"},"text/fwdred":{source:"iana"},"text/gff3":{source:"iana"},"text/grammar-ref-list":{source:"iana"},"text/html":{source:"iana",compressible:!0,extensions:["html","htm","shtml"]},"text/jade":{extensions:["jade"]},"text/javascript":{source:"iana",compressible:!0},"text/jcr-cnd":{source:"iana"},"text/jsx":{compressible:!0,extensions:["jsx"]},"text/less":{compressible:!0,extensions:["less"]},"text/markdown":{source:"iana",compressible:!0,extensions:["markdown","md"]},"text/mathml":{source:"nginx",extensions:["mml"]},"text/mdx":{compressible:!0,extensions:["mdx"]},"text/mizar":{source:"iana"},"text/n3":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["n3"]},"text/parameters":{source:"iana",charset:"UTF-8"},"text/parityfec":{source:"iana"},"text/plain":{source:"iana",compressible:!0,extensions:["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{source:"iana",charset:"UTF-8"},"text/prs.fallenstein.rst":{source:"iana"},"text/prs.lines.tag":{source:"iana",extensions:["dsc"]},"text/prs.prop.logic":{source:"iana"},"text/raptorfec":{source:"iana"},"text/red":{source:"iana"},"text/rfc822-headers":{source:"iana"},"text/richtext":{source:"iana",compressible:!0,extensions:["rtx"]},"text/rtf":{source:"iana",compressible:!0,extensions:["rtf"]},"text/rtp-enc-aescm128":{source:"iana"},"text/rtploopback":{source:"iana"},"text/rtx":{source:"iana"},"text/sgml":{source:"iana",extensions:["sgml","sgm"]},"text/shaclc":{source:"iana"},"text/shex":{source:"iana",extensions:["shex"]},"text/slim":{extensions:["slim","slm"]},"text/spdx":{source:"iana",extensions:["spdx"]},"text/strings":{source:"iana"},"text/stylus":{extensions:["stylus","styl"]},"text/t140":{source:"iana"},"text/tab-separated-values":{source:"iana",compressible:!0,extensions:["tsv"]},"text/troff":{source:"iana",extensions:["t","tr","roff","man","me","ms"]},"text/turtle":{source:"iana",charset:"UTF-8",extensions:["ttl"]},"text/ulpfec":{source:"iana"},"text/uri-list":{source:"iana",compressible:!0,extensions:["uri","uris","urls"]},"text/vcard":{source:"iana",compressible:!0,extensions:["vcard"]},"text/vnd.a":{source:"iana"},"text/vnd.abc":{source:"iana"},"text/vnd.ascii-art":{source:"iana"},"text/vnd.curl":{source:"iana",extensions:["curl"]},"text/vnd.curl.dcurl":{source:"apache",extensions:["dcurl"]},"text/vnd.curl.mcurl":{source:"apache",extensions:["mcurl"]},"text/vnd.curl.scurl":{source:"apache",extensions:["scurl"]},"text/vnd.debian.copyright":{source:"iana",charset:"UTF-8"},"text/vnd.dmclientscript":{source:"iana"},"text/vnd.dvb.subtitle":{source:"iana",extensions:["sub"]},"text/vnd.esmertec.theme-descriptor":{source:"iana",charset:"UTF-8"},"text/vnd.familysearch.gedcom":{source:"iana",extensions:["ged"]},"text/vnd.ficlab.flt":{source:"iana"},"text/vnd.fly":{source:"iana",extensions:["fly"]},"text/vnd.fmi.flexstor":{source:"iana",extensions:["flx"]},"text/vnd.gml":{source:"iana"},"text/vnd.graphviz":{source:"iana",extensions:["gv"]},"text/vnd.hans":{source:"iana"},"text/vnd.hgl":{source:"iana"},"text/vnd.in3d.3dml":{source:"iana",extensions:["3dml"]},"text/vnd.in3d.spot":{source:"iana",extensions:["spot"]},"text/vnd.iptc.newsml":{source:"iana"},"text/vnd.iptc.nitf":{source:"iana"},"text/vnd.latex-z":{source:"iana"},"text/vnd.motorola.reflex":{source:"iana"},"text/vnd.ms-mediapackage":{source:"iana"},"text/vnd.net2phone.commcenter.command":{source:"iana"},"text/vnd.radisys.msml-basic-layout":{source:"iana"},"text/vnd.senx.warpscript":{source:"iana"},"text/vnd.si.uricatalogue":{source:"iana"},"text/vnd.sosi":{source:"iana"},"text/vnd.sun.j2me.app-descriptor":{source:"iana",charset:"UTF-8",extensions:["jad"]},"text/vnd.trolltech.linguist":{source:"iana",charset:"UTF-8"},"text/vnd.wap.si":{source:"iana"},"text/vnd.wap.sl":{source:"iana"},"text/vnd.wap.wml":{source:"iana",extensions:["wml"]},"text/vnd.wap.wmlscript":{source:"iana",extensions:["wmls"]},"text/vtt":{source:"iana",charset:"UTF-8",compressible:!0,extensions:["vtt"]},"text/x-asm":{source:"apache",extensions:["s","asm"]},"text/x-c":{source:"apache",extensions:["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{source:"nginx",extensions:["htc"]},"text/x-fortran":{source:"apache",extensions:["f","for","f77","f90"]},"text/x-gwt-rpc":{compressible:!0},"text/x-handlebars-template":{extensions:["hbs"]},"text/x-java-source":{source:"apache",extensions:["java"]},"text/x-jquery-tmpl":{compressible:!0},"text/x-lua":{extensions:["lua"]},"text/x-markdown":{compressible:!0,extensions:["mkd"]},"text/x-nfo":{source:"apache",extensions:["nfo"]},"text/x-opml":{source:"apache",extensions:["opml"]},"text/x-org":{compressible:!0,extensions:["org"]},"text/x-pascal":{source:"apache",extensions:["p","pas"]},"text/x-processing":{compressible:!0,extensions:["pde"]},"text/x-sass":{extensions:["sass"]},"text/x-scss":{extensions:["scss"]},"text/x-setext":{source:"apache",extensions:["etx"]},"text/x-sfv":{source:"apache",extensions:["sfv"]},"text/x-suse-ymp":{compressible:!0,extensions:["ymp"]},"text/x-uuencode":{source:"apache",extensions:["uu"]},"text/x-vcalendar":{source:"apache",extensions:["vcs"]},"text/x-vcard":{source:"apache",extensions:["vcf"]},"text/xml":{source:"iana",compressible:!0,extensions:["xml"]},"text/xml-external-parsed-entity":{source:"iana"},"text/yaml":{compressible:!0,extensions:["yaml","yml"]},"video/1d-interleaved-parityfec":{source:"iana"},"video/3gpp":{source:"iana",extensions:["3gp","3gpp"]},"video/3gpp-tt":{source:"iana"},"video/3gpp2":{source:"iana",extensions:["3g2"]},"video/av1":{source:"iana"},"video/bmpeg":{source:"iana"},"video/bt656":{source:"iana"},"video/celb":{source:"iana"},"video/dv":{source:"iana"},"video/encaprtp":{source:"iana"},"video/ffv1":{source:"iana"},"video/flexfec":{source:"iana"},"video/h261":{source:"iana",extensions:["h261"]},"video/h263":{source:"iana",extensions:["h263"]},"video/h263-1998":{source:"iana"},"video/h263-2000":{source:"iana"},"video/h264":{source:"iana",extensions:["h264"]},"video/h264-rcdo":{source:"iana"},"video/h264-svc":{source:"iana"},"video/h265":{source:"iana"},"video/iso.segment":{source:"iana",extensions:["m4s"]},"video/jpeg":{source:"iana",extensions:["jpgv"]},"video/jpeg2000":{source:"iana"},"video/jpm":{source:"apache",extensions:["jpm","jpgm"]},"video/jxsv":{source:"iana"},"video/mj2":{source:"iana",extensions:["mj2","mjp2"]},"video/mp1s":{source:"iana"},"video/mp2p":{source:"iana"},"video/mp2t":{source:"iana",extensions:["ts"]},"video/mp4":{source:"iana",compressible:!1,extensions:["mp4","mp4v","mpg4"]},"video/mp4v-es":{source:"iana"},"video/mpeg":{source:"iana",compressible:!1,extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{source:"iana"},"video/mpv":{source:"iana"},"video/nv":{source:"iana"},"video/ogg":{source:"iana",compressible:!1,extensions:["ogv"]},"video/parityfec":{source:"iana"},"video/pointer":{source:"iana"},"video/quicktime":{source:"iana",compressible:!1,extensions:["qt","mov"]},"video/raptorfec":{source:"iana"},"video/raw":{source:"iana"},"video/rtp-enc-aescm128":{source:"iana"},"video/rtploopback":{source:"iana"},"video/rtx":{source:"iana"},"video/scip":{source:"iana"},"video/smpte291":{source:"iana"},"video/smpte292m":{source:"iana"},"video/ulpfec":{source:"iana"},"video/vc1":{source:"iana"},"video/vc2":{source:"iana"},"video/vnd.cctv":{source:"iana"},"video/vnd.dece.hd":{source:"iana",extensions:["uvh","uvvh"]},"video/vnd.dece.mobile":{source:"iana",extensions:["uvm","uvvm"]},"video/vnd.dece.mp4":{source:"iana"},"video/vnd.dece.pd":{source:"iana",extensions:["uvp","uvvp"]},"video/vnd.dece.sd":{source:"iana",extensions:["uvs","uvvs"]},"video/vnd.dece.video":{source:"iana",extensions:["uvv","uvvv"]},"video/vnd.directv.mpeg":{source:"iana"},"video/vnd.directv.mpeg-tts":{source:"iana"},"video/vnd.dlna.mpeg-tts":{source:"iana"},"video/vnd.dvb.file":{source:"iana",extensions:["dvb"]},"video/vnd.fvt":{source:"iana",extensions:["fvt"]},"video/vnd.hns.video":{source:"iana"},"video/vnd.iptvforum.1dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.1dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.2dparityfec-1010":{source:"iana"},"video/vnd.iptvforum.2dparityfec-2005":{source:"iana"},"video/vnd.iptvforum.ttsavc":{source:"iana"},"video/vnd.iptvforum.ttsmpeg2":{source:"iana"},"video/vnd.motorola.video":{source:"iana"},"video/vnd.motorola.videop":{source:"iana"},"video/vnd.mpegurl":{source:"iana",extensions:["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{source:"iana",extensions:["pyv"]},"video/vnd.nokia.interleaved-multimedia":{source:"iana"},"video/vnd.nokia.mp4vr":{source:"iana"},"video/vnd.nokia.videovoip":{source:"iana"},"video/vnd.objectvideo":{source:"iana"},"video/vnd.radgamettools.bink":{source:"iana"},"video/vnd.radgamettools.smacker":{source:"iana"},"video/vnd.sealed.mpeg1":{source:"iana"},"video/vnd.sealed.mpeg4":{source:"iana"},"video/vnd.sealed.swf":{source:"iana"},"video/vnd.sealedmedia.softseal.mov":{source:"iana"},"video/vnd.uvvu.mp4":{source:"iana",extensions:["uvu","uvvu"]},"video/vnd.vivo":{source:"iana",extensions:["viv"]},"video/vnd.youtube.yt":{source:"iana"},"video/vp8":{source:"iana"},"video/vp9":{source:"iana"},"video/webm":{source:"apache",compressible:!1,extensions:["webm"]},"video/x-f4v":{source:"apache",extensions:["f4v"]},"video/x-fli":{source:"apache",extensions:["fli"]},"video/x-flv":{source:"apache",compressible:!1,extensions:["flv"]},"video/x-m4v":{source:"apache",extensions:["m4v"]},"video/x-matroska":{source:"apache",compressible:!1,extensions:["mkv","mk3d","mks"]},"video/x-mng":{source:"apache",extensions:["mng"]},"video/x-ms-asf":{source:"apache",extensions:["asf","asx"]},"video/x-ms-vob":{source:"apache",extensions:["vob"]},"video/x-ms-wm":{source:"apache",extensions:["wm"]},"video/x-ms-wmv":{source:"apache",compressible:!1,extensions:["wmv"]},"video/x-ms-wmx":{source:"apache",extensions:["wmx"]},"video/x-ms-wvx":{source:"apache",extensions:["wvx"]},"video/x-msvideo":{source:"apache",extensions:["avi"]},"video/x-sgi-movie":{source:"apache",extensions:["movie"]},"video/x-smv":{source:"apache",extensions:["smv"]},"x-conference/x-cooltalk":{source:"apache",extensions:["ice"]},"x-shader/x-fragment":{compressible:!0},"x-shader/x-vertex":{compressible:!0}};function nt(){return On||(On=1,function(e){var n,t,i,a=(Fn||(Fn=1,Qn.exports=et),Qn.exports),r=p.extname,o=/^\s*([^;\s]*)(?:;|\s|$)/,s=/^text\//i;function c(e){if(!e||"string"!=typeof e)return!1;var n=o.exec(e),t=n&&a[n[1].toLowerCase()];return t&&t.charset?t.charset:!(!n||!s.test(n[1]))&&"UTF-8"}e.charset=c,e.charsets={lookup:c},e.contentType=function(n){if(!n||"string"!=typeof n)return!1;var t=-1===n.indexOf("/")?e.lookup(n):n;if(!t)return!1;if(-1===t.indexOf("charset")){var i=e.charset(t);i&&(t+="; charset="+i.toLowerCase())}return t},e.extension=function(n){if(!n||"string"!=typeof n)return!1;var t=o.exec(n),i=t&&e.extensions[t[1].toLowerCase()];if(!i||!i.length)return!1;return i[0]},e.extensions=Object.create(null),e.lookup=function(n){if(!n||"string"!=typeof n)return!1;var t=r("x."+n).toLowerCase().substr(1);if(!t)return!1;return e.types[t]||!1},e.types=Object.create(null),n=e.extensions,t=e.types,i=["nginx","apache",void 0,"iana"],Object.keys(a).forEach((function(e){var r=a[e],o=r.extensions;if(o&&o.length){n[e]=o;for(var s=0;s<o.length;s++){var c=o[s];if(t[c]){var l=i.indexOf(a[t[c]].source),p=i.indexOf(r.source);if("application/octet-stream"!==t[c]&&(l>p||l===p&&"application/"===t[c].substr(0,12)))continue}t[c]=e}}}))}(Xn)),Xn}function tt(){if(qn)return zn;qn=1;var e=Nn?Rn:(Nn=1,Rn=function(e){var n="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;n?n(e):setTimeout(e,0)});return zn=function(n){var t=!1;return e((function(){t=!0})),function(i,a){t?n(i,a):e((function(){n(i,a)}))}}}function it(){if(Vn)return Mn;function e(e){"function"==typeof this.jobs[e]&&this.jobs[e]()}return Vn=1,Mn=function(n){Object.keys(n.jobs).forEach(e.bind(n)),n.jobs={}}}function at(){if(Wn)return Un;Wn=1;var e=tt(),n=it();return Un=function(t,i,a,r){var o=a.keyedList?a.keyedList[a.index]:a.index;a.jobs[o]=function(n,t,i,a){var r;r=2==n.length?n(i,e(a)):n(i,t,e(a));return r}(i,o,t[o],(function(e,t){o in a.jobs&&(delete a.jobs[o],e?n(a):a.results[o]=t,r(e,a.results))}))}}function rt(){if(Hn)return Yn;return Hn=1,Yn=function(e,n){var t=!Array.isArray(e),i={index:0,keyedList:t||n?Object.keys(e):null,jobs:{},results:t?{}:[],size:t?Object.keys(e).length:e.length};n&&i.keyedList.sort(t?n:function(t,i){return n(e[t],e[i])});return i}}function ot(){if(Gn)return Kn;Gn=1;var e=it(),n=tt();return Kn=function(t){if(!Object.keys(this.jobs).length)return;this.index=this.size,e(this),n(t)(null,this.results)}}function st(){if(Zn)return Jn;Zn=1;var e=at(),n=rt(),t=ot();return Jn=function(i,a,r){var o=n(i);for(;o.index<(o.keyedList||i).length;)e(i,a,o,(function(e,n){e?r(e,n):0!==Object.keys(o.jobs).length||r(null,o.results)})),o.index++;return t.bind(o,r)}}var ct,lt,pt,ut,dt,mt,ft,ht,vt,xt,gt={exports:{}};function bt(){if(ct)return gt.exports;ct=1;var e=at(),n=rt(),t=ot();function i(e,n){return e<n?-1:e>n?1:0}return gt.exports=function(i,a,r,o){var s=n(i,r);return e(i,a,s,(function n(t,r){t?o(t,r):(s.index++,s.index<(s.keyedList||i).length?e(i,a,s,n):o(null,s.results))})),t.bind(s,o)},gt.exports.ascending=i,gt.exports.descending=function(e,n){return-1*i(e,n)},gt.exports}function yt(){if(pt)return lt;pt=1;var e=bt();return lt=function(n,t,i){return e(n,t,null,i)}}function wt(){return dt?ut:(dt=1,ut={parallel:st(),serial:yt(),serialOrdered:bt()})}function _t(){return ft||(ft=1,mt=function(e,n){return Object.keys(n).forEach((function(t){e[t]=e[t]||n[t]})),e}),mt}var At=fe,Ct=function(e,n){Ae.forEach(e,(function(t,i){i!==n&&i.toUpperCase()===n.toUpperCase()&&(e[n]=t,delete e[i])}))},St=Ce(),kt=Be,jt=Le(),Tt={"Content-Type":"application/x-www-form-urlencoded"};function Et(e,n){!At.isUndefined(e)&&At.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var Pt,Bt={transitional:kt,adapter:("undefined"!=typeof XMLHttpRequest?Pt=function(){if(Ue)return Ve;Ue=1;var e=fe,n=De(),t=$e(),i=xe,a=He,r=Ke(),o=Ge(),s=Be,c=Ce(),l=Je(),p=Ze();return Ve=function(u){return new Promise((function(d,m){var f,h=u.data,v=u.headers,x=u.responseType;function g(){u.cancelToken&&u.cancelToken.unsubscribe(f),u.signal&&u.signal.removeEventListener("abort",f)}e.isFormData(h)&&e.isStandardBrowserEnv()&&delete v["Content-Type"];var b=new XMLHttpRequest;if(u.auth){var y=u.auth.username||"",w=u.auth.password?unescape(encodeURIComponent(u.auth.password)):"";v.Authorization="Basic "+btoa(y+":"+w)}var _=a(u.baseURL,u.url);function A(){if(b){var e="getAllResponseHeaders"in b?r(b.getAllResponseHeaders()):null,t={data:x&&"text"!==x&&"json"!==x?b.response:b.responseText,status:b.status,statusText:b.statusText,headers:e,config:u,request:b};n((function(e){d(e),g()}),(function(e){m(e),g()}),t),b=null}}if(b.open(u.method.toUpperCase(),i(_,u.params,u.paramsSerializer),!0),b.timeout=u.timeout,"onloadend"in b?b.onloadend=A:b.onreadystatechange=function(){b&&4===b.readyState&&(0!==b.status||b.responseURL&&0===b.responseURL.indexOf("file:"))&&setTimeout(A)},b.onabort=function(){b&&(m(new c("Request aborted",c.ECONNABORTED,u,b)),b=null)},b.onerror=function(){m(new c("Network Error",c.ERR_NETWORK,u,b,b)),b=null},b.ontimeout=function(){var e=u.timeout?"timeout of "+u.timeout+"ms exceeded":"timeout exceeded",n=u.transitional||s;u.timeoutErrorMessage&&(e=u.timeoutErrorMessage),m(new c(e,n.clarifyTimeoutError?c.ETIMEDOUT:c.ECONNABORTED,u,b)),b=null},e.isStandardBrowserEnv()){var C=(u.withCredentials||o(_))&&u.xsrfCookieName?t.read(u.xsrfCookieName):void 0;C&&(v[u.xsrfHeaderName]=C)}"setRequestHeader"in b&&e.forEach(v,(function(e,n){void 0===h&&"content-type"===n.toLowerCase()?delete v[n]:b.setRequestHeader(n,e)})),e.isUndefined(u.withCredentials)||(b.withCredentials=!!u.withCredentials),x&&"json"!==x&&(b.responseType=u.responseType),"function"==typeof u.onDownloadProgress&&b.addEventListener("progress",u.onDownloadProgress),"function"==typeof u.onUploadProgress&&b.upload&&b.upload.addEventListener("progress",u.onUploadProgress),(u.cancelToken||u.signal)&&(f=function(e){b&&(m(!e||e&&e.type?new l:e),b.abort(),b=null)},u.cancelToken&&u.cancelToken.subscribe(f),u.signal&&(u.signal.aborted?f():u.signal.addEventListener("abort",f))),h||(h=null);var S=p(_);S&&-1===["http","https","file"].indexOf(S)?m(new c("Unsupported protocol "+S+":",c.ERR_BAD_REQUEST,u)):b.send(h)}))},Ve}():"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process)&&(Pt=En()),Pt),transformRequest:[function(e,n){if(Ct(n,"Accept"),Ct(n,"Content-Type"),At.isFormData(e)||At.isArrayBuffer(e)||At.isBuffer(e)||At.isStream(e)||At.isFile(e)||At.isBlob(e))return e;if(At.isArrayBufferView(e))return e.buffer;if(At.isURLSearchParams(e))return Et(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var t,i=At.isObject(e),a=n&&n["Content-Type"];if((t=At.isFileList(e))||i&&"multipart/form-data"===a){var r=this.env&&this.env.FormData;return jt(t?{"files[]":e}:e,r&&new r)}return i||"application/json"===a?(Et(n,"application/json"),function(e,n,t){if(At.isString(e))try{return(n||JSON.parse)(e),At.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(t||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var n=this.transitional||Bt.transitional,t=n&&n.silentJSONParsing,i=n&&n.forcedJSONParsing,a=!t&&"json"===this.responseType;if(a||i&&At.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(a){if("SyntaxError"===e.name)throw St.from(e,St.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:(xt||(xt=1,$n.exports=function(){if(vt)return ht;vt=1;var e=In(),r=s,o=p,c=n,l=t,d=i.parse,m=u,f=a.Stream,h=nt(),v=wt(),x=_t();function g(n){if(!(this instanceof g))return new g(n);for(var t in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],e.call(this),n=n||{})this[t]=n[t]}return ht=g,r.inherits(g,e),g.LINE_BREAK="\r\n",g.DEFAULT_CONTENT_TYPE="application/octet-stream",g.prototype.append=function(n,t,i){"string"==typeof(i=i||{})&&(i={filename:i});var a=e.prototype.append.bind(this);if("number"==typeof t&&(t=""+t),r.isArray(t))this._error(new Error("Arrays are not supported."));else{var o=this._multiPartHeader(n,t,i),s=this._multiPartFooter();a(o),a(t),a(s),this._trackLength(o,t,i)}},g.prototype._trackLength=function(e,n,t){var i=0;null!=t.knownLength?i+=+t.knownLength:Buffer.isBuffer(n)?i=n.length:"string"==typeof n&&(i=Buffer.byteLength(n)),this._valueLength+=i,this._overheadLength+=Buffer.byteLength(e)+g.LINE_BREAK.length,n&&(n.path||n.readable&&n.hasOwnProperty("httpVersion")||n instanceof f)&&(t.knownLength||this._valuesToMeasure.push(n))},g.prototype._lengthRetriever=function(e,n){e.hasOwnProperty("fd")?null!=e.end&&e.end!=1/0&&null!=e.start?n(null,e.end+1-(e.start?e.start:0)):m.stat(e.path,(function(t,i){var a;t?n(t):(a=i.size-(e.start?e.start:0),n(null,a))})):e.hasOwnProperty("httpVersion")?n(null,+e.headers["content-length"]):e.hasOwnProperty("httpModule")?(e.on("response",(function(t){e.pause(),n(null,+t.headers["content-length"])})),e.resume()):n("Unknown stream")},g.prototype._multiPartHeader=function(e,n,t){if("string"==typeof t.header)return t.header;var i,a=this._getContentDisposition(n,t),r=this._getContentType(n,t),o="",s={"Content-Disposition":["form-data",'name="'+e+'"'].concat(a||[]),"Content-Type":[].concat(r||[])};for(var c in"object"==typeof t.header&&x(s,t.header),s)s.hasOwnProperty(c)&&null!=(i=s[c])&&(Array.isArray(i)||(i=[i]),i.length&&(o+=c+": "+i.join("; ")+g.LINE_BREAK));return"--"+this.getBoundary()+g.LINE_BREAK+o+g.LINE_BREAK},g.prototype._getContentDisposition=function(e,n){var t,i;return"string"==typeof n.filepath?t=o.normalize(n.filepath).replace(/\\/g,"/"):n.filename||e.name||e.path?t=o.basename(n.filename||e.name||e.path):e.readable&&e.hasOwnProperty("httpVersion")&&(t=o.basename(e.client._httpMessage.path||"")),t&&(i='filename="'+t+'"'),i},g.prototype._getContentType=function(e,n){var t=n.contentType;return!t&&e.name&&(t=h.lookup(e.name)),!t&&e.path&&(t=h.lookup(e.path)),!t&&e.readable&&e.hasOwnProperty("httpVersion")&&(t=e.headers["content-type"]),t||!n.filepath&&!n.filename||(t=h.lookup(n.filepath||n.filename)),t||"object"!=typeof e||(t=g.DEFAULT_CONTENT_TYPE),t},g.prototype._multiPartFooter=function(){return function(e){var n=g.LINE_BREAK;0===this._streams.length&&(n+=this._lastBoundary()),e(n)}.bind(this)},g.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+g.LINE_BREAK},g.prototype.getHeaders=function(e){var n,t={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(n in e)e.hasOwnProperty(n)&&(t[n.toLowerCase()]=e[n]);return t},g.prototype.setBoundary=function(e){this._boundary=e},g.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},g.prototype.getBuffer=function(){for(var e=new Buffer.alloc(0),n=this.getBoundary(),t=0,i=this._streams.length;t<i;t++)"function"!=typeof this._streams[t]&&(e=Buffer.isBuffer(this._streams[t])?Buffer.concat([e,this._streams[t]]):Buffer.concat([e,Buffer.from(this._streams[t])]),"string"==typeof this._streams[t]&&this._streams[t].substring(2,n.length+2)===n||(e=Buffer.concat([e,Buffer.from(g.LINE_BREAK)])));return Buffer.concat([e,Buffer.from(this._lastBoundary())])},g.prototype._generateBoundary=function(){for(var e="--------------------------",n=0;n<24;n++)e+=Math.floor(10*Math.random()).toString(16);this._boundary=e},g.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e},g.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},g.prototype.getLength=function(e){var n=this._overheadLength+this._valueLength;this._streams.length&&(n+=this._lastBoundary().length),this._valuesToMeasure.length?v.parallel(this._valuesToMeasure,this._lengthRetriever,(function(t,i){t?e(t):(i.forEach((function(e){n+=e})),e(null,n))})):process.nextTick(e.bind(this,null,n))},g.prototype.submit=function(e,n){var t,i,a={method:"post"};return"string"==typeof e?(e=d(e),i=x({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},a)):(i=x(e,a)).port||(i.port="https:"==i.protocol?443:80),i.headers=this.getHeaders(e.headers),t="https:"==i.protocol?l.request(i):c.request(i),this.getLength(function(e,i){if(e&&"Unknown stream"!==e)this._error(e);else if(i&&t.setHeader("Content-Length",i),this.pipe(t),n){var a,r=function(e,i){return t.removeListener("error",r),t.removeListener("response",a),n.call(this,e,i)};a=r.bind(this,null),t.on("error",r),t.on("response",a)}}.bind(this)),t},g.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))},g.prototype.toString=function(){return"[object FormData]"},ht}()),$n.exports)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};At.forEach(["delete","get","head"],(function(e){Bt.headers[e]={}})),At.forEach(["post","put","patch"],(function(e){Bt.headers[e]=At.merge(Tt)}));var Lt,Dt,$t=Bt,It=fe,Ft=$t;function Ot(){return Dt?Lt:(Dt=1,Lt=function(e){return!(!e||!e.__CANCEL__)})}var Rt=fe,Nt=function(e,n,t){var i=this||Ft;return It.forEach(t,(function(t){e=t.call(i,e,n)})),e},zt=Ot(),qt=$t,Mt=Je();function Vt(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Mt}var Ut=fe,Wt=function(e,n){n=n||{};var t={};function i(e,n){return Ut.isPlainObject(e)&&Ut.isPlainObject(n)?Ut.merge(e,n):Ut.isPlainObject(n)?Ut.merge({},n):Ut.isArray(n)?n.slice():n}function a(t){return Ut.isUndefined(n[t])?Ut.isUndefined(e[t])?void 0:i(void 0,e[t]):i(e[t],n[t])}function r(e){if(!Ut.isUndefined(n[e]))return i(void 0,n[e])}function o(t){return Ut.isUndefined(n[t])?Ut.isUndefined(e[t])?void 0:i(void 0,e[t]):i(void 0,n[t])}function s(t){return t in n?i(e[t],n[t]):t in e?i(void 0,e[t]):void 0}var c={url:r,method:r,data:r,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,beforeRedirect:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:s};return Ut.forEach(Object.keys(e).concat(Object.keys(n)),(function(e){var n=c[e]||a,i=n(e);Ut.isUndefined(i)&&n!==s||(t[e]=i)})),t},Yt=Tn().version,Ht=Ce(),Kt={};["object","boolean","number","function","string","symbol"].forEach((function(e,n){Kt[e]=function(t){return typeof t===e||"a"+(n<1?"n ":" ")+e}}));var Gt={};Kt.transitional=function(e,n,t){function i(e,n){return"[Axios v"+Yt+"] Transitional option '"+e+"'"+n+(t?". "+t:"")}return function(t,a,r){if(!1===e)throw new Ht(i(a," has been removed"+(n?" in "+n:"")),Ht.ERR_DEPRECATED);return n&&!Gt[a]&&(Gt[a]=!0,console.warn(i(a," has been deprecated since v"+n+" and will be removed in the near future"))),!e||e(t,a,r)}};var Jt,Zt,Xt,Qt,ei,ni,ti={assertOptions:function(e,n,t){if("object"!=typeof e)throw new Ht("options must be an object",Ht.ERR_BAD_OPTION_VALUE);for(var i=Object.keys(e),a=i.length;a-- >0;){var r=i[a],o=n[r];if(o){var s=e[r],c=void 0===s||o(s,r,e);if(!0!==c)throw new Ht("option "+r+" must be "+c,Ht.ERR_BAD_OPTION_VALUE)}else if(!0!==t)throw new Ht("Unknown option "+r,Ht.ERR_BAD_OPTION)}},validators:Kt},ii=fe,ai=xe,ri=_e,oi=function(e){return Vt(e),e.headers=e.headers||{},e.data=Nt.call(e,e.data,e.headers,e.transformRequest),e.headers=Rt.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),Rt.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete e.headers[n]})),(e.adapter||qt.adapter)(e).then((function(n){return Vt(e),n.data=Nt.call(e,n.data,n.headers,e.transformResponse),n}),(function(n){return zt(n)||(Vt(e),n&&n.response&&(n.response.data=Nt.call(e,n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)}))},si=Wt,ci=He,li=ti,pi=li.validators;function ui(e){this.defaults=e,this.interceptors={request:new ri,response:new ri}}ui.prototype.request=function(e,n){"string"==typeof e?(n=n||{}).url=e:n=e||{},(n=si(this.defaults,n)).method?n.method=n.method.toLowerCase():this.defaults.method?n.method=this.defaults.method.toLowerCase():n.method="get";var t=n.transitional;void 0!==t&&li.assertOptions(t,{silentJSONParsing:pi.transitional(pi.boolean),forcedJSONParsing:pi.transitional(pi.boolean),clarifyTimeoutError:pi.transitional(pi.boolean)},!1);var i=[],a=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(n)||(a=a&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));var r,o=[];if(this.interceptors.response.forEach((function(e){o.push(e.fulfilled,e.rejected)})),!a){var s=[oi,void 0];for(Array.prototype.unshift.apply(s,i),s=s.concat(o),r=Promise.resolve(n);s.length;)r=r.then(s.shift(),s.shift());return r}for(var c=n;i.length;){var l=i.shift(),p=i.shift();try{c=l(c)}catch(e){p(e);break}}try{r=oi(c)}catch(e){return Promise.reject(e)}for(;o.length;)r=r.then(o.shift(),o.shift());return r},ui.prototype.getUri=function(e){e=si(this.defaults,e);var n=ci(e.baseURL,e.url);return ai(n,e.params,e.paramsSerializer)},ii.forEach(["delete","get","head","options"],(function(e){ui.prototype[e]=function(n,t){return this.request(si(t||{},{method:e,url:n,data:(t||{}).data}))}})),ii.forEach(["post","put","patch"],(function(e){function n(n){return function(t,i,a){return this.request(si(a||{},{method:e,headers:n?{"Content-Type":"multipart/form-data"}:{},url:t,data:i}))}}ui.prototype[e]=n(),ui.prototype[e+"Form"]=n(!0)}));var di=fe,mi=G,fi=ui,hi=Wt;var vi=function e(n){var t=new fi(n),i=mi(fi.prototype.request,t);return di.extend(i,fi.prototype,t),di.extend(i,t),i.create=function(t){return e(hi(n,t))},i}($t);vi.Axios=fi,vi.CanceledError=Je(),vi.CancelToken=function(){if(Zt)return Jt;Zt=1;var e=Je();function n(n){if("function"!=typeof n)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var i=this;this.promise.then((function(e){if(i._listeners){var n,t=i._listeners.length;for(n=0;n<t;n++)i._listeners[n](e);i._listeners=null}})),this.promise.then=function(e){var n,t=new Promise((function(e){i.subscribe(e),n=e})).then(e);return t.cancel=function(){i.unsubscribe(n)},t},n((function(n){i.reason||(i.reason=new e(n),t(i.reason))}))}return n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},n.prototype.unsubscribe=function(e){if(this._listeners){var n=this._listeners.indexOf(e);-1!==n&&this._listeners.splice(n,1)}},n.source=function(){var e;return{token:new n((function(n){e=n})),cancel:e}},Jt=n}(),vi.isCancel=Ot(),vi.VERSION=Tn().version,vi.toFormData=Le(),vi.AxiosError=Ce(),vi.Cancel=vi.CanceledError,vi.all=function(e){return Promise.all(e)},vi.spread=Qt?Xt:(Qt=1,Xt=function(e){return function(n){return e.apply(null,n)}}),vi.isAxiosError=function(){if(ni)return ei;ni=1;var e=fe;return ei=function(n){return e.isObject(n)&&!0===n.isAxiosError}}(),K.exports=vi,K.exports.default=vi;const xi=W(H.exports=K.exports).create({timeout:12e4,headers:{"Content-Type":"application/json;charset=utf-8"}});var gi={exports:{}},bi=gi.exports=function(){var e=1e3,n=6e4,t=36e5,i="millisecond",a="second",r="minute",o="hour",s="day",c="week",l="month",p="quarter",u="year",d="date",m="Invalid Date",f=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,h=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,v={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(e){var n=["th","st","nd","rd"],t=e%100;return"["+e+(n[(t-20)%10]||n[t]||n[0])+"]"}},x=function(e,n,t){var i=String(e);return!i||i.length>=n?e:""+Array(n+1-i.length).join(t)+e},g={s:x,z:function(e){var n=-e.utcOffset(),t=Math.abs(n),i=Math.floor(t/60),a=t%60;return(n<=0?"+":"-")+x(i,2,"0")+":"+x(a,2,"0")},m:function e(n,t){if(n.date()<t.date())return-e(t,n);var i=12*(t.year()-n.year())+(t.month()-n.month()),a=n.clone().add(i,l),r=t-a<0,o=n.clone().add(i+(r?-1:1),l);return+(-(i+(t-a)/(r?a-o:o-a))||0)},a:function(e){return e<0?Math.ceil(e)||0:Math.floor(e)},p:function(e){return{M:l,y:u,w:c,d:s,D:d,h:o,m:r,s:a,ms:i,Q:p}[e]||String(e||"").toLowerCase().replace(/s$/,"")},u:function(e){return void 0===e}},b="en",y={};y[b]=v;var w="$isDayjsObject",_=function(e){return e instanceof k||!(!e||!e[w])},A=function e(n,t,i){var a;if(!n)return b;if("string"==typeof n){var r=n.toLowerCase();y[r]&&(a=r),t&&(y[r]=t,a=r);var o=n.split("-");if(!a&&o.length>1)return e(o[0])}else{var s=n.name;y[s]=n,a=s}return!i&&a&&(b=a),a||!i&&b},C=function(e,n){if(_(e))return e.clone();var t="object"==typeof n?n:{};return t.date=e,t.args=arguments,new k(t)},S=g;S.l=A,S.i=_,S.w=function(e,n){return C(e,{locale:n.$L,utc:n.$u,x:n.$x,$offset:n.$offset})};var k=function(){function v(e){this.$L=A(e.locale,null,!0),this.parse(e),this.$x=this.$x||e.x||{},this[w]=!0}var x=v.prototype;return x.parse=function(e){this.$d=function(e){var n=e.date,t=e.utc;if(null===n)return new Date(NaN);if(S.u(n))return new Date;if(n instanceof Date)return new Date(n);if("string"==typeof n&&!/Z$/i.test(n)){var i=n.match(f);if(i){var a=i[2]-1||0,r=(i[7]||"0").substring(0,3);return t?new Date(Date.UTC(i[1],a,i[3]||1,i[4]||0,i[5]||0,i[6]||0,r)):new Date(i[1],a,i[3]||1,i[4]||0,i[5]||0,i[6]||0,r)}}return new Date(n)}(e),this.init()},x.init=function(){var e=this.$d;this.$y=e.getFullYear(),this.$M=e.getMonth(),this.$D=e.getDate(),this.$W=e.getDay(),this.$H=e.getHours(),this.$m=e.getMinutes(),this.$s=e.getSeconds(),this.$ms=e.getMilliseconds()},x.$utils=function(){return S},x.isValid=function(){return!(this.$d.toString()===m)},x.isSame=function(e,n){var t=C(e);return this.startOf(n)<=t&&t<=this.endOf(n)},x.isAfter=function(e,n){return C(e)<this.startOf(n)},x.isBefore=function(e,n){return this.endOf(n)<C(e)},x.$g=function(e,n,t){return S.u(e)?this[n]:this.set(t,e)},x.unix=function(){return Math.floor(this.valueOf()/1e3)},x.valueOf=function(){return this.$d.getTime()},x.startOf=function(e,n){var t=this,i=!!S.u(n)||n,p=S.p(e),m=function(e,n){var a=S.w(t.$u?Date.UTC(t.$y,n,e):new Date(t.$y,n,e),t);return i?a:a.endOf(s)},f=function(e,n){return S.w(t.toDate()[e].apply(t.toDate("s"),(i?[0,0,0,0]:[23,59,59,999]).slice(n)),t)},h=this.$W,v=this.$M,x=this.$D,g="set"+(this.$u?"UTC":"");switch(p){case u:return i?m(1,0):m(31,11);case l:return i?m(1,v):m(0,v+1);case c:var b=this.$locale().weekStart||0,y=(h<b?h+7:h)-b;return m(i?x-y:x+(6-y),v);case s:case d:return f(g+"Hours",0);case o:return f(g+"Minutes",1);case r:return f(g+"Seconds",2);case a:return f(g+"Milliseconds",3);default:return this.clone()}},x.endOf=function(e){return this.startOf(e,!1)},x.$set=function(e,n){var t,c=S.p(e),p="set"+(this.$u?"UTC":""),m=(t={},t[s]=p+"Date",t[d]=p+"Date",t[l]=p+"Month",t[u]=p+"FullYear",t[o]=p+"Hours",t[r]=p+"Minutes",t[a]=p+"Seconds",t[i]=p+"Milliseconds",t)[c],f=c===s?this.$D+(n-this.$W):n;if(c===l||c===u){var h=this.clone().set(d,1);h.$d[m](f),h.init(),this.$d=h.set(d,Math.min(this.$D,h.daysInMonth())).$d}else m&&this.$d[m](f);return this.init(),this},x.set=function(e,n){return this.clone().$set(e,n)},x.get=function(e){return this[S.p(e)]()},x.add=function(i,p){var d,m=this;i=Number(i);var f=S.p(p),h=function(e){var n=C(m);return S.w(n.date(n.date()+Math.round(e*i)),m)};if(f===l)return this.set(l,this.$M+i);if(f===u)return this.set(u,this.$y+i);if(f===s)return h(1);if(f===c)return h(7);var v=(d={},d[r]=n,d[o]=t,d[a]=e,d)[f]||1,x=this.$d.getTime()+i*v;return S.w(x,this)},x.subtract=function(e,n){return this.add(-1*e,n)},x.format=function(e){var n=this,t=this.$locale();if(!this.isValid())return t.invalidDate||m;var i=e||"YYYY-MM-DDTHH:mm:ssZ",a=S.z(this),r=this.$H,o=this.$m,s=this.$M,c=t.weekdays,l=t.months,p=t.meridiem,u=function(e,t,a,r){return e&&(e[t]||e(n,i))||a[t].slice(0,r)},d=function(e){return S.s(r%12||12,e,"0")},f=p||function(e,n,t){var i=e<12?"AM":"PM";return t?i.toLowerCase():i};return i.replace(h,(function(e,i){return i||function(e){switch(e){case"YY":return String(n.$y).slice(-2);case"YYYY":return S.s(n.$y,4,"0");case"M":return s+1;case"MM":return S.s(s+1,2,"0");case"MMM":return u(t.monthsShort,s,l,3);case"MMMM":return u(l,s);case"D":return n.$D;case"DD":return S.s(n.$D,2,"0");case"d":return String(n.$W);case"dd":return u(t.weekdaysMin,n.$W,c,2);case"ddd":return u(t.weekdaysShort,n.$W,c,3);case"dddd":return c[n.$W];case"H":return String(r);case"HH":return S.s(r,2,"0");case"h":return d(1);case"hh":return d(2);case"a":return f(r,o,!0);case"A":return f(r,o,!1);case"m":return String(o);case"mm":return S.s(o,2,"0");case"s":return String(n.$s);case"ss":return S.s(n.$s,2,"0");case"SSS":return S.s(n.$ms,3,"0");case"Z":return a}return null}(e)||a.replace(":","")}))},x.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},x.diff=function(i,d,m){var f,h=this,v=S.p(d),x=C(i),g=(x.utcOffset()-this.utcOffset())*n,b=this-x,y=function(){return S.m(h,x)};switch(v){case u:f=y()/12;break;case l:f=y();break;case p:f=y()/3;break;case c:f=(b-g)/6048e5;break;case s:f=(b-g)/864e5;break;case o:f=b/t;break;case r:f=b/n;break;case a:f=b/e;break;default:f=b}return m?f:S.a(f)},x.daysInMonth=function(){return this.endOf(l).$D},x.$locale=function(){return y[this.$L]},x.locale=function(e,n){if(!e)return this.$L;var t=this.clone(),i=A(e,n,!0);return i&&(t.$L=i),t},x.clone=function(){return S.w(this.$d,this)},x.toDate=function(){return new Date(this.valueOf())},x.toJSON=function(){return this.isValid()?this.toISOString():null},x.toISOString=function(){return this.$d.toISOString()},x.toString=function(){return this.$d.toUTCString()},v}(),j=k.prototype;return C.prototype=j,[["$ms",i],["$s",a],["$m",r],["$H",o],["$W",s],["$M",l],["$y",u],["$D",d]].forEach((function(e){j[e[1]]=function(n){return this.$g(n,e[0],e[1])}})),C.extend=function(e,n){return e.$i||(e(n,k,C),e.$i=!0),C},C.locale=A,C.isDayjs=_,C.unix=function(e){return C(1e3*e)},C.en=y[b],C.Ls=y,C.p={},C}();const yi=function(e){if(0===e)return"0.00";let n="0";return e&&"NaN"!==e.toString()&&(n=(e/1).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")),n},wi=function(e){return e&&"string"==typeof e?e.substring(0,1):""},_i=function(){for(var e=[],n="0123456789abcdef",t=0;t<36;t++)e[t]=n.substr(Math.floor(16*Math.random()),1);e[14]="4",e[19]=n.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-";var i=e.join("");return i},Ai=function(e){var n=String(e);return n.substr(0,3)+"****"+n.substr(7)},Ci=function(e){let n="";return e.forEach(((t,i)=>{n=n+JSON.parse(t).name+(i===e.length-1?"":"/")})),n};var Si,ki,ji=function(e){e.filter("currency",yi),e.filter("getUUID",_i),e.filter("phoneEncry",Ai),e.filter("peopleShow",Ci),e.filter("indexFirst",wi)},Ti={exports:{}};
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
Si=Ti,ki=Ti.exports,function(){var e,n="Expected a function",t="__lodash_hash_undefined__",i="__lodash_placeholder__",a=16,r=32,o=64,s=128,c=256,l=1/0,p=9007199254740991,u=NaN,d=4294967295,m=[["ary",s],["bind",1],["bindKey",2],["curry",8],["curryRight",a],["flip",512],["partial",r],["partialRight",o],["rearg",c]],f="[object Arguments]",h="[object Array]",v="[object Boolean]",x="[object Date]",g="[object Error]",b="[object Function]",y="[object GeneratorFunction]",w="[object Map]",_="[object Number]",A="[object Object]",C="[object Promise]",S="[object RegExp]",k="[object Set]",j="[object String]",T="[object Symbol]",E="[object WeakMap]",P="[object ArrayBuffer]",B="[object DataView]",L="[object Float32Array]",D="[object Float64Array]",$="[object Int8Array]",I="[object Int16Array]",F="[object Int32Array]",O="[object Uint8Array]",R="[object Uint8ClampedArray]",N="[object Uint16Array]",z="[object Uint32Array]",q=/\b__p \+= '';/g,M=/\b(__p \+=) '' \+/g,V=/(__e\(.*?\)|\b__t\)) \+\n'';/g,W=/&(?:amp|lt|gt|quot|#39);/g,Y=/[&<>"']/g,H=RegExp(W.source),K=RegExp(Y.source),G=/<%-([\s\S]+?)%>/g,J=/<%([\s\S]+?)%>/g,Z=/<%=([\s\S]+?)%>/g,X=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Q=/^\w*$/,ee=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ne=/[\\^$.*+?()[\]{}|]/g,te=RegExp(ne.source),ie=/^\s+/,ae=/\s/,re=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,oe=/\{\n\/\* \[wrapped with (.+)\] \*/,se=/,? & /,ce=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,le=/[()=,{}\[\]\/\s]/,pe=/\\(\\)?/g,ue=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,de=/\w*$/,me=/^[-+]0x[0-9a-f]+$/i,fe=/^0b[01]+$/i,he=/^\[object .+?Constructor\]$/,ve=/^0o[0-7]+$/i,xe=/^(?:0|[1-9]\d*)$/,ge=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,be=/($^)/,ye=/['\n\r\u2028\u2029\\]/g,we="\\ud800-\\udfff",_e="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ae="\\u2700-\\u27bf",Ce="a-z\\xdf-\\xf6\\xf8-\\xff",Se="A-Z\\xc0-\\xd6\\xd8-\\xde",ke="\\ufe0e\\ufe0f",je="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Te="['’]",Ee="["+we+"]",Pe="["+je+"]",Be="["+_e+"]",Le="\\d+",De="["+Ae+"]",$e="["+Ce+"]",Ie="[^"+we+je+Le+Ae+Ce+Se+"]",Fe="\\ud83c[\\udffb-\\udfff]",Oe="[^"+we+"]",Re="(?:\\ud83c[\\udde6-\\uddff]){2}",Ne="[\\ud800-\\udbff][\\udc00-\\udfff]",ze="["+Se+"]",qe="\\u200d",Me="(?:"+$e+"|"+Ie+")",Ve="(?:"+ze+"|"+Ie+")",Ue="(?:['’](?:d|ll|m|re|s|t|ve))?",We="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ye="(?:"+Be+"|"+Fe+")?",He="["+ke+"]?",Ke=He+Ye+"(?:"+qe+"(?:"+[Oe,Re,Ne].join("|")+")"+He+Ye+")*",Ge="(?:"+[De,Re,Ne].join("|")+")"+Ke,Je="(?:"+[Oe+Be+"?",Be,Re,Ne,Ee].join("|")+")",Ze=RegExp(Te,"g"),Xe=RegExp(Be,"g"),Qe=RegExp(Fe+"(?="+Fe+")|"+Je+Ke,"g"),en=RegExp([ze+"?"+$e+"+"+Ue+"(?="+[Pe,ze,"$"].join("|")+")",Ve+"+"+We+"(?="+[Pe,ze+Me,"$"].join("|")+")",ze+"?"+Me+"+"+Ue,ze+"+"+We,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Le,Ge].join("|"),"g"),nn=RegExp("["+qe+we+_e+ke+"]"),tn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,an=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],rn=-1,on={};on[L]=on[D]=on[$]=on[I]=on[F]=on[O]=on[R]=on[N]=on[z]=!0,on[f]=on[h]=on[P]=on[v]=on[B]=on[x]=on[g]=on[b]=on[w]=on[_]=on[A]=on[S]=on[k]=on[j]=on[E]=!1;var sn={};sn[f]=sn[h]=sn[P]=sn[B]=sn[v]=sn[x]=sn[L]=sn[D]=sn[$]=sn[I]=sn[F]=sn[w]=sn[_]=sn[A]=sn[S]=sn[k]=sn[j]=sn[T]=sn[O]=sn[R]=sn[N]=sn[z]=!0,sn[g]=sn[b]=sn[E]=!1;var cn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ln=parseFloat,pn=parseInt,un="object"==typeof U&&U&&U.Object===Object&&U,dn="object"==typeof self&&self&&self.Object===Object&&self,mn=un||dn||Function("return this")(),fn=ki&&!ki.nodeType&&ki,hn=fn&&Si&&!Si.nodeType&&Si,vn=hn&&hn.exports===fn,xn=vn&&un.process,gn=function(){try{var e=hn&&hn.require&&hn.require("util").types;return e||xn&&xn.binding&&xn.binding("util")}catch(e){}}(),bn=gn&&gn.isArrayBuffer,yn=gn&&gn.isDate,wn=gn&&gn.isMap,_n=gn&&gn.isRegExp,An=gn&&gn.isSet,Cn=gn&&gn.isTypedArray;function Sn(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}function kn(e,n,t,i){for(var a=-1,r=null==e?0:e.length;++a<r;){var o=e[a];n(i,o,t(o),e)}return i}function jn(e,n){for(var t=-1,i=null==e?0:e.length;++t<i&&!1!==n(e[t],t,e););return e}function Tn(e,n){for(var t=null==e?0:e.length;t--&&!1!==n(e[t],t,e););return e}function En(e,n){for(var t=-1,i=null==e?0:e.length;++t<i;)if(!n(e[t],t,e))return!1;return!0}function Pn(e,n){for(var t=-1,i=null==e?0:e.length,a=0,r=[];++t<i;){var o=e[t];n(o,t,e)&&(r[a++]=o)}return r}function Bn(e,n){return!(null==e||!e.length)&&qn(e,n,0)>-1}function Ln(e,n,t){for(var i=-1,a=null==e?0:e.length;++i<a;)if(t(n,e[i]))return!0;return!1}function Dn(e,n){for(var t=-1,i=null==e?0:e.length,a=Array(i);++t<i;)a[t]=n(e[t],t,e);return a}function $n(e,n){for(var t=-1,i=n.length,a=e.length;++t<i;)e[a+t]=n[t];return e}function In(e,n,t,i){var a=-1,r=null==e?0:e.length;for(i&&r&&(t=e[++a]);++a<r;)t=n(t,e[a],a,e);return t}function Fn(e,n,t,i){var a=null==e?0:e.length;for(i&&a&&(t=e[--a]);a--;)t=n(t,e[a],a,e);return t}function On(e,n){for(var t=-1,i=null==e?0:e.length;++t<i;)if(n(e[t],t,e))return!0;return!1}var Rn=Wn("length");function Nn(e,n,t){var i;return t(e,(function(e,t,a){if(n(e,t,a))return i=t,!1})),i}function zn(e,n,t,i){for(var a=e.length,r=t+(i?1:-1);i?r--:++r<a;)if(n(e[r],r,e))return r;return-1}function qn(e,n,t){return n==n?function(e,n,t){for(var i=t-1,a=e.length;++i<a;)if(e[i]===n)return i;return-1}(e,n,t):zn(e,Vn,t)}function Mn(e,n,t,i){for(var a=t-1,r=e.length;++a<r;)if(i(e[a],n))return a;return-1}function Vn(e){return e!=e}function Un(e,n){var t=null==e?0:e.length;return t?Kn(e,n)/t:u}function Wn(n){return function(t){return null==t?e:t[n]}}function Yn(n){return function(t){return null==n?e:n[t]}}function Hn(e,n,t,i,a){return a(e,(function(e,a,r){t=i?(i=!1,e):n(t,e,a,r)})),t}function Kn(n,t){for(var i,a=-1,r=n.length;++a<r;){var o=t(n[a]);o!==e&&(i=i===e?o:i+o)}return i}function Gn(e,n){for(var t=-1,i=Array(e);++t<e;)i[t]=n(t);return i}function Jn(e){return e?e.slice(0,mt(e)+1).replace(ie,""):e}function Zn(e){return function(n){return e(n)}}function Xn(e,n){return Dn(n,(function(n){return e[n]}))}function Qn(e,n){return e.has(n)}function et(e,n){for(var t=-1,i=e.length;++t<i&&qn(n,e[t],0)>-1;);return t}function nt(e,n){for(var t=e.length;t--&&qn(n,e[t],0)>-1;);return t}var tt=Yn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),it=Yn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function at(e){return"\\"+cn[e]}function rt(e){return nn.test(e)}function ot(e){var n=-1,t=Array(e.size);return e.forEach((function(e,i){t[++n]=[i,e]})),t}function st(e,n){return function(t){return e(n(t))}}function ct(e,n){for(var t=-1,a=e.length,r=0,o=[];++t<a;){var s=e[t];s!==n&&s!==i||(e[t]=i,o[r++]=t)}return o}function lt(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}function pt(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=[e,e]})),t}function ut(e){return rt(e)?function(e){for(var n=Qe.lastIndex=0;Qe.test(e);)++n;return n}(e):Rn(e)}function dt(e){return rt(e)?function(e){return e.match(Qe)||[]}(e):function(e){return e.split("")}(e)}function mt(e){for(var n=e.length;n--&&ae.test(e.charAt(n)););return n}var ft=Yn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),ht=function U(ae){var we,_e=(ae=null==ae?mn:ht.defaults(mn.Object(),ae,ht.pick(mn,an))).Array,Ae=ae.Date,Ce=ae.Error,Se=ae.Function,ke=ae.Math,je=ae.Object,Te=ae.RegExp,Ee=ae.String,Pe=ae.TypeError,Be=_e.prototype,Le=Se.prototype,De=je.prototype,$e=ae["__core-js_shared__"],Ie=Le.toString,Fe=De.hasOwnProperty,Oe=0,Re=(we=/[^.]+$/.exec($e&&$e.keys&&$e.keys.IE_PROTO||""))?"Symbol(src)_1."+we:"",Ne=De.toString,ze=Ie.call(je),qe=mn._,Me=Te("^"+Ie.call(Fe).replace(ne,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ve=vn?ae.Buffer:e,Ue=ae.Symbol,We=ae.Uint8Array,Ye=Ve?Ve.allocUnsafe:e,He=st(je.getPrototypeOf,je),Ke=je.create,Ge=De.propertyIsEnumerable,Je=Be.splice,Qe=Ue?Ue.isConcatSpreadable:e,nn=Ue?Ue.iterator:e,cn=Ue?Ue.toStringTag:e,un=function(){try{var e=dr(je,"defineProperty");return e({},"",{}),e}catch(e){}}(),dn=ae.clearTimeout!==mn.clearTimeout&&ae.clearTimeout,fn=Ae&&Ae.now!==mn.Date.now&&Ae.now,hn=ae.setTimeout!==mn.setTimeout&&ae.setTimeout,xn=ke.ceil,gn=ke.floor,Rn=je.getOwnPropertySymbols,Yn=Ve?Ve.isBuffer:e,vt=ae.isFinite,xt=Be.join,gt=st(je.keys,je),bt=ke.max,yt=ke.min,wt=Ae.now,_t=ae.parseInt,At=ke.random,Ct=Be.reverse,St=dr(ae,"DataView"),kt=dr(ae,"Map"),jt=dr(ae,"Promise"),Tt=dr(ae,"Set"),Et=dr(ae,"WeakMap"),Pt=dr(je,"create"),Bt=Et&&new Et,Lt={},Dt=Rr(St),$t=Rr(kt),It=Rr(jt),Ft=Rr(Tt),Ot=Rr(Et),Rt=Ue?Ue.prototype:e,Nt=Rt?Rt.valueOf:e,zt=Rt?Rt.toString:e;function qt(e){if(ts(e)&&!Wo(e)&&!(e instanceof Wt)){if(e instanceof Ut)return e;if(Fe.call(e,"__wrapped__"))return Nr(e)}return new Ut(e)}var Mt=function(){function n(){}return function(t){if(!ns(t))return{};if(Ke)return Ke(t);n.prototype=t;var i=new n;return n.prototype=e,i}}();function Vt(){}function Ut(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=e}function Wt(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=d,this.__views__=[]}function Yt(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var i=e[n];this.set(i[0],i[1])}}function Ht(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var i=e[n];this.set(i[0],i[1])}}function Kt(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var i=e[n];this.set(i[0],i[1])}}function Gt(e){var n=-1,t=null==e?0:e.length;for(this.__data__=new Kt;++n<t;)this.add(e[n])}function Jt(e){var n=this.__data__=new Ht(e);this.size=n.size}function Zt(e,n){var t=Wo(e),i=!t&&Uo(e),a=!t&&!i&&Go(e),r=!t&&!i&&!a&&ps(e),o=t||i||a||r,s=o?Gn(e.length,Ee):[],c=s.length;for(var l in e)!n&&!Fe.call(e,l)||o&&("length"==l||a&&("offset"==l||"parent"==l)||r&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||br(l,c))||s.push(l);return s}function Xt(n){var t=n.length;return t?n[Gi(0,t-1)]:e}function Qt(e,n){return Ir(Pa(e),ci(n,0,e.length))}function ei(e){return Ir(Pa(e))}function ni(n,t,i){(i!==e&&!qo(n[t],i)||i===e&&!(t in n))&&oi(n,t,i)}function ti(n,t,i){var a=n[t];Fe.call(n,t)&&qo(a,i)&&(i!==e||t in n)||oi(n,t,i)}function ii(e,n){for(var t=e.length;t--;)if(qo(e[t][0],n))return t;return-1}function ai(e,n,t,i){return mi(e,(function(e,a,r){n(i,e,t(e),r)})),i}function ri(e,n){return e&&Ba(n,Ls(n),e)}function oi(e,n,t){"__proto__"==n&&un?un(e,n,{configurable:!0,enumerable:!0,value:t,writable:!0}):e[n]=t}function si(n,t){for(var i=-1,a=t.length,r=_e(a),o=null==n;++i<a;)r[i]=o?e:js(n,t[i]);return r}function ci(n,t,i){return n==n&&(i!==e&&(n=n<=i?n:i),t!==e&&(n=n>=t?n:t)),n}function li(n,t,i,a,r,o){var s,c=1&t,l=2&t,p=4&t;if(i&&(s=r?i(n,a,r,o):i(n)),s!==e)return s;if(!ns(n))return n;var u=Wo(n);if(u){if(s=function(e){var n=e.length,t=new e.constructor(n);return n&&"string"==typeof e[0]&&Fe.call(e,"index")&&(t.index=e.index,t.input=e.input),t}(n),!c)return Pa(n,s)}else{var d=hr(n),m=d==b||d==y;if(Go(n))return Ca(n,c);if(d==A||d==f||m&&!r){if(s=l||m?{}:xr(n),!c)return l?function(e,n){return Ba(e,fr(e),n)}(n,function(e,n){return e&&Ba(n,Ds(n),e)}(s,n)):function(e,n){return Ba(e,mr(e),n)}(n,ri(s,n))}else{if(!sn[d])return r?n:{};s=function(e,n,t){var i,a=e.constructor;switch(n){case P:return Sa(e);case v:case x:return new a(+e);case B:return function(e,n){var t=n?Sa(e.buffer):e.buffer;return new e.constructor(t,e.byteOffset,e.byteLength)}(e,t);case L:case D:case $:case I:case F:case O:case R:case N:case z:return ka(e,t);case w:return new a;case _:case j:return new a(e);case S:return function(e){var n=new e.constructor(e.source,de.exec(e));return n.lastIndex=e.lastIndex,n}(e);case k:return new a;case T:return i=e,Nt?je(Nt.call(i)):{}}}(n,d,c)}}o||(o=new Jt);var h=o.get(n);if(h)return h;o.set(n,s),ss(n)?n.forEach((function(e){s.add(li(e,t,i,e,n,o))})):is(n)&&n.forEach((function(e,a){s.set(a,li(e,t,i,a,n,o))}));var g=u?e:(p?l?rr:ar:l?Ds:Ls)(n);return jn(g||n,(function(e,a){g&&(e=n[a=e]),ti(s,a,li(e,t,i,a,n,o))})),s}function pi(n,t,i){var a=i.length;if(null==n)return!a;for(n=je(n);a--;){var r=i[a],o=t[r],s=n[r];if(s===e&&!(r in n)||!o(s))return!1}return!0}function ui(t,i,a){if("function"!=typeof t)throw new Pe(n);return Br((function(){t.apply(e,a)}),i)}function di(e,n,t,i){var a=-1,r=Bn,o=!0,s=e.length,c=[],l=n.length;if(!s)return c;t&&(n=Dn(n,Zn(t))),i?(r=Ln,o=!1):n.length>=200&&(r=Qn,o=!1,n=new Gt(n));e:for(;++a<s;){var p=e[a],u=null==t?p:t(p);if(p=i||0!==p?p:0,o&&u==u){for(var d=l;d--;)if(n[d]===u)continue e;c.push(p)}else r(n,u,i)||c.push(p)}return c}qt.templateSettings={escape:G,evaluate:J,interpolate:Z,variable:"",imports:{_:qt}},qt.prototype=Vt.prototype,qt.prototype.constructor=qt,Ut.prototype=Mt(Vt.prototype),Ut.prototype.constructor=Ut,Wt.prototype=Mt(Vt.prototype),Wt.prototype.constructor=Wt,Yt.prototype.clear=function(){this.__data__=Pt?Pt(null):{},this.size=0},Yt.prototype.delete=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n},Yt.prototype.get=function(n){var i=this.__data__;if(Pt){var a=i[n];return a===t?e:a}return Fe.call(i,n)?i[n]:e},Yt.prototype.has=function(n){var t=this.__data__;return Pt?t[n]!==e:Fe.call(t,n)},Yt.prototype.set=function(n,i){var a=this.__data__;return this.size+=this.has(n)?0:1,a[n]=Pt&&i===e?t:i,this},Ht.prototype.clear=function(){this.__data__=[],this.size=0},Ht.prototype.delete=function(e){var n=this.__data__,t=ii(n,e);return!(t<0||(t==n.length-1?n.pop():Je.call(n,t,1),--this.size,0))},Ht.prototype.get=function(n){var t=this.__data__,i=ii(t,n);return i<0?e:t[i][1]},Ht.prototype.has=function(e){return ii(this.__data__,e)>-1},Ht.prototype.set=function(e,n){var t=this.__data__,i=ii(t,e);return i<0?(++this.size,t.push([e,n])):t[i][1]=n,this},Kt.prototype.clear=function(){this.size=0,this.__data__={hash:new Yt,map:new(kt||Ht),string:new Yt}},Kt.prototype.delete=function(e){var n=pr(this,e).delete(e);return this.size-=n?1:0,n},Kt.prototype.get=function(e){return pr(this,e).get(e)},Kt.prototype.has=function(e){return pr(this,e).has(e)},Kt.prototype.set=function(e,n){var t=pr(this,e),i=t.size;return t.set(e,n),this.size+=t.size==i?0:1,this},Gt.prototype.add=Gt.prototype.push=function(e){return this.__data__.set(e,t),this},Gt.prototype.has=function(e){return this.__data__.has(e)},Jt.prototype.clear=function(){this.__data__=new Ht,this.size=0},Jt.prototype.delete=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t},Jt.prototype.get=function(e){return this.__data__.get(e)},Jt.prototype.has=function(e){return this.__data__.has(e)},Jt.prototype.set=function(e,n){var t=this.__data__;if(t instanceof Ht){var i=t.__data__;if(!kt||i.length<199)return i.push([e,n]),this.size=++t.size,this;t=this.__data__=new Kt(i)}return t.set(e,n),this.size=t.size,this};var mi=$a(wi),fi=$a(_i,!0);function hi(e,n){var t=!0;return mi(e,(function(e,i,a){return t=!!n(e,i,a)})),t}function vi(n,t,i){for(var a=-1,r=n.length;++a<r;){var o=n[a],s=t(o);if(null!=s&&(c===e?s==s&&!ls(s):i(s,c)))var c=s,l=o}return l}function xi(e,n){var t=[];return mi(e,(function(e,i,a){n(e,i,a)&&t.push(e)})),t}function gi(e,n,t,i,a){var r=-1,o=e.length;for(t||(t=gr),a||(a=[]);++r<o;){var s=e[r];n>0&&t(s)?n>1?gi(s,n-1,t,i,a):$n(a,s):i||(a[a.length]=s)}return a}var bi=Ia(),yi=Ia(!0);function wi(e,n){return e&&bi(e,n,Ls)}function _i(e,n){return e&&yi(e,n,Ls)}function Ai(e,n){return Pn(n,(function(n){return Xo(e[n])}))}function Ci(n,t){for(var i=0,a=(t=ya(t,n)).length;null!=n&&i<a;)n=n[Or(t[i++])];return i&&i==a?n:e}function Si(e,n,t){var i=n(e);return Wo(e)?i:$n(i,t(e))}function ki(n){return null==n?n===e?"[object Undefined]":"[object Null]":cn&&cn in je(n)?function(n){var t=Fe.call(n,cn),i=n[cn];try{n[cn]=e;var a=!0}catch(e){}var r=Ne.call(n);return a&&(t?n[cn]=i:delete n[cn]),r}(n):function(e){return Ne.call(e)}(n)}function ji(e,n){return e>n}function Ti(e,n){return null!=e&&Fe.call(e,n)}function Ei(e,n){return null!=e&&n in je(e)}function Pi(n,t,i){for(var a=i?Ln:Bn,r=n[0].length,o=n.length,s=o,c=_e(o),l=1/0,p=[];s--;){var u=n[s];s&&t&&(u=Dn(u,Zn(t))),l=yt(u.length,l),c[s]=!i&&(t||r>=120&&u.length>=120)?new Gt(s&&u):e}u=n[0];var d=-1,m=c[0];e:for(;++d<r&&p.length<l;){var f=u[d],h=t?t(f):f;if(f=i||0!==f?f:0,!(m?Qn(m,h):a(p,h,i))){for(s=o;--s;){var v=c[s];if(!(v?Qn(v,h):a(n[s],h,i)))continue e}m&&m.push(h),p.push(f)}}return p}function Bi(n,t,i){var a=null==(n=Tr(n,t=ya(t,n)))?n:n[Or(Jr(t))];return null==a?e:Sn(a,n,i)}function Li(e){return ts(e)&&ki(e)==f}function Di(n,t,i,a,r){return n===t||(null==n||null==t||!ts(n)&&!ts(t)?n!=n&&t!=t:function(n,t,i,a,r,o){var s=Wo(n),c=Wo(t),l=s?h:hr(n),p=c?h:hr(t),u=(l=l==f?A:l)==A,d=(p=p==f?A:p)==A,m=l==p;if(m&&Go(n)){if(!Go(t))return!1;s=!0,u=!1}if(m&&!u)return o||(o=new Jt),s||ps(n)?tr(n,t,i,a,r,o):function(e,n,t,i,a,r,o){switch(t){case B:if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case P:return!(e.byteLength!=n.byteLength||!r(new We(e),new We(n)));case v:case x:case _:return qo(+e,+n);case g:return e.name==n.name&&e.message==n.message;case S:case j:return e==n+"";case w:var s=ot;case k:var c=1&i;if(s||(s=lt),e.size!=n.size&&!c)return!1;var l=o.get(e);if(l)return l==n;i|=2,o.set(e,n);var p=tr(s(e),s(n),i,a,r,o);return o.delete(e),p;case T:if(Nt)return Nt.call(e)==Nt.call(n)}return!1}(n,t,l,i,a,r,o);if(!(1&i)){var b=u&&Fe.call(n,"__wrapped__"),y=d&&Fe.call(t,"__wrapped__");if(b||y){var C=b?n.value():n,E=y?t.value():t;return o||(o=new Jt),r(C,E,i,a,o)}}return!!m&&(o||(o=new Jt),function(n,t,i,a,r,o){var s=1&i,c=ar(n),l=c.length,p=ar(t),u=p.length;if(l!=u&&!s)return!1;for(var d=l;d--;){var m=c[d];if(!(s?m in t:Fe.call(t,m)))return!1}var f=o.get(n),h=o.get(t);if(f&&h)return f==t&&h==n;var v=!0;o.set(n,t),o.set(t,n);for(var x=s;++d<l;){var g=n[m=c[d]],b=t[m];if(a)var y=s?a(b,g,m,t,n,o):a(g,b,m,n,t,o);if(!(y===e?g===b||r(g,b,i,a,o):y)){v=!1;break}x||(x="constructor"==m)}if(v&&!x){var w=n.constructor,_=t.constructor;w==_||!("constructor"in n)||!("constructor"in t)||"function"==typeof w&&w instanceof w&&"function"==typeof _&&_ instanceof _||(v=!1)}return o.delete(n),o.delete(t),v}(n,t,i,a,r,o))}(n,t,i,a,Di,r))}function $i(n,t,i,a){var r=i.length,o=r,s=!a;if(null==n)return!o;for(n=je(n);r--;){var c=i[r];if(s&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++r<o;){var l=(c=i[r])[0],p=n[l],u=c[1];if(s&&c[2]){if(p===e&&!(l in n))return!1}else{var d=new Jt;if(a)var m=a(p,u,l,n,t,d);if(!(m===e?Di(u,p,3,a,d):m))return!1}}return!0}function Ii(e){return!(!ns(e)||(n=e,Re&&Re in n))&&(Xo(e)?Me:he).test(Rr(e));var n}function Fi(e){return"function"==typeof e?e:null==e?ac:"object"==typeof e?Wo(e)?Mi(e[0],e[1]):qi(e):mc(e)}function Oi(e){if(!Cr(e))return gt(e);var n=[];for(var t in je(e))Fe.call(e,t)&&"constructor"!=t&&n.push(t);return n}function Ri(e){if(!ns(e))return function(e){var n=[];if(null!=e)for(var t in je(e))n.push(t);return n}(e);var n=Cr(e),t=[];for(var i in e)("constructor"!=i||!n&&Fe.call(e,i))&&t.push(i);return t}function Ni(e,n){return e<n}function zi(e,n){var t=-1,i=Ho(e)?_e(e.length):[];return mi(e,(function(e,a,r){i[++t]=n(e,a,r)})),i}function qi(e){var n=ur(e);return 1==n.length&&n[0][2]?kr(n[0][0],n[0][1]):function(t){return t===e||$i(t,e,n)}}function Mi(n,t){return wr(n)&&Sr(t)?kr(Or(n),t):function(i){var a=js(i,n);return a===e&&a===t?Ts(i,n):Di(t,a,3)}}function Vi(n,t,i,a,r){n!==t&&bi(t,(function(o,s){if(r||(r=new Jt),ns(o))!function(n,t,i,a,r,o,s){var c=Er(n,i),l=Er(t,i),p=s.get(l);if(p)ni(n,i,p);else{var u=o?o(c,l,i+"",n,t,s):e,d=u===e;if(d){var m=Wo(l),f=!m&&Go(l),h=!m&&!f&&ps(l);u=l,m||f||h?Wo(c)?u=c:Ko(c)?u=Pa(c):f?(d=!1,u=Ca(l,!0)):h?(d=!1,u=ka(l,!0)):u=[]:rs(l)||Uo(l)?(u=c,Uo(c)?u=gs(c):ns(c)&&!Xo(c)||(u=xr(l))):d=!1}d&&(s.set(l,u),r(u,l,a,o,s),s.delete(l)),ni(n,i,u)}}(n,t,s,i,Vi,a,r);else{var c=a?a(Er(n,s),o,s+"",n,t,r):e;c===e&&(c=o),ni(n,s,c)}}),Ds)}function Ui(n,t){var i=n.length;if(i)return br(t+=t<0?i:0,i)?n[t]:e}function Wi(e,n,t){n=n.length?Dn(n,(function(e){return Wo(e)?function(n){return Ci(n,1===e.length?e[0]:e)}:e})):[ac];var i=-1;n=Dn(n,Zn(lr()));var a=zi(e,(function(e,t,a){var r=Dn(n,(function(n){return n(e)}));return{criteria:r,index:++i,value:e}}));return function(e,n){var t=e.length;for(e.sort(n);t--;)e[t]=e[t].value;return e}(a,(function(e,n){return function(e,n,t){for(var i=-1,a=e.criteria,r=n.criteria,o=a.length,s=t.length;++i<o;){var c=ja(a[i],r[i]);if(c)return i>=s?c:c*("desc"==t[i]?-1:1)}return e.index-n.index}(e,n,t)}))}function Yi(e,n,t){for(var i=-1,a=n.length,r={};++i<a;){var o=n[i],s=Ci(e,o);t(s,o)&&ea(r,ya(o,e),s)}return r}function Hi(e,n,t,i){var a=i?Mn:qn,r=-1,o=n.length,s=e;for(e===n&&(n=Pa(n)),t&&(s=Dn(e,Zn(t)));++r<o;)for(var c=0,l=n[r],p=t?t(l):l;(c=a(s,p,c,i))>-1;)s!==e&&Je.call(s,c,1),Je.call(e,c,1);return e}function Ki(e,n){for(var t=e?n.length:0,i=t-1;t--;){var a=n[t];if(t==i||a!==r){var r=a;br(a)?Je.call(e,a,1):da(e,a)}}return e}function Gi(e,n){return e+gn(At()*(n-e+1))}function Ji(e,n){var t="";if(!e||n<1||n>p)return t;do{n%2&&(t+=e),(n=gn(n/2))&&(e+=e)}while(n);return t}function Zi(e,n){return Lr(jr(e,n,ac),e+"")}function Xi(e){return Xt(qs(e))}function Qi(e,n){var t=qs(e);return Ir(t,ci(n,0,t.length))}function ea(n,t,i,a){if(!ns(n))return n;for(var r=-1,o=(t=ya(t,n)).length,s=o-1,c=n;null!=c&&++r<o;){var l=Or(t[r]),p=i;if("__proto__"===l||"constructor"===l||"prototype"===l)return n;if(r!=s){var u=c[l];(p=a?a(u,l,c):e)===e&&(p=ns(u)?u:br(t[r+1])?[]:{})}ti(c,l,p),c=c[l]}return n}var na=Bt?function(e,n){return Bt.set(e,n),e}:ac,ta=un?function(e,n){return un(e,"toString",{configurable:!0,enumerable:!1,value:nc(n),writable:!0})}:ac;function ia(e){return Ir(qs(e))}function aa(e,n,t){var i=-1,a=e.length;n<0&&(n=-n>a?0:a+n),(t=t>a?a:t)<0&&(t+=a),a=n>t?0:t-n>>>0,n>>>=0;for(var r=_e(a);++i<a;)r[i]=e[i+n];return r}function ra(e,n){var t;return mi(e,(function(e,i,a){return!(t=n(e,i,a))})),!!t}function oa(e,n,t){var i=0,a=null==e?i:e.length;if("number"==typeof n&&n==n&&a<=2147483647){for(;i<a;){var r=i+a>>>1,o=e[r];null!==o&&!ls(o)&&(t?o<=n:o<n)?i=r+1:a=r}return a}return sa(e,n,ac,t)}function sa(n,t,i,a){var r=0,o=null==n?0:n.length;if(0===o)return 0;for(var s=(t=i(t))!=t,c=null===t,l=ls(t),p=t===e;r<o;){var u=gn((r+o)/2),d=i(n[u]),m=d!==e,f=null===d,h=d==d,v=ls(d);if(s)var x=a||h;else x=p?h&&(a||m):c?h&&m&&(a||!f):l?h&&m&&!f&&(a||!v):!f&&!v&&(a?d<=t:d<t);x?r=u+1:o=u}return yt(o,4294967294)}function ca(e,n){for(var t=-1,i=e.length,a=0,r=[];++t<i;){var o=e[t],s=n?n(o):o;if(!t||!qo(s,c)){var c=s;r[a++]=0===o?0:o}}return r}function la(e){return"number"==typeof e?e:ls(e)?u:+e}function pa(e){if("string"==typeof e)return e;if(Wo(e))return Dn(e,pa)+"";if(ls(e))return zt?zt.call(e):"";var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}function ua(e,n,t){var i=-1,a=Bn,r=e.length,o=!0,s=[],c=s;if(t)o=!1,a=Ln;else if(r>=200){var l=n?null:Ja(e);if(l)return lt(l);o=!1,a=Qn,c=new Gt}else c=n?[]:s;e:for(;++i<r;){var p=e[i],u=n?n(p):p;if(p=t||0!==p?p:0,o&&u==u){for(var d=c.length;d--;)if(c[d]===u)continue e;n&&c.push(u),s.push(p)}else a(c,u,t)||(c!==s&&c.push(u),s.push(p))}return s}function da(e,n){return null==(e=Tr(e,n=ya(n,e)))||delete e[Or(Jr(n))]}function ma(e,n,t,i){return ea(e,n,t(Ci(e,n)),i)}function fa(e,n,t,i){for(var a=e.length,r=i?a:-1;(i?r--:++r<a)&&n(e[r],r,e););return t?aa(e,i?0:r,i?r+1:a):aa(e,i?r+1:0,i?a:r)}function ha(e,n){var t=e;return t instanceof Wt&&(t=t.value()),In(n,(function(e,n){return n.func.apply(n.thisArg,$n([e],n.args))}),t)}function va(e,n,t){var i=e.length;if(i<2)return i?ua(e[0]):[];for(var a=-1,r=_e(i);++a<i;)for(var o=e[a],s=-1;++s<i;)s!=a&&(r[a]=di(r[a]||o,e[s],n,t));return ua(gi(r,1),n,t)}function xa(n,t,i){for(var a=-1,r=n.length,o=t.length,s={};++a<r;){var c=a<o?t[a]:e;i(s,n[a],c)}return s}function ga(e){return Ko(e)?e:[]}function ba(e){return"function"==typeof e?e:ac}function ya(e,n){return Wo(e)?e:wr(e,n)?[e]:Fr(bs(e))}var wa=Zi;function _a(n,t,i){var a=n.length;return i=i===e?a:i,!t&&i>=a?n:aa(n,t,i)}var Aa=dn||function(e){return mn.clearTimeout(e)};function Ca(e,n){if(n)return e.slice();var t=e.length,i=Ye?Ye(t):new e.constructor(t);return e.copy(i),i}function Sa(e){var n=new e.constructor(e.byteLength);return new We(n).set(new We(e)),n}function ka(e,n){var t=n?Sa(e.buffer):e.buffer;return new e.constructor(t,e.byteOffset,e.length)}function ja(n,t){if(n!==t){var i=n!==e,a=null===n,r=n==n,o=ls(n),s=t!==e,c=null===t,l=t==t,p=ls(t);if(!c&&!p&&!o&&n>t||o&&s&&l&&!c&&!p||a&&s&&l||!i&&l||!r)return 1;if(!a&&!o&&!p&&n<t||p&&i&&r&&!a&&!o||c&&i&&r||!s&&r||!l)return-1}return 0}function Ta(e,n,t,i){for(var a=-1,r=e.length,o=t.length,s=-1,c=n.length,l=bt(r-o,0),p=_e(c+l),u=!i;++s<c;)p[s]=n[s];for(;++a<o;)(u||a<r)&&(p[t[a]]=e[a]);for(;l--;)p[s++]=e[a++];return p}function Ea(e,n,t,i){for(var a=-1,r=e.length,o=-1,s=t.length,c=-1,l=n.length,p=bt(r-s,0),u=_e(p+l),d=!i;++a<p;)u[a]=e[a];for(var m=a;++c<l;)u[m+c]=n[c];for(;++o<s;)(d||a<r)&&(u[m+t[o]]=e[a++]);return u}function Pa(e,n){var t=-1,i=e.length;for(n||(n=_e(i));++t<i;)n[t]=e[t];return n}function Ba(n,t,i,a){var r=!i;i||(i={});for(var o=-1,s=t.length;++o<s;){var c=t[o],l=a?a(i[c],n[c],c,i,n):e;l===e&&(l=n[c]),r?oi(i,c,l):ti(i,c,l)}return i}function La(e,n){return function(t,i){var a=Wo(t)?kn:ai,r=n?n():{};return a(t,e,lr(i,2),r)}}function Da(n){return Zi((function(t,i){var a=-1,r=i.length,o=r>1?i[r-1]:e,s=r>2?i[2]:e;for(o=n.length>3&&"function"==typeof o?(r--,o):e,s&&yr(i[0],i[1],s)&&(o=r<3?e:o,r=1),t=je(t);++a<r;){var c=i[a];c&&n(t,c,a,o)}return t}))}function $a(e,n){return function(t,i){if(null==t)return t;if(!Ho(t))return e(t,i);for(var a=t.length,r=n?a:-1,o=je(t);(n?r--:++r<a)&&!1!==i(o[r],r,o););return t}}function Ia(e){return function(n,t,i){for(var a=-1,r=je(n),o=i(n),s=o.length;s--;){var c=o[e?s:++a];if(!1===t(r[c],c,r))break}return n}}function Fa(n){return function(t){var i=rt(t=bs(t))?dt(t):e,a=i?i[0]:t.charAt(0),r=i?_a(i,1).join(""):t.slice(1);return a[n]()+r}}function Oa(e){return function(n){return In(Xs(Us(n).replace(Ze,"")),e,"")}}function Ra(e){return function(){var n=arguments;switch(n.length){case 0:return new e;case 1:return new e(n[0]);case 2:return new e(n[0],n[1]);case 3:return new e(n[0],n[1],n[2]);case 4:return new e(n[0],n[1],n[2],n[3]);case 5:return new e(n[0],n[1],n[2],n[3],n[4]);case 6:return new e(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new e(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var t=Mt(e.prototype),i=e.apply(t,n);return ns(i)?i:t}}function Na(n){return function(t,i,a){var r=je(t);if(!Ho(t)){var o=lr(i,3);t=Ls(t),i=function(e){return o(r[e],e,r)}}var s=n(t,i,a);return s>-1?r[o?t[s]:s]:e}}function za(t){return ir((function(i){var a=i.length,r=a,o=Ut.prototype.thru;for(t&&i.reverse();r--;){var s=i[r];if("function"!=typeof s)throw new Pe(n);if(o&&!c&&"wrapper"==sr(s))var c=new Ut([],!0)}for(r=c?r:a;++r<a;){var l=sr(s=i[r]),p="wrapper"==l?or(s):e;c=p&&_r(p[0])&&424==p[1]&&!p[4].length&&1==p[9]?c[sr(p[0])].apply(c,p[3]):1==s.length&&_r(s)?c[l]():c.thru(s)}return function(){var e=arguments,n=e[0];if(c&&1==e.length&&Wo(n))return c.plant(n).value();for(var t=0,r=a?i[t].apply(this,e):n;++t<a;)r=i[t].call(this,r);return r}}))}function qa(n,t,i,a,r,o,c,l,p,u){var d=t&s,m=1&t,f=2&t,h=24&t,v=512&t,x=f?e:Ra(n);return function s(){for(var g=arguments.length,b=_e(g),y=g;y--;)b[y]=arguments[y];if(h)var w=cr(s),_=function(e,n){for(var t=e.length,i=0;t--;)e[t]===n&&++i;return i}(b,w);if(a&&(b=Ta(b,a,r,h)),o&&(b=Ea(b,o,c,h)),g-=_,h&&g<u){var A=ct(b,w);return Ka(n,t,qa,s.placeholder,i,b,A,l,p,u-g)}var C=m?i:this,S=f?C[n]:n;return g=b.length,l?b=function(n,t){for(var i=n.length,a=yt(t.length,i),r=Pa(n);a--;){var o=t[a];n[a]=br(o,i)?r[o]:e}return n}(b,l):v&&g>1&&b.reverse(),d&&p<g&&(b.length=p),this&&this!==mn&&this instanceof s&&(S=x||Ra(S)),S.apply(C,b)}}function Ma(e,n){return function(t,i){return function(e,n,t,i){return wi(e,(function(e,a,r){n(i,t(e),a,r)})),i}(t,e,n(i),{})}}function Va(n,t){return function(i,a){var r;if(i===e&&a===e)return t;if(i!==e&&(r=i),a!==e){if(r===e)return a;"string"==typeof i||"string"==typeof a?(i=pa(i),a=pa(a)):(i=la(i),a=la(a)),r=n(i,a)}return r}}function Ua(e){return ir((function(n){return n=Dn(n,Zn(lr())),Zi((function(t){var i=this;return e(n,(function(e){return Sn(e,i,t)}))}))}))}function Wa(n,t){var i=(t=t===e?" ":pa(t)).length;if(i<2)return i?Ji(t,n):t;var a=Ji(t,xn(n/ut(t)));return rt(t)?_a(dt(a),0,n).join(""):a.slice(0,n)}function Ya(n){return function(t,i,a){return a&&"number"!=typeof a&&yr(t,i,a)&&(i=a=e),t=fs(t),i===e?(i=t,t=0):i=fs(i),function(e,n,t,i){for(var a=-1,r=bt(xn((n-e)/(t||1)),0),o=_e(r);r--;)o[i?r:++a]=e,e+=t;return o}(t,i,a=a===e?t<i?1:-1:fs(a),n)}}function Ha(e){return function(n,t){return"string"==typeof n&&"string"==typeof t||(n=xs(n),t=xs(t)),e(n,t)}}function Ka(n,t,i,a,s,c,l,p,u,d){var m=8&t;t|=m?r:o,4&(t&=~(m?o:r))||(t&=-4);var f=[n,t,s,m?c:e,m?l:e,m?e:c,m?e:l,p,u,d],h=i.apply(e,f);return _r(n)&&Pr(h,f),h.placeholder=a,Dr(h,n,t)}function Ga(e){var n=ke[e];return function(e,t){if(e=xs(e),(t=null==t?0:yt(hs(t),292))&&vt(e)){var i=(bs(e)+"e").split("e");return+((i=(bs(n(i[0]+"e"+(+i[1]+t)))+"e").split("e"))[0]+"e"+(+i[1]-t))}return n(e)}}var Ja=Tt&&1/lt(new Tt([,-0]))[1]==l?function(e){return new Tt(e)}:lc;function Za(e){return function(n){var t=hr(n);return t==w?ot(n):t==k?pt(n):function(e,n){return Dn(n,(function(n){return[n,e[n]]}))}(n,e(n))}}function Xa(t,l,p,u,d,m,f,h){var v=2&l;if(!v&&"function"!=typeof t)throw new Pe(n);var x=u?u.length:0;if(x||(l&=-97,u=d=e),f=f===e?f:bt(hs(f),0),h=h===e?h:hs(h),x-=d?d.length:0,l&o){var g=u,b=d;u=d=e}var y=v?e:or(t),w=[t,l,p,u,d,g,b,m,f,h];if(y&&function(e,n){var t=e[1],a=n[1],r=t|a,o=r<131,l=a==s&&8==t||a==s&&t==c&&e[7].length<=n[8]||384==a&&n[7].length<=n[8]&&8==t;if(!o&&!l)return e;1&a&&(e[2]=n[2],r|=1&t?0:4);var p=n[3];if(p){var u=e[3];e[3]=u?Ta(u,p,n[4]):p,e[4]=u?ct(e[3],i):n[4]}(p=n[5])&&(u=e[5],e[5]=u?Ea(u,p,n[6]):p,e[6]=u?ct(e[5],i):n[6]),(p=n[7])&&(e[7]=p),a&s&&(e[8]=null==e[8]?n[8]:yt(e[8],n[8])),null==e[9]&&(e[9]=n[9]),e[0]=n[0],e[1]=r}(w,y),t=w[0],l=w[1],p=w[2],u=w[3],d=w[4],!(h=w[9]=w[9]===e?v?0:t.length:bt(w[9]-x,0))&&24&l&&(l&=-25),l&&1!=l)_=8==l||l==a?function(n,t,i){var a=Ra(n);return function r(){for(var o=arguments.length,s=_e(o),c=o,l=cr(r);c--;)s[c]=arguments[c];var p=o<3&&s[0]!==l&&s[o-1]!==l?[]:ct(s,l);return(o-=p.length)<i?Ka(n,t,qa,r.placeholder,e,s,p,e,e,i-o):Sn(this&&this!==mn&&this instanceof r?a:n,this,s)}}(t,l,h):l!=r&&33!=l||d.length?qa.apply(e,w):function(e,n,t,i){var a=1&n,r=Ra(e);return function n(){for(var o=-1,s=arguments.length,c=-1,l=i.length,p=_e(l+s),u=this&&this!==mn&&this instanceof n?r:e;++c<l;)p[c]=i[c];for(;s--;)p[c++]=arguments[++o];return Sn(u,a?t:this,p)}}(t,l,p,u);else var _=function(e,n,t){var i=1&n,a=Ra(e);return function n(){return(this&&this!==mn&&this instanceof n?a:e).apply(i?t:this,arguments)}}(t,l,p);return Dr((y?na:Pr)(_,w),t,l)}function Qa(n,t,i,a){return n===e||qo(n,De[i])&&!Fe.call(a,i)?t:n}function er(n,t,i,a,r,o){return ns(n)&&ns(t)&&(o.set(t,n),Vi(n,t,e,er,o),o.delete(t)),n}function nr(n){return rs(n)?e:n}function tr(n,t,i,a,r,o){var s=1&i,c=n.length,l=t.length;if(c!=l&&!(s&&l>c))return!1;var p=o.get(n),u=o.get(t);if(p&&u)return p==t&&u==n;var d=-1,m=!0,f=2&i?new Gt:e;for(o.set(n,t),o.set(t,n);++d<c;){var h=n[d],v=t[d];if(a)var x=s?a(v,h,d,t,n,o):a(h,v,d,n,t,o);if(x!==e){if(x)continue;m=!1;break}if(f){if(!On(t,(function(e,n){if(!Qn(f,n)&&(h===e||r(h,e,i,a,o)))return f.push(n)}))){m=!1;break}}else if(h!==v&&!r(h,v,i,a,o)){m=!1;break}}return o.delete(n),o.delete(t),m}function ir(n){return Lr(jr(n,e,Wr),n+"")}function ar(e){return Si(e,Ls,mr)}function rr(e){return Si(e,Ds,fr)}var or=Bt?function(e){return Bt.get(e)}:lc;function sr(e){for(var n=e.name+"",t=Lt[n],i=Fe.call(Lt,n)?t.length:0;i--;){var a=t[i],r=a.func;if(null==r||r==e)return a.name}return n}function cr(e){return(Fe.call(qt,"placeholder")?qt:e).placeholder}function lr(){var e=qt.iteratee||rc;return e=e===rc?Fi:e,arguments.length?e(arguments[0],arguments[1]):e}function pr(e,n){var t,i,a=e.__data__;return("string"==(i=typeof(t=n))||"number"==i||"symbol"==i||"boolean"==i?"__proto__"!==t:null===t)?a["string"==typeof n?"string":"hash"]:a.map}function ur(e){for(var n=Ls(e),t=n.length;t--;){var i=n[t],a=e[i];n[t]=[i,a,Sr(a)]}return n}function dr(n,t){var i=function(n,t){return null==n?e:n[t]}(n,t);return Ii(i)?i:e}var mr=Rn?function(e){return null==e?[]:(e=je(e),Pn(Rn(e),(function(n){return Ge.call(e,n)})))}:vc,fr=Rn?function(e){for(var n=[];e;)$n(n,mr(e)),e=He(e);return n}:vc,hr=ki;function vr(e,n,t){for(var i=-1,a=(n=ya(n,e)).length,r=!1;++i<a;){var o=Or(n[i]);if(!(r=null!=e&&t(e,o)))break;e=e[o]}return r||++i!=a?r:!!(a=null==e?0:e.length)&&es(a)&&br(o,a)&&(Wo(e)||Uo(e))}function xr(e){return"function"!=typeof e.constructor||Cr(e)?{}:Mt(He(e))}function gr(e){return Wo(e)||Uo(e)||!!(Qe&&e&&e[Qe])}function br(e,n){var t=typeof e;return!!(n=null==n?p:n)&&("number"==t||"symbol"!=t&&xe.test(e))&&e>-1&&e%1==0&&e<n}function yr(e,n,t){if(!ns(t))return!1;var i=typeof n;return!!("number"==i?Ho(t)&&br(n,t.length):"string"==i&&n in t)&&qo(t[n],e)}function wr(e,n){if(Wo(e))return!1;var t=typeof e;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=e&&!ls(e))||Q.test(e)||!X.test(e)||null!=n&&e in je(n)}function _r(e){var n=sr(e),t=qt[n];if("function"!=typeof t||!(n in Wt.prototype))return!1;if(e===t)return!0;var i=or(t);return!!i&&e===i[0]}(St&&hr(new St(new ArrayBuffer(1)))!=B||kt&&hr(new kt)!=w||jt&&hr(jt.resolve())!=C||Tt&&hr(new Tt)!=k||Et&&hr(new Et)!=E)&&(hr=function(n){var t=ki(n),i=t==A?n.constructor:e,a=i?Rr(i):"";if(a)switch(a){case Dt:return B;case $t:return w;case It:return C;case Ft:return k;case Ot:return E}return t});var Ar=$e?Xo:xc;function Cr(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||De)}function Sr(e){return e==e&&!ns(e)}function kr(n,t){return function(i){return null!=i&&i[n]===t&&(t!==e||n in je(i))}}function jr(n,t,i){return t=bt(t===e?n.length-1:t,0),function(){for(var e=arguments,a=-1,r=bt(e.length-t,0),o=_e(r);++a<r;)o[a]=e[t+a];a=-1;for(var s=_e(t+1);++a<t;)s[a]=e[a];return s[t]=i(o),Sn(n,this,s)}}function Tr(e,n){return n.length<2?e:Ci(e,aa(n,0,-1))}function Er(e,n){if(("constructor"!==n||"function"!=typeof e[n])&&"__proto__"!=n)return e[n]}var Pr=$r(na),Br=hn||function(e,n){return mn.setTimeout(e,n)},Lr=$r(ta);function Dr(e,n,t){var i=n+"";return Lr(e,function(e,n){var t=n.length;if(!t)return e;var i=t-1;return n[i]=(t>1?"& ":"")+n[i],n=n.join(t>2?", ":" "),e.replace(re,"{\n/* [wrapped with "+n+"] */\n")}(i,function(e,n){return jn(m,(function(t){var i="_."+t[0];n&t[1]&&!Bn(e,i)&&e.push(i)})),e.sort()}(function(e){var n=e.match(oe);return n?n[1].split(se):[]}(i),t)))}function $r(n){var t=0,i=0;return function(){var a=wt(),r=16-(a-i);if(i=a,r>0){if(++t>=800)return arguments[0]}else t=0;return n.apply(e,arguments)}}function Ir(n,t){var i=-1,a=n.length,r=a-1;for(t=t===e?a:t;++i<t;){var o=Gi(i,r),s=n[o];n[o]=n[i],n[i]=s}return n.length=t,n}var Fr=function(e){var n=Io(e,(function(e){return 500===t.size&&t.clear(),e})),t=n.cache;return n}((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(ee,(function(e,t,i,a){n.push(i?a.replace(pe,"$1"):t||e)})),n}));function Or(e){if("string"==typeof e||ls(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}function Rr(e){if(null!=e){try{return Ie.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Nr(e){if(e instanceof Wt)return e.clone();var n=new Ut(e.__wrapped__,e.__chain__);return n.__actions__=Pa(e.__actions__),n.__index__=e.__index__,n.__values__=e.__values__,n}var zr=Zi((function(e,n){return Ko(e)?di(e,gi(n,1,Ko,!0)):[]})),qr=Zi((function(n,t){var i=Jr(t);return Ko(i)&&(i=e),Ko(n)?di(n,gi(t,1,Ko,!0),lr(i,2)):[]})),Mr=Zi((function(n,t){var i=Jr(t);return Ko(i)&&(i=e),Ko(n)?di(n,gi(t,1,Ko,!0),e,i):[]}));function Vr(e,n,t){var i=null==e?0:e.length;if(!i)return-1;var a=null==t?0:hs(t);return a<0&&(a=bt(i+a,0)),zn(e,lr(n,3),a)}function Ur(n,t,i){var a=null==n?0:n.length;if(!a)return-1;var r=a-1;return i!==e&&(r=hs(i),r=i<0?bt(a+r,0):yt(r,a-1)),zn(n,lr(t,3),r,!0)}function Wr(e){return null!=e&&e.length?gi(e,1):[]}function Yr(n){return n&&n.length?n[0]:e}var Hr=Zi((function(e){var n=Dn(e,ga);return n.length&&n[0]===e[0]?Pi(n):[]})),Kr=Zi((function(n){var t=Jr(n),i=Dn(n,ga);return t===Jr(i)?t=e:i.pop(),i.length&&i[0]===n[0]?Pi(i,lr(t,2)):[]})),Gr=Zi((function(n){var t=Jr(n),i=Dn(n,ga);return(t="function"==typeof t?t:e)&&i.pop(),i.length&&i[0]===n[0]?Pi(i,e,t):[]}));function Jr(n){var t=null==n?0:n.length;return t?n[t-1]:e}var Zr=Zi(Xr);function Xr(e,n){return e&&e.length&&n&&n.length?Hi(e,n):e}var Qr=ir((function(e,n){var t=null==e?0:e.length,i=si(e,n);return Ki(e,Dn(n,(function(e){return br(e,t)?+e:e})).sort(ja)),i}));function eo(e){return null==e?e:Ct.call(e)}var no=Zi((function(e){return ua(gi(e,1,Ko,!0))})),to=Zi((function(n){var t=Jr(n);return Ko(t)&&(t=e),ua(gi(n,1,Ko,!0),lr(t,2))})),io=Zi((function(n){var t=Jr(n);return t="function"==typeof t?t:e,ua(gi(n,1,Ko,!0),e,t)}));function ao(e){if(!e||!e.length)return[];var n=0;return e=Pn(e,(function(e){if(Ko(e))return n=bt(e.length,n),!0})),Gn(n,(function(n){return Dn(e,Wn(n))}))}function ro(n,t){if(!n||!n.length)return[];var i=ao(n);return null==t?i:Dn(i,(function(n){return Sn(t,e,n)}))}var oo=Zi((function(e,n){return Ko(e)?di(e,n):[]})),so=Zi((function(e){return va(Pn(e,Ko))})),co=Zi((function(n){var t=Jr(n);return Ko(t)&&(t=e),va(Pn(n,Ko),lr(t,2))})),lo=Zi((function(n){var t=Jr(n);return t="function"==typeof t?t:e,va(Pn(n,Ko),e,t)})),po=Zi(ao),uo=Zi((function(n){var t=n.length,i=t>1?n[t-1]:e;return i="function"==typeof i?(n.pop(),i):e,ro(n,i)}));function mo(e){var n=qt(e);return n.__chain__=!0,n}function fo(e,n){return n(e)}var ho=ir((function(n){var t=n.length,i=t?n[0]:0,a=this.__wrapped__,r=function(e){return si(e,n)};return!(t>1||this.__actions__.length)&&a instanceof Wt&&br(i)?((a=a.slice(i,+i+(t?1:0))).__actions__.push({func:fo,args:[r],thisArg:e}),new Ut(a,this.__chain__).thru((function(n){return t&&!n.length&&n.push(e),n}))):this.thru(r)})),vo=La((function(e,n,t){Fe.call(e,t)?++e[t]:oi(e,t,1)})),xo=Na(Vr),go=Na(Ur);function bo(e,n){return(Wo(e)?jn:mi)(e,lr(n,3))}function yo(e,n){return(Wo(e)?Tn:fi)(e,lr(n,3))}var wo=La((function(e,n,t){Fe.call(e,t)?e[t].push(n):oi(e,t,[n])})),_o=Zi((function(e,n,t){var i=-1,a="function"==typeof n,r=Ho(e)?_e(e.length):[];return mi(e,(function(e){r[++i]=a?Sn(n,e,t):Bi(e,n,t)})),r})),Ao=La((function(e,n,t){oi(e,t,n)}));function Co(e,n){return(Wo(e)?Dn:zi)(e,lr(n,3))}var So=La((function(e,n,t){e[t?0:1].push(n)}),(function(){return[[],[]]})),ko=Zi((function(e,n){if(null==e)return[];var t=n.length;return t>1&&yr(e,n[0],n[1])?n=[]:t>2&&yr(n[0],n[1],n[2])&&(n=[n[0]]),Wi(e,gi(n,1),[])})),jo=fn||function(){return mn.Date.now()};function To(n,t,i){return t=i?e:t,t=n&&null==t?n.length:t,Xa(n,s,e,e,e,e,t)}function Eo(t,i){var a;if("function"!=typeof i)throw new Pe(n);return t=hs(t),function(){return--t>0&&(a=i.apply(this,arguments)),t<=1&&(i=e),a}}var Po=Zi((function(e,n,t){var i=1;if(t.length){var a=ct(t,cr(Po));i|=r}return Xa(e,i,n,t,a)})),Bo=Zi((function(e,n,t){var i=3;if(t.length){var a=ct(t,cr(Bo));i|=r}return Xa(n,i,e,t,a)}));function Lo(t,i,a){var r,o,s,c,l,p,u=0,d=!1,m=!1,f=!0;if("function"!=typeof t)throw new Pe(n);function h(n){var i=r,a=o;return r=o=e,u=n,c=t.apply(a,i)}function v(n){var t=n-p;return p===e||t>=i||t<0||m&&n-u>=s}function x(){var e=jo();if(v(e))return g(e);l=Br(x,function(e){var n=i-(e-p);return m?yt(n,s-(e-u)):n}(e))}function g(n){return l=e,f&&r?h(n):(r=o=e,c)}function b(){var n=jo(),t=v(n);if(r=arguments,o=this,p=n,t){if(l===e)return function(e){return u=e,l=Br(x,i),d?h(e):c}(p);if(m)return Aa(l),l=Br(x,i),h(p)}return l===e&&(l=Br(x,i)),c}return i=xs(i)||0,ns(a)&&(d=!!a.leading,s=(m="maxWait"in a)?bt(xs(a.maxWait)||0,i):s,f="trailing"in a?!!a.trailing:f),b.cancel=function(){l!==e&&Aa(l),u=0,r=p=o=l=e},b.flush=function(){return l===e?c:g(jo())},b}var Do=Zi((function(e,n){return ui(e,1,n)})),$o=Zi((function(e,n,t){return ui(e,xs(n)||0,t)}));function Io(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new Pe(n);var i=function(){var n=arguments,a=t?t.apply(this,n):n[0],r=i.cache;if(r.has(a))return r.get(a);var o=e.apply(this,n);return i.cache=r.set(a,o)||r,o};return i.cache=new(Io.Cache||Kt),i}function Fo(e){if("function"!=typeof e)throw new Pe(n);return function(){var n=arguments;switch(n.length){case 0:return!e.call(this);case 1:return!e.call(this,n[0]);case 2:return!e.call(this,n[0],n[1]);case 3:return!e.call(this,n[0],n[1],n[2])}return!e.apply(this,n)}}Io.Cache=Kt;var Oo=wa((function(e,n){var t=(n=1==n.length&&Wo(n[0])?Dn(n[0],Zn(lr())):Dn(gi(n,1),Zn(lr()))).length;return Zi((function(i){for(var a=-1,r=yt(i.length,t);++a<r;)i[a]=n[a].call(this,i[a]);return Sn(e,this,i)}))})),Ro=Zi((function(n,t){var i=ct(t,cr(Ro));return Xa(n,r,e,t,i)})),No=Zi((function(n,t){var i=ct(t,cr(No));return Xa(n,o,e,t,i)})),zo=ir((function(n,t){return Xa(n,c,e,e,e,t)}));function qo(e,n){return e===n||e!=e&&n!=n}var Mo=Ha(ji),Vo=Ha((function(e,n){return e>=n})),Uo=Li(function(){return arguments}())?Li:function(e){return ts(e)&&Fe.call(e,"callee")&&!Ge.call(e,"callee")},Wo=_e.isArray,Yo=bn?Zn(bn):function(e){return ts(e)&&ki(e)==P};function Ho(e){return null!=e&&es(e.length)&&!Xo(e)}function Ko(e){return ts(e)&&Ho(e)}var Go=Yn||xc,Jo=yn?Zn(yn):function(e){return ts(e)&&ki(e)==x};function Zo(e){if(!ts(e))return!1;var n=ki(e);return n==g||"[object DOMException]"==n||"string"==typeof e.message&&"string"==typeof e.name&&!rs(e)}function Xo(e){if(!ns(e))return!1;var n=ki(e);return n==b||n==y||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Qo(e){return"number"==typeof e&&e==hs(e)}function es(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=p}function ns(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}function ts(e){return null!=e&&"object"==typeof e}var is=wn?Zn(wn):function(e){return ts(e)&&hr(e)==w};function as(e){return"number"==typeof e||ts(e)&&ki(e)==_}function rs(e){if(!ts(e)||ki(e)!=A)return!1;var n=He(e);if(null===n)return!0;var t=Fe.call(n,"constructor")&&n.constructor;return"function"==typeof t&&t instanceof t&&Ie.call(t)==ze}var os=_n?Zn(_n):function(e){return ts(e)&&ki(e)==S},ss=An?Zn(An):function(e){return ts(e)&&hr(e)==k};function cs(e){return"string"==typeof e||!Wo(e)&&ts(e)&&ki(e)==j}function ls(e){return"symbol"==typeof e||ts(e)&&ki(e)==T}var ps=Cn?Zn(Cn):function(e){return ts(e)&&es(e.length)&&!!on[ki(e)]},us=Ha(Ni),ds=Ha((function(e,n){return e<=n}));function ms(e){if(!e)return[];if(Ho(e))return cs(e)?dt(e):Pa(e);if(nn&&e[nn])return function(e){for(var n,t=[];!(n=e.next()).done;)t.push(n.value);return t}(e[nn]());var n=hr(e);return(n==w?ot:n==k?lt:qs)(e)}function fs(e){return e?(e=xs(e))===l||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function hs(e){var n=fs(e),t=n%1;return n==n?t?n-t:n:0}function vs(e){return e?ci(hs(e),0,d):0}function xs(e){if("number"==typeof e)return e;if(ls(e))return u;if(ns(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=ns(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=Jn(e);var t=fe.test(e);return t||ve.test(e)?pn(e.slice(2),t?2:8):me.test(e)?u:+e}function gs(e){return Ba(e,Ds(e))}function bs(e){return null==e?"":pa(e)}var ys=Da((function(e,n){if(Cr(n)||Ho(n))Ba(n,Ls(n),e);else for(var t in n)Fe.call(n,t)&&ti(e,t,n[t])})),ws=Da((function(e,n){Ba(n,Ds(n),e)})),_s=Da((function(e,n,t,i){Ba(n,Ds(n),e,i)})),As=Da((function(e,n,t,i){Ba(n,Ls(n),e,i)})),Cs=ir(si),Ss=Zi((function(n,t){n=je(n);var i=-1,a=t.length,r=a>2?t[2]:e;for(r&&yr(t[0],t[1],r)&&(a=1);++i<a;)for(var o=t[i],s=Ds(o),c=-1,l=s.length;++c<l;){var p=s[c],u=n[p];(u===e||qo(u,De[p])&&!Fe.call(n,p))&&(n[p]=o[p])}return n})),ks=Zi((function(n){return n.push(e,er),Sn(Is,e,n)}));function js(n,t,i){var a=null==n?e:Ci(n,t);return a===e?i:a}function Ts(e,n){return null!=e&&vr(e,n,Ei)}var Es=Ma((function(e,n,t){null!=n&&"function"!=typeof n.toString&&(n=Ne.call(n)),e[n]=t}),nc(ac)),Ps=Ma((function(e,n,t){null!=n&&"function"!=typeof n.toString&&(n=Ne.call(n)),Fe.call(e,n)?e[n].push(t):e[n]=[t]}),lr),Bs=Zi(Bi);function Ls(e){return Ho(e)?Zt(e):Oi(e)}function Ds(e){return Ho(e)?Zt(e,!0):Ri(e)}var $s=Da((function(e,n,t){Vi(e,n,t)})),Is=Da((function(e,n,t,i){Vi(e,n,t,i)})),Fs=ir((function(e,n){var t={};if(null==e)return t;var i=!1;n=Dn(n,(function(n){return n=ya(n,e),i||(i=n.length>1),n})),Ba(e,rr(e),t),i&&(t=li(t,7,nr));for(var a=n.length;a--;)da(t,n[a]);return t})),Os=ir((function(e,n){return null==e?{}:function(e,n){return Yi(e,n,(function(n,t){return Ts(e,t)}))}(e,n)}));function Rs(e,n){if(null==e)return{};var t=Dn(rr(e),(function(e){return[e]}));return n=lr(n),Yi(e,t,(function(e,t){return n(e,t[0])}))}var Ns=Za(Ls),zs=Za(Ds);function qs(e){return null==e?[]:Xn(e,Ls(e))}var Ms=Oa((function(e,n,t){return n=n.toLowerCase(),e+(t?Vs(n):n)}));function Vs(e){return Zs(bs(e).toLowerCase())}function Us(e){return(e=bs(e))&&e.replace(ge,tt).replace(Xe,"")}var Ws=Oa((function(e,n,t){return e+(t?"-":"")+n.toLowerCase()})),Ys=Oa((function(e,n,t){return e+(t?" ":"")+n.toLowerCase()})),Hs=Fa("toLowerCase"),Ks=Oa((function(e,n,t){return e+(t?"_":"")+n.toLowerCase()})),Gs=Oa((function(e,n,t){return e+(t?" ":"")+Zs(n)})),Js=Oa((function(e,n,t){return e+(t?" ":"")+n.toUpperCase()})),Zs=Fa("toUpperCase");function Xs(n,t,i){return n=bs(n),(t=i?e:t)===e?function(e){return tn.test(e)}(n)?function(e){return e.match(en)||[]}(n):function(e){return e.match(ce)||[]}(n):n.match(t)||[]}var Qs=Zi((function(n,t){try{return Sn(n,e,t)}catch(e){return Zo(e)?e:new Ce(e)}})),ec=ir((function(e,n){return jn(n,(function(n){n=Or(n),oi(e,n,Po(e[n],e))})),e}));function nc(e){return function(){return e}}var tc=za(),ic=za(!0);function ac(e){return e}function rc(e){return Fi("function"==typeof e?e:li(e,1))}var oc=Zi((function(e,n){return function(t){return Bi(t,e,n)}})),sc=Zi((function(e,n){return function(t){return Bi(e,t,n)}}));function cc(e,n,t){var i=Ls(n),a=Ai(n,i);null!=t||ns(n)&&(a.length||!i.length)||(t=n,n=e,e=this,a=Ai(n,Ls(n)));var r=!(ns(t)&&"chain"in t&&!t.chain),o=Xo(e);return jn(a,(function(t){var i=n[t];e[t]=i,o&&(e.prototype[t]=function(){var n=this.__chain__;if(r||n){var t=e(this.__wrapped__);return(t.__actions__=Pa(this.__actions__)).push({func:i,args:arguments,thisArg:e}),t.__chain__=n,t}return i.apply(e,$n([this.value()],arguments))})})),e}function lc(){}var pc=Ua(Dn),uc=Ua(En),dc=Ua(On);function mc(e){return wr(e)?Wn(Or(e)):function(e){return function(n){return Ci(n,e)}}(e)}var fc=Ya(),hc=Ya(!0);function vc(){return[]}function xc(){return!1}var gc,bc=Va((function(e,n){return e+n}),0),yc=Ga("ceil"),wc=Va((function(e,n){return e/n}),1),_c=Ga("floor"),Ac=Va((function(e,n){return e*n}),1),Cc=Ga("round"),Sc=Va((function(e,n){return e-n}),0);return qt.after=function(e,t){if("function"!=typeof t)throw new Pe(n);return e=hs(e),function(){if(--e<1)return t.apply(this,arguments)}},qt.ary=To,qt.assign=ys,qt.assignIn=ws,qt.assignInWith=_s,qt.assignWith=As,qt.at=Cs,qt.before=Eo,qt.bind=Po,qt.bindAll=ec,qt.bindKey=Bo,qt.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return Wo(e)?e:[e]},qt.chain=mo,qt.chunk=function(n,t,i){t=(i?yr(n,t,i):t===e)?1:bt(hs(t),0);var a=null==n?0:n.length;if(!a||t<1)return[];for(var r=0,o=0,s=_e(xn(a/t));r<a;)s[o++]=aa(n,r,r+=t);return s},qt.compact=function(e){for(var n=-1,t=null==e?0:e.length,i=0,a=[];++n<t;){var r=e[n];r&&(a[i++]=r)}return a},qt.concat=function(){var e=arguments.length;if(!e)return[];for(var n=_e(e-1),t=arguments[0],i=e;i--;)n[i-1]=arguments[i];return $n(Wo(t)?Pa(t):[t],gi(n,1))},qt.cond=function(e){var t=null==e?0:e.length,i=lr();return e=t?Dn(e,(function(e){if("function"!=typeof e[1])throw new Pe(n);return[i(e[0]),e[1]]})):[],Zi((function(n){for(var i=-1;++i<t;){var a=e[i];if(Sn(a[0],this,n))return Sn(a[1],this,n)}}))},qt.conforms=function(e){return function(e){var n=Ls(e);return function(t){return pi(t,e,n)}}(li(e,1))},qt.constant=nc,qt.countBy=vo,qt.create=function(e,n){var t=Mt(e);return null==n?t:ri(t,n)},qt.curry=function n(t,i,a){var r=Xa(t,8,e,e,e,e,e,i=a?e:i);return r.placeholder=n.placeholder,r},qt.curryRight=function n(t,i,r){var o=Xa(t,a,e,e,e,e,e,i=r?e:i);return o.placeholder=n.placeholder,o},qt.debounce=Lo,qt.defaults=Ss,qt.defaultsDeep=ks,qt.defer=Do,qt.delay=$o,qt.difference=zr,qt.differenceBy=qr,qt.differenceWith=Mr,qt.drop=function(n,t,i){var a=null==n?0:n.length;return a?aa(n,(t=i||t===e?1:hs(t))<0?0:t,a):[]},qt.dropRight=function(n,t,i){var a=null==n?0:n.length;return a?aa(n,0,(t=a-(t=i||t===e?1:hs(t)))<0?0:t):[]},qt.dropRightWhile=function(e,n){return e&&e.length?fa(e,lr(n,3),!0,!0):[]},qt.dropWhile=function(e,n){return e&&e.length?fa(e,lr(n,3),!0):[]},qt.fill=function(n,t,i,a){var r=null==n?0:n.length;return r?(i&&"number"!=typeof i&&yr(n,t,i)&&(i=0,a=r),function(n,t,i,a){var r=n.length;for((i=hs(i))<0&&(i=-i>r?0:r+i),(a=a===e||a>r?r:hs(a))<0&&(a+=r),a=i>a?0:vs(a);i<a;)n[i++]=t;return n}(n,t,i,a)):[]},qt.filter=function(e,n){return(Wo(e)?Pn:xi)(e,lr(n,3))},qt.flatMap=function(e,n){return gi(Co(e,n),1)},qt.flatMapDeep=function(e,n){return gi(Co(e,n),l)},qt.flatMapDepth=function(n,t,i){return i=i===e?1:hs(i),gi(Co(n,t),i)},qt.flatten=Wr,qt.flattenDeep=function(e){return null!=e&&e.length?gi(e,l):[]},qt.flattenDepth=function(n,t){return null!=n&&n.length?gi(n,t=t===e?1:hs(t)):[]},qt.flip=function(e){return Xa(e,512)},qt.flow=tc,qt.flowRight=ic,qt.fromPairs=function(e){for(var n=-1,t=null==e?0:e.length,i={};++n<t;){var a=e[n];i[a[0]]=a[1]}return i},qt.functions=function(e){return null==e?[]:Ai(e,Ls(e))},qt.functionsIn=function(e){return null==e?[]:Ai(e,Ds(e))},qt.groupBy=wo,qt.initial=function(e){return null!=e&&e.length?aa(e,0,-1):[]},qt.intersection=Hr,qt.intersectionBy=Kr,qt.intersectionWith=Gr,qt.invert=Es,qt.invertBy=Ps,qt.invokeMap=_o,qt.iteratee=rc,qt.keyBy=Ao,qt.keys=Ls,qt.keysIn=Ds,qt.map=Co,qt.mapKeys=function(e,n){var t={};return n=lr(n,3),wi(e,(function(e,i,a){oi(t,n(e,i,a),e)})),t},qt.mapValues=function(e,n){var t={};return n=lr(n,3),wi(e,(function(e,i,a){oi(t,i,n(e,i,a))})),t},qt.matches=function(e){return qi(li(e,1))},qt.matchesProperty=function(e,n){return Mi(e,li(n,1))},qt.memoize=Io,qt.merge=$s,qt.mergeWith=Is,qt.method=oc,qt.methodOf=sc,qt.mixin=cc,qt.negate=Fo,qt.nthArg=function(e){return e=hs(e),Zi((function(n){return Ui(n,e)}))},qt.omit=Fs,qt.omitBy=function(e,n){return Rs(e,Fo(lr(n)))},qt.once=function(e){return Eo(2,e)},qt.orderBy=function(n,t,i,a){return null==n?[]:(Wo(t)||(t=null==t?[]:[t]),Wo(i=a?e:i)||(i=null==i?[]:[i]),Wi(n,t,i))},qt.over=pc,qt.overArgs=Oo,qt.overEvery=uc,qt.overSome=dc,qt.partial=Ro,qt.partialRight=No,qt.partition=So,qt.pick=Os,qt.pickBy=Rs,qt.property=mc,qt.propertyOf=function(n){return function(t){return null==n?e:Ci(n,t)}},qt.pull=Zr,qt.pullAll=Xr,qt.pullAllBy=function(e,n,t){return e&&e.length&&n&&n.length?Hi(e,n,lr(t,2)):e},qt.pullAllWith=function(n,t,i){return n&&n.length&&t&&t.length?Hi(n,t,e,i):n},qt.pullAt=Qr,qt.range=fc,qt.rangeRight=hc,qt.rearg=zo,qt.reject=function(e,n){return(Wo(e)?Pn:xi)(e,Fo(lr(n,3)))},qt.remove=function(e,n){var t=[];if(!e||!e.length)return t;var i=-1,a=[],r=e.length;for(n=lr(n,3);++i<r;){var o=e[i];n(o,i,e)&&(t.push(o),a.push(i))}return Ki(e,a),t},qt.rest=function(t,i){if("function"!=typeof t)throw new Pe(n);return Zi(t,i=i===e?i:hs(i))},qt.reverse=eo,qt.sampleSize=function(n,t,i){return t=(i?yr(n,t,i):t===e)?1:hs(t),(Wo(n)?Qt:Qi)(n,t)},qt.set=function(e,n,t){return null==e?e:ea(e,n,t)},qt.setWith=function(n,t,i,a){return a="function"==typeof a?a:e,null==n?n:ea(n,t,i,a)},qt.shuffle=function(e){return(Wo(e)?ei:ia)(e)},qt.slice=function(n,t,i){var a=null==n?0:n.length;return a?(i&&"number"!=typeof i&&yr(n,t,i)?(t=0,i=a):(t=null==t?0:hs(t),i=i===e?a:hs(i)),aa(n,t,i)):[]},qt.sortBy=ko,qt.sortedUniq=function(e){return e&&e.length?ca(e):[]},qt.sortedUniqBy=function(e,n){return e&&e.length?ca(e,lr(n,2)):[]},qt.split=function(n,t,i){return i&&"number"!=typeof i&&yr(n,t,i)&&(t=i=e),(i=i===e?d:i>>>0)?(n=bs(n))&&("string"==typeof t||null!=t&&!os(t))&&!(t=pa(t))&&rt(n)?_a(dt(n),0,i):n.split(t,i):[]},qt.spread=function(e,t){if("function"!=typeof e)throw new Pe(n);return t=null==t?0:bt(hs(t),0),Zi((function(n){var i=n[t],a=_a(n,0,t);return i&&$n(a,i),Sn(e,this,a)}))},qt.tail=function(e){var n=null==e?0:e.length;return n?aa(e,1,n):[]},qt.take=function(n,t,i){return n&&n.length?aa(n,0,(t=i||t===e?1:hs(t))<0?0:t):[]},qt.takeRight=function(n,t,i){var a=null==n?0:n.length;return a?aa(n,(t=a-(t=i||t===e?1:hs(t)))<0?0:t,a):[]},qt.takeRightWhile=function(e,n){return e&&e.length?fa(e,lr(n,3),!1,!0):[]},qt.takeWhile=function(e,n){return e&&e.length?fa(e,lr(n,3)):[]},qt.tap=function(e,n){return n(e),e},qt.throttle=function(e,t,i){var a=!0,r=!0;if("function"!=typeof e)throw new Pe(n);return ns(i)&&(a="leading"in i?!!i.leading:a,r="trailing"in i?!!i.trailing:r),Lo(e,t,{leading:a,maxWait:t,trailing:r})},qt.thru=fo,qt.toArray=ms,qt.toPairs=Ns,qt.toPairsIn=zs,qt.toPath=function(e){return Wo(e)?Dn(e,Or):ls(e)?[e]:Pa(Fr(bs(e)))},qt.toPlainObject=gs,qt.transform=function(e,n,t){var i=Wo(e),a=i||Go(e)||ps(e);if(n=lr(n,4),null==t){var r=e&&e.constructor;t=a?i?new r:[]:ns(e)&&Xo(r)?Mt(He(e)):{}}return(a?jn:wi)(e,(function(e,i,a){return n(t,e,i,a)})),t},qt.unary=function(e){return To(e,1)},qt.union=no,qt.unionBy=to,qt.unionWith=io,qt.uniq=function(e){return e&&e.length?ua(e):[]},qt.uniqBy=function(e,n){return e&&e.length?ua(e,lr(n,2)):[]},qt.uniqWith=function(n,t){return t="function"==typeof t?t:e,n&&n.length?ua(n,e,t):[]},qt.unset=function(e,n){return null==e||da(e,n)},qt.unzip=ao,qt.unzipWith=ro,qt.update=function(e,n,t){return null==e?e:ma(e,n,ba(t))},qt.updateWith=function(n,t,i,a){return a="function"==typeof a?a:e,null==n?n:ma(n,t,ba(i),a)},qt.values=qs,qt.valuesIn=function(e){return null==e?[]:Xn(e,Ds(e))},qt.without=oo,qt.words=Xs,qt.wrap=function(e,n){return Ro(ba(n),e)},qt.xor=so,qt.xorBy=co,qt.xorWith=lo,qt.zip=po,qt.zipObject=function(e,n){return xa(e||[],n||[],ti)},qt.zipObjectDeep=function(e,n){return xa(e||[],n||[],ea)},qt.zipWith=uo,qt.entries=Ns,qt.entriesIn=zs,qt.extend=ws,qt.extendWith=_s,cc(qt,qt),qt.add=bc,qt.attempt=Qs,qt.camelCase=Ms,qt.capitalize=Vs,qt.ceil=yc,qt.clamp=function(n,t,i){return i===e&&(i=t,t=e),i!==e&&(i=(i=xs(i))==i?i:0),t!==e&&(t=(t=xs(t))==t?t:0),ci(xs(n),t,i)},qt.clone=function(e){return li(e,4)},qt.cloneDeep=function(e){return li(e,5)},qt.cloneDeepWith=function(n,t){return li(n,5,t="function"==typeof t?t:e)},qt.cloneWith=function(n,t){return li(n,4,t="function"==typeof t?t:e)},qt.conformsTo=function(e,n){return null==n||pi(e,n,Ls(n))},qt.deburr=Us,qt.defaultTo=function(e,n){return null==e||e!=e?n:e},qt.divide=wc,qt.endsWith=function(n,t,i){n=bs(n),t=pa(t);var a=n.length,r=i=i===e?a:ci(hs(i),0,a);return(i-=t.length)>=0&&n.slice(i,r)==t},qt.eq=qo,qt.escape=function(e){return(e=bs(e))&&K.test(e)?e.replace(Y,it):e},qt.escapeRegExp=function(e){return(e=bs(e))&&te.test(e)?e.replace(ne,"\\$&"):e},qt.every=function(n,t,i){var a=Wo(n)?En:hi;return i&&yr(n,t,i)&&(t=e),a(n,lr(t,3))},qt.find=xo,qt.findIndex=Vr,qt.findKey=function(e,n){return Nn(e,lr(n,3),wi)},qt.findLast=go,qt.findLastIndex=Ur,qt.findLastKey=function(e,n){return Nn(e,lr(n,3),_i)},qt.floor=_c,qt.forEach=bo,qt.forEachRight=yo,qt.forIn=function(e,n){return null==e?e:bi(e,lr(n,3),Ds)},qt.forInRight=function(e,n){return null==e?e:yi(e,lr(n,3),Ds)},qt.forOwn=function(e,n){return e&&wi(e,lr(n,3))},qt.forOwnRight=function(e,n){return e&&_i(e,lr(n,3))},qt.get=js,qt.gt=Mo,qt.gte=Vo,qt.has=function(e,n){return null!=e&&vr(e,n,Ti)},qt.hasIn=Ts,qt.head=Yr,qt.identity=ac,qt.includes=function(e,n,t,i){e=Ho(e)?e:qs(e),t=t&&!i?hs(t):0;var a=e.length;return t<0&&(t=bt(a+t,0)),cs(e)?t<=a&&e.indexOf(n,t)>-1:!!a&&qn(e,n,t)>-1},qt.indexOf=function(e,n,t){var i=null==e?0:e.length;if(!i)return-1;var a=null==t?0:hs(t);return a<0&&(a=bt(i+a,0)),qn(e,n,a)},qt.inRange=function(n,t,i){return t=fs(t),i===e?(i=t,t=0):i=fs(i),function(e,n,t){return e>=yt(n,t)&&e<bt(n,t)}(n=xs(n),t,i)},qt.invoke=Bs,qt.isArguments=Uo,qt.isArray=Wo,qt.isArrayBuffer=Yo,qt.isArrayLike=Ho,qt.isArrayLikeObject=Ko,qt.isBoolean=function(e){return!0===e||!1===e||ts(e)&&ki(e)==v},qt.isBuffer=Go,qt.isDate=Jo,qt.isElement=function(e){return ts(e)&&1===e.nodeType&&!rs(e)},qt.isEmpty=function(e){if(null==e)return!0;if(Ho(e)&&(Wo(e)||"string"==typeof e||"function"==typeof e.splice||Go(e)||ps(e)||Uo(e)))return!e.length;var n=hr(e);if(n==w||n==k)return!e.size;if(Cr(e))return!Oi(e).length;for(var t in e)if(Fe.call(e,t))return!1;return!0},qt.isEqual=function(e,n){return Di(e,n)},qt.isEqualWith=function(n,t,i){var a=(i="function"==typeof i?i:e)?i(n,t):e;return a===e?Di(n,t,e,i):!!a},qt.isError=Zo,qt.isFinite=function(e){return"number"==typeof e&&vt(e)},qt.isFunction=Xo,qt.isInteger=Qo,qt.isLength=es,qt.isMap=is,qt.isMatch=function(e,n){return e===n||$i(e,n,ur(n))},qt.isMatchWith=function(n,t,i){return i="function"==typeof i?i:e,$i(n,t,ur(t),i)},qt.isNaN=function(e){return as(e)&&e!=+e},qt.isNative=function(e){if(Ar(e))throw new Ce("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Ii(e)},qt.isNil=function(e){return null==e},qt.isNull=function(e){return null===e},qt.isNumber=as,qt.isObject=ns,qt.isObjectLike=ts,qt.isPlainObject=rs,qt.isRegExp=os,qt.isSafeInteger=function(e){return Qo(e)&&e>=-9007199254740991&&e<=p},qt.isSet=ss,qt.isString=cs,qt.isSymbol=ls,qt.isTypedArray=ps,qt.isUndefined=function(n){return n===e},qt.isWeakMap=function(e){return ts(e)&&hr(e)==E},qt.isWeakSet=function(e){return ts(e)&&"[object WeakSet]"==ki(e)},qt.join=function(e,n){return null==e?"":xt.call(e,n)},qt.kebabCase=Ws,qt.last=Jr,qt.lastIndexOf=function(n,t,i){var a=null==n?0:n.length;if(!a)return-1;var r=a;return i!==e&&(r=(r=hs(i))<0?bt(a+r,0):yt(r,a-1)),t==t?function(e,n,t){for(var i=t+1;i--;)if(e[i]===n)return i;return i}(n,t,r):zn(n,Vn,r,!0)},qt.lowerCase=Ys,qt.lowerFirst=Hs,qt.lt=us,qt.lte=ds,qt.max=function(n){return n&&n.length?vi(n,ac,ji):e},qt.maxBy=function(n,t){return n&&n.length?vi(n,lr(t,2),ji):e},qt.mean=function(e){return Un(e,ac)},qt.meanBy=function(e,n){return Un(e,lr(n,2))},qt.min=function(n){return n&&n.length?vi(n,ac,Ni):e},qt.minBy=function(n,t){return n&&n.length?vi(n,lr(t,2),Ni):e},qt.stubArray=vc,qt.stubFalse=xc,qt.stubObject=function(){return{}},qt.stubString=function(){return""},qt.stubTrue=function(){return!0},qt.multiply=Ac,qt.nth=function(n,t){return n&&n.length?Ui(n,hs(t)):e},qt.noConflict=function(){return mn._===this&&(mn._=qe),this},qt.noop=lc,qt.now=jo,qt.pad=function(e,n,t){e=bs(e);var i=(n=hs(n))?ut(e):0;if(!n||i>=n)return e;var a=(n-i)/2;return Wa(gn(a),t)+e+Wa(xn(a),t)},qt.padEnd=function(e,n,t){e=bs(e);var i=(n=hs(n))?ut(e):0;return n&&i<n?e+Wa(n-i,t):e},qt.padStart=function(e,n,t){e=bs(e);var i=(n=hs(n))?ut(e):0;return n&&i<n?Wa(n-i,t)+e:e},qt.parseInt=function(e,n,t){return t||null==n?n=0:n&&(n=+n),_t(bs(e).replace(ie,""),n||0)},qt.random=function(n,t,i){if(i&&"boolean"!=typeof i&&yr(n,t,i)&&(t=i=e),i===e&&("boolean"==typeof t?(i=t,t=e):"boolean"==typeof n&&(i=n,n=e)),n===e&&t===e?(n=0,t=1):(n=fs(n),t===e?(t=n,n=0):t=fs(t)),n>t){var a=n;n=t,t=a}if(i||n%1||t%1){var r=At();return yt(n+r*(t-n+ln("1e-"+((r+"").length-1))),t)}return Gi(n,t)},qt.reduce=function(e,n,t){var i=Wo(e)?In:Hn,a=arguments.length<3;return i(e,lr(n,4),t,a,mi)},qt.reduceRight=function(e,n,t){var i=Wo(e)?Fn:Hn,a=arguments.length<3;return i(e,lr(n,4),t,a,fi)},qt.repeat=function(n,t,i){return t=(i?yr(n,t,i):t===e)?1:hs(t),Ji(bs(n),t)},qt.replace=function(){var e=arguments,n=bs(e[0]);return e.length<3?n:n.replace(e[1],e[2])},qt.result=function(n,t,i){var a=-1,r=(t=ya(t,n)).length;for(r||(r=1,n=e);++a<r;){var o=null==n?e:n[Or(t[a])];o===e&&(a=r,o=i),n=Xo(o)?o.call(n):o}return n},qt.round=Cc,qt.runInContext=U,qt.sample=function(e){return(Wo(e)?Xt:Xi)(e)},qt.size=function(e){if(null==e)return 0;if(Ho(e))return cs(e)?ut(e):e.length;var n=hr(e);return n==w||n==k?e.size:Oi(e).length},qt.snakeCase=Ks,qt.some=function(n,t,i){var a=Wo(n)?On:ra;return i&&yr(n,t,i)&&(t=e),a(n,lr(t,3))},qt.sortedIndex=function(e,n){return oa(e,n)},qt.sortedIndexBy=function(e,n,t){return sa(e,n,lr(t,2))},qt.sortedIndexOf=function(e,n){var t=null==e?0:e.length;if(t){var i=oa(e,n);if(i<t&&qo(e[i],n))return i}return-1},qt.sortedLastIndex=function(e,n){return oa(e,n,!0)},qt.sortedLastIndexBy=function(e,n,t){return sa(e,n,lr(t,2),!0)},qt.sortedLastIndexOf=function(e,n){if(null!=e&&e.length){var t=oa(e,n,!0)-1;if(qo(e[t],n))return t}return-1},qt.startCase=Gs,qt.startsWith=function(e,n,t){return e=bs(e),t=null==t?0:ci(hs(t),0,e.length),n=pa(n),e.slice(t,t+n.length)==n},qt.subtract=Sc,qt.sum=function(e){return e&&e.length?Kn(e,ac):0},qt.sumBy=function(e,n){return e&&e.length?Kn(e,lr(n,2)):0},qt.template=function(n,t,i){var a=qt.templateSettings;i&&yr(n,t,i)&&(t=e),n=bs(n),t=_s({},t,a,Qa);var r,o,s=_s({},t.imports,a.imports,Qa),c=Ls(s),l=Xn(s,c),p=0,u=t.interpolate||be,d="__p += '",m=Te((t.escape||be).source+"|"+u.source+"|"+(u===Z?ue:be).source+"|"+(t.evaluate||be).source+"|$","g"),f="//# sourceURL="+(Fe.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++rn+"]")+"\n";n.replace(m,(function(e,t,i,a,s,c){return i||(i=a),d+=n.slice(p,c).replace(ye,at),t&&(r=!0,d+="' +\n__e("+t+") +\n'"),s&&(o=!0,d+="';\n"+s+";\n__p += '"),i&&(d+="' +\n((__t = ("+i+")) == null ? '' : __t) +\n'"),p=c+e.length,e})),d+="';\n";var h=Fe.call(t,"variable")&&t.variable;if(h){if(le.test(h))throw new Ce("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(o?d.replace(q,""):d).replace(M,"$1").replace(V,"$1;"),d="function("+(h||"obj")+") {\n"+(h?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(r?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var v=Qs((function(){return Se(c,f+"return "+d).apply(e,l)}));if(v.source=d,Zo(v))throw v;return v},qt.times=function(e,n){if((e=hs(e))<1||e>p)return[];var t=d,i=yt(e,d);n=lr(n),e-=d;for(var a=Gn(i,n);++t<e;)n(t);return a},qt.toFinite=fs,qt.toInteger=hs,qt.toLength=vs,qt.toLower=function(e){return bs(e).toLowerCase()},qt.toNumber=xs,qt.toSafeInteger=function(e){return e?ci(hs(e),-9007199254740991,p):0===e?e:0},qt.toString=bs,qt.toUpper=function(e){return bs(e).toUpperCase()},qt.trim=function(n,t,i){if((n=bs(n))&&(i||t===e))return Jn(n);if(!n||!(t=pa(t)))return n;var a=dt(n),r=dt(t);return _a(a,et(a,r),nt(a,r)+1).join("")},qt.trimEnd=function(n,t,i){if((n=bs(n))&&(i||t===e))return n.slice(0,mt(n)+1);if(!n||!(t=pa(t)))return n;var a=dt(n);return _a(a,0,nt(a,dt(t))+1).join("")},qt.trimStart=function(n,t,i){if((n=bs(n))&&(i||t===e))return n.replace(ie,"");if(!n||!(t=pa(t)))return n;var a=dt(n);return _a(a,et(a,dt(t))).join("")},qt.truncate=function(n,t){var i=30,a="...";if(ns(t)){var r="separator"in t?t.separator:r;i="length"in t?hs(t.length):i,a="omission"in t?pa(t.omission):a}var o=(n=bs(n)).length;if(rt(n)){var s=dt(n);o=s.length}if(i>=o)return n;var c=i-ut(a);if(c<1)return a;var l=s?_a(s,0,c).join(""):n.slice(0,c);if(r===e)return l+a;if(s&&(c+=l.length-c),os(r)){if(n.slice(c).search(r)){var p,u=l;for(r.global||(r=Te(r.source,bs(de.exec(r))+"g")),r.lastIndex=0;p=r.exec(u);)var d=p.index;l=l.slice(0,d===e?c:d)}}else if(n.indexOf(pa(r),c)!=c){var m=l.lastIndexOf(r);m>-1&&(l=l.slice(0,m))}return l+a},qt.unescape=function(e){return(e=bs(e))&&H.test(e)?e.replace(W,ft):e},qt.uniqueId=function(e){var n=++Oe;return bs(e)+n},qt.upperCase=Js,qt.upperFirst=Zs,qt.each=bo,qt.eachRight=yo,qt.first=Yr,cc(qt,(gc={},wi(qt,(function(e,n){Fe.call(qt.prototype,n)||(gc[n]=e)})),gc),{chain:!1}),qt.VERSION="4.17.21",jn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){qt[e].placeholder=qt})),jn(["drop","take"],(function(n,t){Wt.prototype[n]=function(i){i=i===e?1:bt(hs(i),0);var a=this.__filtered__&&!t?new Wt(this):this.clone();return a.__filtered__?a.__takeCount__=yt(i,a.__takeCount__):a.__views__.push({size:yt(i,d),type:n+(a.__dir__<0?"Right":"")}),a},Wt.prototype[n+"Right"]=function(e){return this.reverse()[n](e).reverse()}})),jn(["filter","map","takeWhile"],(function(e,n){var t=n+1,i=1==t||3==t;Wt.prototype[e]=function(e){var n=this.clone();return n.__iteratees__.push({iteratee:lr(e,3),type:t}),n.__filtered__=n.__filtered__||i,n}})),jn(["head","last"],(function(e,n){var t="take"+(n?"Right":"");Wt.prototype[e]=function(){return this[t](1).value()[0]}})),jn(["initial","tail"],(function(e,n){var t="drop"+(n?"":"Right");Wt.prototype[e]=function(){return this.__filtered__?new Wt(this):this[t](1)}})),Wt.prototype.compact=function(){return this.filter(ac)},Wt.prototype.find=function(e){return this.filter(e).head()},Wt.prototype.findLast=function(e){return this.reverse().find(e)},Wt.prototype.invokeMap=Zi((function(e,n){return"function"==typeof e?new Wt(this):this.map((function(t){return Bi(t,e,n)}))})),Wt.prototype.reject=function(e){return this.filter(Fo(lr(e)))},Wt.prototype.slice=function(n,t){n=hs(n);var i=this;return i.__filtered__&&(n>0||t<0)?new Wt(i):(n<0?i=i.takeRight(-n):n&&(i=i.drop(n)),t!==e&&(i=(t=hs(t))<0?i.dropRight(-t):i.take(t-n)),i)},Wt.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Wt.prototype.toArray=function(){return this.take(d)},wi(Wt.prototype,(function(n,t){var i=/^(?:filter|find|map|reject)|While$/.test(t),a=/^(?:head|last)$/.test(t),r=qt[a?"take"+("last"==t?"Right":""):t],o=a||/^find/.test(t);r&&(qt.prototype[t]=function(){var t=this.__wrapped__,s=a?[1]:arguments,c=t instanceof Wt,l=s[0],p=c||Wo(t),u=function(e){var n=r.apply(qt,$n([e],s));return a&&d?n[0]:n};p&&i&&"function"==typeof l&&1!=l.length&&(c=p=!1);var d=this.__chain__,m=!!this.__actions__.length,f=o&&!d,h=c&&!m;if(!o&&p){t=h?t:new Wt(this);var v=n.apply(t,s);return v.__actions__.push({func:fo,args:[u],thisArg:e}),new Ut(v,d)}return f&&h?n.apply(this,s):(v=this.thru(u),f?a?v.value()[0]:v.value():v)})})),jn(["pop","push","shift","sort","splice","unshift"],(function(e){var n=Be[e],t=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",i=/^(?:pop|shift)$/.test(e);qt.prototype[e]=function(){var e=arguments;if(i&&!this.__chain__){var a=this.value();return n.apply(Wo(a)?a:[],e)}return this[t]((function(t){return n.apply(Wo(t)?t:[],e)}))}})),wi(Wt.prototype,(function(e,n){var t=qt[n];if(t){var i=t.name+"";Fe.call(Lt,i)||(Lt[i]=[]),Lt[i].push({name:n,func:t})}})),Lt[qa(e,2).name]=[{name:"wrapper",func:e}],Wt.prototype.clone=function(){var e=new Wt(this.__wrapped__);return e.__actions__=Pa(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=Pa(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=Pa(this.__views__),e},Wt.prototype.reverse=function(){if(this.__filtered__){var e=new Wt(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Wt.prototype.value=function(){var e=this.__wrapped__.value(),n=this.__dir__,t=Wo(e),i=n<0,a=t?e.length:0,r=function(e,n,t){for(var i=-1,a=t.length;++i<a;){var r=t[i],o=r.size;switch(r.type){case"drop":e+=o;break;case"dropRight":n-=o;break;case"take":n=yt(n,e+o);break;case"takeRight":e=bt(e,n-o)}}return{start:e,end:n}}(0,a,this.__views__),o=r.start,s=r.end,c=s-o,l=i?s:o-1,p=this.__iteratees__,u=p.length,d=0,m=yt(c,this.__takeCount__);if(!t||!i&&a==c&&m==c)return ha(e,this.__actions__);var f=[];e:for(;c--&&d<m;){for(var h=-1,v=e[l+=n];++h<u;){var x=p[h],g=x.iteratee,b=x.type,y=g(v);if(2==b)v=y;else if(!y){if(1==b)continue e;break e}}f[d++]=v}return f},qt.prototype.at=ho,qt.prototype.chain=function(){return mo(this)},qt.prototype.commit=function(){return new Ut(this.value(),this.__chain__)},qt.prototype.next=function(){this.__values__===e&&(this.__values__=ms(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?e:this.__values__[this.__index__++]}},qt.prototype.plant=function(n){for(var t,i=this;i instanceof Vt;){var a=Nr(i);a.__index__=0,a.__values__=e,t?r.__wrapped__=a:t=a;var r=a;i=i.__wrapped__}return r.__wrapped__=n,t},qt.prototype.reverse=function(){var n=this.__wrapped__;if(n instanceof Wt){var t=n;return this.__actions__.length&&(t=new Wt(this)),(t=t.reverse()).__actions__.push({func:fo,args:[eo],thisArg:e}),new Ut(t,this.__chain__)}return this.thru(eo)},qt.prototype.toJSON=qt.prototype.valueOf=qt.prototype.value=function(){return ha(this.__wrapped__,this.__actions__)},qt.prototype.first=qt.prototype.head,nn&&(qt.prototype[nn]=function(){return this}),qt}();hn?((hn.exports=ht)._=ht,fn._=ht):mn._=ht}.call(U);var Ei={name:"FieldText",components:{Field:d},inheritAttrs:!1,model:{prop:"currentText"},data(){return{showMore:!1,rules:Ti.exports.cloneDeep(this.validateRules)}},props:{validateRules:{type:[String,Object],default:()=>{}},label:{type:String},currentText:[String,Number],addAble:[String,Number],isBold:{type:Boolean,default:!1},maxlength:{type:[String,Number],default:100},fieldType:{type:String,default:"text"},validateName:{type:String,default:""},availableBalanceAmt:{type:[String,Number]},hideAvailableBalance:{type:Boolean,default:!1},isEnd:{type:Boolean,default:!1},remark:{type:String,default:""},precision:{type:Number,default:2}},computed:{name(){return this.validateName||this.label},numberPrecisionRegex(){return new RegExp(`^(\\d)*\\.\\d{${this.precision},}$`)}},methods:{changeText(e){this.$emit("input",e),this.$emit("onText",e)},focus(){this.$refs.field.focus()},formatter(e,n=this.$attrs.type){if(e+="",e=Ti.exports.trim(e),console.log("value:"+this.currentText+" fieldText:"+e+" type:"+n),"number"===n&&this.numberPrecisionRegex.test(e))try{e=(e=Number(e)).toFixed(this.precision)}catch(e){}else if("int"===n&&/^[0-9]+\.?$/.test(e))try{e=(e=Number(e)).toFixed(0)}catch(e){}return e}},watch:{currentText:{handler(e){}}}};var Pi=function(e,n,t,i,a,r,o,s,c,l){"boolean"!=typeof o&&(c=s,s=o,o=!1);var p,u="function"==typeof t?t.options:t;if(e&&e.render&&(u.render=e.render,u.staticRenderFns=e.staticRenderFns,u._compiled=!0,a&&(u.functional=!0)),i&&(u._scopeId=i),r?(p=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),n&&n.call(this,c(e)),e&&e._registeredComponents&&e._registeredComponents.add(r)},u._ssrRegister=p):n&&(p=o?function(){n.call(this,l(this.$root.$options.shadowRoot))}:function(e){n.call(this,s(e))}),p)if(u.functional){var d=u.render;u.render=function(e,n){return p.call(n),d(e,n)}}else{var m=u.beforeCreate;u.beforeCreate=m?[].concat(m,p):[p]}return t},Bi="undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());var Li=document.head||document.getElementsByTagName("head")[0],Di={};var $i=function(e){return function(e,n){return function(e,n){var t=Bi?n.media||"default":e,i=Di[t]||(Di[t]={ids:new Set,styles:[]});if(!i.ids.has(e)){i.ids.add(e);var a=n.source;if(n.map&&(a+="\n/*# sourceURL="+n.map.sources[0]+" */",a+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n.map))))+" */"),i.element||(i.element=document.createElement("style"),i.element.type="text/css",n.media&&i.element.setAttribute("media",n.media),Li.appendChild(i.element)),"styleSheet"in i.element)i.styles.push(a),i.element.styleSheet.cssText=i.styles.filter(Boolean).join("\n");else{var r=i.ids.size-1,o=document.createTextNode(a),s=i.element.childNodes;s[r]&&i.element.removeChild(s[r]),s.length?i.element.insertBefore(o,s[r]):i.element.appendChild(o)}}}(e,n)}};const Ii=Ei;var Fi=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ValidationProvider",{attrs:{name:e.name,rules:e.validateRules},scopedSlots:e._u([{key:"default",fn:function(n){var i=n.errors;return[t("Field",e._b({ref:"field",class:e.isEnd?"bot-bor":"",attrs:{value:e.currentText,label:e.label,"error-message":i[0],formatter:e.formatter,"input-align":"right",maxlength:e.maxlength,type:e.fieldType},on:{input:e.changeText},scopedSlots:e._u([{key:"label",fn:function(){return[t("span",{class:e.isBold?"font-bold":""},[e._v(e._s(e.label))])]},proxy:!0},"amount"===e.fieldType?{key:"right-icon",fn:function(){return[t("div",{staticStyle:{color:"#333333","margin-left":"5px"}},[e._v("元")])]},proxy:!0}:"availableBalanceType"===e.fieldType&&0==e.hideAvailableBalance?{key:"right-icon",fn:function(){return[t("div",{staticStyle:{color:"#969799","margin-left":"20px"}},[e._v(e._s(e._f("currency")(e.availableBalanceAmt)))])]},proxy:!0}:null],null,!0)},"Field",e.$attrs,!1))]}}])})};Fi._withStripped=!0;const Oi=Pi({render:Fi,staticRenderFns:[]},(function(e){e&&e("data-v-54dd797e_0",{source:".font-bold[data-v-54dd797e] {\n  font-weight: bold;\n}\n.bot-bor[data-v-54dd797e] {\n  border-bottom: 0px;\n}\n[data-v-54dd797e] .van-field__control--right {\n  padding-right: 10px;\n}\n",map:{version:3,sources:["FieldText.vue"],names:[],mappings:"AAAA;EACE,iBAAiB;AACnB;AACA;EACE,kBAAkB;AACpB;AACC;EACC,mBAAmB;AACrB",file:"FieldText.vue",sourcesContent:[".font-bold {\n  font-weight: bold;\n}\n.bot-bor {\n  border-bottom: 0px;\n}\n /deep/ .van-field__control--right {\n  padding-right: 10px;\n}\n"]},media:void 0})}),Ii,"data-v-54dd797e",false,undefined,!1,$i,void 0,void 0);Oi.install=function(e){e.component(Oi.name,Oi)};var Ri={name:"FieldSelect",components:{Field:d,Popup:m,Search:f,Picker:h,Icon:v,RadioGroup:x,CellGroup:g,Cell:b,Radio:y,Pagination:w},data(){return{show:!1,searchVal:"",columnsAll:[],defaultIndex:0,resultRadio:"",currentPage:1,page:5,rules:Ti.exports.cloneDeep(this.validateRules)}},inheritAttrs:!1,model:{prop:"currentSelect"},props:{currentSelect:{type:[Object,String,Number,Array],default:()=>{}},valueKey:{type:String,default:"name"},getType:{type:String,default:"code"},optionCodes:{type:Array,default:()=>[]},postData:String,postUrl:String,validateRules:{type:[String,Object]},scene:{type:[String,Number],default:1},disabled:{type:Boolean,value:!1},isEnd:{type:Boolean,default:!1},useShowSlot:{type:Boolean,default:!1},reimbType:{type:String,default:""},remark:{type:String,default:""},refreshWhenClick:{type:Boolean,default:!1},httpFunction:[Function]},computed:{fieldVal(){let e="";return e="string"==typeof this.currentSelect?this.currentSelect:(this.currentSelect||{}).name||"",e},fieldId(){let e="";return e="string"==typeof this.currentSelect?"":(this.currentSelect||{}).id||"",e},columnsRadio(){let e=(this.currentPage-1)*this.page;return this.columns.slice(e,e+this.page)},pageCount(){return Math.ceil(this.columns.length/this.page)},columns(){let e;try{e=Ti.exports.cloneDeep(this.columnsAll).filter((e=>{let n=e.name+"";n=n.toLowerCase();let t=(this.searchVal+"").trim();return t=t.toLowerCase(),n.indexOf(t)>-1}))}catch(n){e=[]}return e}},watch:{show(){this.searchVal=""},searchVal(){this.currentPage=1},currentSelect:{handler(){"string"==typeof this.currentSelect?this.currentSelect:(this.currentSelect||{})[this.valueKey]},deep:!0}},methods:{onDelete(){this.$emit("onSelect",{}),this.$emit("input",{})},onSearch(){},toggle(e){this.resultRadio=e;let n={};this.columnsAll.every((t=>t.id!==e||(n=Ti.exports.cloneDeep(t),!1))),this.onConfirm(n)},onClick(){if(2!==this.scene&&!this.disabled&&"TEXT"!==this.getType&&"text"!==this.getType){if(this.$emit("paramsChange"),"CODE"===this.getType||"code"===this.getType)this.getColumns(this.optionCodes||[]);else{if(!this.postUrl&&!this.httpFunction instanceof Function)return;setTimeout((async()=>{if(this.refreshWhenClick||Array.isArray(this.columnsAll)&&0===this.columnsAll.length){let e=JSON.parse(this.postData||"{}");if(this.httpFunction instanceof Function){const n=await this.httpFunction(e);this.getColumns((Array.isArray(n)?n:void 0)||n.list||n.data.list||[])}else this.$post(this.postUrl,e).then((e=>{console.log("fieldSelect:",e),this.getColumns((Array.isArray(e)?e:void 0)||e.list||e.data.list||[])}))}}),300)}this.show=!0}},getColumns(e){this.columnsAll=e||[],this.defaultIndex=0,this.currentPage=1,this.resultRadio="",this.fieldId?this.columnsAll.every(((e,n)=>e.id!==this.fieldId||(this.defaultIndex=n,this.currentPage=Math.ceil((n+1)/this.page),this.resultRadio=e.id,!1))):this.columnsAll.every(((e,n)=>e.name!==this.fieldVal||(this.defaultIndex=n,this.currentPage=Math.ceil((n+1)/this.page),this.resultRadio=e.id,!1)))},onConfirm(e){this.$emit("onSelect",e),this.$emit("input",e),this.show=!1}}};const Ni=Ri;var zi=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("ValidationProvider",{attrs:{name:e.$attrs.label,rules:e.validateRules},scopedSlots:e._u([{key:"default",fn:function(n){var i=n.errors;return[e.useShowSlot?e._t("default",null,{click:function(){return e.onClick()}}):t("Field",e._b({class:e.isEnd?"bot-bor":"",attrs:{readonly:!0,"error-message":i[0],"error-message-align":"right","input-align":"right"},on:{click:e.onClick},scopedSlots:e._u([{key:"label",fn:function(){return[t("div",{staticClass:"van-cell__title van-field__label"},[t("span",[e._v(e._s(e.$attrs.label))])])]},proxy:!0}],null,!0),model:{value:e.fieldVal,callback:function(n){e.fieldVal=n},expression:"fieldVal"}},"Field",e.$attrs,!1),[e._v(" "),t("div",{staticStyle:{display:"flex","align-items":"center"},attrs:{slot:"button"},slot:"button"},[2!==e.scene&&!e.disabled&&e.fieldVal?t("div",{on:{click:function(n){return n.stopPropagation(),e.onDelete(n)}}},[t("span",{staticClass:"txt-all"},[t("i",{staticClass:"iconfont icon-shanchu"})])]):e._e(),e._v(" "),2===e.scene||e.disabled||"TEXT"===e.getType&&"text"===e.getType?e._e():t("span",{staticClass:"txt-all",staticStyle:{"padding-left":"2px"}},[t("Icon",{attrs:{name:"arrow"}})],1)])])]}}])}),e._v(" "),e.columnsAll.length<=100?t("Popup",{style:{width:"100%"},attrs:{position:"bottom","get-container":"#app"},model:{value:e.show,callback:function(n){e.show=n},expression:"show"}},[t("div",[e.columnsAll.length>10?t("form",{attrs:{action:"/"}},[t("Search",{attrs:{clearable:"",placeholder:"请搜索关键词"},on:{search:e.onSearch},model:{value:e.searchVal,callback:function(n){e.searchVal=n},expression:"searchVal"}})],1):e._e(),e._v(" "),t("Picker",{attrs:{"show-toolbar":"","value-key":e.valueKey,title:"请选择"+e.$attrs.label,columns:e.columns,"default-index":e.defaultIndex},on:{cancel:function(n){e.show=!1},confirm:e.onConfirm}})],1)]):t("Popup",{style:{width:"100%",height:"54%"},attrs:{position:"bottom","get-container":"#app"},model:{value:e.show,callback:function(n){e.show=n},expression:"show"}},[t("div",{staticClass:"jsonvue-page"},[t("div",{staticClass:"select-hd van-hairline--bottom"},[t("span",{staticClass:"null-pop"},[e._v(" ")]),e._v(" "),t("span",{staticClass:"van-info-title"},[e._v("添加"+e._s(e.$attrs.label))]),e._v(" "),t("Icon",{staticClass:"close-pop",attrs:{name:"close"},on:{click:function(n){e.show=!1}}})],1),e._v(" "),t("form",{attrs:{action:"/"}},[t("Search",{attrs:{clearable:"",placeholder:"请搜索关键词"},on:{search:e.onSearch},model:{value:e.searchVal,callback:function(n){e.searchVal=n},expression:"searchVal"}})],1),e._v(" "),t("div",{staticClass:"jsonvue-content"},[t("RadioGroup",{model:{value:e.resultRadio,callback:function(n){e.resultRadio=n},expression:"resultRadio"}},[t("CellGroup",e._l(e.columnsRadio,(function(n,i){return t("Cell",{key:i,attrs:{clickable:"",title:n.name},on:{click:function(t){return e.toggle(n.id)}}},[t("Radio",{staticClass:"ml5",attrs:{slot:"right-icon",name:n.id},slot:"right-icon"})],1)})),1)],1)],1),e._v(" "),t("Pagination",{attrs:{"page-count":e.pageCount,mode:"simple"},model:{value:e.currentPage,callback:function(n){e.currentPage=n},expression:"currentPage"}})],1)])],1)};zi._withStripped=!0;const qi=Pi({render:zi,staticRenderFns:[]},(function(e){e&&e("data-v-6f5b742a_0",{source:"\n.jsonvue-page[data-v-6f5b742a] {\n    display: flex;\n    flex-direction: column;\n}\n.jsonvue-flex1[data-v-6f5b742a] {\n    width: 100%;\n    flex: 1;\n}\n.jsonvue-content[data-v-6f5b742a] {\n    width: 100%;\n    flex: 1;\n    overflow-x: hidden;\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch;\n}\n.bot-bor[data-v-6f5b742a]{\n    border-bottom: 0px;\n}\n.select-hd[data-v-6f5b742a] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 20px 30px;\n  font-size: 15px;\n  background-color: #fff;\n}\n.van-info-title[data-v-6f5b742a]{\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 60%;\n  white-space: nowrap;\n  text-align: center;\n}\n",map:{version:3,sources:["D:\\ZJ_Project\\jsonvue\\src\\FieldSelectt\\FieldSelect.vue"],names:[],mappings:";AAuUA;IACA,aAAA;IACA,sBAAA;AACA;AACA;IACA,WAAA;IACA,OAAA;AACA;AACA;IACA,WAAA;IACA,OAAA;IACA,kBAAA;IACA,gBAAA;IACA,iCAAA;AACA;AACA;IACA,kBAAA;AACA;AACA;EACA,aAAA;EACA,mBAAA;EACA,8BAAA;EACA,kBAAA;EACA,eAAA;EACA,sBAAA;AACA;AACA;EACA,gBAAA;EACA,uBAAA;EACA,UAAA;EACA,mBAAA;EACA,kBAAA;AACA",file:"FieldSelect.vue",sourcesContent:['<template>\r\n    <div>\r\n       <ValidationProvider :name="$attrs.label" :rules="validateRules" v-slot="{errors}">\r\n            <Field\r\n                    v-if="!useShowSlot"\r\n                    v-bind="$attrs"\r\n                    :readonly="true"\r\n                    v-model="fieldVal"\r\n                    @click="onClick"\r\n                    :error-message="errors[0]"\r\n                    :error-message-align="\'right\'"\r\n                    :input-align="\'right\'"\r\n                    :class="isEnd?\'bot-bor\':\'\'"\r\n            >\r\n\r\n                <template #label>\r\n                    <div class="van-cell__title van-field__label" >\r\n                        <span>{{$attrs.label}}</span>\r\n                    </div>\r\n                </template>\r\n                <div  slot="button" style="display: flex;align-items: center">\r\n                    <div @click.stop="onDelete" v-if=" scene!==2 && !disabled && fieldVal " >\r\n                      <span class="txt-all" >\r\n                        <i class="iconfont icon-shanchu"></i>\r\n                      </span>\r\n                    </div>\r\n                    <span style="padding-left: 2px"\r\n                          class="txt-all"\r\n                          v-if="scene!==2 && !disabled && (getType !==\'TEXT\' || getType !==\'text\')"\r\n                    >\r\n                        <Icon name="arrow"></Icon>\r\n                      </span>\r\n                </div>\r\n            </Field>\r\n            <slot v-else :click="()=>onClick()"></slot>\r\n        </ValidationProvider>\r\n      <Popup\r\n              v-model="show"\r\n              position="bottom"\r\n              get-container="#app"\r\n              :style="{ width: \'100%\'}"\r\n              v-if="columnsAll.length<=100"\r\n      >\r\n          <div>\r\n              <form action="/" v-if="columnsAll.length>10">\r\n                  <Search v-model="searchVal" clearable placeholder="请搜索关键词" @search="onSearch"></Search>\r\n              </form>\r\n              <Picker\r\n                      show-toolbar\r\n                      :value-key="valueKey"\r\n                      :title="\'请选择\'+$attrs.label"\r\n                      :columns="columns"\r\n                      :default-index="defaultIndex"\r\n                      @cancel="show=false"\r\n                      @confirm="onConfirm"\r\n              />\r\n          </div>\r\n      </Popup>\r\n      <Popup\r\n              v-else\r\n              v-model="show"\r\n              position="bottom"\r\n              get-container="#app"\r\n              :style="{ width: \'100%\',height:\'54%\' }"\r\n      >\r\n          <div class="jsonvue-page">\r\n              <div class="select-hd van-hairline--bottom">\r\n                  <span class="null-pop">&nbsp;</span>\r\n                  <span class="van-info-title">添加{{$attrs.label}}</span>\r\n                  <Icon class="close-pop" @click="show=false" name="close" />\r\n              </div>\r\n              <form action="/">\r\n                  <Search v-model="searchVal" clearable placeholder="请搜索关键词" @search="onSearch"></Search>\r\n              </form>\r\n              <div class="jsonvue-content">\r\n                  <RadioGroup v-model="resultRadio">\r\n                      <CellGroup>\r\n                          <Cell\r\n                                  v-for="(item, index) in columnsRadio"\r\n                                  clickable\r\n                                  :key="index"\r\n                                  :title="item.name"\r\n                                  @click="toggle(item.id)"\r\n                          >\r\n                              <Radio class="ml5" :name="item.id" slot="right-icon" />\r\n                          </Cell>\r\n                      </CellGroup>\r\n                  </RadioGroup>\r\n              </div>\r\n              <Pagination\r\n                      v-model="currentPage"\r\n                      :page-count="pageCount"\r\n                      mode="simple"\r\n              />\r\n          </div>\r\n      </Popup>\r\n    </div>\r\n</template>\r\n<script>\r\n    import { cloneDeep } from "lodash";\r\n    import {Field,Popup,Search,Picker,Icon,RadioGroup,CellGroup,Cell,Radio,Pagination} from \'vant\'\r\n    export default {\r\n        name: "FieldSelect",\r\n        components: {Field,Popup,Search,Picker,Icon,RadioGroup,CellGroup,Cell,Radio,Pagination},\r\n        data() {\r\n            return {\r\n                show: false,\r\n                searchVal: "",\r\n                columnsAll: [],\r\n                defaultIndex: 0,\r\n                resultRadio: "",\r\n                currentPage: 1,\r\n                page:5,\r\n                rules:cloneDeep(this.validateRules)\r\n            };\r\n        },\r\n        inheritAttrs: false,\r\n        model: {\r\n            prop: "currentSelect"\r\n        },\r\n        props: {\r\n            currentSelect: {\r\n                type:[Object, String, Number, Array],\r\n                default:()=>{}\r\n            },\r\n            valueKey: {\r\n                type: String,\r\n                default: "name"\r\n            },\r\n            getType:{\r\n              type:String,\r\n              default:\'code\'\r\n            },\r\n            optionCodes:{\r\n              type:Array,\r\n              default:()=>[]\r\n            },\r\n            postData: String,\r\n            postUrl: String,\r\n            validateRules: {\r\n              type:[String,Object]\r\n            },\r\n            scene:{\r\n              type:[String,Number],\r\n              default:1\r\n            },\r\n            disabled:{\r\n                type:Boolean,\r\n                value:false\r\n            },\r\n            isEnd:{\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            useShowSlot:{\r\n                type:Boolean,\r\n                default:false\r\n            },\r\n            reimbType:{\r\n                type:String,\r\n                default:\'\'\r\n            },\r\n            remark:{\r\n                type:String,\r\n                default:\'\'\r\n            },\r\n            //每次点击时是否刷新数据 默认初次加载后缓存数据后不再刷新加载\r\n            refreshWhenClick:{\r\n              type:Boolean,\r\n              default:false\r\n            },\r\n            //http 外部http请求函数方便对接现有接口\r\n            httpFunction:[Function]\r\n        },\r\n        computed: {\r\n            fieldVal() {\r\n              /* 字段选择的name */\r\n              let name = "";\r\n              if (typeof this.currentSelect == "string") {\r\n                name = this.currentSelect;\r\n              } else {\r\n                name = (this.currentSelect || {}).name || "";\r\n              }\r\n              return name;\r\n            },\r\n            fieldId() {\r\n                /* 字段id */\r\n                let id = "";\r\n                if (typeof this.currentSelect == "string") {\r\n                    id = "";\r\n                } else {\r\n                    id = (this.currentSelect || {}).id || "";\r\n                }\r\n                return id;\r\n            },\r\n            columnsRadio(){\r\n                let currentPage = (this.currentPage - 1) * this.page;\r\n                return this.columns.slice(currentPage,currentPage+this.page);\r\n            },\r\n            pageCount(){\r\n                return Math.ceil(this.columns.length/this.page);\r\n            },\r\n            columns() {\r\n                /* picker筛选 */\r\n                let columns;\r\n                try {\r\n                    let columnsAll = cloneDeep(this.columnsAll);\r\n                    columns = columnsAll.filter(item => {\r\n                        let name = item.name + "";\r\n                        name = name.toLowerCase();\r\n                        let searchVal = (this.searchVal + "").trim();\r\n                        searchVal = searchVal.toLowerCase();\r\n                        return name.indexOf(searchVal) > -1;\r\n                    });\r\n                } catch (error) {\r\n                    columns = [];\r\n                }\r\n                return columns;\r\n            }\r\n        },\r\n        watch: {\r\n            show() {\r\n                this.searchVal = "";\r\n            },\r\n            searchVal(){\r\n                this.currentPage = 1;\r\n            },\r\n            currentSelect: {\r\n                handler() {\r\n                    /* 监听值变化，触发返回 */\r\n                    //this.$emit("onSelect", this.currentSelect);\r\n                  let name = "";\r\n                  if (typeof this.currentSelect == "string") {\r\n                    name = this.currentSelect;\r\n                  } else {\r\n                    name = (this.currentSelect || {})[this.valueKey] || "";\r\n                  }\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        methods: {\r\n            onDelete(){\r\n                this.$emit("onSelect", {});\r\n                this.$emit("input",{})\r\n            },\r\n            onSearch() {},\r\n            toggle(id) {\r\n                this.resultRadio = id;\r\n                let value = {};\r\n                this.columnsAll.every(item => {\r\n                    if (item.id === id) {\r\n                        value = cloneDeep(item);\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                });\r\n                this.onConfirm(value);\r\n            },\r\n            onClick() {\r\n                if (this.scene === 2 || this.disabled || this.getType === "TEXT" || this.getType === "text") {\r\n                    return;\r\n                }\r\n                //参数变更组件\r\n                this.$emit(\'paramsChange\')\r\n                //触发下拉,获取数据\r\n                if (this.getType === "CODE" || this.getType === "code") {\r\n                    this.getColumns(this.optionCodes || []);\r\n                } else {\r\n                    if (!this.postUrl && !this.httpFunction instanceof Function) {\r\n                        return;\r\n                    }\r\n                    setTimeout(async ()=>{\r\n                        if (this.refreshWhenClick || Array.isArray(this.columnsAll) && this.columnsAll.length === 0) {\r\n                          let data = JSON.parse(this.postData || "{}")\r\n                          if (this.httpFunction instanceof Function) {\r\n                              const resp = await this.httpFunction(data)\r\n                              this.getColumns((Array.isArray(resp) ? resp : undefined) || resp.list || resp.data.list || []);\r\n                          } else {\r\n                            this.$post(this.postUrl, data).then(resp => {\r\n                              console.log("fieldSelect:",resp)\r\n                              this.getColumns((Array.isArray(resp) ? resp : undefined) || resp.list || resp.data.list || []);\r\n                            });\r\n                          }\r\n                        }\r\n                    },300)\r\n                }\r\n                this.show = true;\r\n            },\r\n            getColumns(columnsAll) {\r\n                this.columnsAll = columnsAll || [];\r\n                this.defaultIndex = 0;\r\n                this.currentPage = 1;\r\n                this.resultRadio = "";\r\n                if (this.fieldId) {\r\n                    this.columnsAll.every((item, index) => {\r\n                        if (item.id === this.fieldId) {\r\n                            this.defaultIndex = index;\r\n                            this.currentPage = Math.ceil((index+1)/this.page);\r\n                            this.resultRadio = item.id;\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                } else {\r\n                    this.columnsAll.every((item, index) => {\r\n                        if (item.name === this.fieldVal) {\r\n                            this.defaultIndex = index;\r\n                            this.currentPage = Math.ceil((index+1)/this.page);\r\n                            this.resultRadio = item.id;\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                }\r\n            },\r\n            onConfirm(value) {\r\n                /* 更新数据和触发 */\r\n                this.$emit("onSelect", value);\r\n                this.$emit("input", value);\r\n                this.show = false;\r\n            }\r\n        }\r\n    };\r\n<\/script>\r\n\r\n<style scoped>\r\n    .jsonvue-page {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n    .jsonvue-flex1 {\r\n        width: 100%;\r\n        flex: 1;\r\n    }\r\n    .jsonvue-content {\r\n        width: 100%;\r\n        flex: 1;\r\n        overflow-x: hidden;\r\n        overflow-y: auto;\r\n        -webkit-overflow-scrolling: touch;\r\n    }\r\n    .bot-bor{\r\n        border-bottom: 0px;\r\n    }\r\n    .select-hd {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      padding: 20px 30px;\r\n      font-size: 15px;\r\n      background-color: #fff;\r\n    }\r\n    .van-info-title{\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      width: 60%;\r\n      white-space: nowrap;\r\n      text-align: center;\r\n    }\r\n</style>\r\n']},media:void 0})}),Ni,"data-v-6f5b742a",false,undefined,!1,$i,void 0,void 0);qi.install=function(e){e.component(qi.name,qi)};const Mi={name:"FieldUpload"};var Vi=function(){var e=this,n=e.$createElement;return(e._self._c||n)("div",[e._v("文件上传组件")])};Vi._withStripped=!0;const Ui=Pi({render:Vi,staticRenderFns:[]},undefined,Mi,undefined,false,undefined,!1,void 0,void 0,void 0);Ui.install=function(e){e.component(Ui.name,Ui)};const Wi={name:"FieldDate",components:{Field:d,Popup:m,DatetimePicker:_},data:()=>({show:!1,nowDate:""}),inheritAttrs:!1,model:{prop:"currentDate"},props:{currentDate:{type:[String,Number],default:""},displayFormat:[String],minDate:[String,Number],maxDate:[String,Number],scene:{type:[String,Number],default:1},validateRules:{type:[Object,String],default:()=>{}},disabled:{type:Boolean,default:!1},isEnd:{type:Boolean,default:!1},remark:{type:String,default:""},fieldType:{type:String,default:"date"}},computed:{minDateShow(){let e=new Date(this.minDate);if(e.toString().indexOf("Invalid")>-1){let e=(new Date).getFullYear();return new Date(e-10,0,1)}return e},maxDateShow(){let e=new Date(this.maxDate);if(e.toString().indexOf("Invalid")>-1){let e=(new Date).getFullYear();return new Date(e+10,11,31)}return e},fieldVal(){let e;if("time"!==this.fieldType){if(new Date(this.currentDate).toString().indexOf("Invalid")>-1)e=this.currentDate;else{let n=this.displayFormat||this.defaultDisplayFormat;e=bi(this.currentDate).format(n)}}else e=this.currentDate;return e},defaultDisplayFormat(){return"year-month"===this.fieldType?"YYYY-MM":"date"===this.fieldType?"YYYY-MM-DD":"datetime"===this.fieldType?"YYYY-MM-DD HH:mm":"time"===this.fieldType?"HH:mm":void 0}},watch:{currentDate:{handler(){}}},methods:{onClick(){if(2!==this.scene&&!this.disabled){if("time"!==this.fieldType){const e=new Date(this.currentDate);-1===e.toString().indexOf("Invalid")?this.nowDate=e:this.nowDate=new Date}else this.nowDate=this.currentDate||bi(new Date).format(this.defaultDisplayFormat);this.show=!0}},onConfirm(e){let n;console.log("fieldDate:value:",e),"time"!==this.fieldType?(n=new Date(e).getTime(),console.log("fieldDate:time:",n)):n=e,this.$emit("onDatetime",n),this.$emit("input",n),this.show=!1},formatter:(e,n)=>"year"===e?`${n}年`:"month"===e?`${n}月`:"day"===e?`${n}日`:"hour"===e?`${n}时`:"minute"===e?`${n}分`:n}};var Yi=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("ValidationProvider",{attrs:{name:e.$attrs.label,rules:e.validateRules},scopedSlots:e._u([{key:"default",fn:function(n){var i=n.errors;return[t("Field",e._b({class:e.isEnd?"bot-bor":"",attrs:{readonly:!0,value:e.fieldVal,"error-message":i[0],"error-message-align":"right","input-align":"right"},on:{click:e.onClick},scopedSlots:e._u([{key:"label",fn:function(){return[t("span",{staticClass:"van-cell__title"},[e._v(e._s(e.$attrs.label))])]},proxy:!0},{key:"right-icon",fn:function(){return[2!==e.scene?t("i",{staticClass:"iconfont icon-riqi"}):e._e()]},proxy:!0}],null,!0)},"Field",e.$attrs,!1))]}}])}),e._v(" "),t("Popup",{style:{width:"100%"},attrs:{position:"bottom","get-container":"#app"},model:{value:e.show,callback:function(n){e.show=n},expression:"show"}},[t("DatetimePicker",{attrs:{type:e.fieldType,"min-date":e.minDateShow,"max-date":e.maxDateShow,formatter:e.formatter},on:{confirm:e.onConfirm,cancel:function(n){e.show=!1}},model:{value:e.nowDate,callback:function(n){e.nowDate=n},expression:"nowDate"}})],1)],1)};Yi._withStripped=!0;const Hi=Pi({render:Yi,staticRenderFns:[]},(function(e){e&&e("data-v-e39badfe_0",{source:"\n.bot-bor[data-v-e39badfe]{\n    border-bottom: 0px;\n}\n",map:{version:3,sources:["D:\\ZJ_Project\\jsonvue\\src\\FieldDate\\FieldDate.vue"],names:[],mappings:";AA0MA;IACA,kBAAA;AACA",file:"FieldDate.vue",sourcesContent:['<template>\r\n    <div>\r\n      <ValidationProvider :name="$attrs.label" :rules="validateRules" v-slot="{errors}">\r\n                <Field\r\n                            v-bind="$attrs"\r\n                            :readonly="true"\r\n                            :value="fieldVal"\r\n                            @click="onClick"\r\n                            :error-message="errors[0]"\r\n                            :error-message-align="\'right\'"\r\n                            :input-align="\'right\'"\r\n                            :class="isEnd?\'bot-bor\':\'\'"\r\n                    >\r\n\r\n                        <template #label>\r\n                           <span class="van-cell__title">{{$attrs.label}}</span>\r\n                        </template>\r\n                        <template #right-icon>\r\n                        <i v-if="scene!==2" class="iconfont icon-riqi"></i>\r\n                        </template>\r\n                    </Field>\r\n        </ValidationProvider>\r\n      <Popup v-model="show" position="bottom" get-container="#app" :style="{ width: \'100%\' }">\r\n          <DatetimePicker\r\n                  v-model="nowDate"\r\n                  :type="fieldType"\r\n                  :min-date="minDateShow"\r\n                  :max-date="maxDateShow"\r\n                  @confirm="onConfirm"\r\n                  @cancel="show=false"\r\n                  :formatter="formatter"\r\n          />\r\n      </Popup>\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport {Field,Popup,DatetimePicker} from \'vant\'\r\nimport {cloneDeep} from \'lodash\'\r\nimport dayjs from \'dayjs\'\r\nexport default {\r\n    name:\'FieldDate\',\r\n     components: {Field,Popup,DatetimePicker},\r\n      data() {\r\n            return {\r\n                show: false,\r\n                nowDate: "",\r\n            };\r\n        },\r\n        inheritAttrs: false,\r\n        model: {\r\n            prop: "currentDate"\r\n        },\r\n        props: {\r\n            currentDate: {\r\n              type:[String, Number],\r\n              default:\'\'\r\n            },\r\n            //日期显示格式\r\n            displayFormat:[String],\r\n            minDate: [String, Number],\r\n            maxDate: [String, Number],\r\n            scene:{\r\n              type:[String,Number],\r\n              default:1\r\n            },\r\n            validateRules:{\r\n              type:[Object,String],\r\n              default:()=>{}\r\n            },\r\n            disabled:{\r\n                type:Boolean,\r\n                default:false\r\n            },\r\n            isEnd:{\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            remark:{\r\n                type:String,\r\n                default:\'\'\r\n            },\r\n            //日期组件选择类型，默认为年月日\r\n            fieldType:{\r\n              type:String,\r\n              default:\'date\'\r\n            },\r\n        },\r\n        computed: {\r\n            minDateShow() {\r\n                let minDate = new Date(this.minDate);\r\n                if (minDate.toString().indexOf("Invalid") > -1) {\r\n                    let currentYear = new Date().getFullYear();\r\n                    return new Date(currentYear - 10, 0, 1);\r\n                }\r\n\r\n                return minDate;\r\n            },\r\n            maxDateShow() {\r\n                let maxDate = new Date(this.maxDate);\r\n                if (maxDate.toString().indexOf("Invalid") > -1) {\r\n                    let currentYear = new Date().getFullYear();\r\n                    return new Date(currentYear + 10, 11, 31);\r\n                }\r\n                return maxDate;\r\n            },\r\n            fieldVal() {\r\n                let currentDate;\r\n                if (this.fieldType !== \'time\') {\r\n                  //时间戳转为时间格式展示\r\n                  let isValid = new Date(this.currentDate);\r\n                  // console.log(\'fieldDate:fieldVal\',isValid)\r\n                  //无效时间直接赋值，有效时间转化时间戳\r\n                  if (isValid.toString().indexOf("Invalid") > -1) {\r\n                    currentDate = this.currentDate;\r\n                  } else {\r\n                    let format = this.displayFormat || this.defaultDisplayFormat;\r\n                    currentDate = dayjs(this.currentDate).format(format);\r\n                  }\r\n                } else {\r\n                  currentDate = this.currentDate\r\n                }\r\n\r\n                return currentDate;\r\n            },\r\n            //默认的显示格式\r\n            defaultDisplayFormat(){\r\n              if (this.fieldType === \'year-month\'){\r\n                return \'YYYY-MM\'\r\n              } else if (this.fieldType === \'date\') {\r\n                return "YYYY-MM-DD"\r\n              } else if (this.fieldType === \'datetime\') {\r\n                return "YYYY-MM-DD HH:mm"\r\n              } else if (this.fieldType === \'time\') {\r\n                return "HH:mm"\r\n              }\r\n            }\r\n        },\r\n        watch: {\r\n            currentDate: {\r\n                handler() {\r\n                    /* 传时间戳回去 */\r\n                    //this.$emit("onDatetime", this.currentDate);\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * 显示时间选择器，初始化时间\r\n             */\r\n            onClick() {\r\n                if (this.scene === 2 || this.disabled) {\r\n                    return;\r\n                }\r\n                if ( this.fieldType !== \'time\' ){\r\n                  const date = new Date(this.currentDate);\r\n                  if ( date.toString().indexOf("Invalid") === -1 ) {\r\n                    this.nowDate = date;\r\n                  } else {\r\n                    this.nowDate = new Date();\r\n                  }\r\n                } else {\r\n                  this.nowDate = this.currentDate || dayjs(new Date()).format(this.defaultDisplayFormat)\r\n                }\r\n\r\n                this.show = true;\r\n            },\r\n            onConfirm(value) {\r\n                console.log(\'fieldDate:value:\',value)\r\n                let dateTime\r\n                if (this.fieldType !== \'time\') {\r\n                  dateTime = new Date(value).getTime();\r\n                  console.log(\'fieldDate:time:\',dateTime)\r\n                } else {\r\n                  dateTime = value\r\n                }\r\n                /* 更新输入框时间 */\r\n                this.$emit("onDatetime", dateTime);\r\n                this.$emit("input", dateTime);\r\n                this.show = false;\r\n            },\r\n            /**\r\n             * 格式化时间\r\n             */\r\n            formatter(type, value) {\r\n                if (type === "year") {\r\n                    return `${value}年`;\r\n                } else if (type === "month") {\r\n                    return `${value}月`;\r\n                } else if (type === "day") {\r\n                    return `${value}日`;\r\n                } else if (type === "hour") {\r\n                    return `${value}时`;\r\n                } else if (type === "minute") {\r\n                    return `${value}分`;\r\n                }\r\n                return value;\r\n            }\r\n        }\r\n}\r\n<\/script>\r\n<style scoped>\r\n    .bot-bor{\r\n        border-bottom: 0px;\r\n    }\r\n</style>\r\n']},media:void 0})}),Wi,"data-v-e39badfe",false,undefined,!1,$i,void 0,void 0);Hi.install=function(e){e.component(Hi.name,Hi)};const Ki={AreaList:{province_list:{11e4:"北京市",12e4:"天津市",13e4:"河北省",14e4:"山西省",15e4:"内蒙古自治区",21e4:"辽宁省",22e4:"吉林省",23e4:"黑龙江省",31e4:"上海市",32e4:"江苏省",33e4:"浙江省",34e4:"安徽省",35e4:"福建省",36e4:"江西省",37e4:"山东省",41e4:"河南省",42e4:"湖北省",43e4:"湖南省",44e4:"广东省",45e4:"广西壮族自治区",46e4:"海南省",5e5:"重庆市",51e4:"四川省",52e4:"贵州省",53e4:"云南省",54e4:"西藏自治区",61e4:"陕西省",62e4:"甘肃省",63e4:"青海省",64e4:"宁夏回族自治区",65e4:"新疆维吾尔自治区",71e4:"台湾省",81e4:"香港特别行政区",82e4:"澳门特别行政区"},city_list:{110100:"北京市",120100:"天津市",130100:"石家庄市",130200:"唐山市",130300:"秦皇岛市",130400:"邯郸市",130500:"邢台市",130600:"保定市",130700:"张家口市",130800:"承德市",130900:"沧州市",131e3:"廊坊市",131100:"衡水市",140100:"太原市",140200:"大同市",140300:"阳泉市",140400:"长治市",140500:"晋城市",140600:"朔州市",140700:"晋中市",140800:"运城市",140900:"忻州市",141e3:"临汾市",141100:"吕梁市",150100:"呼和浩特市",150200:"包头市",150300:"乌海市",150400:"赤峰市",150500:"通辽市",150600:"鄂尔多斯市",150700:"呼伦贝尔市",150800:"巴彦淖尔市",150900:"乌兰察布市",152200:"兴安盟",152500:"锡林郭勒盟",152900:"阿拉善盟",210100:"沈阳市",210200:"大连市",210300:"鞍山市",210400:"抚顺市",210500:"本溪市",210600:"丹东市",210700:"锦州市",210800:"营口市",210900:"阜新市",211e3:"辽阳市",211100:"盘锦市",211200:"铁岭市",211300:"朝阳市",211400:"葫芦岛市",220100:"长春市",220200:"吉林市",220300:"四平市",220400:"辽源市",220500:"通化市",220600:"白山市",220700:"松原市",220800:"白城市",222400:"延边朝鲜族自治州",230100:"哈尔滨市",230200:"齐齐哈尔市",230300:"鸡西市",230400:"鹤岗市",230500:"双鸭山市",230600:"大庆市",230700:"伊春市",230800:"佳木斯市",230900:"七台河市",231e3:"牡丹江市",231100:"黑河市",231200:"绥化市",232700:"大兴安岭地区",310100:"上海市",320100:"南京市",320200:"无锡市",320300:"徐州市",320400:"常州市",320500:"苏州市",320600:"南通市",320700:"连云港市",320800:"淮安市",320900:"盐城市",321e3:"扬州市",321100:"镇江市",321200:"泰州市",321300:"宿迁市",330100:"杭州市",330200:"宁波市",330300:"温州市",330400:"嘉兴市",330500:"湖州市",330600:"绍兴市",330700:"金华市",330800:"衢州市",330900:"舟山市",331e3:"台州市",331100:"丽水市",340100:"合肥市",340200:"芜湖市",340300:"蚌埠市",340400:"淮南市",340500:"马鞍山市",340600:"淮北市",340700:"铜陵市",340800:"安庆市",341e3:"黄山市",341100:"滁州市",341200:"阜阳市",341300:"宿州市",341500:"六安市",341600:"亳州市",341700:"池州市",341800:"宣城市",350100:"福州市",350200:"厦门市",350300:"莆田市",350400:"三明市",350500:"泉州市",350600:"漳州市",350700:"南平市",350800:"龙岩市",350900:"宁德市",360100:"南昌市",360200:"景德镇市",360300:"萍乡市",360400:"九江市",360500:"新余市",360600:"鹰潭市",360700:"赣州市",360800:"吉安市",360900:"宜春市",361e3:"抚州市",361100:"上饶市",370100:"济南市",370200:"青岛市",370300:"淄博市",370400:"枣庄市",370500:"东营市",370600:"烟台市",370700:"潍坊市",370800:"济宁市",370900:"泰安市",371e3:"威海市",371100:"日照市",371200:"莱芜市",371300:"临沂市",371400:"德州市",371500:"聊城市",371600:"滨州市",371700:"菏泽市",410100:"郑州市",410200:"开封市",410300:"洛阳市",410400:"平顶山市",410500:"安阳市",410600:"鹤壁市",410700:"新乡市",410800:"焦作市",410900:"濮阳市",411e3:"许昌市",411100:"漯河市",411200:"三门峡市",411300:"南阳市",411400:"商丘市",411500:"信阳市",411600:"周口市",411700:"驻马店市",419e3:"省直辖县",420100:"武汉市",420200:"黄石市",420300:"十堰市",420500:"宜昌市",420600:"襄阳市",420700:"鄂州市",420800:"荆门市",420900:"孝感市",421e3:"荆州市",421100:"黄冈市",421200:"咸宁市",421300:"随州市",422800:"恩施土家族苗族自治州",429e3:"省直辖县",430100:"长沙市",430200:"株洲市",430300:"湘潭市",430400:"衡阳市",430500:"邵阳市",430600:"岳阳市",430700:"常德市",430800:"张家界市",430900:"益阳市",431e3:"郴州市",431100:"永州市",431200:"怀化市",431300:"娄底市",433100:"湘西土家族苗族自治州",440100:"广州市",440200:"韶关市",440300:"深圳市",440400:"珠海市",440500:"汕头市",440600:"佛山市",440700:"江门市",440800:"湛江市",440900:"茂名市",441200:"肇庆市",441300:"惠州市",441400:"梅州市",441500:"汕尾市",441600:"河源市",441700:"阳江市",441800:"清远市",441900:"东莞市",442e3:"中山市",445100:"潮州市",445200:"揭阳市",445300:"云浮市",450100:"南宁市",450200:"柳州市",450300:"桂林市",450400:"梧州市",450500:"北海市",450600:"防城港市",450700:"钦州市",450800:"贵港市",450900:"玉林市",451e3:"百色市",451100:"贺州市",451200:"河池市",451300:"来宾市",451400:"崇左市",460100:"海口市",460200:"三亚市",460300:"三沙市",460400:"儋州市",469e3:"省直辖县",500100:"重庆市",500200:"县",510100:"成都市",510300:"自贡市",510400:"攀枝花市",510500:"泸州市",510600:"德阳市",510700:"绵阳市",510800:"广元市",510900:"遂宁市",511e3:"内江市",511100:"乐山市",511300:"南充市",511400:"眉山市",511500:"宜宾市",511600:"广安市",511700:"达州市",511800:"雅安市",511900:"巴中市",512e3:"资阳市",513200:"阿坝藏族羌族自治州",513300:"甘孜藏族自治州",513400:"凉山彝族自治州",520100:"贵阳市",520200:"六盘水市",520300:"遵义市",520400:"安顺市",520500:"毕节市",520600:"铜仁市",522300:"黔西南布依族苗族自治州",522600:"黔东南苗族侗族自治州",522700:"黔南布依族苗族自治州",530100:"昆明市",530300:"曲靖市",530400:"玉溪市",530500:"保山市",530600:"昭通市",530700:"丽江市",530800:"普洱市",530900:"临沧市",532300:"楚雄彝族自治州",532500:"红河哈尼族彝族自治州",532600:"文山壮族苗族自治州",532800:"西双版纳傣族自治州",532900:"大理白族自治州",533100:"德宏傣族景颇族自治州",533300:"怒江傈僳族自治州",533400:"迪庆藏族自治州",540100:"拉萨市",540200:"日喀则市",540300:"昌都市",540400:"林芝市",540500:"山南市",540600:"那曲市",542500:"阿里地区",610100:"西安市",610200:"铜川市",610300:"宝鸡市",610400:"咸阳市",610500:"渭南市",610600:"延安市",610700:"汉中市",610800:"榆林市",610900:"安康市",611e3:"商洛市",620100:"兰州市",620200:"嘉峪关市",620300:"金昌市",620400:"白银市",620500:"天水市",620600:"武威市",620700:"张掖市",620800:"平凉市",620900:"酒泉市",621e3:"庆阳市",621100:"定西市",621200:"陇南市",622900:"临夏回族自治州",623e3:"甘南藏族自治州",630100:"西宁市",630200:"海东市",632200:"海北藏族自治州",632300:"黄南藏族自治州",632500:"海南藏族自治州",632600:"果洛藏族自治州",632700:"玉树藏族自治州",632800:"海西蒙古族藏族自治州",640100:"银川市",640200:"石嘴山市",640300:"吴忠市",640400:"固原市",640500:"中卫市",650100:"乌鲁木齐市",650200:"克拉玛依市",650400:"吐鲁番市",650500:"哈密市",652300:"昌吉回族自治州",652700:"博尔塔拉蒙古自治州",652800:"巴音郭楞蒙古自治州",652900:"阿克苏地区",653e3:"克孜勒苏柯尔克孜自治州",653100:"喀什地区",653200:"和田地区",654e3:"伊犁哈萨克自治州",654200:"塔城地区",654300:"阿勒泰地区",659e3:"自治区直辖县级行政区划",710100:"台北市",710200:"高雄市",710300:"台南市",710400:"台中市",710500:"金门县",710600:"南投县",710700:"基隆市",710800:"新竹市",710900:"嘉义市",711100:"新北市",711200:"宜兰县",711300:"新竹县",711400:"桃园县",711500:"苗栗县",711700:"彰化县",711900:"嘉义县",712100:"云林县",712400:"屏东县",712500:"台东县",712600:"花莲县",712700:"澎湖县",712800:"连江县",810100:"香港岛",810200:"九龙",810300:"新界",820100:"澳门半岛",820200:"离岛",900400:"阿富汗",900800:"阿尔巴尼亚",901e3:"南极洲",901200:"阿尔及利亚",901600:"美属萨摩亚",902e3:"安道尔",902400:"安哥拉",902800:"安提瓜和巴布达",903100:"阿塞拜疆",903200:"阿根廷",903600:"澳大利亚",904e3:"奥地利",904400:"巴哈马",904800:"巴林",905e3:"孟加拉",905100:"亚美尼亚",905200:"巴巴多斯",905600:"比利时",906e3:"百慕大",906400:"不丹",906800:"玻利维亚",907e3:"波黑",907200:"博茨瓦纳",907400:"布韦岛",907600:"巴西",908400:"伯利兹",908600:"英属印度洋领地",909e3:"所罗门群岛",909200:"英属维尔京群岛",909600:"文莱",91e4:"保加利亚",910400:"缅甸",910800:"布隆迪",911200:"白俄罗斯",911600:"柬埔寨",912e3:"喀麦隆",912400:"加拿大",913200:"佛得角",913600:"开曼群岛",914e3:"中非",914400:"斯里兰卡",914800:"乍得",915200:"智利",916200:"圣诞岛",916600:"科科斯群岛",917e3:"哥伦比亚",917400:"科摩罗",917500:"马约特",917800:"刚果（布）",918e3:"刚果（金）",918400:"库克群岛",918800:"哥斯达黎加",919100:"克罗地亚",919200:"古巴",919600:"塞浦路斯",920300:"捷克",920400:"贝宁",920800:"丹麦",921200:"多米尼克",921400:"多米尼加",921800:"厄瓜多尔",922200:"萨尔瓦多",922600:"赤道几内亚",923100:"埃塞俄比亚",923200:"厄立特里亚",923300:"爱沙尼亚",923400:"法罗群岛",923800:"马尔维纳斯群岛（ 福克兰）",923900:"南乔治亚岛和南桑威奇群岛",924200:"斐济群岛",924600:"芬兰",924800:"奥兰群岛",925e3:"法国",925400:"法属圭亚那",925800:"法属波利尼西亚",926e3:"法属南部领地",926200:"吉布提",926600:"加蓬",926800:"格鲁吉亚",927e3:"冈比亚",927500:"巴勒斯坦",927600:"德国",928800:"加纳",929200:"直布罗陀",929600:"基里巴斯",93e4:"希腊",930400:"格陵兰",930800:"格林纳达",931200:"瓜德罗普",931600:"关岛",932e3:"危地马拉",932400:"几内亚",932800:"圭亚那",933200:"海地",933400:"赫德岛和麦克唐纳群岛",933600:"梵蒂冈",934e3:"洪都拉斯",934800:"匈牙利",935200:"冰岛",935600:"印度",936e3:"印尼",936400:"伊朗",936800:"伊拉克",937200:"爱尔兰",937600:"以色列",938e3:"意大利",938400:"科特迪瓦",938800:"牙买加",939200:"日本",939800:"哈萨克斯坦",94e4:"约旦",940400:"肯尼亚",940800:"朝鲜 北朝鲜",941e3:"韩国",941400:"科威特",941700:"吉尔吉斯斯坦",941800:"老挝",942200:"黎巴嫩",942600:"莱索托",942800:"拉脱维亚",943e3:"利比里亚",943400:"利比亚",943800:"列支敦士登",944e3:"立陶宛",944200:"卢森堡",945e3:"马达加斯加",945400:"马拉维",945800:"马来西亚",946200:"马尔代夫",946600:"马里",947e3:"马耳他",947400:"马提尼克",947800:"毛里塔尼亚",948e3:"毛里求斯",948400:"墨西哥",949200:"摩纳哥",949600:"蒙古国",949800:"摩尔多瓦",949900:"黑山",95e4:"蒙塞拉特岛",950400:"摩洛哥",950800:"莫桑比克",951200:"阿曼",951600:"纳米比亚",952e3:"瑙鲁",952400:"尼泊尔",952800:"荷兰",953300:"阿鲁巴",953500:"荷兰加勒比区",954e3:"新喀里多尼亚",954800:"瓦努阿图",955400:"新西兰",955800:"尼加拉瓜",956200:"尼日尔",956600:"尼日利亚",957e3:"纽埃",957400:"诺福克岛",957800:"挪威",958e3:"北马里亚纳群岛",958100:"美国本土外小岛屿",958300:"密克罗尼西亚联邦",958400:"马绍尔群岛",958500:"帕劳",958600:"巴基斯坦",959100:"巴拿马",959800:"巴布亚新几内亚",96e4:"巴拉圭",960400:"秘鲁",960800:"菲律宾",961200:"皮特凯恩群岛",961600:"波兰",962e3:"葡萄牙",962400:"几内亚比绍",962600:"东帝汶",963e3:"波多黎各",963400:"卡塔尔",963800:"留尼汪",964200:"罗马尼亚",964300:"俄罗斯",964600:"卢旺达",965200:"圣巴泰勒米岛",965400:"圣赫勒拿",965900:"圣基茨和尼维斯",966e3:"安圭拉",966200:"圣卢西亚",966300:"法属圣马丁",966600:"圣皮埃尔和密克隆",967e3:"圣文森特和格林纳丁斯",967400:"圣马力诺",967800:"圣多美和普林西比",968200:"沙特阿拉伯",968600:"塞内加尔",968800:"塞尔维亚",969e3:"塞舌尔",969400:"塞拉利昂",970200:"新加坡",970300:"斯洛伐克",970400:"越南",970500:"斯洛文尼亚",970600:"索马里",971e3:"南非",971600:"津巴布韦",972400:"西班牙",972800:"南苏丹",972900:"苏丹",973200:"西撒哈拉",974e3:"苏里南",974400:"斯瓦尔巴群岛和 扬马延岛",974800:"斯威士兰",975200:"瑞典",975600:"瑞士",976e3:"叙利亚",976200:"塔吉克斯坦",976400:"泰国",976800:"多哥",977200:"托克劳",977600:"汤加",978e3:"特立尼达和多巴哥",978400:"阿联酋",978800:"突尼斯",979200:"土耳其",979500:"土库曼斯坦",979600:"特克斯和凯科斯群岛",979800:"图瓦卢",98e4:"乌干达",980400:"乌克兰",980700:"马其顿",981800:"埃及",982600:"英国",983100:"根西岛",983200:"泽西岛",983300:"马恩岛",983400:"坦桑尼亚",984e3:"美国",985e3:"美属维尔京群岛",985400:"布基纳法索",985800:"乌拉圭",986e3:"乌兹别克斯坦",986200:"委内瑞拉",987600:"瓦利斯和富图纳",988200:"萨摩亚",988700:"也门",989400:"赞比亚"},county_list:{110101:"东城区",110102:"西城区",110105:"朝阳区",110106:"丰台区",110107:"石景山区",110108:"海淀区",110109:"门头沟区",110111:"房山区",110112:"通州区",110113:"顺义区",110114:"昌平区",110115:"大兴区",110116:"怀柔区",110117:"平谷区",110118:"密云区",110119:"延庆区",120101:"和平区",120102:"河东区",120103:"河西区",120104:"南开区",120105:"河北区",120106:"红桥区",120110:"东丽区",120111:"西青区",120112:"津南区",120113:"北辰区",120114:"武清区",120115:"宝坻区",120116:"滨海新区",120117:"宁河区",120118:"静海区",120119:"蓟州区",130102:"长安区",130104:"桥西区",130105:"新华区",130107:"井陉矿区",130108:"裕华区",130109:"藁城区",130110:"鹿泉区",130111:"栾城区",130121:"井陉县",130123:"正定县",130125:"行唐县",130126:"灵寿县",130127:"高邑县",130128:"深泽县",130129:"赞皇县",130130:"无极县",130131:"平山县",130132:"元氏县",130133:"赵县",130181:"辛集市",130183:"晋州市",130184:"新乐市",130202:"路南区",130203:"路北区",130204:"古冶区",130205:"开平区",130207:"丰南区",130208:"丰润区",130209:"曹妃甸区",130224:"滦南县",130225:"乐亭县",130227:"迁西县",130229:"玉田县",130281:"遵化市",130283:"迁安市",130284:"滦州市",130302:"海港区",130303:"山海关区",130304:"北戴河区",130306:"抚宁区",130321:"青龙满族自治县",130322:"昌黎县",130324:"卢龙县",130390:"经济技术开发区",130402:"邯山区",130403:"丛台区",130404:"复兴区",130406:"峰峰矿区",130407:"肥乡区",130408:"永年区",130423:"临漳县",130424:"成安县",130425:"大名县",130426:"涉县",130427:"磁县",130430:"邱县",130431:"鸡泽县",130432:"广平县",130433:"馆陶县",130434:"魏县",130435:"曲周县",130481:"武安市",130502:"桥东区",130503:"桥西区",130521:"邢台县",130522:"临城县",130523:"内丘县",130524:"柏乡县",130525:"隆尧县",130526:"任县",130527:"南和县",130528:"宁晋县",130529:"巨鹿县",130530:"新河县",130531:"广宗县",130532:"平乡县",130533:"威县",130534:"清河县",130535:"临西县",130581:"南宫市",130582:"沙河市",130602:"竞秀区",130606:"莲池区",130607:"满城区",130608:"清苑区",130609:"徐水区",130623:"涞水县",130624:"阜平县",130626:"定兴县",130627:"唐县",130628:"高阳县",130629:"容城县",130630:"涞源县",130631:"望都县",130632:"安新县",130633:"易县",130634:"曲阳县",130635:"蠡县",130636:"顺平县",130637:"博野县",130638:"雄县",130681:"涿州市",130682:"定州市",130683:"安国市",130684:"高碑店市",130702:"桥东区",130703:"桥西区",130705:"宣化区",130706:"下花园区",130708:"万全区",130709:"崇礼区",130722:"张北县",130723:"康保县",130724:"沽源县",130725:"尚义县",130726:"蔚县",130727:"阳原县",130728:"怀安县",130730:"怀来县",130731:"涿鹿县",130732:"赤城县",130802:"双桥区",130803:"双滦区",130804:"鹰手营子矿区",130821:"承德县",130822:"兴隆县",130824:"滦平县",130825:"隆化县",130826:"丰宁满族自治县",130827:"宽城满族自治县",130828:"围场满族蒙古族自治县",130881:"平泉市",130902:"新华区",130903:"运河区",130921:"沧县",130922:"青县",130923:"东光县",130924:"海兴县",130925:"盐山县",130926:"肃宁县",130927:"南皮县",130928:"吴桥县",130929:"献县",130930:"孟村回族自治县",130981:"泊头市",130982:"任丘市",130983:"黄骅市",130984:"河间市",131002:"安次区",131003:"广阳区",131022:"固安县",131023:"永清县",131024:"香河县",131025:"大城县",131026:"文安县",131028:"大厂回族自治县",131081:"霸州市",131082:"三河市",131090:"开发区",131102:"桃城区",131103:"冀州区",131121:"枣强县",131122:"武邑县",131123:"武强县",131124:"饶阳县",131125:"安平县",131126:"故城县",131127:"景县",131128:"阜城县",131182:"深州市",140105:"小店区",140106:"迎泽区",140107:"杏花岭区",140108:"尖草坪区",140109:"万柏林区",140110:"晋源区",140121:"清徐县",140122:"阳曲县",140123:"娄烦县",140181:"古交市",140212:"新荣区",140213:"平城区",140214:"云冈区",140215:"云州区",140221:"阳高县",140222:"天镇县",140223:"广灵县",140224:"灵丘县",140225:"浑源县",140226:"左云县",140302:"城区",140303:"矿区",140311:"郊区",140321:"平定县",140322:"盂县",140403:"潞州区",140404:"上党区",140405:"屯留区",140406:"潞城区",140423:"襄垣县",140425:"平顺县",140426:"黎城县",140427:"壶关县",140428:"长子县",140429:"武乡县",140430:"沁县",140431:"沁源县",140502:"城区",140521:"沁水县",140522:"阳城县",140524:"陵川县",140525:"泽州县",140581:"高平市",140602:"朔城区",140603:"平鲁区",140621:"山阴县",140622:"应县",140623:"右玉县",140681:"怀仁市",140702:"榆次区",140721:"榆社县",140722:"左权县",140723:"和顺县",140724:"昔阳县",140725:"寿阳县",140726:"太谷县",140727:"祁县",140728:"平遥县",140729:"灵石县",140781:"介休市",140802:"盐湖区",140821:"临猗县",140822:"万荣县",140823:"闻喜县",140824:"稷山县",140825:"新绛县",140826:"绛县",140827:"垣曲县",140828:"夏县",140829:"平陆县",140830:"芮城县",140881:"永济市",140882:"河津市",140902:"忻府区",140921:"定襄县",140922:"五台县",140923:"代县",140924:"繁峙县",140925:"宁武县",140926:"静乐县",140927:"神池县",140928:"五寨县",140929:"岢岚县",140930:"河曲县",140931:"保德县",140932:"偏关县",140981:"原平市",141002:"尧都区",141021:"曲沃县",141022:"翼城县",141023:"襄汾县",141024:"洪洞县",141025:"古县",141026:"安泽县",141027:"浮山县",141028:"吉县",141029:"乡宁县",141030:"大宁县",141031:"隰县",141032:"永和县",141033:"蒲县",141034:"汾西县",141081:"侯马市",141082:"霍州市",141102:"离石区",141121:"文水县",141122:"交城县",141123:"兴县",141124:"临县",141125:"柳林县",141126:"石楼县",141127:"岚县",141128:"方山县",141129:"中阳县",141130:"交口县",141181:"孝义市",141182:"汾阳市",150102:"新城区",150103:"回民区",150104:"玉泉区",150105:"赛罕区",150121:"土默特左旗",150122:"托克托县",150123:"和林格尔县",150124:"清水河县",150125:"武川县",150202:"东河区",150203:"昆都仑区",150204:"青山区",150205:"石拐区",150206:"白云鄂博矿区",150207:"九原区",150221:"土默特右旗",150222:"固阳县",150223:"达尔罕茂明安联合旗",150302:"海勃湾区",150303:"海南区",150304:"乌达区",150402:"红山区",150403:"元宝山区",150404:"松山区",150421:"阿鲁科尔沁旗",150422:"巴林左旗",150423:"巴林右旗",150424:"林西县",150425:"克什克腾旗",150426:"翁牛特旗",150428:"喀喇沁旗",150429:"宁城县",150430:"敖汉旗",150502:"科尔沁区",150521:"科尔沁左翼中旗",150522:"科尔沁左翼后旗",150523:"开鲁县",150524:"库伦旗",150525:"奈曼旗",150526:"扎鲁特旗",150581:"霍林郭勒市",150602:"东胜区",150603:"康巴什区",150621:"达拉特旗",150622:"准格尔旗",150623:"鄂托克前旗",150624:"鄂托克旗",150625:"杭锦旗",150626:"乌审旗",150627:"伊金霍洛旗",150702:"海拉尔区",150703:"扎赉诺尔区",150721:"阿荣旗",150722:"莫力达瓦达斡尔族自治旗",150723:"鄂伦春自治旗",150724:"鄂温克族自治旗",150725:"陈巴尔虎旗",150726:"新巴尔虎左旗",150727:"新巴尔虎右旗",150781:"满洲里市",150782:"牙克石市",150783:"扎兰屯市",150784:"额尔古纳市",150785:"根河市",150802:"临河区",150821:"五原县",150822:"磴口县",150823:"乌拉特前旗",150824:"乌拉特中旗",150825:"乌拉特后旗",150826:"杭锦后旗",150902:"集宁区",150921:"卓资县",150922:"化德县",150923:"商都县",150924:"兴和县",150925:"凉城县",150926:"察哈尔右翼前旗",150927:"察哈尔右翼中旗",150928:"察哈尔右翼后旗",150929:"四子王旗",150981:"丰镇市",152201:"乌兰浩特市",152202:"阿尔山市",152221:"科尔沁右翼前旗",152222:"科尔沁右翼中旗",152223:"扎赉特旗",152224:"突泉县",152501:"二连浩特市",152502:"锡林浩特市",152522:"阿巴嘎旗",152523:"苏尼特左旗",152524:"苏尼特右旗",152525:"东乌珠穆沁旗",152526:"西乌珠穆沁旗",152527:"太仆寺旗",152528:"镶黄旗",152529:"正镶白旗",152530:"正蓝旗",152531:"多伦县",152921:"阿拉善左旗",152922:"阿拉善右旗",152923:"额济纳旗",210102:"和平区",210103:"沈河区",210104:"大东区",210105:"皇姑区",210106:"铁西区",210111:"苏家屯区",210112:"浑南区",210113:"沈北新区",210114:"于洪区",210115:"辽中区",210123:"康平县",210124:"法库县",210181:"新民市",210190:"经济技术开发区",210202:"中山区",210203:"西岗区",210204:"沙河口区",210211:"甘井子区",210212:"旅顺口区",210213:"金州区",210214:"普兰店区",210224:"长海县",210281:"瓦房店市",210283:"庄河市",210302:"铁东区",210303:"铁西区",210304:"立山区",210311:"千山区",210321:"台安县",210323:"岫岩满族自治县",210381:"海城市",210390:"高新区",210402:"新抚区",210403:"东洲区",210404:"望花区",210411:"顺城区",210421:"抚顺县",210422:"新宾满族自治县",210423:"清原满族自治县",210502:"平山区",210503:"溪湖区",210504:"明山区",210505:"南芬区",210521:"本溪满族自治县",210522:"桓仁满族自治县",210602:"元宝区",210603:"振兴区",210604:"振安区",210624:"宽甸满族自治县",210681:"东港市",210682:"凤城市",210702:"古塔区",210703:"凌河区",210711:"太和区",210726:"黑山县",210727:"义县",210781:"凌海市",210782:"北镇市",210793:"经济技术开发区",210802:"站前区",210803:"西市区",210804:"鲅鱼圈区",210811:"老边区",210881:"盖州市",210882:"大石桥市",210902:"海州区",210903:"新邱区",210904:"太平区",210905:"清河门区",210911:"细河区",210921:"阜新蒙古族自治县",210922:"彰武县",211002:"白塔区",211003:"文圣区",211004:"宏伟区",211005:"弓长岭区",211011:"太子河区",211021:"辽阳县",211081:"灯塔市",211102:"双台子区",211103:"兴隆台区",211104:"大洼区",211122:"盘山县",211202:"银州区",211204:"清河区",211221:"铁岭县",211223:"西丰县",211224:"昌图县",211281:"调兵山市",211282:"开原市",211302:"双塔区",211303:"龙城区",211321:"朝阳县",211322:"建平县",211324:"喀喇沁左翼蒙古族自治县",211381:"北票市",211382:"凌源市",211402:"连山区",211403:"龙港区",211404:"南票区",211421:"绥中县",211422:"建昌县",211481:"兴城市",220102:"南关区",220103:"宽城区",220104:"朝阳区",220105:"二道区",220106:"绿园区",220112:"双阳区",220113:"九台区",220122:"农安县",220182:"榆树市",220183:"德惠市",220192:"经济技术开发区",220202:"昌邑区",220203:"龙潭区",220204:"船营区",220211:"丰满区",220221:"永吉县",220281:"蛟河市",220282:"桦甸市",220283:"舒兰市",220284:"磐石市",220302:"铁西区",220303:"铁东区",220322:"梨树县",220323:"伊通满族自治县",220381:"公主岭市",220382:"双辽市",220402:"龙山区",220403:"西安区",220421:"东丰县",220422:"东辽县",220502:"东昌区",220503:"二道江区",220521:"通化县",220523:"辉南县",220524:"柳河县",220581:"梅河口市",220582:"集安市",220602:"浑江区",220605:"江源区",220621:"抚松县",220622:"靖宇县",220623:"长白朝鲜族自治县",220681:"临江市",220702:"宁江区",220721:"前郭尔罗斯蒙古族自治县",220722:"长岭县",220723:"乾安县",220781:"扶余市",220802:"洮北区",220821:"镇赉县",220822:"通榆县",220881:"洮南市",220882:"大安市",222401:"延吉市",222402:"图们市",222403:"敦化市",222404:"珲春市",222405:"龙井市",222406:"和龙市",222424:"汪清县",222426:"安图县",230102:"道里区",230103:"南岗区",230104:"道外区",230108:"平房区",230109:"松北区",230110:"香坊区",230111:"呼兰区",230112:"阿城区",230113:"双城区",230123:"依兰县",230124:"方正县",230125:"宾县",230126:"巴彦县",230127:"木兰县",230128:"通河县",230129:"延寿县",230183:"尚志市",230184:"五常市",230202:"龙沙区",230203:"建华区",230204:"铁锋区",230205:"昂昂溪区",230206:"富拉尔基区",230207:"碾子山区",230208:"梅里斯达斡尔族区",230221:"龙江县",230223:"依安县",230224:"泰来县",230225:"甘南县",230227:"富裕县",230229:"克山县",230230:"克东县",230231:"拜泉县",230281:"讷河市",230302:"鸡冠区",230303:"恒山区",230304:"滴道区",230305:"梨树区",230306:"城子河区",230307:"麻山区",230321:"鸡东县",230381:"虎林市",230382:"密山市",230402:"向阳区",230403:"工农区",230404:"南山区",230405:"兴安区",230406:"东山区",230407:"兴山区",230421:"萝北县",230422:"绥滨县",230502:"尖山区",230503:"岭东区",230505:"四方台区",230506:"宝山区",230521:"集贤县",230522:"友谊县",230523:"宝清县",230524:"饶河县",230602:"萨尔图区",230603:"龙凤区",230604:"让胡路区",230605:"红岗区",230606:"大同区",230621:"肇州县",230622:"肇源县",230623:"林甸县",230624:"杜尔伯特蒙古族自治县",230702:"伊春区",230703:"南岔区",230704:"友好区",230705:"西林区",230706:"翠峦区",230707:"新青区",230708:"美溪区",230709:"金山屯区",230710:"五营区",230711:"乌马河区",230712:"汤旺河区",230713:"带岭区",230714:"乌伊岭区",230715:"红星区",230716:"上甘岭区",230722:"嘉荫县",230781:"铁力市",230803:"向阳区",230804:"前进区",230805:"东风区",230811:"郊区",230822:"桦南县",230826:"桦川县",230828:"汤原县",230881:"同江市",230882:"富锦市",230883:"抚远市",230902:"新兴区",230903:"桃山区",230904:"茄子河区",230921:"勃利县",231002:"东安区",231003:"阳明区",231004:"爱民区",231005:"西安区",231025:"林口县",231081:"绥芬河市",231083:"海林市",231084:"宁安市",231085:"穆棱市",231086:"东宁市",231102:"爱辉区",231121:"嫩江县",231123:"逊克县",231124:"孙吴县",231181:"北安市",231182:"五大连池市",231202:"北林区",231221:"望奎县",231222:"兰西县",231223:"青冈县",231224:"庆安县",231225:"明水县",231226:"绥棱县",231281:"安达市",231282:"肇东市",231283:"海伦市",232701:"漠河市",232721:"呼玛县",232722:"塔河县",232790:"松岭区",232791:"呼中区",232792:"加格达奇区",232793:"新林区",310101:"黄浦区",310104:"徐汇区",310105:"长宁区",310106:"静安区",310107:"普陀区",310109:"虹口区",310110:"杨浦区",310112:"闵行区",310113:"宝山区",310114:"嘉定区",310115:"浦东新区",310116:"金山区",310117:"松江区",310118:"青浦区",310120:"奉贤区",310151:"崇明区",320102:"玄武区",320104:"秦淮区",320105:"建邺区",320106:"鼓楼区",320111:"浦口区",320113:"栖霞区",320114:"雨花台区",320115:"江宁区",320116:"六合区",320117:"溧水区",320118:"高淳区",320205:"锡山区",320206:"惠山区",320211:"滨湖区",320213:"梁溪区",320214:"新吴区",320281:"江阴市",320282:"宜兴市",320302:"鼓楼区",320303:"云龙区",320305:"贾汪区",320311:"泉山区",320312:"铜山区",320321:"丰县",320322:"沛县",320324:"睢宁县",320381:"新沂市",320382:"邳州市",320391:"工业园区",320402:"天宁区",320404:"钟楼区",320411:"新北区",320412:"武进区",320413:"金坛区",320481:"溧阳市",320505:"虎丘区",320506:"吴中区",320507:"相城区",320508:"姑苏区",320509:"吴江区",320581:"常熟市",320582:"张家港市",320583:"昆山市",320585:"太仓市",320590:"工业园区",320591:"高新区",320602:"崇川区",320611:"港闸区",320612:"通州区",320623:"如东县",320681:"启东市",320682:"如皋市",320684:"海门市",320685:"海安市",320691:"高新区",320703:"连云区",320706:"海州区",320707:"赣榆区",320722:"东海县",320723:"灌云县",320724:"灌南县",320803:"淮安区",320804:"淮阴区",320812:"清江浦区",320813:"洪泽区",320826:"涟水县",320830:"盱眙县",320831:"金湖县",320890:"经济开发区",320902:"亭湖区",320903:"盐都区",320904:"大丰区",320921:"响水县",320922:"滨海县",320923:"阜宁县",320924:"射阳县",320925:"建湖县",320981:"东台市",321002:"广陵区",321003:"邗江区",321012:"江都区",321023:"宝应县",321081:"仪征市",321084:"高邮市",321090:"经济开发区",321102:"京口区",321111:"润州区",321112:"丹徒区",321181:"丹阳市",321182:"扬中市",321183:"句容市",321202:"海陵区",321203:"高港区",321204:"姜堰区",321281:"兴化市",321282:"靖江市",321283:"泰兴市",321302:"宿城区",321311:"宿豫区",321322:"沭阳县",321323:"泗阳县",321324:"泗洪县",330102:"上城区",330103:"下城区",330104:"江干区",330105:"拱墅区",330106:"西湖区",330108:"滨江区",330109:"萧山区",330110:"余杭区",330111:"富阳区",330112:"临安区",330122:"桐庐县",330127:"淳安县",330182:"建德市",330203:"海曙区",330205:"江北区",330206:"北仑区",330211:"镇海区",330212:"鄞州区",330213:"奉化区",330225:"象山县",330226:"宁海县",330281:"余姚市",330282:"慈溪市",330302:"鹿城区",330303:"龙湾区",330304:"瓯海区",330305:"洞头区",330324:"永嘉县",330326:"平阳县",330327:"苍南县",330328:"文成县",330329:"泰顺县",330381:"瑞安市",330382:"乐清市",330402:"南湖区",330411:"秀洲区",330421:"嘉善县",330424:"海盐县",330481:"海宁市",330482:"平湖市",330483:"桐乡市",330502:"吴兴区",330503:"南浔区",330521:"德清县",330522:"长兴县",330523:"安吉县",330602:"越城区",330603:"柯桥区",330604:"上虞区",330624:"新昌县",330681:"诸暨市",330683:"嵊州市",330702:"婺城区",330703:"金东区",330723:"武义县",330726:"浦江县",330727:"磐安县",330781:"兰溪市",330782:"义乌市",330783:"东阳市",330784:"永康市",330802:"柯城区",330803:"衢江区",330822:"常山县",330824:"开化县",330825:"龙游县",330881:"江山市",330902:"定海区",330903:"普陀区",330921:"岱山县",330922:"嵊泗县",331002:"椒江区",331003:"黄岩区",331004:"路桥区",331022:"三门县",331023:"天台县",331024:"仙居县",331081:"温岭市",331082:"临海市",331083:"玉环市",331102:"莲都区",331121:"青田县",331122:"缙云县",331123:"遂昌县",331124:"松阳县",331125:"云和县",331126:"庆元县",331127:"景宁畲族自治县",331181:"龙泉市",340102:"瑶海区",340103:"庐阳区",340104:"蜀山区",340111:"包河区",340121:"长丰县",340122:"肥东县",340123:"肥西县",340124:"庐江县",340181:"巢湖市",340190:"高新技术开发区",340191:"经济技术开发区",340202:"镜湖区",340203:"弋江区",340207:"鸠江区",340208:"三山区",340221:"芜湖县",340222:"繁昌县",340223:"南陵县",340225:"无为县",340302:"龙子湖区",340303:"蚌山区",340304:"禹会区",340311:"淮上区",340321:"怀远县",340322:"五河县",340323:"固镇县",340402:"大通区",340403:"田家庵区",340404:"谢家集区",340405:"八公山区",340406:"潘集区",340421:"凤台县",340422:"寿县",340503:"花山区",340504:"雨山区",340506:"博望区",340521:"当涂县",340522:"含山县",340523:"和县",340602:"杜集区",340603:"相山区",340604:"烈山区",340621:"濉溪县",340705:"铜官区",340706:"义安区",340711:"郊区",340722:"枞阳县",340802:"迎江区",340803:"大观区",340811:"宜秀区",340822:"怀宁县",340824:"潜山县",340825:"太湖县",340826:"宿松县",340827:"望江县",340828:"岳西县",340881:"桐城市",341002:"屯溪区",341003:"黄山区",341004:"徽州区",341021:"歙县",341022:"休宁县",341023:"黟县",341024:"祁门县",341102:"琅琊区",341103:"南谯区",341122:"来安县",341124:"全椒县",341125:"定远县",341126:"凤阳县",341181:"天长市",341182:"明光市",341202:"颍州区",341203:"颍东区",341204:"颍泉区",341221:"临泉县",341222:"太和县",341225:"阜南县",341226:"颍上县",341282:"界首市",341302:"埇桥区",341321:"砀山县",341322:"萧县",341323:"灵璧县",341324:"泗县",341390:"经济开发区",341502:"金安区",341503:"裕安区",341504:"叶集区",341522:"霍邱县",341523:"舒城县",341524:"金寨县",341525:"霍山县",341602:"谯城区",341621:"涡阳县",341622:"蒙城县",341623:"利辛县",341702:"贵池区",341721:"东至县",341722:"石台县",341723:"青阳县",341802:"宣州区",341821:"郎溪县",341822:"广德县",341823:"泾县",341824:"绩溪县",341825:"旌德县",341881:"宁国市",350102:"鼓楼区",350103:"台江区",350104:"仓山区",350105:"马尾区",350111:"晋安区",350112:"长乐区",350121:"闽侯县",350122:"连江县",350123:"罗源县",350124:"闽清县",350125:"永泰县",350128:"平潭县",350181:"福清市",350203:"思明区",350205:"海沧区",350206:"湖里区",350211:"集美区",350212:"同安区",350213:"翔安区",350302:"城厢区",350303:"涵江区",350304:"荔城区",350305:"秀屿区",350322:"仙游县",350402:"梅列区",350403:"三元区",350421:"明溪县",350423:"清流县",350424:"宁化县",350425:"大田县",350426:"尤溪县",350427:"沙县",350428:"将乐县",350429:"泰宁县",350430:"建宁县",350481:"永安市",350502:"鲤城区",350503:"丰泽区",350504:"洛江区",350505:"泉港区",350521:"惠安县",350524:"安溪县",350525:"永春县",350526:"德化县",350527:"金门县",350581:"石狮市",350582:"晋江市",350583:"南安市",350602:"芗城区",350603:"龙文区",350622:"云霄县",350623:"漳浦县",350624:"诏安县",350625:"长泰县",350626:"东山县",350627:"南靖县",350628:"平和县",350629:"华安县",350681:"龙海市",350702:"延平区",350703:"建阳区",350721:"顺昌县",350722:"浦城县",350723:"光泽县",350724:"松溪县",350725:"政和县",350781:"邵武市",350782:"武夷山市",350783:"建瓯市",350802:"新罗区",350803:"永定区",350821:"长汀县",350823:"上杭县",350824:"武平县",350825:"连城县",350881:"漳平市",350902:"蕉城区",350921:"霞浦县",350922:"古田县",350923:"屏南县",350924:"寿宁县",350925:"周宁县",350926:"柘荣县",350981:"福安市",350982:"福鼎市",360102:"东湖区",360103:"西湖区",360104:"青云谱区",360105:"湾里区",360111:"青山湖区",360112:"新建区",360121:"南昌县",360123:"安义县",360124:"进贤县",360190:"经济技术开发区",360192:"高新区",360202:"昌江区",360203:"珠山区",360222:"浮梁县",360281:"乐平市",360302:"安源区",360313:"湘东区",360321:"莲花县",360322:"上栗县",360323:"芦溪县",360402:"濂溪区",360403:"浔阳区",360404:"柴桑区",360423:"武宁县",360424:"修水县",360425:"永修县",360426:"德安县",360428:"都昌县",360429:"湖口县",360430:"彭泽县",360481:"瑞昌市",360482:"共青城市",360483:"庐山市",360490:"经济技术开发区",360502:"渝水区",360521:"分宜县",360602:"月湖区",360603:"余江区",360681:"贵溪市",360702:"章贡区",360703:"南康区",360704:"赣县区",360722:"信丰县",360723:"大余县",360724:"上犹县",360725:"崇义县",360726:"安远县",360727:"龙南县",360728:"定南县",360729:"全南县",360730:"宁都县",360731:"于都县",360732:"兴国县",360733:"会昌县",360734:"寻乌县",360735:"石城县",360781:"瑞金市",360802:"吉州区",360803:"青原区",360821:"吉安县",360822:"吉水县",360823:"峡江县",360824:"新干县",360825:"永丰县",360826:"泰和县",360827:"遂川县",360828:"万安县",360829:"安福县",360830:"永新县",360881:"井冈山市",360902:"袁州区",360921:"奉新县",360922:"万载县",360923:"上高县",360924:"宜丰县",360925:"靖安县",360926:"铜鼓县",360981:"丰城市",360982:"樟树市",360983:"高安市",361002:"临川区",361003:"东乡区",361021:"南城县",361022:"黎川县",361023:"南丰县",361024:"崇仁县",361025:"乐安县",361026:"宜黄县",361027:"金溪县",361028:"资溪县",361030:"广昌县",361102:"信州区",361103:"广丰区",361121:"上饶县",361123:"玉山县",361124:"铅山县",361125:"横峰县",361126:"弋阳县",361127:"余干县",361128:"鄱阳县",361129:"万年县",361130:"婺源县",361181:"德兴市",370102:"历下区",370103:"市中区",370104:"槐荫区",370105:"天桥区",370112:"历城区",370113:"长清区",370114:"章丘区",370115:"济阳区",370124:"平阴县",370126:"商河县",370190:"高新区",370202:"市南区",370203:"市北区",370211:"黄岛区",370212:"崂山区",370213:"李沧区",370214:"城阳区",370215:"即墨区",370281:"胶州市",370283:"平度市",370285:"莱西市",370290:"开发区",370302:"淄川区",370303:"张店区",370304:"博山区",370305:"临淄区",370306:"周村区",370321:"桓台县",370322:"高青县",370323:"沂源县",370402:"市中区",370403:"薛城区",370404:"峄城区",370405:"台儿庄区",370406:"山亭区",370481:"滕州市",370502:"东营区",370503:"河口区",370505:"垦利区",370522:"利津县",370523:"广饶县",370602:"芝罘区",370611:"福山区",370612:"牟平区",370613:"莱山区",370634:"长岛县",370681:"龙口市",370682:"莱阳市",370683:"莱州市",370684:"蓬莱市",370685:"招远市",370686:"栖霞市",370687:"海阳市",370690:"开发区",370702:"潍城区",370703:"寒亭区",370704:"坊子区",370705:"奎文区",370724:"临朐县",370725:"昌乐县",370781:"青州市",370782:"诸城市",370783:"寿光市",370784:"安丘市",370785:"高密市",370786:"昌邑市",370790:"开发区",370791:"高新区",370811:"任城区",370812:"兖州区",370826:"微山县",370827:"鱼台县",370828:"金乡县",370829:"嘉祥县",370830:"汶上县",370831:"泗水县",370832:"梁山县",370881:"曲阜市",370883:"邹城市",370890:"高新区",370902:"泰山区",370911:"岱岳区",370921:"宁阳县",370923:"东平县",370982:"新泰市",370983:"肥城市",371002:"环翠区",371003:"文登区",371082:"荣成市",371083:"乳山市",371091:"经济技术开发区",371102:"东港区",371103:"岚山区",371121:"五莲县",371122:"莒县",371202:"莱城区",371203:"钢城区",371302:"兰山区",371311:"罗庄区",371312:"河东区",371321:"沂南县",371322:"郯城县",371323:"沂水县",371324:"兰陵县",371325:"费县",371326:"平邑县",371327:"莒南县",371328:"蒙阴县",371329:"临沭县",371402:"德城区",371403:"陵城区",371422:"宁津县",371423:"庆云县",371424:"临邑县",371425:"齐河县",371426:"平原县",371427:"夏津县",371428:"武城县",371481:"乐陵市",371482:"禹城市",371502:"东昌府区",371521:"阳谷县",371522:"莘县",371523:"茌平县",371524:"东阿县",371525:"冠县",371526:"高唐县",371581:"临清市",371602:"滨城区",371603:"沾化区",371621:"惠民县",371622:"阳信县",371623:"无棣县",371625:"博兴县",371681:"邹平市",371702:"牡丹区",371703:"定陶区",371721:"曹县",371722:"单县",371723:"成武县",371724:"巨野县",371725:"郓城县",371726:"鄄城县",371728:"东明县",410102:"中原区",410103:"二七区",410104:"管城回族区",410105:"金水区",410106:"上街区",410108:"惠济区",410122:"中牟县",410181:"巩义市",410182:"荥阳市",410183:"新密市",410184:"新郑市",410185:"登封市",410190:"高新技术开发区",410191:"经济技术开发区",410202:"龙亭区",410203:"顺河回族区",410204:"鼓楼区",410205:"禹王台区",410212:"祥符区",410221:"杞县",410222:"通许县",410223:"尉氏县",410225:"兰考县",410302:"老城区",410303:"西工区",410304:"瀍河回族区",410305:"涧西区",410306:"吉利区",410311:"洛龙区",410322:"孟津县",410323:"新安县",410324:"栾川县",410325:"嵩县",410326:"汝阳县",410327:"宜阳县",410328:"洛宁县",410329:"伊川县",410381:"偃师市",410402:"新华区",410403:"卫东区",410404:"石龙区",410411:"湛河区",410421:"宝丰县",410422:"叶县",410423:"鲁山县",410425:"郏县",410481:"舞钢市",410482:"汝州市",410502:"文峰区",410503:"北关区",410505:"殷都区",410506:"龙安区",410522:"安阳县",410523:"汤阴县",410526:"滑县",410527:"内黄县",410581:"林州市",410590:"开发区",410602:"鹤山区",410603:"山城区",410611:"淇滨区",410621:"浚县",410622:"淇县",410702:"红旗区",410703:"卫滨区",410704:"凤泉区",410711:"牧野区",410721:"新乡县",410724:"获嘉县",410725:"原阳县",410726:"延津县",410727:"封丘县",410728:"长垣县",410781:"卫辉市",410782:"辉县市",410802:"解放区",410803:"中站区",410804:"马村区",410811:"山阳区",410821:"修武县",410822:"博爱县",410823:"武陟县",410825:"温县",410882:"沁阳市",410883:"孟州市",410902:"华龙区",410922:"清丰县",410923:"南乐县",410926:"范县",410927:"台前县",410928:"濮阳县",411002:"魏都区",411003:"建安区",411024:"鄢陵县",411025:"襄城县",411081:"禹州市",411082:"长葛市",411102:"源汇区",411103:"郾城区",411104:"召陵区",411121:"舞阳县",411122:"临颍县",411202:"湖滨区",411203:"陕州区",411221:"渑池县",411224:"卢氏县",411281:"义马市",411282:"灵宝市",411302:"宛城区",411303:"卧龙区",411321:"南召县",411322:"方城县",411323:"西峡县",411324:"镇平县",411325:"内乡县",411326:"淅川县",411327:"社旗县",411328:"唐河县",411329:"新野县",411330:"桐柏县",411381:"邓州市",411402:"梁园区",411403:"睢阳区",411421:"民权县",411422:"睢县",411423:"宁陵县",411424:"柘城县",411425:"虞城县",411426:"夏邑县",411481:"永城市",411502:"浉河区",411503:"平桥区",411521:"罗山县",411522:"光山县",411523:"新县",411524:"商城县",411525:"固始县",411526:"潢川县",411527:"淮滨县",411528:"息县",411602:"川汇区",411621:"扶沟县",411622:"西华县",411623:"商水县",411624:"沈丘县",411625:"郸城县",411626:"淮阳县",411627:"太康县",411628:"鹿邑县",411681:"项城市",411690:"经济开发区",411702:"驿城区",411721:"西平县",411722:"上蔡县",411723:"平舆县",411724:"正阳县",411725:"确山县",411726:"泌阳县",411727:"汝南县",411728:"遂平县",411729:"新蔡县",419001:"济源市",420102:"江岸区",420103:"江汉区",420104:"硚口区",420105:"汉阳区",420106:"武昌区",420107:"青山区",420111:"洪山区",420112:"东西湖区",420113:"汉南区",420114:"蔡甸区",420115:"江夏区",420116:"黄陂区",420117:"新洲区",420202:"黄石港区",420203:"西塞山区",420204:"下陆区",420205:"铁山区",420222:"阳新县",420281:"大冶市",420302:"茅箭区",420303:"张湾区",420304:"郧阳区",420322:"郧西县",420323:"竹山县",420324:"竹溪县",420325:"房县",420381:"丹江口市",420502:"西陵区",420503:"伍家岗区",420504:"点军区",420505:"猇亭区",420506:"夷陵区",420525:"远安县",420526:"兴山县",420527:"秭归县",420528:"长阳土家族自治县",420529:"五峰土家族自治县",420581:"宜都市",420582:"当阳市",420583:"枝江市",420590:"经济开发区",420602:"襄城区",420606:"樊城区",420607:"襄州区",420624:"南漳县",420625:"谷城县",420626:"保康县",420682:"老河口市",420683:"枣阳市",420684:"宜城市",420702:"梁子湖区",420703:"华容区",420704:"鄂城区",420802:"东宝区",420804:"掇刀区",420822:"沙洋县",420881:"钟祥市",420882:"京山市",420902:"孝南区",420921:"孝昌县",420922:"大悟县",420923:"云梦县",420981:"应城市",420982:"安陆市",420984:"汉川市",421002:"沙市区",421003:"荆州区",421022:"公安县",421023:"监利县",421024:"江陵县",421081:"石首市",421083:"洪湖市",421087:"松滋市",421102:"黄州区",421121:"团风县",421122:"红安县",421123:"罗田县",421124:"英山县",421125:"浠水县",421126:"蕲春县",421127:"黄梅县",421181:"麻城市",421182:"武穴市",421202:"咸安区",421221:"嘉鱼县",421222:"通城县",421223:"崇阳县",421224:"通山县",421281:"赤壁市",421303:"曾都区",421321:"随县",421381:"广水市",422801:"恩施市",422802:"利川市",422822:"建始县",422823:"巴东县",422825:"宣恩县",422826:"咸丰县",422827:"来凤县",422828:"鹤峰县",429004:"仙桃市",429005:"潜江市",429006:"天门市",429021:"神农架林区",430102:"芙蓉区",430103:"天心区",430104:"岳麓区",430105:"开福区",430111:"雨花区",430112:"望城区",430121:"长沙县",430181:"浏阳市",430182:"宁乡市",430202:"荷塘区",430203:"芦淞区",430204:"石峰区",430211:"天元区",430212:"渌口区",430223:"攸县",430224:"茶陵县",430225:"炎陵县",430281:"醴陵市",430302:"雨湖区",430304:"岳塘区",430321:"湘潭县",430381:"湘乡市",430382:"韶山市",430405:"珠晖区",430406:"雁峰区",430407:"石鼓区",430408:"蒸湘区",430412:"南岳区",430421:"衡阳县",430422:"衡南县",430423:"衡山县",430424:"衡东县",430426:"祁东县",430481:"耒阳市",430482:"常宁市",430502:"双清区",430503:"大祥区",430511:"北塔区",430521:"邵东县",430522:"新邵县",430523:"邵阳县",430524:"隆回县",430525:"洞口县",430527:"绥宁县",430528:"新宁县",430529:"城步苗族自治县",430581:"武冈市",430602:"岳阳楼区",430603:"云溪区",430611:"君山区",430621:"岳阳县",430623:"华容县",430624:"湘阴县",430626:"平江县",430681:"汨罗市",430682:"临湘市",430702:"武陵区",430703:"鼎城区",430721:"安乡县",430722:"汉寿县",430723:"澧县",430724:"临澧县",430725:"桃源县",430726:"石门县",430781:"津市市",430802:"永定区",430811:"武陵源区",430821:"慈利县",430822:"桑植县",430902:"资阳区",430903:"赫山区",430921:"南县",430922:"桃江县",430923:"安化县",430981:"沅江市",431002:"北湖区",431003:"苏仙区",431021:"桂阳县",431022:"宜章县",431023:"永兴县",431024:"嘉禾县",431025:"临武县",431026:"汝城县",431027:"桂东县",431028:"安仁县",431081:"资兴市",431102:"零陵区",431103:"冷水滩区",431121:"祁阳县",431122:"东安县",431123:"双牌县",431124:"道县",431125:"江永县",431126:"宁远县",431127:"蓝山县",431128:"新田县",431129:"江华瑶族自治县",431202:"鹤城区",431221:"中方县",431222:"沅陵县",431223:"辰溪县",431224:"溆浦县",431225:"会同县",431226:"麻阳苗族自治县",431227:"新晃侗族自治县",431228:"芷江侗族自治县",431229:"靖州苗族侗族自治县",431230:"通道侗族自治县",431281:"洪江市",431302:"娄星区",431321:"双峰县",431322:"新化县",431381:"冷水江市",431382:"涟源市",433101:"吉首市",433122:"泸溪县",433123:"凤凰县",433124:"花垣县",433125:"保靖县",433126:"古丈县",433127:"永顺县",433130:"龙山县",440103:"荔湾区",440104:"越秀区",440105:"海珠区",440106:"天河区",440111:"白云区",440112:"黄埔区",440113:"番禺区",440114:"花都区",440115:"南沙区",440117:"从化区",440118:"增城区",440203:"武江区",440204:"浈江区",440205:"曲江区",440222:"始兴县",440224:"仁化县",440229:"翁源县",440232:"乳源瑶族自治县",440233:"新丰县",440281:"乐昌市",440282:"南雄市",440303:"罗湖区",440304:"福田区",440305:"南山区",440306:"宝安区",440307:"龙岗区",440308:"盐田区",440309:"龙华区",440310:"坪山区",440311:"光明区",440402:"香洲区",440403:"斗门区",440404:"金湾区",440507:"龙湖区",440511:"金平区",440512:"濠江区",440513:"潮阳区",440514:"潮南区",440515:"澄海区",440523:"南澳县",440604:"禅城区",440605:"南海区",440606:"顺德区",440607:"三水区",440608:"高明区",440703:"蓬江区",440704:"江海区",440705:"新会区",440781:"台山市",440783:"开平市",440784:"鹤山市",440785:"恩平市",440802:"赤坎区",440803:"霞山区",440804:"坡头区",440811:"麻章区",440823:"遂溪县",440825:"徐闻县",440881:"廉江市",440882:"雷州市",440883:"吴川市",440890:"经济技术开发区",440902:"茂南区",440904:"电白区",440981:"高州市",440982:"化州市",440983:"信宜市",441202:"端州区",441203:"鼎湖区",441204:"高要区",441223:"广宁县",441224:"怀集县",441225:"封开县",441226:"德庆县",441284:"四会市",441302:"惠城区",441303:"惠阳区",441322:"博罗县",441323:"惠东县",441324:"龙门县",441402:"梅江区",441403:"梅县区",441422:"大埔县",441423:"丰顺县",441424:"五华县",441426:"平远县",441427:"蕉岭县",441481:"兴宁市",441502:"城区",441521:"海丰县",441523:"陆河县",441581:"陆丰市",441602:"源城区",441621:"紫金县",441622:"龙川县",441623:"连平县",441624:"和平县",441625:"东源县",441702:"江城区",441704:"阳东区",441721:"阳西县",441781:"阳春市",441802:"清城区",441803:"清新区",441821:"佛冈县",441823:"阳山县",441825:"连山壮族瑶族自治县",441826:"连南瑶族自治县",441881:"英德市",441882:"连州市",441901:"中堂镇",441903:"南城街道办事处",441904:"长安镇",441905:"东坑镇",441906:"樟木头镇",441907:"莞城街道办事处",441908:"石龙镇",441909:"桥头镇",441910:"万江街道办事处",441911:"麻涌镇",441912:"虎门镇",441913:"谢岗镇",441914:"石碣镇",441915:"茶山镇",441916:"东城街道办事处",441917:"洪梅镇",441918:"道滘镇",441919:"高埗镇",441920:"企石镇",441921:"凤岗镇",441922:"大岭山镇",441923:"松山湖管委会",441924:"清溪镇",441925:"望牛墩镇",441926:"厚街镇",441927:"常平镇",441928:"寮步镇",441929:"石排镇",441930:"横沥镇",441931:"塘厦镇",441932:"黄江镇",441933:"大朗镇",441934:"东莞港",441935:"东莞生态园",441990:"沙田镇",442001:"南头镇",442002:"神湾镇",442003:"东凤镇",442004:"五桂山街道办事处",442005:"黄圃镇",442006:"小榄镇",442007:"石岐区街道办事处",442008:"横栏镇",442009:"三角镇",442010:"三乡镇",442011:"港口镇",442012:"沙溪镇",442013:"板芙镇",442015:"东升镇",442016:"阜沙镇",442017:"民众镇",442018:"东区街道办事处",442019:"火炬开发区街道办事处",442020:"西区街道办事处",442021:"南区街道办事处",442022:"古镇镇",442023:"坦洲镇",442024:"大涌镇",442025:"南朗镇",445102:"湘桥区",445103:"潮安区",445122:"饶平县",445202:"榕城区",445203:"揭东区",445222:"揭西县",445224:"惠来县",445281:"普宁市",445302:"云城区",445303:"云安区",445321:"新兴县",445322:"郁南县",445381:"罗定市",450102:"兴宁区",450103:"青秀区",450105:"江南区",450107:"西乡塘区",450108:"良庆区",450109:"邕宁区",450110:"武鸣区",450123:"隆安县",450124:"马山县",450125:"上林县",450126:"宾阳县",450127:"横县",450202:"城中区",450203:"鱼峰区",450204:"柳南区",450205:"柳北区",450206:"柳江区",450222:"柳城县",450223:"鹿寨县",450224:"融安县",450225:"融水苗族自治县",450226:"三江侗族自治县",450302:"秀峰区",450303:"叠彩区",450304:"象山区",450305:"七星区",450311:"雁山区",450312:"临桂区",450321:"阳朔县",450323:"灵川县",450324:"全州县",450325:"兴安县",450326:"永福县",450327:"灌阳县",450328:"龙胜各族自治县",450329:"资源县",450330:"平乐县",450332:"恭城瑶族自治县",450381:"荔浦市",450403:"万秀区",450405:"长洲区",450406:"龙圩区",450421:"苍梧县",450422:"藤县",450423:"蒙山县",450481:"岑溪市",450502:"海城区",450503:"银海区",450512:"铁山港区",450521:"合浦县",450602:"港口区",450603:"防城区",450621:"上思县",450681:"东兴市",450702:"钦南区",450703:"钦北区",450721:"灵山县",450722:"浦北县",450802:"港北区",450803:"港南区",450804:"覃塘区",450821:"平南县",450881:"桂平市",450902:"玉州区",450903:"福绵区",450921:"容县",450922:"陆川县",450923:"博白县",450924:"兴业县",450981:"北流市",451002:"右江区",451021:"田阳县",451022:"田东县",451023:"平果县",451024:"德保县",451026:"那坡县",451027:"凌云县",451028:"乐业县",451029:"田林县",451030:"西林县",451031:"隆林各族自治县",451081:"靖西市",451102:"八步区",451103:"平桂区",451121:"昭平县",451122:"钟山县",451123:"富川瑶族自治县",451202:"金城江区",451203:"宜州区",451221:"南丹县",451222:"天峨县",451223:"凤山县",451224:"东兰县",451225:"罗城仫佬族自治县",451226:"环江毛南族自治县",451227:"巴马瑶族自治县",451228:"都安瑶族自治县",451229:"大化瑶族自治县",451302:"兴宾区",451321:"忻城县",451322:"象州县",451323:"武宣县",451324:"金秀瑶族自治县",451381:"合山市",451402:"江州区",451421:"扶绥县",451422:"宁明县",451423:"龙州县",451424:"大新县",451425:"天等县",451481:"凭祥市",460105:"秀英区",460106:"龙华区",460107:"琼山区",460108:"美兰区",460202:"海棠区",460203:"吉阳区",460204:"天涯区",460205:"崖州区",460321:"西沙群岛",460322:"南沙群岛",460323:"中沙群岛的岛礁及其海域",460401:"那大镇",460402:"和庆镇",460403:"南丰镇",460404:"大成镇",460405:"雅星镇",460406:"兰洋镇",460407:"光村镇",460408:"木棠镇",460409:"海头镇",460410:"峨蔓镇",460411:"王五镇",460412:"白马井镇",460413:"中和镇",460414:"排浦镇",460415:"东成镇",460416:"新州镇",460417:"洋浦经济开发区",460418:"华南热作学院",469001:"五指山市",469002:"琼海市",469005:"文昌市",469006:"万宁市",469007:"东方市",469021:"定安县",469022:"屯昌县",469023:"澄迈县",469024:"临高县",469025:"白沙黎族自治县",469026:"昌江黎族自治县",469027:"乐东黎族自治县",469028:"陵水黎族自治县",469029:"保亭黎族苗族自治县",469030:"琼中黎族苗族自治县",500101:"万州区",500102:"涪陵区",500103:"渝中区",500104:"大渡口区",500105:"江北区",500106:"沙坪坝区",500107:"九龙坡区",500108:"南岸区",500109:"北碚区",500110:"綦江区",500111:"大足区",500112:"渝北区",500113:"巴南区",500114:"黔江区",500115:"长寿区",500116:"江津区",500117:"合川区",500118:"永川区",500119:"南川区",500120:"璧山区",500151:"铜梁区",500152:"潼南区",500153:"荣昌区",500154:"开州区",500155:"梁平区",500156:"武隆区",500229:"城口县",500230:"丰都县",500231:"垫江县",500233:"忠县",500235:"云阳县",500236:"奉节县",500237:"巫山县",500238:"巫溪县",500240:"石柱土家族自治县",500241:"秀山土家族苗族自治县",500242:"酉阳土家族苗族自治县",500243:"彭水苗族土家族自治县",510104:"锦江区",510105:"青羊区",510106:"金牛区",510107:"武侯区",510108:"成华区",510112:"龙泉驿区",510113:"青白江区",510114:"新都区",510115:"温江区",510116:"双流区",510117:"郫都区",510121:"金堂县",510129:"大邑县",510131:"蒲江县",510132:"新津县",510181:"都江堰市",510182:"彭州市",510183:"邛崃市",510184:"崇州市",510185:"简阳市",510191:"高新区",510302:"自流井区",510303:"贡井区",510304:"大安区",510311:"沿滩区",510321:"荣县",510322:"富顺县",510402:"东区",510403:"西区",510411:"仁和区",510421:"米易县",510422:"盐边县",510502:"江阳区",510503:"纳溪区",510504:"龙马潭区",510521:"泸县",510522:"合江县",510524:"叙永县",510525:"古蔺县",510603:"旌阳区",510604:"罗江区",510623:"中江县",510681:"广汉市",510682:"什邡市",510683:"绵竹市",510703:"涪城区",510704:"游仙区",510705:"安州区",510722:"三台县",510723:"盐亭县",510725:"梓潼县",510726:"北川羌族自治县",510727:"平武县",510781:"江油市",510791:"高新区",510802:"利州区",510811:"昭化区",510812:"朝天区",510821:"旺苍县",510822:"青川县",510823:"剑阁县",510824:"苍溪县",510903:"船山区",510904:"安居区",510921:"蓬溪县",510922:"射洪县",510923:"大英县",511002:"市中区",511011:"东兴区",511024:"威远县",511025:"资中县",511083:"隆昌市",511102:"市中区",511111:"沙湾区",511112:"五通桥区",511113:"金口河区",511123:"犍为县",511124:"井研县",511126:"夹江县",511129:"沐川县",511132:"峨边彝族自治县",511133:"马边彝族自治县",511181:"峨眉山市",511302:"顺庆区",511303:"高坪区",511304:"嘉陵区",511321:"南部县",511322:"营山县",511323:"蓬安县",511324:"仪陇县",511325:"西充县",511381:"阆中市",511402:"东坡区",511403:"彭山区",511421:"仁寿县",511423:"洪雅县",511424:"丹棱县",511425:"青神县",511502:"翠屏区",511503:"南溪区",511504:"叙州区",511523:"江安县",511524:"长宁县",511525:"高县",511526:"珙县",511527:"筠连县",511528:"兴文县",511529:"屏山县",511602:"广安区",511603:"前锋区",511621:"岳池县",511622:"武胜县",511623:"邻水县",511681:"华蓥市",511702:"通川区",511703:"达川区",511722:"宣汉县",511723:"开江县",511724:"大竹县",511725:"渠县",511781:"万源市",511802:"雨城区",511803:"名山区",511822:"荥经县",511823:"汉源县",511824:"石棉县",511825:"天全县",511826:"芦山县",511827:"宝兴县",511902:"巴州区",511903:"恩阳区",511921:"通江县",511922:"南江县",511923:"平昌县",512002:"雁江区",512021:"安岳县",512022:"乐至县",513201:"马尔康市",513221:"汶川县",513222:"理县",513223:"茂县",513224:"松潘县",513225:"九寨沟县",513226:"金川县",513227:"小金县",513228:"黑水县",513230:"壤塘县",513231:"阿坝县",513232:"若尔盖县",513233:"红原县",513301:"康定市",513322:"泸定县",513323:"丹巴县",513324:"九龙县",513325:"雅江县",513326:"道孚县",513327:"炉霍县",513328:"甘孜县",513329:"新龙县",513330:"德格县",513331:"白玉县",513332:"石渠县",513333:"色达县",513334:"理塘县",513335:"巴塘县",513336:"乡城县",513337:"稻城县",513338:"得荣县",513401:"西昌市",513422:"木里藏族自治县",513423:"盐源县",513424:"德昌县",513425:"会理县",513426:"会东县",513427:"宁南县",513428:"普格县",513429:"布拖县",513430:"金阳县",513431:"昭觉县",513432:"喜德县",513433:"冕宁县",513434:"越西县",513435:"甘洛县",513436:"美姑县",513437:"雷波县",520102:"南明区",520103:"云岩区",520111:"花溪区",520112:"乌当区",520113:"白云区",520115:"观山湖区",520121:"开阳县",520122:"息烽县",520123:"修文县",520181:"清镇市",520201:"钟山区",520203:"六枝特区",520221:"水城县",520281:"盘州市",520302:"红花岗区",520303:"汇川区",520304:"播州区",520322:"桐梓县",520323:"绥阳县",520324:"正安县",520325:"道真仡佬族苗族自治县",520326:"务川仡佬族苗族自治县",520327:"凤冈县",520328:"湄潭县",520329:"余庆县",520330:"习水县",520381:"赤水市",520382:"仁怀市",520402:"西秀区",520403:"平坝区",520422:"普定县",520423:"镇宁布依族苗族自治县",520424:"关岭布依族苗族自治县",520425:"紫云苗族布依族自治县",520502:"七星关区",520521:"大方县",520522:"黔西县",520523:"金沙县",520524:"织金县",520525:"纳雍县",520526:"威宁彝族回族苗族自治县",520527:"赫章县",520602:"碧江区",520603:"万山区",520621:"江口县",520622:"玉屏侗族自治县",520623:"石阡县",520624:"思南县",520625:"印江土家族苗族自治县",520626:"德江县",520627:"沿河土家族自治县",520628:"松桃苗族自治县",522301:"兴义市",522302:"兴仁市",522323:"普安县",522324:"晴隆县",522325:"贞丰县",522326:"望谟县",522327:"册亨县",522328:"安龙县",522601:"凯里市",522622:"黄平县",522623:"施秉县",522624:"三穗县",522625:"镇远县",522626:"岑巩县",522627:"天柱县",522628:"锦屏县",522629:"剑河县",522630:"台江县",522631:"黎平县",522632:"榕江县",522633:"从江县",522634:"雷山县",522635:"麻江县",522636:"丹寨县",522701:"都匀市",522702:"福泉市",522722:"荔波县",522723:"贵定县",522725:"瓮安县",522726:"独山县",522727:"平塘县",522728:"罗甸县",522729:"长顺县",522730:"龙里县",522731:"惠水县",522732:"三都水族自治县",530102:"五华区",530103:"盘龙区",530111:"官渡区",530112:"西山区",530113:"东川区",530114:"呈贡区",530115:"晋宁区",530124:"富民县",530125:"宜良县",530126:"石林彝族自治县",530127:"嵩明县",530128:"禄劝彝族苗族自治县",530129:"寻甸回族彝族自治县",530181:"安宁市",530302:"麒麟区",530303:"沾益区",530304:"马龙区",530322:"陆良县",530323:"师宗县",530324:"罗平县",530325:"富源县",530326:"会泽县",530381:"宣威市",530402:"红塔区",530403:"江川区",530422:"澄江县",530423:"通海县",530424:"华宁县",530425:"易门县",530426:"峨山彝族自治县",530427:"新平彝族傣族自治县",530428:"元江哈尼族彝族傣族自治县",530502:"隆阳区",530521:"施甸县",530523:"龙陵县",530524:"昌宁县",530581:"腾冲市",530602:"昭阳区",530621:"鲁甸县",530622:"巧家县",530623:"盐津县",530624:"大关县",530625:"永善县",530626:"绥江县",530627:"镇雄县",530628:"彝良县",530629:"威信县",530681:"水富市",530702:"古城区",530721:"玉龙纳西族自治县",530722:"永胜县",530723:"华坪县",530724:"宁蒗彝族自治县",530802:"思茅区",530821:"宁洱哈尼族彝族自治县",530822:"墨江哈尼族自治县",530823:"景东彝族自治县",530824:"景谷傣族彝族自治县",530825:"镇沅彝族哈尼族拉祜族自治县",530826:"江城哈尼族彝族自治县",530827:"孟连傣族拉祜族佤族自治县",530828:"澜沧拉祜族自治县",530829:"西盟佤族自治县",530902:"临翔区",530921:"凤庆县",530922:"云县",530923:"永德县",530924:"镇康县",530925:"双江拉祜族佤族布朗族傣族自治县",530926:"耿马傣族佤族自治县",530927:"沧源佤族自治县",532301:"楚雄市",532322:"双柏县",532323:"牟定县",532324:"南华县",532325:"姚安县",532326:"大姚县",532327:"永仁县",532328:"元谋县",532329:"武定县",532331:"禄丰县",532501:"个旧市",532502:"开远市",532503:"蒙自市",532504:"弥勒市",532523:"屏边苗族自治县",532524:"建水县",532525:"石屏县",532527:"泸西县",532528:"元阳县",532529:"红河县",532530:"金平苗族瑶族傣族自治县",532531:"绿春县",532532:"河口瑶族自治县",532601:"文山市",532622:"砚山县",532623:"西畴县",532624:"麻栗坡县",532625:"马关县",532626:"丘北县",532627:"广南县",532628:"富宁县",532801:"景洪市",532822:"勐海县",532823:"勐腊县",532901:"大理市",532922:"漾濞彝族自治县",532923:"祥云县",532924:"宾川县",532925:"弥渡县",532926:"南涧彝族自治县",532927:"巍山彝族回族自治县",532928:"永平县",532929:"云龙县",532930:"洱源县",532931:"剑川县",532932:"鹤庆县",533102:"瑞丽市",533103:"芒市",533122:"梁河县",533123:"盈江县",533124:"陇川县",533301:"泸水市",533323:"福贡县",533324:"贡山独龙族怒族自治县",533325:"兰坪白族普米族自治县",533401:"香格里拉市",533422:"德钦县",533423:"维西傈僳族自治县",540102:"城关区",540103:"堆龙德庆区",540104:"达孜区",540121:"林周县",540122:"当雄县",540123:"尼木县",540124:"曲水县",540127:"墨竹工卡县",540202:"桑珠孜区",540221:"南木林县",540222:"江孜县",540223:"定日县",540224:"萨迦县",540225:"拉孜县",540226:"昂仁县",540227:"谢通门县",540228:"白朗县",540229:"仁布县",540230:"康马县",540231:"定结县",540232:"仲巴县",540233:"亚东县",540234:"吉隆县",540235:"聂拉木县",540236:"萨嘎县",540237:"岗巴县",540302:"卡若区",540321:"江达县",540322:"贡觉县",540323:"类乌齐县",540324:"丁青县",540325:"察雅县",540326:"八宿县",540327:"左贡县",540328:"芒康县",540329:"洛隆县",540330:"边坝县",540402:"巴宜区",540421:"工布江达县",540422:"米林县",540423:"墨脱县",540424:"波密县",540425:"察隅县",540426:"朗县",540502:"乃东区",540521:"扎囊县",540522:"贡嘎县",540523:"桑日县",540524:"琼结县",540525:"曲松县",540526:"措美县",540527:"洛扎县",540528:"加查县",540529:"隆子县",540530:"错那县",540531:"浪卡子县",540602:"色尼区",540621:"嘉黎县",540622:"比如县",540623:"聂荣县",540624:"安多县",540625:"申扎县",540626:"索县",540627:"班戈县",540628:"巴青县",540629:"尼玛县",540630:"双湖县",542521:"普兰县",542522:"札达县",542523:"噶尔县",542524:"日土县",542525:"革吉县",542526:"改则县",542527:"措勤县",610102:"新城区",610103:"碑林区",610104:"莲湖区",610111:"灞桥区",610112:"未央区",610113:"雁塔区",610114:"阎良区",610115:"临潼区",610116:"长安区",610117:"高陵区",610118:"鄠邑区",610122:"蓝田县",610124:"周至县",610202:"王益区",610203:"印台区",610204:"耀州区",610222:"宜君县",610302:"渭滨区",610303:"金台区",610304:"陈仓区",610322:"凤翔县",610323:"岐山县",610324:"扶风县",610326:"眉县",610327:"陇县",610328:"千阳县",610329:"麟游县",610330:"凤县",610331:"太白县",610402:"秦都区",610403:"杨陵区",610404:"渭城区",610422:"三原县",610423:"泾阳县",610424:"乾县",610425:"礼泉县",610426:"永寿县",610428:"长武县",610429:"旬邑县",610430:"淳化县",610431:"武功县",610481:"兴平市",610482:"彬州市",610502:"临渭区",610503:"华州区",610522:"潼关县",610523:"大荔县",610524:"合阳县",610525:"澄城县",610526:"蒲城县",610527:"白水县",610528:"富平县",610581:"韩城市",610582:"华阴市",610602:"宝塔区",610603:"安塞区",610621:"延长县",610622:"延川县",610623:"子长县",610625:"志丹县",610626:"吴起县",610627:"甘泉县",610628:"富县",610629:"洛川县",610630:"宜川县",610631:"黄龙县",610632:"黄陵县",610702:"汉台区",610703:"南郑区",610722:"城固县",610723:"洋县",610724:"西乡县",610725:"勉县",610726:"宁强县",610727:"略阳县",610728:"镇巴县",610729:"留坝县",610730:"佛坪县",610802:"榆阳区",610803:"横山区",610822:"府谷县",610824:"靖边县",610825:"定边县",610826:"绥德县",610827:"米脂县",610828:"佳县",610829:"吴堡县",610830:"清涧县",610831:"子洲县",610881:"神木市",610902:"汉滨区",610921:"汉阴县",610922:"石泉县",610923:"宁陕县",610924:"紫阳县",610925:"岚皋县",610926:"平利县",610927:"镇坪县",610928:"旬阳县",610929:"白河县",611002:"商州区",611021:"洛南县",611022:"丹凤县",611023:"商南县",611024:"山阳县",611025:"镇安县",611026:"柞水县",620102:"城关区",620103:"七里河区",620104:"西固区",620105:"安宁区",620111:"红古区",620121:"永登县",620122:"皋兰县",620123:"榆中县",620201:"市辖区",620290:"雄关区",620291:"长城区",620292:"镜铁区",620293:"新城镇",620294:"峪泉镇",620295:"文殊镇",620302:"金川区",620321:"永昌县",620402:"白银区",620403:"平川区",620421:"靖远县",620422:"会宁县",620423:"景泰县",620502:"秦州区",620503:"麦积区",620521:"清水县",620522:"秦安县",620523:"甘谷县",620524:"武山县",620525:"张家川回族自治县",620602:"凉州区",620621:"民勤县",620622:"古浪县",620623:"天祝藏族自治县",620702:"甘州区",620721:"肃南裕固族自治县",620722:"民乐县",620723:"临泽县",620724:"高台县",620725:"山丹县",620802:"崆峒区",620821:"泾川县",620822:"灵台县",620823:"崇信县",620825:"庄浪县",620826:"静宁县",620881:"华亭市",620902:"肃州区",620921:"金塔县",620922:"瓜州县",620923:"肃北蒙古族自治县",620924:"阿克塞哈萨克族自治县",620981:"玉门市",620982:"敦煌市",621002:"西峰区",621021:"庆城县",621022:"环县",621023:"华池县",621024:"合水县",621025:"正宁县",621026:"宁县",621027:"镇原县",621102:"安定区",621121:"通渭县",621122:"陇西县",621123:"渭源县",621124:"临洮县",621125:"漳县",621126:"岷县",621202:"武都区",621221:"成县",621222:"文县",621223:"宕昌县",621224:"康县",621225:"西和县",621226:"礼县",621227:"徽县",621228:"两当县",622901:"临夏市",622921:"临夏县",622922:"康乐县",622923:"永靖县",622924:"广河县",622925:"和政县",622926:"东乡族自治县",622927:"积石山保安族东乡族撒拉族自治县",623001:"合作市",623021:"临潭县",623022:"卓尼县",623023:"舟曲县",623024:"迭部县",623025:"玛曲县",623026:"碌曲县",623027:"夏河县",630102:"城东区",630103:"城中区",630104:"城西区",630105:"城北区",630121:"大通回族土族自治县",630122:"湟中县",630123:"湟源县",630202:"乐都区",630203:"平安区",630222:"民和回族土族自治县",630223:"互助土族自治县",630224:"化隆回族自治县",630225:"循化撒拉族自治县",632221:"门源回族自治县",632222:"祁连县",632223:"海晏县",632224:"刚察县",632321:"同仁县",632322:"尖扎县",632323:"泽库县",632324:"河南蒙古族自治县",632521:"共和县",632522:"同德县",632523:"贵德县",632524:"兴海县",632525:"贵南县",632621:"玛沁县",632622:"班玛县",632623:"甘德县",632624:"达日县",632625:"久治县",632626:"玛多县",632701:"玉树市",632722:"杂多县",632723:"称多县",632724:"治多县",632725:"囊谦县",632726:"曲麻莱县",632801:"格尔木市",632802:"德令哈市",632803:"茫崖市",632821:"乌兰县",632822:"都兰县",632823:"天峻县",640104:"兴庆区",640105:"西夏区",640106:"金凤区",640121:"永宁县",640122:"贺兰县",640181:"灵武市",640202:"大武口区",640205:"惠农区",640221:"平罗县",640302:"利通区",640303:"红寺堡区",640323:"盐池县",640324:"同心县",640381:"青铜峡市",640402:"原州区",640422:"西吉县",640423:"隆德县",640424:"泾源县",640425:"彭阳县",640502:"沙坡头区",640521:"中宁县",640522:"海原县",650102:"天山区",650103:"沙依巴克区",650104:"新市区",650105:"水磨沟区",650106:"头屯河区",650107:"达坂城区",650109:"米东区",650121:"乌鲁木齐县",650202:"独山子区",650203:"克拉玛依区",650204:"白碱滩区",650205:"乌尔禾区",650402:"高昌区",650421:"鄯善县",650422:"托克逊县",650502:"伊州区",650521:"巴里坤哈萨克自治县",650522:"伊吾县",652301:"昌吉市",652302:"阜康市",652323:"呼图壁县",652324:"玛纳斯县",652325:"奇台县",652327:"吉木萨尔县",652328:"木垒哈萨克自治县",652701:"博乐市",652702:"阿拉山口市",652722:"精河县",652723:"温泉县",652801:"库尔勒市",652822:"轮台县",652823:"尉犁县",652824:"若羌县",652825:"且末县",652826:"焉耆回族自治县",652827:"和静县",652828:"和硕县",652829:"博湖县",652901:"阿克苏市",652922:"温宿县",652923:"库车县",652924:"沙雅县",652925:"新和县",652926:"拜城县",652927:"乌什县",652928:"阿瓦提县",652929:"柯坪县",653001:"阿图什市",653022:"阿克陶县",653023:"阿合奇县",653024:"乌恰县",653101:"喀什市",653121:"疏附县",653122:"疏勒县",653123:"英吉沙县",653124:"泽普县",653125:"莎车县",653126:"叶城县",653127:"麦盖提县",653128:"岳普湖县",653129:"伽师县",653130:"巴楚县",653131:"塔什库尔干塔吉克自治县",653201:"和田市",653221:"和田县",653222:"墨玉县",653223:"皮山县",653224:"洛浦县",653225:"策勒县",653226:"于田县",653227:"民丰县",654002:"伊宁市",654003:"奎屯市",654004:"霍尔果斯市",654021:"伊宁县",654022:"察布查尔锡伯自治县",654023:"霍城县",654024:"巩留县",654025:"新源县",654026:"昭苏县",654027:"特克斯县",654028:"尼勒克县",654201:"塔城市",654202:"乌苏市",654221:"额敏县",654223:"沙湾县",654224:"托里县",654225:"裕民县",654226:"和布克赛尔蒙古自治县",654301:"阿勒泰市",654321:"布尔津县",654322:"富蕴县",654323:"福海县",654324:"哈巴河县",654325:"青河县",654326:"吉木乃县",659001:"石河子市",659002:"阿拉尔市",659003:"图木舒克市",659004:"五家渠市",659005:"北屯市",659006:"铁门关市",659007:"双河市",659008:"可克达拉市",659009:"昆玉市",710101:"中正区",710102:"大同区",710103:"中山区",710104:"松山区",710105:"大安区",710106:"万华区",710107:"信义区",710108:"士林区",710109:"北投区",710110:"内湖区",710111:"南港区",710112:"文山区",710199:"其它区",710201:"新兴区",710202:"前金区",710203:"芩雅区",710204:"盐埕区",710205:"鼓山区",710206:"旗津区",710207:"前镇区",710208:"三民区",710209:"左营区",710210:"楠梓区",710211:"小港区",710241:"苓雅区",710242:"仁武区",710243:"大社区",710244:"冈山区",710245:"路竹区",710246:"阿莲区",710247:"田寮区",710248:"燕巢区",710249:"桥头区",710250:"梓官区",710251:"弥陀区",710252:"永安区",710253:"湖内区",710254:"凤山区",710255:"大寮区",710256:"林园区",710257:"鸟松区",710258:"大树区",710259:"旗山区",710260:"美浓区",710261:"六龟区",710262:"内门区",710263:"杉林区",710264:"甲仙区",710265:"桃源区",710266:"那玛夏区",710267:"茂林区",710268:"茄萣区",710299:"其它区",710301:"中西区",710302:"东区",710303:"南区",710304:"北区",710305:"安平区",710306:"安南区",710339:"永康区",710340:"归仁区",710341:"新化区",710342:"左镇区",710343:"玉井区",710344:"楠西区",710345:"南化区",710346:"仁德区",710347:"关庙区",710348:"龙崎区",710349:"官田区",710350:"麻豆区",710351:"佳里区",710352:"西港区",710353:"七股区",710354:"将军区",710355:"学甲区",710356:"北门区",710357:"新营区",710358:"后壁区",710359:"白河区",710360:"东山区",710361:"六甲区",710362:"下营区",710363:"柳营区",710364:"盐水区",710365:"善化区",710366:"大内区",710367:"山上区",710368:"新市区",710369:"安定区",710399:"其它区",710401:"中区",710402:"东区",710403:"南区",710404:"西区",710405:"北区",710406:"北屯区",710407:"西屯区",710408:"南屯区",710431:"太平区",710432:"大里区",710433:"雾峰区",710434:"乌日区",710435:"丰原区",710436:"后里区",710437:"石冈区",710438:"东势区",710439:"和平区",710440:"新社区",710441:"潭子区",710442:"大雅区",710443:"神冈区",710444:"大肚区",710445:"沙鹿区",710446:"龙井区",710447:"梧栖区",710448:"清水区",710449:"大甲区",710450:"外埔区",710451:"大安区",710499:"其它区",710507:"金沙镇",710508:"金湖镇",710509:"金宁乡",710510:"金城镇",710511:"烈屿乡",710512:"乌坵乡",710614:"南投市",710615:"中寮乡",710616:"草屯镇",710617:"国姓乡",710618:"埔里镇",710619:"仁爱乡",710620:"名间乡",710621:"集集镇",710622:"水里乡",710623:"鱼池乡",710624:"信义乡",710625:"竹山镇",710626:"鹿谷乡",710701:"仁爱区",710702:"信义区",710703:"中正区",710704:"中山区",710705:"安乐区",710706:"暖暖区",710707:"七堵区",710799:"其它区",710801:"东区",710802:"北区",710803:"香山区",710899:"其它区",710901:"东区",710902:"西区",710999:"其它区",711130:"万里区",711132:"板桥区",711133:"汐止区",711134:"深坑区",711135:"石碇区",711136:"瑞芳区",711137:"平溪区",711138:"双溪区",711139:"贡寮区",711140:"新店区",711141:"坪林区",711142:"乌来区",711143:"永和区",711144:"中和区",711145:"土城区",711146:"三峡区",711147:"树林区",711148:"莺歌区",711149:"三重区",711150:"新庄区",711151:"泰山区",711152:"林口区",711153:"芦洲区",711154:"五股区",711155:"八里区",711156:"淡水区",711157:"三芝区",711158:"石门区",711287:"宜兰市",711288:"头城镇",711289:"礁溪乡",711290:"壮围乡",711291:"员山乡",711292:"罗东镇",711293:"三星乡",711294:"大同乡",711295:"五结乡",711296:"冬山乡",711297:"苏澳镇",711298:"南澳乡",711299:"钓鱼台",711387:"竹北市",711388:"湖口乡",711389:"新丰乡",711390:"新埔镇",711391:"关西镇",711392:"芎林乡",711393:"宝山乡",711394:"竹东镇",711395:"五峰乡",711396:"横山乡",711397:"尖石乡",711398:"北埔乡",711399:"峨眉乡",711414:"中坜区",711415:"平镇区",711417:"杨梅区",711418:"新屋区",711419:"观音区",711420:"桃园区",711421:"龟山区",711422:"八德区",711423:"大溪区",711425:"大园区",711426:"芦竹区",711487:"中坜市",711488:"平镇市",711489:"龙潭乡",711490:"杨梅市",711491:"新屋乡",711492:"观音乡",711493:"桃园市",711494:"龟山乡",711495:"八德市",711496:"大溪镇",711497:"复兴乡",711498:"大园乡",711499:"芦竹乡",711520:"头份市",711582:"竹南镇",711583:"头份镇",711584:"三湾乡",711585:"南庄乡",711586:"狮潭乡",711587:"后龙镇",711588:"通霄镇",711589:"苑里镇",711590:"苗栗市",711591:"造桥乡",711592:"头屋乡",711593:"公馆乡",711594:"大湖乡",711595:"泰安乡",711596:"铜锣乡",711597:"三义乡",711598:"西湖乡",711599:"卓兰镇",711736:"员林市",711774:"彰化市",711775:"芬园乡",711776:"花坛乡",711777:"秀水乡",711778:"鹿港镇",711779:"福兴乡",711780:"线西乡",711781:"和美镇",711782:"伸港乡",711783:"员林镇",711784:"社头乡",711785:"永靖乡",711786:"埔心乡",711787:"溪湖镇",711788:"大村乡",711789:"埔盐乡",711790:"田中镇",711791:"北斗镇",711792:"田尾乡",711793:"埤头乡",711794:"溪州乡",711795:"竹塘乡",711796:"二林镇",711797:"大城乡",711798:"芳苑乡",711799:"二水乡",711982:"番路乡",711983:"梅山乡",711984:"竹崎乡",711985:"阿里山乡",711986:"中埔乡",711987:"大埔乡",711988:"水上乡",711989:"鹿草乡",711990:"太保市",711991:"朴子市",711992:"东石乡",711993:"六脚乡",711994:"新港乡",711995:"民雄乡",711996:"大林镇",711997:"溪口乡",711998:"义竹乡",711999:"布袋镇",712180:"斗南镇",712181:"大埤乡",712182:"虎尾镇",712183:"土库镇",712184:"褒忠乡",712185:"东势乡",712186:"台西乡",712187:"仑背乡",712188:"麦寮乡",712189:"斗六市",712190:"林内乡",712191:"古坑乡",712192:"莿桐乡",712193:"西螺镇",712194:"二仑乡",712195:"北港镇",712196:"水林乡",712197:"口湖乡",712198:"四湖乡",712199:"元长乡",712451:"崁顶乡",712467:"屏东市",712468:"三地门乡",712469:"雾台乡",712470:"玛家乡",712471:"九如乡",712472:"里港乡",712473:"高树乡",712474:"盐埔乡",712475:"长治乡",712476:"麟洛乡",712477:"竹田乡",712478:"内埔乡",712479:"万丹乡",712480:"潮州镇",712481:"泰武乡",712482:"来义乡",712483:"万峦乡",712484:"莰顶乡",712485:"新埤乡",712486:"南州乡",712487:"林边乡",712488:"东港镇",712489:"琉球乡",712490:"佳冬乡",712491:"新园乡",712492:"枋寮乡",712493:"枋山乡",712494:"春日乡",712495:"狮子乡",712496:"车城乡",712497:"牡丹乡",712498:"恒春镇",712499:"满州乡",712584:"台东市",712585:"绿岛乡",712586:"兰屿乡",712587:"延平乡",712588:"卑南乡",712589:"鹿野乡",712590:"关山镇",712591:"海端乡",712592:"池上乡",712593:"东河乡",712594:"成功镇",712595:"长滨乡",712596:"金峰乡",712597:"大武乡",712598:"达仁乡",712599:"太麻里乡",712686:"花莲市",712687:"新城乡",712688:"太鲁阁",712689:"秀林乡",712690:"吉安乡",712691:"寿丰乡",712692:"凤林镇",712693:"光复乡",712694:"丰滨乡",712695:"瑞穗乡",712696:"万荣乡",712697:"玉里镇",712698:"卓溪乡",712699:"富里乡",712794:"马公市",712795:"西屿乡",712796:"望安乡",712797:"七美乡",712798:"白沙乡",712799:"湖西乡",712896:"南竿乡",712897:"北竿乡",712898:"东引乡",712899:"莒光乡",810101:"中西区",810102:"湾仔区",810103:"东区",810104:"南区",810201:"九龙城区",810202:"油尖旺区",810203:"深水埗区",810204:"黄大仙区",810205:"观塘区",810301:"北区",810302:"大埔区",810303:"沙田区",810304:"西贡区",810305:"元朗区",810306:"屯门区",810307:"荃湾区",810308:"葵青区",810309:"离岛区",820101:"澳门半岛",820201:"离岛"}}};var Gi={name:"DomesticCity",components:{Tabs:A,Tab:C},model:{prop:"selId",event:"input"},props:{area:{type:Object,default:{}},selId:{type:String,default:""},viewType:{type:String,default:""},selectLevel:{type:[String,Number],default:"3"}},computed:{level(){return parseInt(this.selectLevel)}},data:()=>({active:0,cityTab:[],mapArea:{},tag:0}),created(){1===this.level?this.cityTab=[{name:"请选择省份",id:""}]:2===this.level?this.cityTab=[{name:"请选择",id:""},{name:"请选择",id:""}]:this.cityTab=[{name:"请选择",id:""},{name:"请选择",id:""},{name:"请选择",id:""}]},mounted(){this.active=0,0===this.active&&(this.mapArea=this.area.province_list),this.level>1&&this.echo()},methods:{disabled(e){try{return!(0===e||0!==e&&""!==this.cityTab[e-1].id)}catch(e){return!1}},confirm(){let e=[],n="";this.cityTab.forEach(((n,t)=>{""===n.id?e.push({code:"",id:"",name:""}):e.push({code:n.id,id:n.id,name:n.name})}));for(let t=0;t<e.length;t++)""===e[t].code&&""===e[t].id||(n=e[t].code||e[t].id);this.$emit("confirm",e),this.$emit("input",n)},reset(e){0===e?this.cityTab[0].id.substring(0,3)!==this.cityTab[1].id.substring(0,3)&&(this.cityTab[1].id="",this.cityTab[1].name="请选择",this.cityTab[2]&&(this.cityTab[2].id="",this.cityTab[2].name="请选择")):1===e&&this.cityTab[2]&&this.cityTab[1].id.substring(0,4)!==this.cityTab[2].id.substring(0,4)&&(this.cityTab[2].id="",this.cityTab[2].name="请选择")},getCity(){let e=this;if(this.$nextTick((()=>{e.$refs.main.scrollTop=0})),0===this.active){if(this.mapArea=this.area.province_list,"1"===this.selectLevel||1===this.selectLevel)return;this.reset(this.active)}else if(1===this.active){console.log("省级id",this.cityTab[0].id),this.mapArea={};for(let e in this.area.city_list)e.substring(0,2)===this.cityTab[0].id.substring(0,2)&&(this.mapArea[e]=this.area.city_list[e]);this.reset(this.active)}else if(2===this.active){console.log("市级id",this.cityTab[1].id),this.mapArea={};for(let e in this.area.county_list)e.substring(0,4)===this.cityTab[1].id.substring(0,4)&&(this.mapArea[e]=this.area.county_list[e])}},selItem(e,n){console.log("选择的item",e),console.log("选择的id",n),this.cityTab[this.active].id=n,this.cityTab[this.active].name=e,1===this.level||2===this.level&&1===this.active||(this.reset(this.active),console.log(this.active),setTimeout((()=>{this.active>=1&&this.cityTab[2]?this.active=2:this.active=this.active+1,this.getCity()}),300))},echo(){if(this.tag=0,3===this.level)for(let e in this.area.county_list)if(e===this.selId){this.tag=1,this.cityTab[2].name=this.area.county_list[e],this.cityTab[2].id=e;for(let e in this.area.city_list)if(e.substring(0,4)===this.selId.substring(0,4)){this.cityTab[1].name=this.area.city_list[e],this.cityTab[1].id=e;for(let n in this.area.province_list)n.substring(0,2)===e.substring(0,2)&&(this.cityTab[0].name=this.area.province_list[n],this.cityTab[0].id=n)}}for(let e in this.area.city_list)if(e===this.selId){this.tag=1,this.cityTab[1].name=this.area.city_list[e],this.cityTab[1].id=e;for(let n in this.area.province_list)n.substring(0,2)===e.substring(0,2)&&(this.cityTab[0].name=this.area.province_list[n],this.cityTab[0].id=n)}for(let e in this.area.province_list)e===this.selId&&(this.tag=1,this.cityTab[0].name=this.area.province_list[e],this.cityTab[0].id=e);0===this.tag&&(this.active=0)}},watch:{selId:{handler(e,n){console.log("obj changed"),this.active=0,0===this.active&&(this.mapArea=this.area.province_list),this.level>1&&this.echo(),console.log(this.city,"this.city")},deep:!0}}};const Ji=Gi;var Zi=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"containers"},[t("div",{staticClass:"headers"},[t("div",{style:{width:1===e.level?"100%":"70%"}},[t("Tabs",{attrs:{color:"#1989fa","title-inactive-color":"#333333","title-active-color":"#0084ff"},on:{click:e.getCity},model:{value:e.active,callback:function(n){e.active=n},expression:"active"}},e._l(e.cityTab,(function(n,i){return t("Tab",{key:i,attrs:{title:n.name,disabled:e.disabled(i)}})})),1)],1),e._v(" "),e.cityTab.length>1&&""===e.cityTab[1].id?t("div",{staticClass:"noBtn"},[e._v("确定")]):t("div",{staticClass:"okBtn",on:{click:e.confirm}},[e._v("确定")])]),e._v(" "),t("div",{ref:"main",staticClass:"bodys",class:{bodyView:"all"===e.viewType}},[2===e.active?t("div",{class:{selColor:""===e.cityTab[e.active].id},staticStyle:{padding:"10px 20px"},on:{click:function(n){return e.selItem("请选择","")}}},[e._v("\n            请选择\n        ")]):e._e(),e._v(" "),e._l(e.mapArea,(function(n,i){return t("div",{key:i,class:{selColor:e.cityTab[e.active].id===i},staticStyle:{padding:"10px 20px"},on:{click:function(t){return e.selItem(n,i)}}},[e._v("\n            "+e._s(n)+"\n        ")])}))],2)])};Zi._withStripped=!0;const Xi={name:"FieldAddress",components:{Field:d,Area:S,Popup:m,DomesticCity:Pi({render:Zi,staticRenderFns:[]},(function(e){e&&e("data-v-14ad888e_0",{source:".containers[data-v-14ad888e] {\n  width: 100%;\n  background: #fff;\n  display: flex;\n  flex-direction: column;\n}\n.containers .headers[data-v-14ad888e] {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100vw;\n}\n.containers .bodys[data-v-14ad888e] {\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  overflow-y: scroll;\n  border-top: 1px solid #eee;\n  font-size: 14px;\n  height: 50vh;\n}\n.containers .bodyView[data-v-14ad888e] {\n  height: 80vh;\n}\n.selColor[data-v-14ad888e] {\n  color: #0084ff;\n}\n.okBtn[data-v-14ad888e] {\n  margin-right: 20px;\n  font-size: 14px;\n  color: #0084ff;\n  position: fixed;\n  right: 0;\n}\n.noBtn[data-v-14ad888e] {\n  margin-right: 20px;\n  font-size: 14px;\n  color: #888;\n}\n",map:{version:3,sources:["DomesticCity.vue"],names:[],mappings:"AAAA;EACE,WAAW;EACX,gBAAgB;EAChB,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,8BAA8B;EAC9B,YAAY;AACd;AACA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,kBAAkB;EAClB,0BAA0B;EAC1B,eAAe;EACf,YAAY;AACd;AACA;EACE,YAAY;AACd;AACA;EACE,cAAc;AAChB;AACA;EACE,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,eAAe;EACf,QAAQ;AACV;AACA;EACE,kBAAkB;EAClB,eAAe;EACf,WAAW;AACb",file:"DomesticCity.vue",sourcesContent:[".containers {\n  width: 100%;\n  background: #fff;\n  display: flex;\n  flex-direction: column;\n}\n.containers .headers {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100vw;\n}\n.containers .bodys {\n  width: 100vw;\n  display: flex;\n  flex-direction: column;\n  overflow-y: scroll;\n  border-top: 1px solid #eee;\n  font-size: 14px;\n  height: 50vh;\n}\n.containers .bodyView {\n  height: 80vh;\n}\n.selColor {\n  color: #0084ff;\n}\n.okBtn {\n  margin-right: 20px;\n  font-size: 14px;\n  color: #0084ff;\n  position: fixed;\n  right: 0;\n}\n.noBtn {\n  margin-right: 20px;\n  font-size: 14px;\n  color: #888;\n}\n"]},media:void 0})}),Ji,"data-v-14ad888e",false,undefined,!1,$i,void 0,void 0)},props:{currentSelect:{type:[Object,String,Number,Array],default:()=>{}},validateRules:{type:Object,default:()=>{}},disabled:{type:Boolean,default:!1},isEnd:{type:Boolean,default:!1},remark:{type:String,default:""},scene:{type:[String,Number],default:"1"},selectLevel:{type:[String,Number],default:3},showProvinceName:{type:Boolean,default:!1}},data(){return{show:!1,addressList:Ki.AreaList,rules:Ti.exports.cloneDeep(this.validateRules)}},computed:{fieldVal(){let e="";return e="string"==typeof this.currentSelect?this.currentSelect:(this.currentSelect||{}).name||"",e}},inheritAttrs:!1,model:{prop:"currentSelect"},watch:{currentSelect:{handler(){this.$emit("onSelect",this.currentSelect)},deep:!0}},methods:{onAddress(){2===this.scene||this.disabled||(this.show=!0)},onConfirm(e){console.log("fieldAddressConfirmValue:",e),this.show=!1;const n=this.selectLevel+"";let t="object"==typeof e[0]?e[0].name:"",i="object"==typeof e[1]&&parseInt(n)>1&&e[1].name?e[1].name:"",a="object"==typeof e[2]&&parseInt(n)>2&&e[2].name?e[2].name:"",r="",o="object"==typeof e[0]?e[0].id:"",s="object"==typeof e[1]&&parseInt(n)>1&&e[1].id?","+e[1].id:"",c="object"==typeof e[2]&&parseInt(n)>2&&e[2].id?","+e[2].id:"",l="";"1"===n?(r=t,l=o):(r=i+a,r=this.showProvinceName&&t!==i?t+r:r,l=o+s+c);let p={name:r,id:l};this.$emit("onCell",p),this.$emit("input",p)},onDelete(){let e={name:"",id:""};this.$emit("onTree",e),this.$emit("input",e)}},mounted(){},destroyed(){}};var Qi=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("ValidationProvider",{attrs:{name:e.$attrs.label,rules:e.validateRules},scopedSlots:e._u([{key:"default",fn:function(n){var i=n.errors;return[t("Field",e._b({class:e.isEnd?"bot-bor":"",attrs:{readonly:!0,"is-link":!e.disabled&&2!==e.scene,"error-message":i[0],value:e.fieldVal,"error-message-align":"right","input-align":"right"},on:{click:e.onAddress},scopedSlots:e._u([{key:"label",fn:function(){return[t("div",{staticClass:"van-cell__title van-field__label"},[t("span",[e._v(e._s(e.$attrs.label))])])]},proxy:!0}],null,!0)},"Field",e.$attrs,!1),[e._v(" "),2!==e.scene&&!e.disabled&&e.fieldVal?t("div",{attrs:{slot:"button"},on:{click:function(n){return n.stopPropagation(),e.onDelete(n)}},slot:"button"},[t("span",{staticClass:"txt-all"},[t("i",{staticClass:"iconfont icon-shanchu"})])]):e._e()])]}}])}),e._v(" "),t("Popup",{attrs:{position:"bottom","get-container":"#app"},model:{value:e.show,callback:function(n){e.show=n},expression:"show"}},[t("DomesticCity",{attrs:{area:e.addressList,selectLevel:e.selectLevel},on:{confirm:e.onConfirm}})],1)],1)};Qi._withStripped=!0;const ea=Pi({render:Qi,staticRenderFns:[]},(function(e){e&&e("data-v-34d4a8d5_0",{source:".bot-bor {\n  border-bottom: 0px;\n}\n\n/*# sourceMappingURL=FieldAddress.vue.map */",map:{version:3,sources:["D:\\ZJ_Project\\jsonvue\\src\\FieldAdress\\FieldAddress.vue","FieldAddress.vue"],names:[],mappings:"AAkKA;EACA,kBAAA;ACjKA;;AAEA,2CAA2C",file:"FieldAddress.vue",sourcesContent:['\x3c!--地址选择--\x3e\r\n<template>\r\n    <div>\r\n        <ValidationProvider :name="$attrs.label" :rules="validateRules" v-slot="{errors}">\r\n            <Field\r\n                    v-bind="$attrs"\r\n                    :readonly="true"\r\n                    :is-link="!disabled&&scene!==2"\r\n                    :error-message="errors[0]"\r\n                    :value="fieldVal"\r\n                    @click="onAddress"\r\n                    :error-message-align="\'right\'"\r\n                    :input-align="\'right\'"\r\n                    :class="isEnd?\'bot-bor\':\'\'"\r\n            >\r\n                <template #label>\r\n                    <div class="van-cell__title van-field__label" >\r\n                        <span>{{$attrs.label}}</span>\r\n                    </div>\r\n                </template>\r\n                <div v-if=" scene!==2 && !disabled && fieldVal"  slot="button" @click.stop="onDelete">\r\n                      <span class="txt-all" >\r\n                        <i class="iconfont icon-shanchu"></i>\r\n                      </span>\r\n                </div>\r\n            </Field>\r\n        </ValidationProvider>\r\n        <Popup\r\n            v-model="show"\r\n            position="bottom"\r\n            get-container="#app"\r\n        >\r\n            <DomesticCity :area="addressList" :selectLevel="selectLevel"  @confirm="onConfirm"></DomesticCity>\r\n        </Popup>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {Field,Area,Popup} from \'vant\'\r\n    import {citys} from "../utils/citys";\r\n    import DomesticCity from "./DomesticCity.vue"\r\n    import {cloneDeep} from \'lodash\'\r\n    export default {\r\n        name:\'FieldAddress\',\r\n        components: {Field,Area,Popup,DomesticCity},\r\n        props: {\r\n        currentSelect: {\r\n          type:[Object, String, Number, Array],\r\n          default:()=>{}\r\n        },\r\n        validateRules:{\r\n            type:Object,\r\n            default:()=>{}\r\n        },\r\n        disabled:{\r\n          type:Boolean,\r\n          default:false\r\n        },\r\n        isEnd:{\r\n          type: Boolean,\r\n          default: false\r\n        },\r\n        remark:{\r\n          type:String,\r\n          default:\'\'\r\n        },\r\n        //组件状态 0 创建 1 编辑 2 详情\r\n        scene:{\r\n          type:[String,Number],\r\n          default:\'1\'\r\n        },\r\n        //省市县选择级别 1(只能选择省),2（只能选择市）,3（只能选择县）\r\n        selectLevel:{\r\n          type:[String,Number],\r\n          default:3\r\n        },\r\n        //省市县选择级别为2或者3时 是否显示省份名称默认显示\r\n        showProvinceName:{\r\n            type:Boolean,\r\n            default:false\r\n        }\r\n\r\n      },\r\n        data() {\r\n            return {\r\n                show:false,\r\n                addressList:citys.AreaList,\r\n                rules:cloneDeep(this.validateRules)\r\n            };\r\n        },\r\n        computed: {\r\n            fieldVal() {\r\n                /* 字段选择的name */\r\n                let name = "";\r\n                if (typeof this.currentSelect == "string") {\r\n                    name = this.currentSelect;\r\n                } else {\r\n                    name = (this.currentSelect || {}).name || "";\r\n                }\r\n                return name;\r\n            }\r\n        },\r\n        inheritAttrs: false,\r\n        model: {\r\n            prop: "currentSelect"\r\n        },\r\n        watch: {\r\n            currentSelect: {\r\n                handler() {\r\n                    /* 监听值变化，触发返回 */\r\n                    this.$emit("onSelect", this.currentSelect);\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        methods: {\r\n            onAddress() {\r\n                if (this.scene === 2 || this.disabled) {\r\n                    return;\r\n                }\r\n                this.show = true\r\n               },\r\n            onConfirm(value){\r\n               console.log(\'fieldAddressConfirmValue:\',value)\r\n               this.show=false\r\n               const level = this.selectLevel + ""\r\n               let provinceName = typeof value[0] === \'object\' ? value[0].name : \'\'\r\n               let cityName = typeof value[1] === \'object\'&& parseInt(level) > 1 && value[1].name ? value[1].name: \'\'\r\n               let distinctName = typeof value[2] === \'object\' &&  parseInt(level) > 2 && value[2].name ? value[2].name: \'\'\r\n               let name = ""\r\n\r\n\r\n               let provinceCode = typeof value[0] === \'object\' ? value[0].id : \'\'\r\n               let cityCode = typeof value[1] === \'object\' && parseInt(level) > 1 && value[1].id ? ","+value[1].id : \'\'\r\n               let distinctCode = typeof value[2] === \'object\' &&  parseInt(level) > 2  && value[2].id ? ","+value[2].id : \'\'\r\n\r\n               let id = ""\r\n               if(level === \'1\'){\r\n                 name = provinceName\r\n                 id = provinceCode\r\n               }else{\r\n                 name = cityName+distinctName\r\n                 name = ( this.showProvinceName && provinceName !== cityName ) ? provinceName + name : name\r\n                 id = provinceCode+cityCode+distinctCode\r\n               }\r\n               let selectAddress = { name, id }\r\n               this.$emit(\'onCell\',selectAddress)\r\n               this.$emit(\'input\',selectAddress)\r\n            },\r\n            onDelete(){\r\n                let name =\'\'\r\n                let id =\'\'\r\n                let selectAddress = { name,id }\r\n                this.$emit(\'onTree\',selectAddress)\r\n                this.$emit(\'input\',selectAddress)\r\n            },\r\n        },\r\n        mounted() {},\r\n        destroyed() {}\r\n    };\r\n<\/script>\r\n<style lang=\'scss\'>\r\n    .bot-bor{\r\n        border-bottom: 0px;\r\n    }\r\n</style>\r\n',".bot-bor {\n  border-bottom: 0px;\n}\n\n/*# sourceMappingURL=FieldAddress.vue.map */"]},media:void 0})}),Xi,undefined,false,undefined,!1,$i,void 0,void 0);ea.install=function(e){e.component(ea.name,ea)};var na={name:"FieldCheckBoxSelect",components:{Popup:m,Field:d,Icon:v,Search:f,RadioGroup:x,Radio:y,Cell:b,PullRefresh:k,List:j,Button:T,Loading:E},data(){return{show:!1,searchVal:"",selectData:[],result:"",loading:!0,pullRefresh:!1,dataLoading:!1,finished:!1,currentPage:1,pageSize:30,rules:Ti.exports.cloneDeep(this.validateRules)}},inheritAttrs:!1,model:{prop:"currentSelect"},props:{currentSelect:[Object,Array,String,Number],postData:{type:[String,Object],default:()=>({pageInfo:{}})},postUrl:String,scene:{type:[String,Number],default:1},validateRules:Object,configName:{type:String,default:""},disabled:Boolean,addAble:{type:Boolean,default:!1},isSecondPage:Boolean,isEnd:{type:Boolean,default:!1},isType:{type:String,default:""},remark:{type:String,default:""},useItemSlot:{type:Boolean,default:!1},refreshWhenClick:{type:Boolean,default:!1}},computed:{showDeleteIcon(){return 2!==this.scene&&!this.disabled&&this.fieldVal},filterListShow(){return e=>{let n=!0;return this.addNewParams.FieldTree&&this.addNewParams.FieldTree.serialNumber.forEach((t=>{e.name===t&&(n=!1)})),n}},showNoResult(){let e=!1===this.pullRefresh&&this.addAble&&!Ti.exports.isEmpty(this.searchVal)&&0===this.selectData.length;return console.log("showAdd",e),e},searchTree(){return this.toTree(this.selectData)},fieldId(){let e="";return e="string"==typeof this.currentSelect?this.currentSelect:this.currentSelect.id||"",e},fieldVal(){let e="";return e="string"==typeof this.currentSelect?this.currentSelect:(this.currentSelect||{}).name||"",e},fieldLabel(){return this.$attrs.label}},methods:{enterCardSearch(){this.$router.push({path:"/CardRecordSearch"})},onClose(){this.show=!1,this.isSecondPage||this.$nativeApi&&this.$nativeApi.CYB_AppGestureIfForbid({isForbid:1})},onShow(){this.show=!0,this.isSecondPage||this.$nativeApi&&this.$nativeApi.CYB_AppGestureIfForbid({isForbid:0})},onAddHandle(){this.$emit("input",{name:this.searchVal}),this.onClose()},onDelete(){this.$emit("onTree",{id:"",name:"",isDelete:!0}),this.$emit("input",{id:"",name:""})},onSearch(){this.onRefresh()},onLoad(e=!1){this.dataLoading=!0;let n=this.postData;n.pageInfo.currentPage=this.currentPage,n.name=this.searchVal,console.log("itemSearchData",n),this.$get(this.postUrl).then((n=>{console.log("reps",n),(n=n.data).info=n.result||n.list||[];let t=[];t=n.info instanceof Array?n.info:n.records instanceof Array?n.records:n.info.records;let i=t||[];this.selectData=e?i:this.selectData.concat(i),this.loading=!1,this.dataLoading=!1,this.pullRefresh=!1,this.currentPage++,(i||[]).length<this.pageSize&&(this.finished=!0)})).catch((e=>{console.log("err",e),this.loading=!1,this.finished=!0,this.dataLoading=!1,this.pullRefresh=!1}))},onRefresh(){this.currentPage=1,this.pullRefresh=!0,this.finished=!1,this.selectData=[],this.onLoad(!0)},filterTree(e){return function e(n,t){if(!n||!n.length)return[];const i=[];for(const a of n)t(a)?(i.push(a),a.children=e(a.children,t)):i.push(...e(a.children,t));return i}(e,(e=>{let n=(e.name||"")+"";n=n.toLowerCase();let t=(this.searchVal+"").trim();return t=t.toLowerCase(),n.indexOf(t)>-1}))},toTree(e){let n=Ti.exports.cloneDeep(e),t=[];if(!Array.isArray(n))return t;n.forEach((e=>{delete e.children}));let i={};return n.forEach((e=>{i[e.id]=e})),n.forEach((e=>{let n=i[e.upOrgId];n?(n.isPid=!0,(n.children||(n.children=[])).push(e)):t.push(e)})),t},toggle(e){this.result=e,this.onConfirm()},onClick(){2===this.scene||this.disabled||(this.$emit("paramsChange"),this.result=this.currentSelect.id,this.onShow(),this.postUrl&&(this.refreshWhenClick||Array.isArray(this.selectData)&&0===this.selectData.length)&&setTimeout((()=>{this.onRefresh()}),300))},onConfirm(){this.onClose();let e="";this.result&&this.selectData.every((n=>n.id!==this.result||(e={...n},!1))),this.$emit("onTree",e),this.$emit("input",e)}},watch:{show(){this.searchVal=""},currentSelect:{handler(e){e&&e.chain&&this.$emit("onTree",this.currentSelect)},deep:!0}}};const ta=na;var ia=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("ValidationProvider",{attrs:{name:e.fieldLabel,rules:e.rules},scopedSlots:e._u([{key:"default",fn:function(n){var i=n.errors;return[t("Field",e._b({class:e.isEnd?"bot-bor":"",attrs:{readonly:!0,value:e.fieldVal,clearable:"","error-message":i[0],"error-message-align":"right","input-align":"right"},on:{click:e.onClick},scopedSlots:e._u([{key:"label",fn:function(){return[t("div",{staticClass:"van-cell__title van-field__label"},[t("span",[e._v(e._s(e.$attrs.label))])])]},proxy:!0}],null,!0)},"Field",e.$attrs,!1),[e._v(" "),t("div",{staticStyle:{display:"flex","align-items":"center"},attrs:{slot:"button"},slot:"button"},[e.showDeleteIcon?t("div",{on:{click:function(n){return n.stopPropagation(),e.onDelete(n)}}},[t("span",{staticClass:"txt-all"},[t("i",{staticClass:"iconfont icon-shanchu"})])]):e._e(),e._v(" "),2===e.scene||e.disabled?e._e():t("span",{staticClass:"txt-all",staticStyle:{"padding-left":"2px"}},[t("Icon",{attrs:{name:"arrow"}})],1)])]),e._v(" "),e._t("tip")]}}],null,!0)}),e._v(" "),t("Popup",{style:{width:"quota"===e.isType?"100%":"90%",height:"100%"},attrs:{position:"right","get-container":"#app"},model:{value:e.show,callback:function(n){e.show=n},expression:"show"}},[t("div",{staticClass:"jsonvue-page"},[t("div",{staticClass:"select-hd van-hairline--bottom"},[t("div",{staticClass:"inline-flex flex-middle",on:{click:e.onClose}},[t("Icon",{attrs:{name:"arrow-left"}}),t("span",[e._v("返回")])],1),e._v(" "),t("span",{staticClass:"van-info-title"},[e._v("请选择"+e._s(e.fieldLabel))]),e._v(" "),t("span",[e._v(" ")])]),e._v(" "),t("Search",{attrs:{clearable:"","show-action":"",placeholder:"请输入搜索关键词",background:"#f5f5f5"},on:{input:e.onSearch,clear:e.onRefresh},model:{value:e.searchVal,callback:function(n){e.searchVal=n},expression:"searchVal"}}),e._v(" "),e.loading?t("Loading",{staticClass:"jsonvue-loading1 flex van-row--justify-center"}):t("div",{staticClass:"jsonvue-content"},[e.showNoResult?t("div",{staticClass:"flex-center flex-middle flex1",staticStyle:{height:"100%"}},[t("div",{staticClass:"jsonvue-btn inner ml10 mr10 "},[t("div",{staticClass:"on-result"},[e._v("搜索结果为空")]),e._v(" "),t("div",{staticClass:"flex"},[t("Button",{staticClass:"flex1",attrs:{plain:"",type:"info"},on:{click:e.onAddHandle}},[t("span",[e._v("+添加"+e._s(e.$attrs.label))])])],1)])]):t("RadioGroup",{model:{value:e.result,callback:function(n){e.result=n},expression:"result"}},[t("ul",{staticClass:"select-list"},[t("PullRefresh",{on:{refresh:e.onRefresh},model:{value:e.pullRefresh,callback:function(n){e.pullRefresh=n},expression:"pullRefresh"}},[t("List",{attrs:{finished:e.finished},on:{load:e.onLoad},model:{value:e.dataLoading,callback:function(n){e.dataLoading=n},expression:"dataLoading"}},e._l(e.searchTree,(function(n,i){return t("li",{key:i},[t("div",{staticClass:"level1",on:{click:function(t){return t.stopPropagation(),e.toggle(n.id)}}},[t("Cell",{attrs:{clickable:"",title:n.name}},[e.useItemSlot?e._t("itemSlot",null,{slot:"title",row:n}):e._e(),e._v(" "),t("Radio",{attrs:{slot:"right-icon",name:n.id},on:{click:function(e){}},slot:"right-icon"})],2)],1)])})),0)],1),e._v(" "),"cardRecordConfig"===e.configName?t("div",{staticClass:"card-btn-view"},[t("Button",{attrs:{type:"info",size:"small"},on:{click:e.enterCardSearch}},[e._v("流水查询")])],1):e._e()],1)])],1)],1)])],1)};ia._withStripped=!0;const aa=Pi({render:ia,staticRenderFns:[]},(function(e){e&&e("data-v-116c7b8a_0",{source:".card-btn-view[data-v-116c7b8a] {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  padding: 10px 10px 20px 10px;\n}\n.on-result[data-v-116c7b8a] {\n  display: flex;\n  font-size: 20px;\n  margin-bottom: 50px;\n  justify-content: center;\n  align-items: center;\n}\n.jsonvue-page[data-v-116c7b8a] {\n  display: flex;\n  flex-direction: column;\n}\n.select-hd[data-v-116c7b8a] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 20px;\n  font-size: 15px;\n  background-color: #fff;\n}\n.van-info-title[data-v-116c7b8a] {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 60%;\n  white-space: nowrap;\n  text-align: center;\n}\n.van-search__content[data-v-116c7b8a] {\n  background-color: #fff;\n}\n.bot-bor[data-v-116c7b8a] {\n  border-bottom: 0px;\n}\n.quota[data-v-116c7b8a] .van-field__label {\n  width: 0px;\n  text-align: left;\n}\n.quota[data-v-116c7b8a] .van-cell {\n  background: #eee;\n  border-radius: 5px;\n  width: 99%;\n}\n.tip-info[data-v-116c7b8a] {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  padding-right: 20px;\n  padding-bottom: 10px;\n}\n",map:{version:3,sources:["FieldCheckBoxSelect.vue"],names:[],mappings:"AAAA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,4BAA4B;AAC9B;AACA;EACE,aAAa;EACb,eAAe;EACf,mBAAmB;EACnB,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,kBAAkB;EAClB,eAAe;EACf,sBAAsB;AACxB;AACA;EACE,gBAAgB;EAChB,uBAAuB;EACvB,UAAU;EACV,mBAAmB;EACnB,kBAAkB;AACpB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,UAAU;EACV,gBAAgB;AAClB;AACA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,UAAU;AACZ;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,yBAAyB;EACzB,mBAAmB;EACnB,oBAAoB;AACtB",file:"FieldCheckBoxSelect.vue",sourcesContent:[".card-btn-view {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  padding: 10px 10px 20px 10px;\n}\n.on-result {\n  display: flex;\n  font-size: 20px;\n  margin-bottom: 50px;\n  justify-content: center;\n  align-items: center;\n}\n.jsonvue-page {\n  display: flex;\n  flex-direction: column;\n}\n.select-hd {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 20px;\n  font-size: 15px;\n  background-color: #fff;\n}\n.van-info-title {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 60%;\n  white-space: nowrap;\n  text-align: center;\n}\n.van-search__content {\n  background-color: #fff;\n}\n.bot-bor {\n  border-bottom: 0px;\n}\n.quota /deep/ .van-field__label {\n  width: 0px;\n  text-align: left;\n}\n.quota /deep/ .van-cell {\n  background: #eee;\n  border-radius: 5px;\n  width: 99%;\n}\n.tip-info {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  padding-right: 20px;\n  padding-bottom: 10px;\n}\n"]},media:void 0})}),ta,"data-v-116c7b8a",false,undefined,!1,$i,void 0,void 0);aa.install=function(e){e.component(aa.name,aa)};var ra={name:"DefaultView",components:{Icon:v},props:{list:{type:Array,default:()=>[]}},data:()=>({listShow:[]}),methods:{onEdit(e){this.$emit("commonEdit",e)},getFieldValueShow(e,n){return e instanceof Object?e.name||"":"date"===n&&e?this.$options.filters.dtformat(e,"yyyy-MM-dd"):e||""}},watch:{list:{handler(e){this.listShow=e.map((e=>({list:e,expand:!1})))},immediate:!0}}};const oa=ra;var sa=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",e._l(e.listShow,(function(n,i){return t("ul",{key:i,staticClass:"detail-list inner"},[t("li",{staticClass:"default-view-container"},[t("div",{staticClass:"hd"},[t("div",{staticClass:"li-page"},[t("span",{staticClass:"item"},[e._v(e._s(i+1))])])]),e._v(" "),t("div",{staticClass:"ft",class:{listH:!n.expand}},e._l(n.list,(function(n,a){return t("div",{key:a,on:{click:function(n){return e.onEdit(i)}}},[n.fieldType?t("div",{key:a,staticClass:"item"},[t("div",[n.required?t("span",{staticClass:"text-danger"},[e._v("*")]):t("span",[e._v(" ")]),e._v(" "),t("span",[e._v(e._s(n.label))])]),e._v(" "),t("span",[e._v(e._s(e.getFieldValueShow(n.fieldValue,n.fieldType)))])]):e._e()])})),0),e._v(" "),n.list.length>3?t("div",{staticClass:"drop-more",on:{click:function(e){n.expand=!n.expand}}},[n.expand?[t("span",[e._v("收缩")]),e._v(" "),t("Icon",{staticClass:"ml5",attrs:{name:"arrow-up"}})]:[t("span",[e._v("展开")]),e._v(" "),t("Icon",{staticClass:"ml5",attrs:{name:"arrow-down"}})]],2):e._e()])])})),0)};sa._withStripped=!0;const ca=Pi({render:sa,staticRenderFns:[]},(function(e){e&&e("data-v-512af01f_0",{source:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",map:{version:3,sources:[],names:[],mappings:"",file:"DefaultView.vue"},media:void 0})}),oa,"data-v-512af01f",false,undefined,!1,$i,void 0,void 0);var la={name:"ModuleFieldNoCrud",components:{FieldSelect:qi,FieldText:Oi,FieldCheckBoxSelect:aa,FieldDate:Hi,FieldAddress:ea,Field:d},props:{fieldList:{type:Array,default:()=>[]},moduleCode:{type:String,default:""},scene:{type:[Number,String],default:1},reimbType:{type:String,default:""},isSecondPage:{type:Boolean,default:!1}},data:()=>({moduleCreating:!0,moduleObj:{}}),methods:{onSinglePageSave(e,n,t){this.$emit("onSinglePageSave",e,n,t)},onSinglePageRemove(e,n,t){this.$emit("onSinglePageRemove",e,n,t)},onPageCell(e,n,t,i){this.$emit("onPageCell",e,n,t,i)},onPageBlur(e,n,t,i){this.$emit("onPageBlur",e,n,t,i)},onPageParamsChange(e,n,t){this.$emit("pageParamsChange",e,n,t)},onCell(e,n){this.$emit("onCell",e,n)},onBlur(e,n){this.$emit("onBlur",e,n)},onParamsChange(e){this.$emit("paramsChange",e)},onPageSave(e){this.$emit("onPageSave",e)},onAddProject(e,n){this.$emit("onAddProject",e,n)}},created(){},mounted(){},watch:{}};const pa=la;var ua=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",e._l(e.fieldList,(function(n,i){return t("div",{key:i},[n.formSlot?t("ValidationProvider",{attrs:{name:n.label,rules:{required:n.required}},scopedSlots:e._u([{key:"default",fn:function(i){var a=i.errors;return[t("Field",{attrs:{label:n.label,required:n.required,"error-message":a[0],"error-message-align":"right","input-align":"right"}},[t("template",{slot:"input"},[e._t(n.fieldName,null,{row:n})],2)],2)]}}],null,!0)}):n.hidden||"text"!==n.fieldType&&"textarea"!==n.fieldType&&"int"!==n.fieldType&&"amount"!==n.fieldType&&"number"!==n.fieldType?n.hidden||"select"!==n.fieldType?n.hidden||"address"!==n.fieldType?n.hidden||"date"!==n.fieldType?n.hidden||"tree"!==n.fieldType?e._e():t("FieldCheckBoxSelect",{attrs:{label:n.label||n.fieldName,scene:e.scene,"config-name":n.config.configName,"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:2!==e.scene?"请选择"+(n.label||n.fieldName):"","post-url":n.postUrl,"post-data":n.postData,disabled:n.disabled,"add-able":"true"===n.config.addAble||!1,isSecondPage:e.isSecondPage,reimbType:e.reimbType,remark:n.remark,"is-end":e.fieldList.length===i+1},on:{onTree:function(t){return e.onCell(t,n)},paramsChange:function(t){return e.onParamsChange(n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}}):t("FieldDate",{attrs:{scene:e.scene,label:n.label||n.fieldName,"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:1===e.scene?"请输入"+(n.label||n.fieldName):"","min-date":n.minDate?n.minDate:"1900-01-01","max-date":n.maxDate,disabled:n.disabled,getType:n.configName?n.configName:"YYYY-MM-DD",remark:n.remark,"is-end":e.fieldList.length===i+1},on:{onDatetime:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}}):t("FieldAddress",{attrs:{"validate-rules":2!==e.scene?{required:n.required}:{},required:n.required&&2!==e.scene,label:n.label||n.fieldName,placeholder:1===e.scene?"请选择"+(n.label||n.fieldName):"",disabled:n.disabled,remark:n.remark,"is-end":e.fieldList.length===i+1,"select-level":n.selectLevel,"show-province-name":n.showProvinceName},on:{onCell:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}}):t("FieldSelect",{attrs:{scene:e.scene,"get-type":n.getType,label:n.label||n.fieldName,"option-codes":n.optionCodes||[],"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:2!==e.scene?"请选择":"","post-url":n.postUrl,"post-data":n.postData,disabled:n.disabled,remark:n.remark,"is-end":e.fieldList.length===i+1},on:{paramsChange:function(t){return e.onParamsChange(n)},onSelect:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}}):t("FieldText",{attrs:{"validate-rules":2!==e.scene?Object.assign({},{required:n.required,ismoney:"amount"===n.fieldType&&(n.fieldValue,n.label||n.fieldName)},n.validateRules):{},readonly:n.disabled||2===e.scene,required:n.required&&2!==e.scene,placeholder:n.placeholder||(2!==e.scene?"请输入"+(n.label||n.fieldName):""),label:n.label||n.fieldName,type:n.textFieldType||"text",fieldType:n.fieldType||"text",maxlength:n.maxLength,"show-word-limit":"textarea"===n.fieldType&&2!==e.scene,autosize:"textarea"===n.fieldType,"error-message-align":"right","input-align":"right",remark:n.remark,"is-end":e.fieldList.length===i+1},on:{onText:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}})],1)})),0)};ua._withStripped=!0;const da=Pi({render:ua,staticRenderFns:[]},undefined,pa,undefined,false,undefined,!1,void 0,void 0,void 0);var ma={name:"MultiSecondPageEdit",components:{ModuleFieldNoCrud:da,Button:T,Icon:v,NavBar:P,Pagination:w},props:{label:String,isEdit:{type:Boolean,default:!0},pageList:{type:Array,default:()=>[]},activeIndex:0,moduleList:Array,reimbType:{type:String,default:""},currsentPages:{type:Number,default:0},addAble:{type:Boolean,default:!0},scene:{type:[String,Number],default:0},addNewParams:{type:Object,default:()=>{}}},data:()=>({currentPage:1,shows:!0}),watch:{currsentPages:{handler(e){this.currentPage=e},deep:!0,immediate:!0}},computed:{showStatus(){try{return(this.pageList[this.activeIndex]||[]).every((e=>"id"!==e.fieldHumpName||!e.fieldValue))}catch(e){return!0}},title(){return((this.$route||{}).params||{}).label||this.label},secondPageList(){return((this.$route||{}).params||{}).pageList||this.pageList},secondModuleList(){return((this.$route||{}).params||{}).moduleList||this.moduleList},secondIndex(){return((this.$route||{}).params||{}).activeIndex||this.activeIndex||0}},methods:{onAdd(){this.$dialog.confirm({title:"提示",message:"是否保存当前数据并新增?",confirmButtonText:"确定",cancelButtonText:"取消"}).then((()=>{this.onSave((()=>{let e=Ti.exports.cloneDeep(this.moduleList);this.pageList.push(e),this.$emit("onAdd",this.pageList.length-1)}))})).catch((e=>{}))},onCopy(){this.$dialog.confirm({title:"提示",message:"是否保存当前数据并复制?",confirmButtonText:"确定",cancelButtonText:"取消"}).then((()=>{this.onSave((()=>{this.$emit("onCopy")}))})).catch((e=>{}))},onDelete(){this.$dialog.confirm({title:"提示",message:"是否确认删除明细?",confirmButtonText:"确定",cancelButtonText:"取消"}).then((()=>{if(this.pageList.length<=1){let e=Ti.exports.cloneDeep(this.secondModuleList);this.pageList.splice(0,1,e)}else{this.currentPage>this.pageList.length-1&&(this.currentPage=this.currentPage-1),console.log("当前页：",this.currentPage)}this.$emit("onDelete",this.currentPage)})).catch((e=>{}))},onSaveAll(){this.onSave((()=>{this.$emit("onSaveAll")}))},onCancle(){this.$emit("onCancle")},onSave(e){this.$refs["fieldCell"+this.activeIndex][0].validate().then((n=>{console.log("子表单验证结果:",n),n?(this.$emit("onSave"),setTimeout((()=>{e()}))):this.$toast.fail({message:"请完善表单"})}))},onBack(){this.$emit("onBack")},onCell(e,n,t){this.$emit("onPageCell",e,n,t)},onParamsChange(e,n){this.$emit("pageParamsChange",e,n)},onChangeActiveIndex(e,n){console.log(`changePage:${"0"===n?"上一页":"下一页"}  当前页码为:${e}`);let t=e;"0"===n?1!==e&&(this.currentPage=e-1):this.secondPageList.length!==this.currentPage&&(this.currentPage=e+1),t=Number(this.currentPage)-1,this.$emit("changeIndex",{ind:t,currentPage:this.currentPage,oldInd:e,pageLen:this.secondPageList.length})}},created(){},mounted(){this.$bus.on("openSelectPage",(e=>{this.currentPage=e.page}))}};const fa=ma;var ha=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"jsonvue-page"},[t("NavBar",{attrs:{title:(2!==e.scene&&e.isEdit?"添加":"查看")+e.title,"left-arrow":""},on:{"click-left":e.onBack,"click-right":e.onSaveAll}}),e._v(" "),e.shows?t("div",{staticClass:"detail-tabs"},[t("div",{staticClass:"li-page"},[t("Pagination",{attrs:{"page-count":e.secondPageList.length,mode:"simple"},scopedSlots:e._u([{key:"prev-text",fn:function(){return[t("div",{staticClass:"page-icon-container",on:{click:function(n){n.stopPropagation(),1!==e.currsentPages&&e.onChangeActiveIndex(e.currsentPages,"0")}}},[t("Icon",{attrs:{name:"arrow-left"}})],1)]},proxy:!0},{key:"next-text",fn:function(){return[t("div",{staticClass:"page-icon-container",on:{click:function(n){n.stopPropagation(),e.secondPageList.length!==e.currsentPages&&e.onChangeActiveIndex(e.currsentPages,"1")}}},[t("Icon",{attrs:{name:"arrow"}})],1)]},proxy:!0}],null,!1,392400522),model:{value:e.currsentPages,callback:function(n){e.currsentPages=n},expression:"currsentPages"}})],1),e._v(" "),2!==e.scene&&e.isEdit&&e.addAble?t("div",{staticClass:"tabs-tool flex-middle"},[t("i",{staticClass:"iconfont icon-add",on:{click:e.onAdd}}),e._v(" "),t("i",{staticClass:"iconfont icon-copy",on:{click:e.onCopy}}),e._v(" "),t("i",{staticClass:"iconfont icon-delete",on:{click:e.onDelete}})]):e._e()]):e._e(),e._v(" "),t("div",{staticClass:"popup-content"},[e._l(e.secondPageList,(function(n,i){return[e.secondIndex===i?t("div",{key:i},[t("ValidationObserver",{ref:"fieldCell"+i,refInFor:!0,attrs:{disabled:!0}},[e.secondIndex===i?t("ModuleFieldNoCrud",{staticClass:"mb10",attrs:{"field-list":n,scene:!1===e.isEdit?2:e.scene,reimbType:e.reimbType,addNewParams:e.addNewParams},on:{onCell:e.onCell,paramsChange:e.onParamsChange,"update:fieldList":function(e){n=e},"update:field-list":function(e){n=e}}}):e._e()],1)],1):e._e()]}))],2),e._v(" "),2!==e.scene&&e.isEdit?t("Button",{attrs:{type:"info"},on:{click:e.onSaveAll}},[e._v("\n        保存\n    ")]):e._e()],1)};ha._withStripped=!0;const va={methods:{findFieldInAllWithConfig(e,n,t){let i=[];return e.forEach((e=>{e.fieldList.forEach((e=>{e[n]&&e[n]===t&&i.push(e)}))})),i},findFieldWithConfig(e,n,t){let i=[];return e.forEach((e=>{e[n]&&e[n]===t&&i.push(e)})),i}}};var xa={name:"FieldCrud",components:{Cell:b,Button:T,Icon:v,Popup:m,NavBar:P,ActionSheet:B,ModuleField:da,DefaultView:ca,MultiSecondPageEdit:Pi({render:ha,staticRenderFns:[]},(function(e){e&&e("data-v-3983f7ac_0",{source:"\n.van-pagination--simple{\n  display: flex;\n  align-items: center;\n}\n.van-pagination__item{\n    min-width: 1rem;\n    width: 1rem;\n    height: 1rem;\n    /*background-color: #646566;*/\n    /*color: white;*/\n    border-radius: 50%;\n    line-height: 1rem;\n    /*margin-top: 0.2rem;*/\n}\n.van-pagination__prev, .van-pagination__next{\n    background-color: #1989fa;\n}\n.van-pagination__item--disabled, .van-pagination__item--disabled:active{\n    background-color: #646566;\n}\n.van-pagination--simple .van-pagination__prev::after, .van-pagination--simple .van-pagination__next::after {\n    border-width: 0;\n}\n.van-pagination__page-desc{\n    margin: 0 10px\n}\n.page-icon-container{\n    color: #fff;\n    display:flex;\n    justify-content: center;\n    align-items: center\n}\n",map:{version:3,sources:["D:\\ZJ_Project\\jsonvue\\src\\FieldCrud\\MultiSecondPageEdit.vue"],names:[],mappings:";AAwQA;EACA,aAAA;EACA,mBAAA;AACA;AACA;IACA,eAAA;IACA,WAAA;IACA,YAAA;IACA,6BAAA;IACA,gBAAA;IACA,kBAAA;IACA,iBAAA;IACA,sBAAA;AACA;AACA;IACA,yBAAA;AACA;AACA;IACA,yBAAA;AACA;AAEA;IACA,eAAA;AACA;AAEA;IACA;AACA;AACA;IACA,WAAA;IACA,YAAA;IACA,uBAAA;IACA;AACA",file:"MultiSecondPageEdit.vue",sourcesContent:['\x3c!--二级界面多页编辑--\x3e\r\n<template>\r\n    <div class="jsonvue-page">\r\n        <NavBar  :title="`${scene===2||!isEdit?\'查看\':\'添加\'}`+title" left-arrow @click-left="onBack" @click-right="onSaveAll" ></NavBar>\r\n        <div class="detail-tabs" v-if="shows">\r\n          <div class="li-page">\r\n            <Pagination v-model="currsentPages" :page-count="secondPageList.length" mode="simple">\r\n              <template #prev-text>\r\n                <div @click.stop="currsentPages===1?\'\':onChangeActiveIndex(currsentPages,\'0\')"  class="page-icon-container">\r\n                  <Icon name="arrow-left"/>\r\n                </div>\r\n              </template>\r\n              <template #next-text>\r\n                <div @click.stop="secondPageList.length===currsentPages?\'\':onChangeActiveIndex(currsentPages,\'1\')" class="page-icon-container">\r\n                  <Icon name="arrow"  />\r\n                </div>\r\n              </template>\r\n            </Pagination>\r\n          </div>\r\n          <div  v-if="scene!==2&&isEdit&&addAble" class="tabs-tool flex-middle">\r\n            <i class="iconfont icon-add" @click="onAdd"></i>\r\n            <i class="iconfont icon-copy" @click="onCopy"></i>\r\n            <i class="iconfont icon-delete" @click="onDelete"></i>\r\n          </div>\r\n        </div>\r\n        <div class="popup-content">\r\n          <template v-for="(item,index) in secondPageList">\r\n            <div class="" v-if="secondIndex === index" :key="index">\r\n              <ValidationObserver  :ref="\'fieldCell\'+index" :disabled="true">\r\n                  <ModuleFieldNoCrud\r\n                      v-if="secondIndex === index"\r\n                      class="mb10"\r\n                      @onCell="onCell"\r\n                      @paramsChange="onParamsChange"\r\n                      :field-list.sync="item"\r\n                      :scene="isEdit === false ? 2 :scene"\r\n                      :reimbType="reimbType"\r\n                      :addNewParams="addNewParams"\r\n                  ></ModuleFieldNoCrud>\r\n              </ValidationObserver>\r\n            </div>\r\n          </template>\r\n        </div>\r\n        <Button  v-if="scene !== 2 && isEdit " type="info" @click="onSaveAll">\r\n            保存\r\n        </Button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {Button,Icon,NavBar,Pagination ,} from \'vant\'\r\n    import {cloneDeep} from \'lodash\'\r\n    import ModuleFieldNoCrud from "../ModuleFieldNoCrud.vue";\r\n    export default {\r\n        name: "MultiSecondPageEdit",\r\n        components:{ModuleFieldNoCrud,Button,Icon,NavBar,Pagination},\r\n        props:{\r\n            label:String,\r\n            // 覆盖是否可以编辑功能\r\n            isEdit:{\r\n                type:Boolean,\r\n                default:true\r\n            },\r\n            pageList:{\r\n                type:Array,\r\n                default(){\r\n                    return []\r\n                }\r\n            },\r\n            activeIndex:0,\r\n            moduleList:Array,\r\n            reimbType:{\r\n                type:String,\r\n                default:\'\'\r\n            },\r\n            currsentPages:{\r\n                type:Number,\r\n                default:0\r\n            },\r\n            //是否可以增加和删除 默认可以\r\n            addAble:{\r\n                type:Boolean,\r\n                default:true\r\n            },\r\n            scene:{\r\n              type:[String,Number],\r\n              default:0\r\n            },\r\n            addNewParams:{\r\n              type:Object,\r\n              default:()=>{}\r\n            }\r\n        },\r\n        data(){\r\n            return {\r\n                currentPage: 1,\r\n                shows:true\r\n            }\r\n        },\r\n        watch:{\r\n            currsentPages:{\r\n                handler(val){\r\n                    this.currentPage=val\r\n                },\r\n                deep:true,\r\n                immediate:true\r\n            }\r\n        },\r\n        computed:{\r\n            showStatus() {\r\n                try {\r\n                    return (this.pageList[this.activeIndex] || []).every(item => {\r\n                        if (item.fieldHumpName === "id" && item.fieldValue) {\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                } catch (error) {\r\n                    return true;\r\n                }\r\n            },\r\n            title(){\r\n                return ((this.$route || {}).params || {}).label || this.label\r\n            },\r\n            secondPageList(){\r\n                return ((this.$route || {}).params || {}).pageList || this.pageList\r\n            },\r\n            secondModuleList(){\r\n                return ((this.$route || {}).params || {}).moduleList || this.moduleList\r\n            },\r\n            secondIndex(){\r\n                return ((this.$route || {}).params || {}).activeIndex || this.activeIndex || 0\r\n            }\r\n        },\r\n        methods:{\r\n            onAdd(){\r\n                this.$dialog.confirm({\r\n                    title:\'提示\',\r\n                    message:\'是否保存当前数据并新增?\',\r\n                    confirmButtonText:\'确定\',\r\n                    cancelButtonText:\'取消\',\r\n                })\r\n                    .then(()=>{\r\n                        this.onSave(()=>{\r\n                            let moduleList = cloneDeep(this.moduleList);\r\n                            this.pageList.push(moduleList);\r\n                            this.$emit(\'onAdd\',this.pageList.length - 1)\r\n                        })\r\n                    })\r\n                    .catch(err=>{\r\n\r\n                    })\r\n\r\n            },\r\n            onCopy(){\r\n                this.$dialog.confirm({\r\n                    title:\'提示\',\r\n                    message:\'是否保存当前数据并复制?\',\r\n                    confirmButtonText:\'确定\',\r\n                    cancelButtonText:\'取消\',\r\n                })\r\n                    .then(()=>{\r\n                        this.onSave(()=>{\r\n                            this.$emit("onCopy")\r\n                        })\r\n                    })\r\n                    .catch(err=>{\r\n\r\n                    })\r\n\r\n            },\r\n            onDelete(){\r\n                this.$dialog.confirm({\r\n                    title:\'提示\',\r\n                    message:\'是否确认删除明细?\',\r\n                    confirmButtonText:\'确定\',\r\n                    cancelButtonText:\'取消\',\r\n                })\r\n                    .then(()=>{\r\n                        if (this.pageList.length <= 1) {\r\n                            let moduleList = cloneDeep(this.secondModuleList);\r\n                            this.pageList.splice(0, 1, moduleList);\r\n                            //清除错误信息\r\n                        }else{\r\n\r\n                            let tempPage = this.currentPage\r\n                            //console.log(\'总页面:\',this.pageList.length)\r\n                            if (tempPage>this.pageList.length-1){\r\n                                this.currentPage = this.currentPage-1\r\n                            }\r\n                            console.log(\'当前页：\',this.currentPage)\r\n\r\n                        }\r\n                        this.$emit(\'onDelete\',this.currentPage)\r\n                    })\r\n                    .catch(err=>{\r\n\r\n                    })\r\n            },\r\n            onSaveAll(){\r\n                this.onSave(()=>{\r\n                   this.$emit(\'onSaveAll\')\r\n                })\r\n            },\r\n            onCancle(){\r\n                this.$emit(\'onCancle\')\r\n            },\r\n            onSave(success){\r\n                this.$refs["fieldCell" + this.activeIndex][0].validate()\r\n                    .then(result => {\r\n                        console.log(\'子表单验证结果:\',result)\r\n                        if (result) {\r\n                           this.$emit(\'onSave\')\r\n                           setTimeout(()=>{\r\n                             success()\r\n                           })\r\n                        } else {\r\n                            this.$toast.fail({\r\n                                message: "请完善表单"\r\n                            });\r\n                        }\r\n                    });\r\n            },\r\n            onBack(){\r\n                this.$emit(\'onBack\')\r\n            },\r\n            onCell(value,item,module){\r\n                this.$emit("onPageCell",value,item,module)\r\n            },\r\n            onParamsChange(item,module){\r\n                this.$emit("pageParamsChange",item,module)\r\n            },\r\n            onChangeActiveIndex(index,tag){\r\n                console.log(`changePage:${tag === \'0\' ? \'上一页\' : \'下一页\'}  当前页码为:${index}`)\r\n                let ind=index\r\n                if(tag===\'0\'){\r\n                    if(index!==1){\r\n                        this.currentPage=index-1\r\n                    }\r\n                }else {\r\n                    if(this.secondPageList.length!==this.currentPage){\r\n                        this.currentPage=index+1\r\n                    }\r\n                }\r\n                ind = Number(this.currentPage) - 1 ;\r\n                this.$emit("changeIndex",{\r\n                    ind:ind,\r\n                    currentPage:this.currentPage,\r\n                    oldInd:index,\r\n                    pageLen:this.secondPageList.length\r\n                })\r\n            }\r\n        },\r\n        created() {\r\n        },\r\n        mounted(){\r\n            this.$bus.on(\'openSelectPage\',el=>{\r\n                this.currentPage=el.page\r\n            })\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style >\r\n    .van-pagination--simple{\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n    .van-pagination__item{\r\n        min-width: 1rem;\r\n        width: 1rem;\r\n        height: 1rem;\r\n        /*background-color: #646566;*/\r\n        /*color: white;*/\r\n        border-radius: 50%;\r\n        line-height: 1rem;\r\n        /*margin-top: 0.2rem;*/\r\n    }\r\n    .van-pagination__prev, .van-pagination__next{\r\n        background-color: #1989fa;\r\n    }\r\n    .van-pagination__item--disabled, .van-pagination__item--disabled:active{\r\n        background-color: #646566;\r\n    }\r\n\r\n    .van-pagination--simple .van-pagination__prev::after, .van-pagination--simple .van-pagination__next::after {\r\n        border-width: 0;\r\n    }\r\n\r\n    .van-pagination__page-desc{\r\n        margin: 0 10px\r\n    }\r\n    .page-icon-container{\r\n        color: #fff;\r\n        display:flex;\r\n        justify-content: center;\r\n        align-items: center\r\n    }\r\n</style>\r\n']},media:void 0})}),fa,undefined,false,undefined,!1,$i,void 0,void 0)},mixins:[va],props:{typeModuleList:{type:Array,default:()=>[]},currentSelect:{type:Array,default:()=>[]},typeAndPageList:{type:Array,default:()=>[]},typeList:{type:Array,default:()=>[]},showData:{type:Boolean,default:!0},showName:{type:Boolean,default:!1},cfgModuleVO:Object,scene:{type:[String,Number],default:0},functionUrl:String,reimbType:{type:String,default:""},tipTitleInfoList:{type:Array,default:()=>[]},addAble:{type:Boolean,default:!0},showMoney:{type:Boolean,default:!1},extConfig:{},crudViewSlot:{type:Boolean,default:!1}},data:()=>({parentTitle:"",show:!1,activeIndex:0,currentSelectShow:[],typeSelectShow:[],currentSelectType:"travel",timer:null,prevent:!1,pageList:[],moduleList:[],showTypeSelectView:!1,currentType:{},unAddTypeList:[],typePage:{},typeKey:0,totalAmount:0,moduleShow:!0,isAction:!1,isShow:!1,currentPage:0,showIsSave:!1,indObj:{},testShow:!1}),inheritAttrs:!1,model:{prop:"currentSelect"},computed:{isShowType:()=>!0,nowPage(){return this.currentPage?this.currentPage:1},showMoreBtn(){return this.typeList.find((e=>"otherIncome"===e.type))},showSmallAddBtn(){let e=0;this.currentSelect.forEach((n=>{e+=n.list.length})),this.isShow=e>1;const n=this.typeList.every((e=>{let n=this.currentSelect.find((n=>n.code===e.code));return!!n&&!Ti.exports.isEmpty(n.list)}));return console.log("showSmallAddBtn",this.currentSelect),console.log("allSelected",n),!n},showBigAddBtn(){return this.currentSelect.every((e=>Ti.exports.isEmpty(e.list)))}},created(){const e=this;this.$nextTick().then((()=>{setTimeout((()=>{e.$emit("update:curdEditFunc",this.onOpenTypeEdit)}),0)}))},mounted(){this.parentTitle=document.title,this.onUpdate()},destroyed(){clearTimeout(this.timer)},methods:{showLabour(e){this.showLabours=e},onCell(e,n,t){this.$emit("onPageCell",e,n,this.pageList,this.activeIndex)},onPageParamsChange(e,n){this.$emit("pageParamsChange",e,this.pageList,this.activeIndex)},onSaveAll(){this.$emit("onPageSave",{moduleCode:this.moduleCode,type:this.currentType.type,secondModuleList:this.pageList[this.currentPage-1]}),this.show=!1},onSelect(e){this.isAction=!0;let n=e.code,t=this.typeModuleList.find(((e,t)=>(e.code===n&&(this.typeKey=t),e.code===n)));this.currentType=e,this.typeKey=-1,this.moduleList=t.moduleList,this.pageList=[Ti.exports.cloneDeep(this.moduleList)];let i=Ti.exports.cloneDeep(e);i.list=this.pageList,this.typeAndPageList[0]=i,this.show=!0,this.showTypeSelectView=!1},onSelectTypeThenEdit(){if(this.isAction=!0,1===this.typeList.length)return void this.onSelect(this.typeList[0]);let e=Ti.exports.cloneDeep(this.typeList);this.unAddTypeList=[],e.forEach((e=>{this.currentSelect.find((n=>n.code===e.code&&!Ti.exports.isEmpty(n.list)))||this.unAddTypeList.push(e)}));let n=this.currentSelect.every((e=>Ti.exports.isEmpty(e.list)));Ti.exports.isEmpty(this.unAddTypeList)&&n&&(this.unAddTypeList=e),this.showTypeSelectView=!0,this.testShow=!0},onOpenTypeEdit(e,n,t){t||(t=0),this.currentPage=t+1,this.isAction=!0,this.typeKey=n,this.typePage=e,this.currentType=this.typeList.find((n=>n.code===e.code)),this.moduleList=this.typeModuleList.find((n=>e.code===n.code)),t&&(this.activeIndex=t),this.pageList=Ti.exports.cloneDeep(e.list),this.show=!0},onShow(){this.show=!0},onUpdate(){if(this.showBigAddBtn){let e=Ti.exports.cloneDeep(this.moduleList);this.$emit("update:pageList",[e]),this.currentSelectShow=[]}},confirmSave(){this.onSave(),this.activeIndex=this.indObj.ind,this.currentPage=this.indObj.currentPage,this.showIsSave=!1},cancelSave(){this.onCancle(),this.activeIndex=this.indObj.ind,this.currentPage=this.indObj.currentPage,this.showIsSave=!1},cancelDialog(){this.activeIndex=this.indObj.oldInd-1,this.currentPage=this.indObj.oldInd,this.showIsSave=!1},onChangeActiveIndex(e){let n=this.typePage.list?this.typePage.list[this.activeIndex]:[],t=this.pageList[this.activeIndex];if(n&&Ti.exports.isEqual(n,t))this.activeIndex=e.ind,this.currentPage=e.currentPage;else{if(this.indObj=e,2===this.scene)return this.activeIndex=e.ind,void(this.currentPage=e.currentPage);this.showIsSave=!0}},onCopy(){let e=Ti.exports.cloneDeep(this.pageList[this.activeIndex]);"fictitious"===e[e.length-1].moduleCode&&e.pop(),e.every((e=>"id"!==e.fieldHumpName||(e.fieldValue="",e.fieldValueName="",!1))),this.pageList.push(e),this.activeIndex=this.pageList.length-1,this.currentPage=Ti.exports.cloneDeep(this.pageList.length)},onAdd(e){this.activeIndex=e,this.currentPage=e+1,this.$emit("onPageAdd",this.cfgModuleVO,this.activeIndex)},onDelete(){this.onDeleteFn()},onDeleteFn(){if(this.pageList.length<=1){let e=Ti.exports.cloneDeep(this.moduleList);this.pageList.splice(0,1,e),this.deleteCurrentIndex(),setTimeout((()=>{}),10)}else{this.deleteCurrentIndex(),this.prevent=!0;let e=this.pageList[this.activeIndex+1];if(e){let n=Ti.exports.cloneDeep(e),t=this.pageList[this.activeIndex]||[];t.every((e=>"id"!==e.fieldHumpName||(e.fieldValue="",!1))),this.pageList.splice(this.activeIndex,1,Ti.exports.merge(t,n)),this.pageList.splice(this.activeIndex+1,1),this.$nextTick((()=>{}))}else this.pageList.splice(this.activeIndex,1);if(0===this.activeIndex)return void(this.currentPage=1);if(this.activeIndex>this.pageList.length-1)this.activeIndex=this.pageList.length-1,this.currentPage=Ti.exports.cloneDeep(this.pageList.length);else{let e=Ti.exports.cloneDeep(this.activeIndex);this.activeIndex=e-1,this.currentPage=Ti.exports.cloneDeep(e)}}},deleteCurrentIndex(){let e=this.currentSelect.find((e=>e.code===this.currentType.code))||{list:[]},n=e.list;if(n.length>0){n.splice(this.activeIndex,1);let t=Ti.exports.cloneDeep(this.currentSelect);t[this.typeKey]=e,1===t.length&&0===t[0].list.length?this.$emit("input",[]):this.$emit("input",t)}},onSave(){let e=Ti.exports.cloneDeep(this.pageList[this.activeIndex]),n=Ti.exports.cloneDeep(this.currentSelect),t=n.find((e=>this.currentType.code===e.code));Ti.exports.isEmpty(t)&&(t=Ti.exports.cloneDeep(this.currentType),n.push(t)),Ti.exports.isEmpty(t.list)&&(t.list=[]),t.list[this.activeIndex]=e,this.typePage=t,this.$emit("input",n),this.$toast({message:"保存成功"}),this.$forceUpdate()},onCancle(){this.pageList=Ti.exports.cloneDeep(this.typePage.list)},onBack(){if(2===this.scene)return void(this.show=!1);let e=[],n=[];if((this.typePage.list||[]).forEach(((n,t)=>{n&&Ti.exports.isEqual(n,this.pageList[t])&&e.push(t)})),(this.pageList||[]).forEach(((t,i)=>{-1===e.indexOf(i)&&n.push(i+1)})),this.isShowType){if(n.length>0){let e=n.join(",");this.$dialog.confirm({message:`你还有第[${e}]页未保存,请完善表单！`,confirmButtonText:"继续编辑",cancelButtonText:"放弃保存"}).then((()=>{})).catch((()=>{let e=Ti.exports.cloneDeep(this.typePage),n=(e.list||[]).filter((e=>e));e.list=n||[];let t=Ti.exports.cloneDeep(this.currentSelect);Ti.exports.isEmpty(e.list)||(t[this.typeKey]=e),this.show=!1}))}else this.$emit("update:pageList",[]),this.show=!1;this.$nextTick((()=>{})),this.$emit("onPageSelect",this.currentSelect,this.cfgModuleVO)}else this.show=!1}},watch:{currentSelect:{handler(){if(this.onUpdate(),Array.isArray(this.currentSelect)&&1===this.currentSelect.length){let e=0;(this.currentSelect[0].list||[]).forEach((n=>{const t=this.findFieldWithConfig(n,"isSum",!0)||[];console.log("amtSumList_fieldList:",n),console.log("amtSumList:",t);const i=t.reduce(((e,n)=>e+parseFloat(n.fieldValue||"0")),0);e+=parseFloat(i||"0")})),this.totalAmount=e}},deep:!0},show(){if(this.setNativeTopBack instanceof Function&&this.setNativeTopBack(this.show),this.show){document.title="添加"+this.$attrs.label;let e=this.typeModuleList.find((e=>e.code===this.currentType.code))||{};this.moduleList=Ti.exports.cloneDeep(e.moduleList)||[]}else this.activeIndex=0}}};const ga=xa;var ba=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("Cell",e._b({staticStyle:{padding:"0 0.42667rem 0.26667rem 0.42667rem"},scopedSlots:e._u([{key:"title",fn:function(){return[e.showData?t("div",{staticClass:"flex-middle justify-between"},[e.$attrs.required?t("span",{staticClass:"text-danger"},[e._v("*")]):e._e(),e._v(" "),e.showName?t("span",[e._v(e._s(e.$attrs.label))]):t("span"),e._v(" "),!e.showBigAddBtn&&e.showSmallAddBtn&&2!==e.scene?t("i",{staticClass:"iconfont icon-bianji text-info feeBianji",on:{click:e.onSelectTypeThenEdit}}):e._e()]):e._e()]},proxy:!0},{key:"label",fn:function(){return[e.showBigAddBtn&&e.showData&&2!==e.scene?t("div",{staticClass:"jsonvue-btn inner"},[t("div",{staticClass:"flex"},[t("Button",{staticClass:"flex1",attrs:{plain:"",type:"info"},on:{click:e.onSelectTypeThenEdit}},[t("div",{staticClass:"flex flex-center flex-middle"},[t("span",{staticClass:"iconfont icon-jia"}),e._v(" "),t("div",[e._v("添加"+e._s(e.$attrs.label))])])])],1)]):e.showData?t("div",[t("Cell",{staticStyle:{padding:"6px"},scopedSlots:e._u([{key:"title",fn:function(){return[t("div",{directives:[{name:"show",rawName:"v-show",value:e.showMoney,expression:"showMoney"}],staticClass:"prefix"},[e._v("￥"),t("span",{staticClass:"money"},[e._v(e._s(e._f("currency")(e.totalAmount)))])])]},proxy:!0},{key:"default",fn:function(){return[e.isShow?t("Icon",{attrs:{name:e.moduleShow?"arrow-up":"arrow-down"},on:{click:function(n){e.moduleShow=!e.moduleShow}}}):e._e()]},proxy:!0}])}),e._v(" "),e._l(e.currentSelect,(function(n,i){return e.crudViewSlot?e._t("crudView",null,{row:e.currentSelect}):t("div",{directives:[{name:"show",rawName:"v-show",value:e.moduleShow,expression:"moduleShow"}],key:i},[t("div",[t("DefaultView",{attrs:{list:n.list},on:{commonEdit:function(t){return e.onOpenTypeEdit(n,i,arguments[0])}}})],1),e._v(" "),t("div",{directives:[{name:"show",rawName:"v-show",value:e.showMoreBtn&&n.list.length>5,expression:"showMoreBtn&&typePage.list.length>5"}],staticClass:"more-btn",on:{click:function(t){return e.onOpenTypeEdit(n,i,arguments[1])}}},[e._v("查看更多")])])}))],2):e._e(),e._v(" "),e._t("error")]},proxy:!0}],null,!0)},"Cell",e.$attrs,!1)),e._v(" "),t("ActionSheet",{attrs:{actions:e.unAddTypeList,"cancel-text":"取消",description:"请选择类型","get-container":"#app"},on:{select:e.onSelect},model:{value:e.showTypeSelectView,callback:function(n){e.showTypeSelectView=n},expression:"showTypeSelectView"}}),e._v(" "),t("Popup",{staticClass:"jsonvue-popup",style:{width:"100%",height:"100%"},attrs:{position:"right","close-on-click-overlay":!1},model:{value:e.show,callback:function(n){e.show=n},expression:"show"}},[t("MultiSecondPageEdit",{attrs:{isEdit:e.isShowType,currsentPages:e.nowPage,label:e.$attrs.label,"page-list":e.pageList,"module-list":e.moduleList,"active-index":e.activeIndex,reimbType:e.reimbType,addAble:e.addAble,scene:e.scene},on:{onPageCell:e.onCell,pageParamsChange:e.onPageParamsChange,onSave:e.onSave,onAdd:e.onAdd,onDelete:e.onDeleteFn,onBack:e.onBack,onCopy:e.onCopy,changeIndex:e.onChangeActiveIndex,onSaveAll:e.onSaveAll,onCancle:e.onCancle}})],1),e._v(" "),t("van-dialog",{attrs:{title:"提示","show-confirm-button":!0,confirmButtonText:"是",confirmButtonColor:"#f00",cancelButtonText:"否",message:"是否保存当前编辑内容",showCancelButton:!0},on:{confirm:e.confirmSave,cancel:e.cancelSave},model:{value:e.showIsSave,callback:function(n){e.showIsSave=n},expression:"showIsSave"}},[t("div",{attrs:{slot:"title"},slot:"title"},[e._v("\n            提示\n            "),t("div",{staticClass:"dia-closs",on:{click:e.cancelDialog}},[t("Icon",{attrs:{name:"cross"}})],1)])])],1)};ba._withStripped=!0;const ya=Pi({render:ba,staticRenderFns:[]},(function(e){e&&e("data-v-3e5252ba_0",{source:"\n.action-size[data-v-3e5252ba]{\n    font-size: 10px;\n}\n.prefix[data-v-3e5252ba]{\n    font-size: 15px;\n    color: #333333;\n    text-align: left;\n}\n.money[data-v-3e5252ba]{\n    font-size: 20px;\n    font-weight: normal;\n    letter-spacing: 0px;\n    color: #333333;\n}\n.more-btn[data-v-3e5252ba]{\n    width: 100%;display: flex;flex-direction: row;justify-content: flex-end;padding: 10px;padding-right: 25px;color: #1989fa;font-size: 13px\n}\n.dia-closs[data-v-3e5252ba]{\n    position: absolute;right: 0.29rem;margin-top: -2rem\n}\n[data-v-3e5252ba] .van-cell::after{\n  display: none;\n}\n",map:{version:3,sources:["D:\\ZJ_Project\\jsonvue\\src\\FieldCrud\\FieldCrud.vue"],names:[],mappings:";AAgqBA;IACA,eAAA;AACA;AACA;IACA,eAAA;IACA,cAAA;IACA,gBAAA;AACA;AACA;IACA,eAAA;IACA,mBAAA;IACA,mBAAA;IACA,cAAA;AACA;AACA;IACA,WAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,yBAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,cAAA,CAAA;AACA;AACA;IACA,kBAAA,CAAA,cAAA,CAAA;AACA;AACA;EACA,aAAA;AACA",file:"FieldCrud.vue",sourcesContent:['\x3c!--明细页面布局--\x3e\r\n<template>\r\n    <div>\r\n        <Cell v-bind="$attrs" style="padding: 0 0.42667rem 0.26667rem 0.42667rem">\r\n            <template #title>\r\n                <div class="flex-middle justify-between" v-if="showData">\r\n                    <span v-if="$attrs.required" class="text-danger">*</span>\r\n                    <span v-if="showName">{{$attrs.label}}</span>\r\n                    <span v-else></span>\r\n                    <i\r\n                            class="iconfont icon-bianji text-info feeBianji"\r\n                            v-if="!showBigAddBtn&& showSmallAddBtn && scene !==2"\r\n                            @click="onSelectTypeThenEdit"\r\n                    ></i>\r\n                </div>\r\n            </template>\r\n            <template #label>\r\n                <div class="jsonvue-btn inner" v-if="showBigAddBtn&&showData&& scene !==2">\r\n                    <div class="flex" >\r\n                        <Button class="flex1"   plain type="info" @click="onSelectTypeThenEdit">\r\n                            <div class="flex flex-center flex-middle">\r\n                                <span class="iconfont icon-jia"></span>\r\n                                <div>添加{{$attrs.label}}</div>\r\n                            </div>\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div v-else-if="showData">\r\n                    <Cell style="padding: 6px">\r\n                        <template #title>\r\n                            <div v-show="showMoney" class="prefix">￥<span class="money">{{totalAmount|currency}}</span></div>\r\n                        </template>\r\n                        <template #default>\r\n                            <Icon :name="!moduleShow?\'arrow-down\':\'arrow-up\'" @click="moduleShow=!moduleShow" v-if="isShow"></Icon>\r\n                        </template>\r\n                    </Cell>\r\n\r\n                    <div v-if="!crudViewSlot" v-show="moduleShow"  v-for="(typePage,key) in currentSelect" :key="key">\r\n                        <div >\r\n                            <DefaultView\r\n                                    :list="typePage.list"\r\n                                    @commonEdit="onOpenTypeEdit(typePage,key,arguments[0])"\r\n                            ></DefaultView>\r\n                        </div>\r\n                        <div class="more-btn" v-show="showMoreBtn&&typePage.list.length>5" @click="onOpenTypeEdit(typePage,key,arguments[1])">查看更多</div>\r\n                    </div>\r\n                    <slot v-else name="crudView" :row="currentSelect"></slot>\r\n                </div>\r\n                <slot name="error"></slot>\r\n            </template>\r\n        </Cell>\r\n\r\n        <ActionSheet\r\n            v-model="showTypeSelectView"\r\n            :actions="unAddTypeList"\r\n            @select="onSelect"\r\n            cancel-text="取消"\r\n            description="请选择类型"\r\n            get-container="#app"\r\n         ></ActionSheet>\r\n\r\n        <Popup\r\n                v-model="show"\r\n                position="right"\r\n                :style="{ width: \'100%\',height:\'100%\' }"\r\n                class="jsonvue-popup"\r\n                :close-on-click-overlay="false"\r\n        >\r\n                    <MultiSecondPageEdit\r\n                            :isEdit="isShowType"\r\n                            :currsentPages="nowPage"\r\n                            :label="$attrs.label"\r\n                            :page-list="pageList"\r\n                            :module-list="moduleList"\r\n                            :active-index="activeIndex"\r\n                            :reimbType="reimbType"\r\n                            :addAble="addAble"\r\n                            :scene="scene"\r\n                            @onPageCell="onCell"\r\n                            @pageParamsChange="onPageParamsChange"\r\n                            @onSave="onSave"\r\n                            @onAdd="onAdd"\r\n                            @onDelete="onDeleteFn"\r\n                            @onBack="onBack"\r\n                            @onCopy="onCopy"\r\n                            @changeIndex="onChangeActiveIndex"\r\n                            @onSaveAll="onSaveAll"\r\n                            @onCancle="onCancle"\r\n                    ></MultiSecondPageEdit>\r\n        </Popup>\r\n        <van-dialog\r\n                    v-model="showIsSave"\r\n                    title="提示"\r\n                    :show-confirm-button="true"\r\n                    confirmButtonText="是"\r\n                    confirmButtonColor="#f00"\r\n                    cancelButtonText="否"\r\n                    @confirm="confirmSave"\r\n                    message="是否保存当前编辑内容"\r\n                    @cancel="cancelSave"\r\n                    :showCancelButton="true">\r\n            <div slot="title">\r\n                提示\r\n                <div class="dia-closs" @click="cancelDialog">\r\n                    <Icon name="cross" />\r\n                </div>\r\n            </div>\r\n        </van-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import { cloneDeep, merge ,isEmpty,isEqual,} from "lodash";\r\n    import {Cell,Button,Icon,Popup,NavBar,ActionSheet} from \'vant\'\r\n    import DefaultView from \'./DefaultView.vue\'\r\n    import MultiSecondPageEdit from "./MultiSecondPageEdit.vue";\r\n    import ModuleField from "../ModuleFieldNoCrud.vue";\r\n    import {configMixin} from "../mixins/config.mixin";\r\n\r\n    export default {\r\n        name: "FieldCrud",\r\n        components: {Cell,Button,Icon,Popup,NavBar,ActionSheet\r\n        ,ModuleField,\r\n         DefaultView,\r\n         MultiSecondPageEdit,\r\n        },\r\n        mixins:[configMixin],\r\n        props: {\r\n            //页面模板\r\n            typeModuleList: {\r\n                type:Array,\r\n                default() {\r\n                    return []\r\n                }\r\n            },\r\n            currentSelect: {\r\n                type:Array,\r\n                default:()=>[]\r\n            },\r\n            //有分类的\r\n            typeAndPageList:{\r\n                type:Array,\r\n                default(){\r\n                    return[ ]\r\n                }\r\n            },\r\n            //类型列表\r\n            typeList:{\r\n                type:Array,\r\n                default(){\r\n                    return []\r\n                }\r\n            },\r\n            //不显示数据\r\n            showData:{\r\n                type:Boolean,\r\n                default:true\r\n            },\r\n            showName:{\r\n                type:Boolean,\r\n                default:false\r\n            },\r\n            cfgModuleVO: Object,\r\n            scene:{\r\n                type:[String,Number],\r\n                default:0\r\n            },\r\n            functionUrl:String,\r\n            reimbType:{\r\n                type:String,\r\n                default:\'\'\r\n            },\r\n            tipTitleInfoList:{\r\n                type:Array,\r\n                default(){\r\n                    return []\r\n                },\r\n            },\r\n            //是否可以新增或者删除\r\n            addAble:{\r\n                type:Boolean,\r\n                default:true\r\n            },\r\n            //是否显示金额输入框\r\n            showMoney:{\r\n              type:Boolean,\r\n              default:false\r\n            },\r\n            extConfig:{\r\n            },\r\n            //是否自定义显示\r\n            crudViewSlot:{\r\n              type:Boolean,\r\n              default:false\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                parentTitle: "",\r\n                show: false,\r\n                activeIndex: 0,\r\n                currentSelectShow: [],\r\n                typeSelectShow:[],\r\n                // TODO: 2020/2/27 优化类型分配\r\n                currentSelectType:\'travel\',\r\n                timer: null,\r\n                prevent: false, //用来处理删除和提交时候触发不必要的监听\r\n                pageList:[],\r\n                moduleList:[],\r\n                //类型选择\r\n                showTypeSelectView:false,\r\n                //当前类型\r\n                currentType:{},\r\n                unAddTypeList:[],\r\n                //当前编辑的类型及列表数据\r\n                typePage:{},\r\n                //当前类型索引\r\n                typeKey:0,\r\n                //总金额\r\n                totalAmount:0,\r\n                moduleShow:true,\r\n                //用户是否操作过\r\n                isAction:false,\r\n                isShow:false,\r\n                currentPage:0,\r\n                showIsSave:false,\r\n                indObj:{},\r\n                testShow:false,\r\n\r\n            };\r\n        },\r\n        inheritAttrs: false,\r\n        model: {\r\n            prop: "currentSelect"\r\n        },\r\n        computed: {\r\n            // 根据组件类型判断是否显示\r\n            isShowType(){\r\n                return true\r\n            },\r\n            nowPage(){\r\n              return this.currentPage?this.currentPage:1\r\n            },\r\n            showMoreBtn(){\r\n                return this.typeList.find(type=>type.type ===\'otherIncome\')\r\n            },\r\n            showSmallAddBtn(){\r\n                let tag=0\r\n                this.currentSelect.forEach(el=>{\r\n                    tag=tag+el.list.length\r\n                })\r\n                if(tag>1){\r\n                    this.isShow=true\r\n                }else {\r\n                    this.isShow=false\r\n                }\r\n                const allSelected = this.typeList.every(\r\n                    current=>{\r\n                        let temp = this.currentSelect.find(selected=>selected.code === current.code)\r\n                        if (temp){\r\n                            return !isEmpty(temp.list)\r\n                        } else {\r\n                            return false\r\n                        }\r\n                    })\r\n                console.log("showSmallAddBtn",this.currentSelect)\r\n                console.log("allSelected",allSelected)\r\n\r\n                return !allSelected\r\n\r\n            },\r\n            showBigAddBtn(){\r\n              return this.currentSelect.every(item=>{\r\n                return isEmpty(item.list)\r\n              })\r\n            }\r\n        },\r\n        created(){\r\n            //开启时提示\r\n            const self = this;\r\n            this.$nextTick().then(()=>{\r\n              setTimeout(()=>{\r\n                self.$emit(\'update:curdEditFunc\',this.onOpenTypeEdit)\r\n              },0)\r\n            })\r\n        },\r\n        mounted() {\r\n            this.parentTitle = document.title;\r\n            this.onUpdate();\r\n        },\r\n        destroyed() {\r\n            clearTimeout(this.timer);\r\n        },\r\n        methods: {\r\n            showLabour(booleam){\r\n                this.showLabours=booleam\r\n            },\r\n            onCell(value,item,module){\r\n                this.$emit("onPageCell",value,item,this.pageList,this.activeIndex)\r\n            },\r\n            onPageParamsChange(item,module){\r\n                 this.$emit("pageParamsChange",item,this.pageList,this.activeIndex)\r\n            },\r\n            onSaveAll(){\r\n                this.$emit("onPageSave",{\r\n                    moduleCode:this.moduleCode,\r\n                    type:this.currentType.type,\r\n                    secondModuleList:this.pageList[this.currentPage-1]\r\n                })\r\n                this.show = false\r\n            },\r\n            //选择对应类型\r\n            onSelect(type){\r\n                this.isAction = true\r\n                let feeTypeCode = type.code\r\n                let typeKey = -1\r\n                let typePageModule = this.typeModuleList.find((item,index)=>{\r\n                    if(item.code === feeTypeCode){\r\n                        this.typeKey = index\r\n                    }\r\n                    return item.code === feeTypeCode\r\n                })\r\n                this.currentType=type\r\n                this.typeKey = typeKey\r\n                this.moduleList = typePageModule.moduleList\r\n                this.pageList = [cloneDeep(this.moduleList)]\r\n\r\n                let typePage = cloneDeep(type)\r\n                typePage.list = this.pageList\r\n                this.typeAndPageList[0] = typePage\r\n\r\n                this.show = true\r\n                this.showTypeSelectView = false\r\n            },\r\n            //选择对应类型明细后进入对应编辑页\r\n            onSelectTypeThenEdit(){\r\n                this.isAction = true\r\n                if (this.typeList.length === 1){\r\n                    this.onSelect(this.typeList[0])\r\n                    return\r\n                }\r\n                let allTypeList = cloneDeep(this.typeList)\r\n                this.unAddTypeList = []\r\n                allTypeList.forEach(type=>{\r\n                   let alreadyAdd =  this.currentSelect.find(current=>current.code === type.code && !isEmpty(current.list))\r\n                   if (!alreadyAdd){\r\n                       this.unAddTypeList.push(type)\r\n                   }\r\n                })\r\n                let allListEmpty = this.currentSelect.every(current=>{return isEmpty(current.list)})\r\n                if(isEmpty(this.unAddTypeList)&&allListEmpty){\r\n                    this.unAddTypeList = allTypeList\r\n                }\r\n                 this.showTypeSelectView = true\r\n                 this.testShow = true\r\n            },\r\n            //显示指定类型的编辑页面\r\n            onOpenTypeEdit(typePage,key,index){\r\n                if(!index){\r\n                    index=0\r\n                }\r\n              //修改分页页码\r\n              this.currentPage=index+1\r\n              this.isAction = true\r\n              this.typeKey = key\r\n              this.typePage = typePage\r\n              this.currentType = this.typeList.find(type=>type.code === typePage.code)\r\n              this.moduleList = this.typeModuleList.find(module=>{\r\n                  return typePage.code === module.code\r\n              })\r\n\r\n              if (index){\r\n                  this.activeIndex = index\r\n              }\r\n\r\n              this.pageList = cloneDeep(typePage.list)\r\n              this.show = true\r\n            },\r\n            onShow(){\r\n                this.show = true\r\n            },\r\n            onUpdate() {\r\n                if (this.showBigAddBtn) {\r\n                    let moduleList = cloneDeep(this.moduleList);\r\n                    this.$emit("update:pageList", [moduleList]);\r\n                    this.currentSelectShow = [];\r\n                }\r\n            },\r\n            // 保存\r\n            confirmSave(){\r\n                this.onSave()\r\n                this.activeIndex = this.indObj.ind\r\n                this.currentPage=this.indObj.currentPage\r\n                this.showIsSave=false\r\n            },\r\n            // 不保存\r\n            cancelSave(){\r\n                this.onCancle()\r\n                this.activeIndex = this.indObj.ind\r\n                this.currentPage=this.indObj.currentPage\r\n                this.showIsSave=false\r\n            },\r\n            // 取消\r\n            cancelDialog(){\r\n                this.activeIndex = this.indObj.oldInd-1\r\n                this.currentPage=this.indObj.oldInd\r\n                this.showIsSave=false\r\n            },\r\n            onChangeActiveIndex(index){\r\n                // 解决初始化创建时候该数据不存在的情况。\r\n                let pre = this.typePage.list?this.typePage.list[this.activeIndex]:[]\r\n                let now = this.pageList[this.activeIndex]\r\n                if (pre && isEqual(pre,now)){\r\n                    this.activeIndex = index.ind\r\n                    this.currentPage=index.currentPage\r\n                }else{\r\n                    this.indObj=index\r\n                    if(this.scene===2){\r\n                        // 屏蔽详情页面出现弹框检验\r\n                        this.activeIndex = index.ind\r\n                        this.currentPage=index.currentPage\r\n                        return\r\n                    }\r\n                    this.showIsSave=true\r\n                }\r\n\r\n\r\n            },\r\n            //拷贝\r\n            onCopy() {\r\n                let moduleList = cloneDeep(this.pageList[this.activeIndex]);\r\n                //复制时候清除id，防止一起复制了\r\n                if(moduleList[moduleList.length-1].moduleCode===\'fictitious\'){\r\n                    moduleList.pop()\r\n                }\r\n                moduleList.every(item => {\r\n                    if (item.fieldHumpName === "id") {\r\n                        item.fieldValue = "";\r\n                        item.fieldValueName = "";\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                });\r\n                this.pageList.push(moduleList);\r\n                this.activeIndex = this.pageList.length - 1;\r\n                this.currentPage=cloneDeep( this.pageList.length )\r\n            },\r\n            //新增\r\n            onAdd(index) {\r\n                this.activeIndex = index;\r\n                this.currentPage=index+1\r\n                this.$emit("onPageAdd", this.cfgModuleVO, this.activeIndex);\r\n            },\r\n            /**\r\n             * 删除\r\n             */\r\n            onDelete() {\r\n                    this.onDeleteFn();\r\n            },\r\n            //删除\r\n            onDeleteFn() {\r\n                if (this.pageList.length <= 1) {\r\n                    let moduleList = cloneDeep(this.moduleList);\r\n                    this.pageList.splice(0, 1, moduleList);\r\n                    //this.$emit("input", []);\r\n                    this.deleteCurrentIndex()\r\n                    setTimeout(() => {\r\n                        //this.$refs["fieldCell0"][0].errors.clear();\r\n                    }, 10);\r\n                } else {\r\n                    this.deleteCurrentIndex()\r\n                    this.prevent = true;\r\n\r\n                    // this.pageList.splice(this.activeIndex, 1);\r\n\r\n                    let item = this.pageList[this.activeIndex + 1];\r\n\r\n                    //把后一页往前移动\r\n                    if (item) {\r\n                      let cItem = cloneDeep(item);\r\n                      let mItem = this.pageList[this.activeIndex] || [];\r\n                      mItem.every(item => {\r\n                        if (item.fieldHumpName === "id") {\r\n                          item.fieldValue = "";\r\n                          return false;\r\n                        }\r\n                        return true;\r\n                      });\r\n                      this.pageList.splice(this.activeIndex, 1, merge(mItem, cItem));\r\n                      this.pageList.splice(this.activeIndex + 1, 1);\r\n\r\n                      this.$nextTick(() => {\r\n                          //错误信息处理\r\n                        //this.$refs["fieldCell" + this.activeIndex][0].errors.clear();\r\n                      });\r\n                    } else {\r\n                      this.pageList.splice(this.activeIndex, 1);\r\n                    }\r\n                    if(this.activeIndex===0){\r\n                        this.currentPage=1\r\n                        return\r\n                    }\r\n                    if (this.activeIndex > this.pageList.length - 1) {\r\n                        this.activeIndex = this.pageList.length - 1;\r\n                        this.currentPage=cloneDeep( this.pageList.length )\r\n                    }else {\r\n                        let len=cloneDeep(this.activeIndex)\r\n                        this.activeIndex=len-1\r\n                        this.currentPage=cloneDeep(len)\r\n                    }\r\n                }\r\n            },\r\n            deleteCurrentIndex(){\r\n                //找到当前页\r\n                let tempList = this.currentSelect.find(current=>{\r\n                    return current.code === this.currentType.code\r\n                }) || {list:[]}\r\n\r\n\r\n                let list = tempList.list\r\n                let length = list.length;\r\n\r\n                //删除正在编辑的页面\r\n                if (length > 0) {\r\n                    list.splice(this.activeIndex, 1);\r\n                    let typeAndPageList = cloneDeep(this.currentSelect)\r\n                    typeAndPageList[this.typeKey] = tempList\r\n                    if (typeAndPageList.length === 1 && typeAndPageList[0].list.length === 0){\r\n                      this.$emit(\'input\',[])\r\n                    } else {\r\n                      this.$emit(\'input\',typeAndPageList)\r\n                    }\r\n                }\r\n            },\r\n            onSave() {\r\n                let currentModuleList = cloneDeep(this.pageList[this.activeIndex]);\r\n                let typeAndPageList = cloneDeep(this.currentSelect)\r\n\r\n                let item = typeAndPageList.find(typeAndPage=>{\r\n                    return this.currentType.code === typeAndPage.code\r\n                })\r\n                if(isEmpty(item)){\r\n                    item = cloneDeep(this.currentType)\r\n                    typeAndPageList.push(item)\r\n                }\r\n                if(isEmpty(item.list)){\r\n                    item.list=[]\r\n                }\r\n                item.list[this.activeIndex] = currentModuleList;\r\n                this.typePage = item\r\n                this.$emit("input", typeAndPageList);\r\n                this.$toast({message: "保存成功"});\r\n                this.$forceUpdate()\r\n\r\n              // this.$nextTick(()=>{\r\n                // })\r\n            },\r\n            //取消保存\r\n            onCancle(){\r\n                this.pageList=cloneDeep(this.typePage.list)\r\n            },\r\n            onBack() {\r\n                if(this.scene===2){\r\n                    this.show = false;\r\n                    return\r\n                }\r\n                //判断是否都保存拦截\r\n                let savedPages = [] ;\r\n                let unSavedPages = [];\r\n                (this.typePage.list || []).forEach((item, index) => {\r\n                    if (item && isEqual(item,this.pageList[index])) {\r\n                        savedPages.push(index);\r\n                    }\r\n                });\r\n                (this.pageList || []).forEach((item, index) => {\r\n                    if (savedPages.indexOf(index) === -1) {\r\n                        unSavedPages.push(index + 1);\r\n                    }\r\n                });\r\n                // 显示，不需要页面编辑直接返回\r\n                if(!this.isShowType){\r\n                    this.show = false;\r\n                    return\r\n                }\r\n                if (unSavedPages.length > 0) {\r\n                    let message = unSavedPages.join(",");\r\n                    this.$dialog\r\n                        .confirm({\r\n                            message: `你还有第[${message}]页未保存,请完善表单！`,\r\n                            confirmButtonText: "继续编辑",\r\n                            cancelButtonText: "放弃保存"\r\n                        })\r\n                        .then(() => {})\r\n                        .catch(() => {\r\n                            let typePage = cloneDeep(this.typePage);\r\n                            let currentSavedList = (typePage.list || []).filter(item => {\r\n                                return item;\r\n                            });\r\n                            typePage.list = currentSavedList || []\r\n\r\n                            let currentSelect = cloneDeep(this.currentSelect)\r\n                            if(isEmpty(typePage.list)){\r\n\r\n                            }else{\r\n                                currentSelect[this.typeKey] = typePage\r\n\r\n                            }\r\n                            this.show = false;\r\n\r\n\r\n                        });\r\n                } else {\r\n                    this.$emit("update:pageList", []);\r\n                    this.show = false;\r\n                }\r\n                this.$nextTick(() => {\r\n\r\n                    // TODO: 2020/1/13  清楚上次的错误信息\r\n\r\n                    // this.$refs["fieldCell" + this.activeIndex][0].errors.clear();\r\n                });\r\n                this.$emit("onPageSelect", this.currentSelect, this.cfgModuleVO);\r\n            },\r\n        },\r\n\r\n        watch: {\r\n            currentSelect: {\r\n                handler() {\r\n                    this.onUpdate();\r\n                    //计算统计金额\r\n                    if(Array.isArray( this.currentSelect ) && this.currentSelect.length === 1) {\r\n                        let totalAmount = 0\r\n                        const typeAndPageInfo = this.currentSelect[0]\r\n                        const pageList = typeAndPageInfo.list  || []\r\n                        pageList.forEach(fieldList=>{\r\n                          const amtSumList = this.findFieldWithConfig(fieldList,\'isSum\',true) || []\r\n                          console.log(\'amtSumList_fieldList:\',fieldList)\r\n                          console.log(\'amtSumList:\',amtSumList)\r\n                          const amt = amtSumList.reduce((total,item)=>{\r\n                            return total+parseFloat(item.fieldValue || "0")\r\n                          },0)\r\n                          totalAmount = totalAmount + parseFloat(amt || \'0\')\r\n                        })\r\n                        this.totalAmount = totalAmount\r\n                    }\r\n                },\r\n                deep: true\r\n            },\r\n            /**\r\n             * 添加/编辑/查看页面\r\n             * */\r\n            show() {\r\n                if (this.setNativeTopBack instanceof Function) {\r\n                  this.setNativeTopBack(this.show)\r\n                }\r\n                if (this.show) {\r\n                    //this.activeIndex = 0;\r\n                    document.title = "添加" + this.$attrs.label;\r\n                    let typeModule = this.typeModuleList.find(typeModuleItem=>{\r\n                        return typeModuleItem.code === this.currentType.code\r\n                    }) || {}\r\n                    this.moduleList = cloneDeep(typeModule.moduleList) || []\r\n                }else{\r\n                    this.activeIndex = 0\r\n                }\r\n            },\r\n        },\r\n\r\n    }\r\n<\/script>\r\n<style scoped>\r\n    .action-size{\r\n        font-size: 10px;\r\n    }\r\n    .prefix{\r\n        font-size: 15px;\r\n        color: #333333;\r\n        text-align: left;\r\n    }\r\n    .money{\r\n        font-size: 20px;\r\n        font-weight: normal;\r\n        letter-spacing: 0px;\r\n        color: #333333;\r\n    }\r\n    .more-btn{\r\n        width: 100%;display: flex;flex-direction: row;justify-content: flex-end;padding: 10px;padding-right: 25px;color: #1989fa;font-size: 13px\r\n    }\r\n    .dia-closs{\r\n        position: absolute;right: 0.29rem;margin-top: -2rem\r\n    }\r\n    >>> .van-cell::after{\r\n      display: none;\r\n    }\r\n</style>\r\n']},media:void 0})}),ga,"data-v-3e5252ba",false,undefined,!1,$i,void 0,void 0);ya.install=function(e){e.component(ya.name,ya)};var wa={name:"ModuleFieldReactive",components:{FieldSelect:qi,FieldText:Oi,FieldCheckBoxSelect:aa,FieldDate:Hi,FieldAddress:ea,Field:d},props:{fieldList:{type:Array,default:()=>[]},moduleCode:{type:String,default:""},scene:{type:[Number,String],default:1},reimbType:{type:String,default:""},isSecondPage:{type:Boolean,default:!1},useModel:{type:Boolean,default:!1}},data:()=>({moduleCreating:!0,moduleObj:{}}),methods:{onSinglePageSave(e,n,t){this.$emit("onSinglePageSave",e,n,t)},onSinglePageRemove(e,n,t){this.$emit("onSinglePageRemove",e,n,t)},onPageCell(e,n,t,i){this.$emit("onPageCell",e,n,t,i)},onPageBlur(e,n,t,i){this.$emit("onPageBlur",e,n,t,i)},onPageParamsChange(e,n,t){this.$emit("pageParamsChange",e,n,t)},onCell(e,n){this.$emit("onCell",e,n)},onBlur(e,n){this.$emit("onBlur",e,n)},onParamsChange(e){this.$emit("paramsChange",e)},onPageSave(e){this.$emit("onPageSave",e)},onAddProject(e,n){this.$emit("onAddProject",e,n)},validate(){return this.$refs.validOb.validate()}},created(){console.log("moduleField","created"),this.$nextTick((()=>{console.log("moduleField","nextTick"),setTimeout((()=>{console.log("moduleField","timeout0");const e={};this.fieldList.forEach((n=>{n.fieldName&&(e[n.fieldName]=n.fieldValue)})),this.moduleObj=e}),0)}))},mounted(){console.log("moduleField","mounted")},watch:{moduleObj:{handler(){this.moduleCreating?this.moduleCreating=!1:this.$emit("input",this.moduleObj)},deep:!0}}};const _a=wa;var Aa=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ValidationObserver",{ref:"validOb",attrs:{tag:"div"}},e._l(e.fieldList,(function(n,i){return t("div",{key:i},[n.formSlot?t("ValidationProvider",{attrs:{name:n.label,rules:{required:n.required}},scopedSlots:e._u([{key:"default",fn:function(i){var a=i.errors;return[t("Field",{attrs:{label:n.label,required:n.required,"error-message":a[0],"error-message-align":"right","input-align":"right"}},[t("template",{slot:"input"},[e._t(n.fieldName,null,{row:n})],2)],2)]}}],null,!0)}):n.hidden||"text"!==n.fieldType&&"textarea"!==n.fieldType&&"int"!==n.fieldType&&"amount"!==n.fieldType&&"number"!==n.fieldType?n.hidden||"select"!==n.fieldType?n.hidden||"address"!==n.fieldType?n.hidden||"date"!==n.fieldType?n.hidden||"tree"!==n.fieldType?e._e():t("FieldCheckBoxSelect",{attrs:{label:n.label||n.fieldName,scene:e.scene,"config-name":n.config.configName,"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:2!==e.scene?"请选择"+(n.label||n.fieldName):"","post-url":n.postUrl,"post-data":n.postData,disabled:n.disabled,"add-able":"true"===n.config.addAble||!1,isSecondPage:e.isSecondPage,reimbType:e.reimbType,remark:n.remark,"is-end":e.fieldList.length===i+1},on:{onTree:function(t){return e.onCell(t,n)},paramsChange:function(t){return e.onParamsChange(n)}},model:{value:e.moduleObj[n.fieldName],callback:function(t){e.$set(e.moduleObj,n.fieldName,t)},expression:"moduleObj[item.fieldName]"}}):t("FieldDate",{attrs:{scene:e.scene,label:n.label||n.fieldName,"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:1===e.scene?"请输入"+(n.label||n.fieldName):"","min-date":n.minDate?n.minDate:"1900-01-01","max-date":n.maxDate,disabled:n.disabled,getType:n.configName?n.configName:"YYYY-MM-DD",remark:n.remark,"is-end":e.fieldList.length===i+1},on:{onDatetime:function(t){return e.onCell(t,n)}},model:{value:e.moduleObj[n.fieldName],callback:function(t){e.$set(e.moduleObj,n.fieldName,t)},expression:"moduleObj[item.fieldName]"}}):t("FieldAddress",{attrs:{"validate-rules":2!==e.scene?{required:n.required}:{},required:n.required&&2!==e.scene,label:n.label||n.fieldName,placeholder:1===e.scene?"请选择"+(n.label||n.fieldName):"",disabled:n.disabled,remark:n.remark,"is-end":e.fieldList.length===i+1,"select-level":n.selectLevel,"show-province-name":n.showProvinceName},on:{onCell:function(t){return e.onCell(t,n)}},model:{value:e.moduleObj[n.fieldName],callback:function(t){e.$set(e.moduleObj,n.fieldName,t)},expression:"moduleObj[item.fieldName]"}}):t("FieldSelect",{attrs:{scene:e.scene,"get-type":n.getType,label:n.label||n.fieldName,"option-codes":n.optionCodes||[],"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:2!==e.scene?"请选择":"","post-url":n.postUrl,"post-data":n.postData,disabled:n.disabled,remark:n.remark,"is-end":e.fieldList.length===i+1},on:{paramsChange:function(t){return e.onParamsChange(n)},onSelect:function(t){return e.onCell(t,n)}},model:{value:e.moduleObj[n.fieldName],callback:function(t){e.$set(e.moduleObj,n.fieldName,t)},expression:"moduleObj[item.fieldName]"}}):t("FieldText",{attrs:{"validate-rules":2!==e.scene?Object.assign({},{required:n.required,ismoney:"amount"===n.fieldType&&(n.fieldValue,n.label||n.fieldName)},n.validateRules):{},readonly:n.disabled||2===e.scene,required:n.required&&2!==e.scene,placeholder:n.placeholder||(2!==e.scene?"请输入"+(n.label||n.fieldName):""),label:n.label||n.fieldName,type:n.textFieldType||"text",fieldType:n.fieldType||"text",maxlength:n.maxLength,"show-word-limit":"textarea"===n.fieldType&&2!==e.scene,autosize:"textarea"===n.fieldType,"error-message-align":"right","input-align":"right",remark:n.remark,"is-end":e.fieldList.length===i+1},on:{onText:function(t){return e.onCell(t,n)}},model:{value:e.moduleObj[n.fieldName],callback:function(t){e.$set(e.moduleObj,n.fieldName,t)},expression:"moduleObj[item.fieldName]"}})],1)})),0)};Aa._withStripped=!0;const Ca=Pi({render:Aa,staticRenderFns:[]},undefined,_a,undefined,false,undefined,!1,void 0,void 0,void 0);var Sa={name:"ModuleField",components:{FieldSelect:qi,FieldText:Oi,FieldCheckBoxSelect:aa,FieldDate:Hi,FieldAddress:ea,Field:d,FieldCrud:ya},props:{fieldList:{type:Array,default:()=>[]},moduleCode:{type:String,default:""},scene:{type:[Number,String],default:1},reimbType:{type:String,default:""},isSecondPage:{type:Boolean,default:!1}},data:()=>({moduleCreating:!0,moduleObj:{}}),methods:{onSinglePageSave(e,n,t){this.$emit("onSinglePageSave",e,n,t)},onSinglePageRemove(e,n,t){this.$emit("onSinglePageRemove",e,n,t)},onPageCell(e,n,t,i){this.$emit("onPageCell",e,n,t,i)},onPageBlur(e,n,t,i){this.$emit("onPageBlur",e,n,t,i)},onPageParamsChange(e,n,t){this.$emit("pageParamsChange",e,n,t)},onCell(e,n){this.$emit("onCell",e,n)},onBlur(e,n){this.$emit("onBlur",e,n)},onParamsChange(e){this.$emit("paramsChange",e)},onPageSave(e){this.$emit("onPageSave",e)},onAddProject(e,n){this.$emit("onAddProject",e,n)},validate(){return this.$refs.validOb.validate()}}};const ka=Sa;var ja=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ValidationObserver",{ref:"validOb",attrs:{tag:"div"}},e._l(e.fieldList,(function(n,i){return t("div",{key:i},[n.formSlot?t("ValidationProvider",{attrs:{name:n.label,rules:{required:n.required}},scopedSlots:e._u([{key:"default",fn:function(i){var a=i.errors;return[t("Field",{attrs:{label:n.label,required:n.required,"error-message":a[0],"error-message-align":"right","input-align":"right"}},[t("template",{slot:"input"},[e._t(n.fieldName,null,{row:n})],2)],2)]}}],null,!0)}):n.hidden||"text"!==n.fieldType&&"textarea"!==n.fieldType&&"int"!==n.fieldType&&"digit"!==n.fieldType&&"amount"!==n.fieldType&&"number"!==n.fieldType?n.hidden||"select"!==n.fieldType?n.hidden||"address"!==n.fieldType?n.hidden||"date"!==n.fieldType&&"datetime"!==n.fieldType&&"year-month"!==n.fieldType&&"time"!==n.fieldType?n.hidden||"tree"!==n.fieldType?n.hidden||"fieldCrud"!==n.fieldType?e._e():t("ValidationProvider",{attrs:{name:n.label,rules:{required:n.required}},scopedSlots:e._u([{key:"default",fn:function(i){var a=i.errors;return[t("FieldCrud",{attrs:{"validate-rules":{required:!0},required:n.required,label:n.label,"type-module-list":n.typeSecondModuleList,"type-and-page-list":n.typeSecondEditPageList,"type-list":n.typeList,extConfig:n.config.extConfig,scene:e.scene,reimbType:e.reimbType,showData:n.showData,showName:n.config.showName,addAble:"false"!==n.config.addAble,"show-money":n.showMoney,tipTitleInfoList:n.fieldValue&&n.fieldValue.length>0&&n.fieldValue[0].travelStatisticsList||[],"crud-view-slot":n.crudViewSlot||!1,curdEditFunc:n.crudEditFunc},on:{onPageSave:e.onPageSave,onPageCell:e.onPageCell,pageParamsChange:e.onPageParamsChange,"update:curdEditFunc":function(t){return e.$set(n,"crudEditFunc",t)},"update:curd-edit-func":function(t){return e.$set(n,"crudEditFunc",t)}},model:{value:n.typeSecondShowPageList,callback:function(t){e.$set(n,"typeSecondShowPageList",t)},expression:"item.typeSecondShowPageList"}},[t("template",{slot:"crudView"},[e._t("crudView_"+n.fieldName,null,{row:n})],2)],2),e._v(" "),t("div",{staticClass:"van-field__error-message text-right",staticStyle:{"padding-right":"10px"},attrs:{slot:"error"},slot:"error"},[e._v("\n        "+e._s(a[0])+"\n      ")])]}}],null,!0)}):t("FieldCheckBoxSelect",e._b({attrs:{label:n.label||n.fieldName,scene:e.scene,"config-name":n.config.configName,"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:2!==e.scene?"请选择"+(n.label||n.fieldName):"","post-url":n.postUrl,"post-data":n.postData,disabled:n.disabled,"add-able":"true"===n.config.addAble||!1,isSecondPage:e.isSecondPage,remark:n.remark,"is-end":e.fieldList.length===i+1,"use-item-slot":n.useItemSlot,"refresh-when-click":n.refreshWhenClick},on:{onTree:function(t){return e.onCell(t,n)},paramsChange:function(t){return e.onParamsChange(n)}},scopedSlots:e._u([{key:"itemSlot",fn:function(t){return[e._t("checkBoxSelectItem_"+n.fieldName,null,{row:t.row})]}}],null,!0),model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}},"FieldCheckBoxSelect",n,!1)):t("FieldDate",e._b({attrs:{scene:e.scene,label:n.label||n.fieldName,"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:1===e.scene?"请输入"+(n.label||n.fieldName):"","min-date":n.minDate?n.minDate:"1900-01-01","max-date":n.maxDate,disabled:n.disabled,displayFormat:n.displayFormat&&"YYYY-MM-DD",remark:n.remark,"is-end":e.fieldList.length===i+1,"field-type":n.fieldType},on:{onDatetime:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}},"FieldDate",n,!1)):t("FieldAddress",e._b({attrs:{"validate-rules":2!==e.scene?{required:n.required}:{},required:n.required&&2!==e.scene,label:n.label||n.fieldName,placeholder:1===e.scene?"请选择"+(n.label||n.fieldName):"",disabled:n.disabled,remark:n.remark,"is-end":e.fieldList.length===i+1,"select-level":n.selectLevel,"show-province-name":n.showProvinceName},on:{onCell:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}},"FieldAddress",n,!1)):t("FieldSelect",e._b({attrs:{scene:e.scene,"get-type":n.getType,label:n.label||n.fieldName,"option-codes":n.optionCodes||[],"validate-rules":2!==e.scene?{required:n.required}:{},readonly:1!==e.scene,required:n.required&&2!==e.scene,placeholder:2!==e.scene?"请选择":"","post-url":n.postUrl,"post-data":n.postData,disabled:n.disabled,remark:n.remark,"is-end":e.fieldList.length===i+1},on:{paramsChange:function(t){return e.onParamsChange(n)},onSelect:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}},"FieldSelect",n,!1)):t("FieldText",e._b({attrs:{"validate-rules":2!==e.scene?Object.assign({},{required:n.required,ismoney:"amount"===n.fieldType&&(n.fieldValue,n.label||n.fieldName)},n.validateRules):{},readonly:n.disabled||2===e.scene,required:n.required&&2!==e.scene,placeholder:n.placeholder||(2!==e.scene?"请输入"+(n.label||n.fieldName):""),label:n.label||n.fieldName,type:n.textFieldType||"text",fieldType:n.fieldType||"text",maxlength:n.maxLength,"show-word-limit":"textarea"===n.fieldType&&2!==e.scene,autosize:"textarea"===n.fieldType,"error-message-align":"right","input-align":"right",remark:n.remark,"is-end":e.fieldList.length===i+1,precision:n.precision},on:{onText:function(t){return e.onCell(t,n)}},model:{value:n.fieldValue,callback:function(t){e.$set(n,"fieldValue",t)},expression:"item.fieldValue"}},"FieldText",n,!1))],1)})),0)};ja._withStripped=!0;const Ta=Pi({render:ja,staticRenderFns:[]},undefined,ka,undefined,false,undefined,!1,void 0,void 0,void 0);var Ea={name:"ModuleGroup",components:{ModuleField:Ta},props:{outerStyle:{type:Object,default:()=>{}},scene:{type:[String,Number],default:1},status:String,isSecondPage:{type:Boolean,default:!1},itemSingleSelect:{type:String,default:"0"},addNewParams:{type:Object},moduleList:{type:Array}},methods:{onCell(e,n,t){this.$emit("onCell",e,n,t)},onBlur(e,n,t){this.$emit("onBlur",e,n,t)},onParamsChange(e){this.$emit("paramsChange",e)},onAddProject(e,n,t){this.$emit("onAddProject",e,n,t)},onPageSave(e){this.$emit("onPageSave",e)},onPageCell(e,n,t,i,a){this.$emit("onPageCell",e,n,t,i,a)},onPageBlur(e,n,t,i,a){this.$emit("onPageBlur",e,n,t,i,a)},onPageParamsChange(e,n,t,i){this.$emit("pageParamsChange",e,n,t,i)},onSinglePageSave(e,n,t,i){this.$emit("onSinglePageSave",e,n,t,i)},onSinglePageRemove(e,n,t,i){this.$emit("onSinglePageRemove",e,n,t,i)},onSelectTypeThenEdit(e,n){let t=n.currentTarget.parentNode.parentNode.querySelector(".icon-bianji");void 0!==t&&t.click()},getAddBtnName:e=>e.moduleCode+"AddBtn"}};const Pa=Ea;var Ba=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",e._l(e.moduleList,(function(n,i){return t("div",{directives:[{name:"show",rawName:"v-show",value:!0!==n.hidden,expression:"module.hidden !== true"}],key:i,staticClass:"module-container",style:e.outerStyle},[t("div",{staticClass:"name title-bold",staticStyle:{"font-size":"16px"}},[e._v(e._s(n.moduleName))]),e._v(" "),t("ModuleField",{attrs:{scene:e.scene,"field-list":n.fieldList,status:e.status,isSecondPage:e.isSecondPage,itemSingleSelect:e.itemSingleSelect,addNewParams:e.addNewParams,moduleCode:n.moduleCode},on:{onCell:function(t){return e.onCell(arguments[0],arguments[1],n)},paramsChange:function(t){return e.onParamsChange(arguments[0],n)},onAddProject:function(t){return e.onAddProject(arguments[0],arguments[1],n)},onPageSave:e.onPageSave,onBlur:function(t){return e.onBlur(arguments[0],arguments[1],n)},onPageCell:function(t){return e.onPageCell(arguments[0],arguments[1],arguments[2],arguments[3],n)},onPageBlur:function(t){return e.onPageBlur(arguments[0],arguments[1],arguments[2],arguments[3],n)},pageParamsChange:function(t){return e.onPageParamsChange(arguments[0],arguments[1],arguments[2],n)},onSinglePageSave:function(t){return e.onSinglePageSave(arguments[0],arguments[1],arguments[2],n)},onSinglePageRemove:function(t){return e.onSinglePageRemove(arguments[0],arguments[1],arguments[2],n)}}})],1)})),0)};Ba._withStripped=!0;const La=Pi({render:Ba,staticRenderFns:[]},(function(e){e&&e("data-v-49db4999_0",{source:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",map:{version:3,sources:[],names:[],mappings:"",file:"ModuleGroup.vue"},media:void 0})}),Pa,"data-v-49db4999",false,undefined,!1,$i,void 0,void 0);e.prototype.$axios=xi,e.prototype.$post=xi.post,e.prototype.$get=xi.get,e.prototype.$dayjs=bi;var Da={install:function(e){e.prototype.$axios=xi,e.prototype.$post=xi.post,e.prototype.$get=xi.get,function(e){const n=new e({methods:{emit(e,...n){this.$emit(e,...n)},on(e,n){this.$on(e,n)},off(e,n){this.$off(e,n)}}});e.prototype.$bus=n}(e),ji(e),Oi.install(e),qi.install(e),Ui.install(e),Hi.install(e),ea.install(e),aa.install(e),ya.install(e),e.component(da.name,da),e.component(Ca.name,Ca),e.component(Ta.name,Ta),e.component(La.name,La)},FieldText:Oi,FieldSelect:qi,FieldUpload:Ui,FieldDate:Hi,FieldAddress:ea,FieldCheckBoxSelect:aa,FieldCrud:ya,initValidate:function(e,n){e("required",z),e("email",L),e("min",N),e("max",I),e("max_value",O),e("positive",(e=>e>=0)),e("idcard",q),e("mobiles",M),e("ismoney",V),n({zh_CN:{messages:{alpha:"{_field_}只能包含字母字符",alpha_dash:"{_field_}能够包含字母数字字符、破折号和下划线",alpha_num:"{_field_}只能包含字母数字字符",alpha_spaces:"{_field_}只能包含字母字符和空格",between:"{_field_}必须在{min}与{max}之间",confirmed:"{_field_}不能和{target}匹配",digits:"{_field_}必须是数字，且精确到{length}位数",dimensions:"{_field_}必须在{width}像素与{height}像素之间",email:"{_field_}不是一个有效的邮箱",excluded:"{_field_}不是一个有效值",ext:"{_field_}不是一个有效的文件",image:"{_field_}不是一张有效的图片",oneOf:"{_field_}不是一个有效值",integer:"{_field_}必须是整数",length:"{_field_}长度必须为{length}",max:"{_field_}不能超过{length}个字符",max_value:"{_field_}必须小于或等于{max}",mimes:"{_field_}不是一个有效的文件类型",min:"{_field_}必须至少有{length}个字符",min_value:"{_field_}必须大于或等于{min}",numeric:"{_field_}只能包含数字字符",regex:"{_field_}格式无效",required:"{_field_}不能为空",required_if:"{_field_}是必须的",size:"{_field_}必须小于{size}KB",positive:"{_field_}不能为负数"},names:{email:"邮箱地址",password:"密码",money:"金额"},fields:{password:{}}}}),n("zh_CN")}};export{Da as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
